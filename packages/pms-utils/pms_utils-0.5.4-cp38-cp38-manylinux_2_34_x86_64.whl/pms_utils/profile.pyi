import os
import pathlib
from typing import Dict, List, Sequence, Set, Tuple, Union

import pms_utils.atom
import pms_utils.repo


def expand_package_expr(arg0: str, arg1: Sequence[pms_utils.repo.Repository], /) -> List[Tuple[pms_utils.atom.Atom, int]]: ...

class Filters:
    @property
    def masked(self) -> bool: ...

    @property
    def use(self) -> Set[str]: ...

    @property
    def use_mask(self) -> Set[str]: ...

    @property
    def use_force(self) -> Set[str]: ...

    @property
    def use_stable_mask(self) -> Set[str]: ...

    @property
    def use_stable_force(self) -> Set[str]: ...

    def __eq__(self, arg: Filters, /) -> bool: ...

    def __ne__(self, arg: Filters, /) -> bool: ...

    def __hash__(self) -> int: ...

class Profile:
    def __init__(self, arg: Union[str, os.PathLike], /) -> None: ...

    @property
    def path(self) -> pathlib.Path: ...

    @property
    def name(self) -> str: ...

    @property
    def parents(self) -> List[Profile]: ...

    @property
    def EAPI(self) -> str: ...

    @property
    def deprecated(self) -> bool: ...

    @property
    def make_defaults(self) -> Dict[str, str]: ...

    @property
    def make_defaults_unevaluated(self) -> List[Tuple[str, str]]: ...

    @property
    def packages(self) -> Set[pms_utils.atom.Atom]: ...

    @property
    def use_mask(self) -> Set[str]: ...

    @property
    def use_force(self) -> Set[str]: ...

    @property
    def use_stable_mask(self) -> Set[str]: ...

    @property
    def use_stable_force(self) -> Set[str]: ...

    @property
    def USE(self) -> Set[pms_utils.atom.Useflag]: ...

    @property
    def USE_EXPAND(self) -> Set[str]: ...

    @property
    def USE_EXPAND_HIDDEN(self) -> Set[str]: ...

    @property
    def CONFIG_PROTECT(self) -> Set[pathlib.Path]: ...

    @property
    def CONFIG_PROTECT_MASK(self) -> Set[pathlib.Path]: ...

    @property
    def IUSE_IMPLICIT(self) -> Set[pms_utils.atom.Useflag]: ...

    @property
    def USE_EXPAND_IMPLICIT(self) -> Set[str]: ...

    @property
    def USE_EXPAND_UNPREFIXED(self) -> Set[str]: ...

    @property
    def ENV_UNSET(self) -> Set[str]: ...

    @property
    def ARCH(self) -> str: ...

    @property
    def filters(self) -> Dict[str, Filters]: ...

    def __eq__(self, arg: Profile, /) -> bool: ...

    def __ne__(self, arg: Profile, /) -> bool: ...

    def __hash__(self) -> int: ...

    def effective_useflags(self, arg: pms_utils.atom.Atom, /) -> Set[pms_utils.atom.Useflag]: ...

class PortageProfile(Profile):
    def __init__(self, arg: Union[str, os.PathLike], /) -> None: ...

    def __eq__(self, arg: PortageProfile, /) -> bool: ...

    def __ne__(self, arg: PortageProfile, /) -> bool: ...

    def __hash__(self) -> int: ...
