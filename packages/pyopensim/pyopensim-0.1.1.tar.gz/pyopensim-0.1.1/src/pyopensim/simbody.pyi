from typing import Any, overload

class ArrayDecorativeGeometry:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfn: Array_) -> None: ...
    @overload
    def __init__(selfn: Array_, initVal: DecorativeGeometry) -> None: ...
    @overload
    def __init__(selfsrc: Array_) -> None: ...
    @overload
    def __init__(selffirst: DecorativeGeometry, last1: DecorativeGeometry, arg4: DontCopy) -> None: ...
    def adoptData(selfnewData: DecorativeGeometry, dataSize: Array_, dataCapacity: Array_) -> Any: ...
    @overload
    def adoptData(selfnewData: DecorativeGeometry, dataSize: Array_) -> Any: ...
    def allocated(self) -> Array_: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def at(selfi: Array_) -> Any: ...
    @overload
    def at(selfi: Array_) -> Any: ...
    def back(self) -> Any: ...
    @overload
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> Any: ...
    def capacity(self) -> Array_: ...
    def cbegin(self) -> Any: ...
    def cdata(self) -> Any: ...
    def cend(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def crbegin(self) -> Array_: ...
    def crend(self) -> Array_: ...
    def data(self) -> Any: ...
    @overload
    def data(self) -> Any: ...
    def deallocate(self) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> Any: ...
    def erase(selffirst: DecorativeGeometry, last1: DecorativeGeometry) -> Any: ...
    @overload
    def erase(selfp: DecorativeGeometry) -> Any: ...
    def eraseFast(selfp: DecorativeGeometry) -> Any: ...
    def fill(self, *args, **kwargs) -> Any: ...
    def front(self) -> Any: ...
    @overload
    def front(self) -> Any: ...
    def getElt(selfi: Array_) -> Any: ...
    def insert(selfp: DecorativeGeometry, n: Array_, value: DecorativeGeometry) -> Any: ...
    @overload
    def insert(selfp: DecorativeGeometry, value: DecorativeGeometry) -> Any: ...
    def isOwner(self) -> bool: ...
    def max_size(self) -> Array_: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def raw_push_back(self) -> Any: ...
    def rbegin(self) -> Array_: ...
    @overload
    def rbegin(self) -> Array_: ...
    def rend(self) -> Array_: ...
    @overload
    def rend(self) -> Array_: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def shareData(selfnewData: DecorativeGeometry, dataSize: Array_) -> Any: ...
    @overload
    def shareData(selffirst: DecorativeGeometry, last1: DecorativeGeometry) -> Any: ...
    def shrink_to_fit(self, *args, **kwargs) -> Any: ...
    def size(self) -> Array_: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updElt(selfi: Array_) -> Any: ...

class ArrayIndexInt:
    def __init__(self) -> None: ...
    def max_size(self) -> ArrayIndexTraits: ...
    thisown: Any

class ArrayIndexUnsigned:
    def __init__(self) -> None: ...
    def max_size(self) -> ArrayIndexTraits: ...
    thisown: Any

class CoordinateAxis:
    def __init__(selfi: int) -> None: ...
    def areAllDifferentAxes(selfaxis2: CoordinateAxis, axis3: CoordinateAxis) -> bool: ...
    def areAllSameAxes(selfaxis2: CoordinateAxis, axis3: CoordinateAxis) -> bool: ...
    def crossProduct(selfaxis2: CoordinateAxis, sign: Any) -> Any: ...
    def crossProductAxis(selfaxis2: CoordinateAxis) -> Any: ...
    def crossProductSign(selfaxis2: CoordinateAxis) -> int: ...
    def dotProduct(selfaxis2: CoordinateAxis) -> int: ...
    def getCoordinateAxis(selfi: int) -> Any: ...
    def getNextAxis(self) -> Any: ...
    def getPreviousAxis(self) -> Any: ...
    def getThirdAxis(selfaxis2: CoordinateAxis) -> Any: ...
    def isDifferentAxis(selfaxis2: CoordinateAxis) -> bool: ...
    def isForwardCyclical(selfaxis2: CoordinateAxis) -> bool: ...
    def isIndexInRange(selfi: int) -> bool: ...
    def isNextAxis(selfaxis2: CoordinateAxis) -> bool: ...
    def isPreviousAxis(selfaxis2: CoordinateAxis) -> bool: ...
    def isReverseCyclical(selfaxis2: CoordinateAxis) -> bool: ...
    def isSameAxis(selfaxis2: CoordinateAxis) -> bool: ...
    def isXAxis(self) -> bool: ...
    def isYAxis(self) -> bool: ...
    def isZAxis(self) -> bool: ...
    thisown: Any

class CoordinateDirection:
    def __init__(selfaxis: CoordinateAxis) -> None: ...
    @overload
    def __init__(selfaxis: CoordinateAxis, direction: int) -> None: ...
    def crossProduct(selfdir2: CoordinateDirection, sign: Any) -> Any: ...
    def crossProductAxis(selfdir2: CoordinateDirection) -> Any: ...
    def crossProductSign(selfdir2: CoordinateDirection) -> int: ...
    def dotProduct(selfdir2: CoordinateDirection) -> int: ...
    def getAxis(self) -> Any: ...
    def getDirection(self) -> int: ...
    def hasSameAxis(selfdir2: CoordinateDirection) -> bool: ...
    def isSameAxisAndDirection(selfdir2: CoordinateDirection) -> bool: ...
    thisown: Any

class Decorations:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfdecoration: DecorativeGeometry) -> None: ...
    def addDecoration(selfdecoration: DecorativeGeometry) -> Any: ...
    @overload
    def addDecoration(selfplacement: Transform, decoration: DecorativeGeometry) -> Any: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getDecoration(selfi: int) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getNumDecorations(self) -> int: ...
    def getOpacity(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeArrow:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfstartPoint: Vec3, endPoint: Vec3, tipLength: Real) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getEndPoint(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getStartPoint(self) -> Any: ...
    def getTipLength(self) -> Real: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setEndPoint(selfend: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setStartPoint(selfstart: Vec3) -> Any: ...
    def setTipLength(selfarg2: Real) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeBrick:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfhalfLengths: Vec3) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getHalfLengths(self) -> Any: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setHalfLengths(selfarg2: Vec3) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeCircle:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfradius: Real) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRadius(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRadius(selfarg2: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeCone:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfp1: Vec3, dir: UnitVec3, height: Real, base: Real) -> None: ...
    def getBaseRadius(self) -> Real: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getDirection(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getHeight(self) -> Real: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getOrigin(self) -> Any: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBaseRadius(selfbase: Real) -> Any: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setDirection(selfdirection: UnitVec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setHeight(selflength: Real) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setOrigin(selforigin: Vec3) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeCylinder:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfradius: Real, halfHeight: Real) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getHalfHeight(self) -> Real: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRadius(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setHalfHeight(selfarg2: Real) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRadius(selfarg2: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeEllipsoid:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfradii: Vec3) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRadii(self) -> Any: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRadii(selfarg2: Vec3) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeFrame:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfaxisLength: Real) -> None: ...
    def getAxisLength(self) -> Real: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setAxisLength(selfarg2: Real) -> Any: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeGeometry:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsource: DecorativeGeometry) -> None: ...
    @overload
    def __init__(selfr: Any) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfbodyId: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfindex: int) -> Any: ...
    def setLineThickness(selfarg2: Real) -> Any: ...
    def setOpacity(selfarg2: Real) -> Any: ...
    def setRepresentation(selfarg2: DecorativeGeometry) -> Any: ...
    def setResolution(selfarg2: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfscale: Vec3) -> Any: ...
    def setTransform(selfX_BG: Transform) -> Any: ...
    def setUserRef(selfuserRef: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeGeometryImplementation:
    def __init__(selfself: Any) -> None: ...
    def implementArrowGeometry(self, *args, **kwargs) -> Any: ...
    def implementBrickGeometry(self, *args, **kwargs) -> Any: ...
    def implementCircleGeometry(self, *args, **kwargs) -> Any: ...
    def implementConeGeometry(self, *args, **kwargs) -> Any: ...
    def implementCylinderGeometry(self, *args, **kwargs) -> Any: ...
    def implementEllipsoidGeometry(self, *args, **kwargs) -> Any: ...
    def implementFrameGeometry(self, *args, **kwargs) -> Any: ...
    def implementLineGeometry(self, *args, **kwargs) -> Any: ...
    def implementMeshFileGeometry(self, *args, **kwargs) -> Any: ...
    def implementMeshGeometry(self, *args, **kwargs) -> Any: ...
    def implementPointGeometry(self, *args, **kwargs) -> Any: ...
    def implementSphereGeometry(self, *args, **kwargs) -> Any: ...
    def implementTextGeometry(self, *args, **kwargs) -> Any: ...
    def implementTorusGeometry(self, *args, **kwargs) -> Any: ...
    thisown: Any

class DecorativeLine:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfp1: Vec3, p2: Vec3) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getPoint1(self) -> Any: ...
    def getPoint2(self) -> Any: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setEndpoints(selfp1: Vec3, p2: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setPoint1(selfp1: Vec3) -> Any: ...
    def setPoint2(selfp2: Vec3) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeMesh:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfmesh: PolygonalMesh) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getMesh(self) -> Any: ...
    def getOpacity(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeMeshFile:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfmeshFileName: str) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getMeshFile(self) -> str: ...
    def getOpacity(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativePoint:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfp: Vec3) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getPoint(self) -> Any: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setPoint(selfp: Vec3) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeSphere:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selfradius: Real) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRadius(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRadius(selfarg2: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeText:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selflabel: str) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getIsScreenText(self) -> bool: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getText(self) -> str: ...
    def getTransform(self) -> Any: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfyn: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setIsScreenText(selfisScreen: bool) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setText(selflabel: str) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DecorativeTorus:
    DrawDefault: Any
    DrawPoints: Any
    DrawSurface: Any
    DrawWireframe: Any
    Hide: Any
    def __init__(selftorusR: Real, tubeR: Real) -> None: ...
    def getBodyId(self) -> int: ...
    def getColor(self) -> Any: ...
    def getFaceCamera(self) -> int: ...
    def getIndexOnBody(self) -> int: ...
    def getLineThickness(self) -> Real: ...
    def getOpacity(self) -> Real: ...
    def getRep(self) -> Any: ...
    def getRepresentation(self) -> DecorativeGeometry: ...
    def getResolution(self) -> Real: ...
    def getScaleFactors(self) -> Any: ...
    def getTorusRadius(self) -> Real: ...
    def getTransform(self) -> Any: ...
    def getTubeRadius(self) -> Real: ...
    def getUserRef(self) -> Any: ...
    def hasRep(self) -> bool: ...
    def implementGeometry(self, *args, **kwargs) -> Any: ...
    def isEmptyHandle(self) -> bool: ...
    def isOwnerHandle(self) -> bool: ...
    def setBodyId(selfb: int) -> Any: ...
    def setColor(selfrgb: Vec3) -> Any: ...
    def setFaceCamera(selfshouldFace: int) -> Any: ...
    def setIndexOnBody(selfx: int) -> Any: ...
    def setLineThickness(selft: Real) -> Any: ...
    def setOpacity(selfo: Real) -> Any: ...
    def setRepresentation(selfr: DecorativeGeometry) -> Any: ...
    def setResolution(selfr: Real) -> Any: ...
    def setScale(selfscale: Real) -> Any: ...
    def setScaleFactors(selfs: Vec3) -> Any: ...
    def setTorusRadius(selfarg2: Real) -> Any: ...
    def setTransform(selfX_BD: Transform) -> Any: ...
    def setTubeRadius(selfarg2: Real) -> Any: ...
    def setUserRef(selfp: Any) -> Any: ...
    thisown: Any
    def updRep(self) -> Any: ...

class DontCopy:
    def __init__(self) -> None: ...
    thisown: Any

class FalseType:
    def __init__(self) -> None: ...
    thisown: Any

class Inertia:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfmoment: Any) -> None: ...
    @overload
    def __init__(selfp: Vec3, mass: Any) -> None: ...
    @overload
    def __init__(selfmoments: Vec3, products: Vec3) -> None: ...
    @overload
    def __init__(selfxx: Any, yy: Any, zz: Any) -> None: ...
    @overload
    def __init__(selfxx: Any, yy: Any, zz: Any, xy: Any, xz: Any, yz: Any) -> None: ...
    def getMoments(self) -> Any: ...
    def getProducts(self) -> Any: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    thisown: Any

class InverseRotation:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfR: InverseRotation_) -> None: ...
    def invert(self) -> Any: ...
    thisown: Any
    def transpose(self) -> Any: ...

class MassProperties:
    def __init__(self) -> None: ...
    def isExactlyCentral(self) -> bool: ...
    def isExactlyMassless(self) -> bool: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNearlyCentral(selftol: Any) -> bool: ...
    def isNearlyMassless(selftol: Any) -> bool: ...
    thisown: Any

class Mat33:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Mat) -> None: ...
    @overload
    def __init__(selfe: Any) -> None: ...
    @overload
    def __init__(selfi: int) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any, e7: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any, e7: Any, e8: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any, e7: Any, e8: Any, e9: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any, e7: Any, e8: Any, e9: Any, e10: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any, e7: Any, e8: Any, e9: Any, e10: Any, e11: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any, e7: Any, e8: Any, e9: Any, e10: Any, e11: Any, e12: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any, e7: Any, e8: Any, e9: Any, e10: Any, e11: Any, e12: Any, e13: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any, e7: Any, e8: Any, e9: Any, e10: Any, e11: Any, e12: Any, e13: Any, e14: Any) -> None: ...
    @overload
    def __init__(selfe0: Any, e1: Any, e2: Any, e3: Any, e4: Any, e5: Any, e6: Any, e7: Any, e8: Any, e9: Any, e10: Any, e11: Any, e12: Any, e13: Any, e14: Any, e15: Any) -> None: ...
    def get(selfi: int, j: int) -> Any: ...
    def getDefaultTolerance(self) -> float: ...
    def isExactlySymmetric(self) -> bool: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNumericallyEqual(selfe: Any, tol: float) -> bool: ...
    def isNumericallySymmetric(selftol: float) -> bool: ...
    def ncol(self) -> int: ...
    def nrow(self) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setToNaN(self, *args, **kwargs) -> Any: ...
    def setToZero(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...

class Matrix:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Matrix_) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    @overload
    def __init__(selfm: int, n: int, initialValue: Any) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def createFromMat(selfnrow: int) -> Any: ...
    def get(selfi: int, j: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Any) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def to_numpy(self, *args, **kwargs) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixBaseDouble:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Any) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def to_numpy(self, *args, **kwargs) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixBaseMat33:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Mat) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixBaseQuaternion:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Quaternion_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixBaseRotation:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Rotation_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixBaseVec3:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixBaseVec6:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixMat33:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Matrix_) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    @overload
    def __init__(selfm: int, n: int, initialValue: Mat) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def get(selfi: int, j: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Mat) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixOfSpatialVec:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Matrix_) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    @overload
    def __init__(selfm: int, n: int, initialValue: Vec) -> None: ...
    def get(selfi: int, j: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...

class MatrixQuaternion:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Matrix_) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    @overload
    def __init__(selfm: int, n: int, initialValue: Quaternion_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def get(selfi: int, j: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Quaternion_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixRotation:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Matrix_) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    @overload
    def __init__(selfm: int, n: int, initialValue: Rotation_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def get(selfi: int, j: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Rotation_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixVec3:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Matrix_) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    @overload
    def __init__(selfm: int, n: int, initialValue: Vec) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def get(selfi: int, j: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixVec6:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Matrix_) -> None: ...
    @overload
    def __init__(selfm: int, n: int) -> None: ...
    @overload
    def __init__(selfm: int, n: int, initialValue: Vec) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def get(selfi: int, j: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixView:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: MatrixView_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Any) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def to_numpy(self, *args, **kwargs) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixViewMat33:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: MatrixView_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Mat) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixViewVec3:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: MatrixView_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class MatrixViewVec6:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: MatrixView_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int, n: int) -> Any: ...
    def resizeKeep(selfm: int, n: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class PolygonalMesh:
    def __init__(self) -> None: ...
    def addFace(selfvertices: Array_) -> int: ...
    def addFaceTextureCoordinates(self, *args, **kwargs) -> Any: ...
    def addFaceWithNormals(selfvertices: Array_, normalIndices: Array_) -> int: ...
    def addNormal(selfnormal: UnitVec3) -> int: ...
    def addTextureCoordinate(selftextureCoord: Vec2) -> int: ...
    def addVertex(selfposition: Vec3) -> int: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def createBrickMesh(selfhalfDims: Vec3, resolution: int) -> Any: ...
    def createCylinderMesh(selfaxis: UnitVec3, radius: Real, halfLength: Real, resolution: int) -> Any: ...
    def createSphereMesh(selfradius: Real, resolution: int) -> Any: ...
    def getFaceVertex(selfface: int, vertex: int) -> int: ...
    def getNumFaces(self) -> int: ...
    def getNumVertices(self) -> int: ...
    def getNumVerticesForFace(selfface: int) -> int: ...
    def getVertexNormal(selffaceIndex: int, vertexIndex: int) -> Any: ...
    @overload
    def getVertexNormal(selfvertex: int) -> Any: ...
    def getVertexPosition(selfvertex: int) -> Any: ...
    def getVertexTextureCoordinate(selffaceIndex: int, vertexIndex: int) -> Any: ...
    def hasNormals(self) -> bool: ...
    def hasNormalsAtFaces(self) -> bool: ...
    def hasNormalsAtVertices(self) -> bool: ...
    def hasTextureCoordinates(self) -> bool: ...
    def hasTextureCoordinatesAtFaces(self) -> bool: ...
    def hasTextureCoordinatesAtVertices(self) -> bool: ...
    def loadFile(self, *args, **kwargs) -> Any: ...
    def loadObjFile(self, *args, **kwargs) -> Any: ...
    def loadStlFile(self, *args, **kwargs) -> Any: ...
    def loadVtpFile(self, *args, **kwargs) -> Any: ...
    def scaleMesh(selfscale: Real) -> Any: ...
    thisown: Any
    def transformMesh(selfX_AM: Transform) -> Any: ...

class Quaternion:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfq: Quaternion_) -> None: ...
    @overload
    def __init__(selfe0: float, e1: float, e2: float, e3: float) -> None: ...
    @overload
    def __init__(selfq: Vec) -> None: ...
    @overload
    def __init__(selfv: Vec, arg3: bool) -> None: ...
    def get(selfi: int) -> Vec: ...
    def getDefaultTolerance(self) -> float: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNumericallyEqual(selfe: Any, tol: float) -> bool: ...
    def ncol(self) -> int: ...
    def normalize(self) -> Any: ...
    def normalizeThis(self) -> Any: ...
    def nrow(self) -> int: ...
    def scalarDivideEq(selfee: Any) -> Any: ...
    def scalarEq(selfee: Any) -> Any: ...
    def scalarMinusEq(selfee: Any) -> Any: ...
    def scalarPlusEq(selfee: Any) -> Any: ...
    def scalarTimesEq(selfee: Any) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setQuaternionToNaN(self, *args, **kwargs) -> Any: ...
    def setQuaternionToZeroRotation(self, *args, **kwargs) -> Any: ...
    def setToNaN(self, *args, **kwargs) -> Any: ...
    def setToZero(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...

class Rotation:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfR: Rotation_) -> None: ...
    @overload
    def __init__(selfangle: float, axis: CoordinateAxis) -> None: ...
    @overload
    def __init__(selfangle: float, nonUnitVector: Vec3) -> None: ...
    @overload
    def __init__(selfbodyOrSpace: BodyOrSpaceType, angle1: float, axis1: CoordinateAxis, angle2: float, axis2: CoordinateAxis) -> None: ...
    @overload
    def __init__(selfbodyOrSpace: BodyOrSpaceType, angle1: float, axis1: CoordinateAxis, angle2: float, axis2: CoordinateAxis, angle3: float, axis3: CoordinateAxis) -> None: ...
    @overload
    def __init__(selfq: Quaternion_) -> None: ...
    @overload
    def __init__(selfm: Mat33, arg3: bool) -> None: ...
    @overload
    def __init__(selfm: Mat33) -> None: ...
    @overload
    def __init__(selfuvec: UnitVec3, axis: CoordinateAxis) -> None: ...
    @overload
    def __init__(selfuveci: UnitVec3, axisi: CoordinateAxis, vecjApprox: Vec3, axisjApprox: CoordinateAxis) -> None: ...
    @overload
    def __init__(selfarg2: InverseRotation_) -> None: ...
    def areAllRotationElementsSameToEpsilon(selfR: Rotation_, epsilon: float) -> bool: ...
    def areAllRotationElementsSameToMachinePrecision(selfR: Rotation_) -> bool: ...
    def asMat33(self) -> Any: ...
    def calcNDotForBodyXYZInBodyFrame(selfq: Vec3, qdot: Vec3) -> Any: ...
    @overload
    def calcNDotForBodyXYZInBodyFrame(selfcq: Vec3, sq: Vec3, qdot: Vec3) -> Any: ...
    def calcNDotForBodyXYZInParentFrame(selfq: Vec3, qdot: Vec3) -> Any: ...
    @overload
    def calcNDotForBodyXYZInParentFrame(selfcq: Vec2, sq: Vec2, ooc1: float, qdot: Vec3) -> Any: ...
    def calcNForBodyXYZInBodyFrame(selfq: Vec3) -> Any: ...
    @overload
    def calcNForBodyXYZInBodyFrame(selfcq: Vec3, sq: Vec3) -> Any: ...
    def calcNForBodyXYZInParentFrame(selfq: Vec3) -> Any: ...
    @overload
    def calcNForBodyXYZInParentFrame(selfcq: Vec3, sq: Vec3) -> Any: ...
    def calcNInvForBodyXYZInBodyFrame(selfq: Vec3) -> Any: ...
    @overload
    def calcNInvForBodyXYZInBodyFrame(selfcq: Vec3, sq: Vec3) -> Any: ...
    def calcNInvForBodyXYZInParentFrame(selfq: Vec3) -> Any: ...
    @overload
    def calcNInvForBodyXYZInParentFrame(selfcq: Vec3, sq: Vec3) -> Any: ...
    def convertAngAccInParentToBodyXYZDotDot(selfcosxy: Vec2, sinxy: Vec2, oocosy: float, qdot: Vec3, b_PB: Vec3) -> Any: ...
    def convertAngVelDotInBodyFrameToBodyXYZDotDot(selfq: Vec3, w_PB_B: Vec3, wdot_PB_B: Vec3) -> Any: ...
    @overload
    def convertAngVelDotInBodyFrameToBodyXYZDotDot(selfcq: Vec3, sq: Vec3, w_PB_B: Vec3, wdot_PB_B: Vec3) -> Any: ...
    def convertAngVelDotToBodyFixed321DotDot(selfq: Vec3, w_PB_B: Vec3, wdot_PB_B: Vec3) -> Any: ...
    def convertAngVelDotToQuaternionDotDot(selfq: Vec4, w_PB: Vec3, b_PB: Vec3) -> Any: ...
    def convertAngVelInBodyFrameToBodyXYZDot(selfq: Vec3, w_PB_B: Vec3) -> Any: ...
    @overload
    def convertAngVelInBodyFrameToBodyXYZDot(selfcq: Vec3, sq: Vec3, w_PB_B: Vec3) -> Any: ...
    def convertAngVelInParentToBodyXYZDot(selfcosxy: Vec2, sinxy: Vec2, oocosy: float, w_PB: Vec3) -> Any: ...
    def convertAngVelToBodyFixed321Dot(selfq: Vec3, w_PB_B: Vec3) -> Any: ...
    def convertAngVelToQuaternionDot(selfq: Vec4, w_PB_P: Vec3) -> Any: ...
    def convertBodyFixed321DotToAngVel(selfq: Vec3, qd: Vec3) -> Any: ...
    def convertBodyXYZDotToAngVelInBodyFrame(selfq: Vec3, qdot: Vec3) -> Any: ...
    @overload
    def convertBodyXYZDotToAngVelInBodyFrame(selfcq: Vec3, sq: Vec3, qdot: Vec3) -> Any: ...
    def convertOneAxisRotationToOneAngle(selfaxis1: CoordinateAxis) -> float: ...
    def convertQuaternionDotToAngVel(selfq: Vec4, qdot: Vec4) -> Any: ...
    def convertRotationToAngleAxis(self) -> Any: ...
    def convertRotationToBodyFixedXY(self) -> Any: ...
    def convertRotationToBodyFixedXYZ(self) -> Any: ...
    def convertRotationToQuaternion(self) -> Any: ...
    def convertThreeAxesRotationToThreeAngles(selfbodyOrSpace: BodyOrSpaceType, axis1: CoordinateAxis, axis2: CoordinateAxis, axis3: CoordinateAxis) -> Any: ...
    def convertTwoAxesRotationToTwoAngles(selfbodyOrSpace: BodyOrSpaceType, axis1: CoordinateAxis, axis2: CoordinateAxis) -> Any: ...
    def get(selfi: int, j: int) -> Any: ...
    def getDefaultTolerance(self) -> float: ...
    def getMaxAbsDifferenceInRotationElements(selfR: Rotation_) -> float: ...
    def invert(self) -> Any: ...
    def isExactlySymmetric(self) -> bool: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNumericallyEqual(selfe: Any, tol: float) -> bool: ...
    def isNumericallySymmetric(selftol: float) -> bool: ...
    def isSameRotationToWithinAngle(selfR: Rotation_, okPointingAngleErrorRads: float) -> bool: ...
    def isSameRotationToWithinAngleOfMachinePrecision(selfR: Rotation_) -> bool: ...
    def multiply(selfv: Vec3) -> Any: ...
    @overload
    def multiply(selfr: Rotation_) -> Any: ...
    @overload
    def multiply(selfr: InverseRotation_) -> Any: ...
    @overload
    def multiply(selfrow: RowVector_) -> Any: ...
    @overload
    def multiply(selfrow: RowVectorView_) -> Any: ...
    def multiplyByBodyXYZ_NInvT_P(selfcosxy: Vec2, sinxy: Vec2, v_P: Vec3) -> Any: ...
    def multiplyByBodyXYZ_NInv_P(selfcosxy: Vec2, sinxy: Vec2, qdot: Vec3) -> Any: ...
    def multiplyByBodyXYZ_NT_P(selfcosxy: Vec2, sinxy: Vec2, oocosy: float, q: Vec3) -> Any: ...
    def multiplyByBodyXYZ_N_P(selfcosxy: Vec2, sinxy: Vec2, oocosy: float, w_PB: Vec3) -> Any: ...
    def ncol(self) -> int: ...
    def nrow(self) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setRotationFromAngleAboutAxis(selfangle: float, axis: CoordinateAxis) -> Any: ...
    def setRotationFromAngleAboutNonUnitVector(selfangle: float, nonUnitVector: Vec3) -> Any: ...
    def setRotationFromAngleAboutX(selfangle: float) -> Any: ...
    @overload
    def setRotationFromAngleAboutX(selfcosAngle: float, sinAngle: float) -> Any: ...
    def setRotationFromAngleAboutY(selfangle: float) -> Any: ...
    @overload
    def setRotationFromAngleAboutY(selfcosAngle: float, sinAngle: float) -> Any: ...
    def setRotationFromAngleAboutZ(selfangle: float) -> Any: ...
    @overload
    def setRotationFromAngleAboutZ(selfcosAngle: float, sinAngle: float) -> Any: ...
    def setRotationFromApproximateMat33(selfm: Mat33) -> Any: ...
    def setRotationFromOneAxis(selfuvec: UnitVec3, axis: CoordinateAxis) -> Any: ...
    def setRotationFromQuaternion(selfq: Quaternion_) -> Any: ...
    def setRotationFromThreeAnglesThreeAxes(selfbodyOrSpace: BodyOrSpaceType, angle1: float, axis1: CoordinateAxis, angle2: float, axis2: CoordinateAxis, angle3: float, axis3: CoordinateAxis) -> Any: ...
    def setRotationFromTwoAnglesTwoAxes(selfbodyOrSpace: BodyOrSpaceType, angle1: float, axis1: CoordinateAxis, angle2: float, axis2: CoordinateAxis) -> Any: ...
    def setRotationFromTwoAxes(selfuveci: UnitVec3, axisi: CoordinateAxis, vecjApprox: Vec3, axisjApprox: CoordinateAxis) -> Any: ...
    def setRotationToBodyFixedXY(self, *args, **kwargs) -> Any: ...
    def setRotationToBodyFixedXYZ(self, *args, **kwargs) -> Any: ...
    def setRotationToIdentityMatrix(self) -> Any: ...
    def setRotationToNaN(self) -> Any: ...
    def setToNaN(self, *args, **kwargs) -> Any: ...
    def setToZero(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toMat33(self) -> Any: ...
    def toString(self) -> str: ...
    def transpose(self) -> Any: ...

class RowVector:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: RowVector_) -> None: ...
    @overload
    def __init__(selfsrc: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Any) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Any) -> None: ...
    @overload
    def __init__(selfrow: Any) -> None: ...
    def begin(self) -> RowVectorBase: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def createFromMat(selfn: int) -> Any: ...
    def end(self) -> RowVectorBase: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Any) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> float: ...
    thisown: Any
    def to_numpy(self, *args, **kwargs) -> Any: ...
    def transpose(self) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorBaseDouble:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfsource: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Any) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Any) -> None: ...
    def begin(self) -> RowVectorBase: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> RowVectorBase: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Any) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> float: ...
    thisown: Any
    def to_numpy(self, *args, **kwargs) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorBaseMat33:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfsource: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Mat) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Mat) -> None: ...
    def begin(self) -> Mat: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> Mat: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Mat) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorBaseQuaternion:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfsource: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Quaternion_) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Quaternion_) -> None: ...
    def begin(self) -> Quaternion_: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def end(self) -> Quaternion_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Quaternion_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorBaseRotation:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfsource: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Rotation_) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Rotation_) -> None: ...
    def begin(self) -> Rotation_: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def end(self) -> Rotation_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Rotation_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorBaseVec3:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfsource: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Vec) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Vec) -> None: ...
    def begin(self) -> Vec: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> Vec: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorBaseVec6:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfsource: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Vec) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Vec) -> None: ...
    def begin(self) -> Vec: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> Vec: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorMat33:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: RowVector_) -> None: ...
    @overload
    def __init__(selfsrc: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Mat) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Mat) -> None: ...
    def begin(self) -> Mat: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> Mat: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Mat) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorQuaternion:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: RowVector_) -> None: ...
    @overload
    def __init__(selfsrc: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Quaternion_) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Quaternion_) -> None: ...
    def begin(self) -> Quaternion_: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def end(self) -> Quaternion_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Quaternion_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorRotation:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: RowVector_) -> None: ...
    @overload
    def __init__(selfsrc: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Rotation_) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Rotation_) -> None: ...
    def begin(self) -> Rotation_: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def end(self) -> Rotation_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Rotation_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorVec3:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: RowVector_) -> None: ...
    @overload
    def __init__(selfsrc: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Vec) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Vec) -> None: ...
    @overload
    def __init__(selfrow: Vec3) -> None: ...
    def begin(self) -> Vec: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> Vec: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def transpose(self) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorVec6:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: RowVector_) -> None: ...
    @overload
    def __init__(selfsrc: RowVectorBase) -> None: ...
    @overload
    def __init__(selfn: int) -> None: ...
    @overload
    def __init__(selfn: int, cppInitialValues: Vec) -> None: ...
    @overload
    def __init__(selfn: int, initialValue: Vec) -> None: ...
    def begin(self) -> Vec: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> Vec: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorView:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfr: RowVectorView_) -> None: ...
    def begin(self) -> RowVectorBase: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> RowVectorBase: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Any) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> float: ...
    thisown: Any
    def to_numpy(self, *args, **kwargs) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorViewMat33:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfr: RowVectorView_) -> None: ...
    def begin(self) -> Mat: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> Mat: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Mat) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorViewQuaternion:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfr: RowVectorView_) -> None: ...
    def begin(self) -> Quaternion_: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def end(self) -> Quaternion_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Quaternion_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorViewRotation:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfr: RowVectorView_) -> None: ...
    def begin(self) -> Rotation_: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def end(self) -> Rotation_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Rotation_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorViewVec3:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfr: RowVectorView_) -> None: ...
    def begin(self) -> Vec: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> Vec: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class RowVectorViewVec6:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfr: RowVectorView_) -> None: ...
    def begin(self) -> Vec: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def end(self) -> Vec: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def index(selfindices: Any) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nelt(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfn: int) -> Any: ...
    def resizeKeep(selfn: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updIndex(selfindices: Any) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class Segment:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfl: int, ofs: int) -> None: ...
    length: Any
    offset: Any
    thisown: Any

class SimTKArrayDouble:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfn: Array_) -> None: ...
    @overload
    def __init__(selfn: Array_, initVal: Any) -> None: ...
    @overload
    def __init__(selfsrc: Array_) -> None: ...
    @overload
    def __init__(selffirst: Any, last1: Any, arg4: DontCopy) -> None: ...
    def adoptData(selfnewData: Any, dataSize: Array_, dataCapacity: Array_) -> Any: ...
    @overload
    def adoptData(selfnewData: Any, dataSize: Array_) -> Any: ...
    def allocated(self) -> Array_: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def at(selfi: Array_) -> Any: ...
    @overload
    def at(selfi: Array_) -> Any: ...
    def back(self) -> Any: ...
    @overload
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> Any: ...
    def capacity(self) -> Array_: ...
    def cbegin(self) -> Any: ...
    def cdata(self) -> Any: ...
    def cend(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def crbegin(self) -> Array_: ...
    def crend(self) -> Array_: ...
    def data(self) -> Any: ...
    @overload
    def data(self) -> Any: ...
    def deallocate(self) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> Any: ...
    def erase(selffirst: Any, last1: Any) -> float: ...
    @overload
    def erase(selfp: Any) -> Any: ...
    def eraseFast(selfp: Any) -> Any: ...
    def fill(self, *args, **kwargs) -> Any: ...
    def front(self) -> Any: ...
    @overload
    def front(self) -> Any: ...
    def getElt(selfi: Array_) -> Any: ...
    def insert(selfp: Any, n: Array_, value: Any) -> float: ...
    @overload
    def insert(selfp: Any, value: Any) -> Any: ...
    def isOwner(self) -> bool: ...
    def max_size(self) -> Array_: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def raw_push_back(self) -> Any: ...
    def rbegin(self) -> Array_: ...
    @overload
    def rbegin(self) -> Array_: ...
    def rend(self) -> Array_: ...
    @overload
    def rend(self) -> Array_: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def shareData(selfnewData: Any, dataSize: Array_) -> Any: ...
    @overload
    def shareData(selffirst: Any, last1: Any) -> Any: ...
    def shrink_to_fit(self, *args, **kwargs) -> Any: ...
    def size(self) -> Array_: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updElt(selfi: Array_) -> Any: ...

class SimTKArrayInt:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfn: Array_) -> None: ...
    @overload
    def __init__(selfn: Array_, initVal: Any) -> None: ...
    @overload
    def __init__(selfsrc: Array_) -> None: ...
    @overload
    def __init__(selffirst: Any, last1: Any, arg4: DontCopy) -> None: ...
    def adoptData(selfnewData: Any, dataSize: Array_, dataCapacity: Array_) -> Any: ...
    @overload
    def adoptData(selfnewData: Any, dataSize: Array_) -> Any: ...
    def allocated(self) -> Array_: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def at(selfi: Array_) -> Any: ...
    @overload
    def at(selfi: Array_) -> Any: ...
    def back(self) -> Any: ...
    @overload
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> Any: ...
    def capacity(self) -> Array_: ...
    def cbegin(self) -> Any: ...
    def cdata(self) -> Any: ...
    def cend(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def crbegin(self) -> Array_: ...
    def crend(self) -> Array_: ...
    def data(self) -> Any: ...
    @overload
    def data(self) -> Any: ...
    def deallocate(self) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> Any: ...
    def erase(selffirst: Any, last1: Any) -> int: ...
    @overload
    def erase(selfp: Any) -> Any: ...
    def eraseFast(selfp: Any) -> Any: ...
    def fill(self, *args, **kwargs) -> Any: ...
    def front(self) -> Any: ...
    @overload
    def front(self) -> Any: ...
    def getElt(selfi: Array_) -> Any: ...
    def insert(selfp: Any, n: Array_, value: Any) -> int: ...
    @overload
    def insert(selfp: Any, value: Any) -> Any: ...
    def isOwner(self) -> bool: ...
    def max_size(self) -> Array_: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def raw_push_back(self) -> Any: ...
    def rbegin(self) -> Array_: ...
    @overload
    def rbegin(self) -> Array_: ...
    def rend(self) -> Array_: ...
    @overload
    def rend(self) -> Array_: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def shareData(selfnewData: Any, dataSize: Array_) -> Any: ...
    @overload
    def shareData(selffirst: Any, last1: Any) -> Any: ...
    def shrink_to_fit(self, *args, **kwargs) -> Any: ...
    def size(self) -> Array_: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updElt(selfi: Array_) -> Any: ...

class SimTKArrayMobilizedBodyIndex:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfn: Array_) -> None: ...
    @overload
    def __init__(selfn: Array_, initVal: Any) -> None: ...
    @overload
    def __init__(selfsrc: Array_) -> None: ...
    @overload
    def __init__(selffirst: Any, last1: Any, arg4: DontCopy) -> None: ...
    def adoptData(selfnewData: Any, dataSize: Array_, dataCapacity: Array_) -> Any: ...
    @overload
    def adoptData(selfnewData: Any, dataSize: Array_) -> Any: ...
    def allocated(self) -> Array_: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def at(selfi: Array_) -> Any: ...
    @overload
    def at(selfi: Array_) -> Any: ...
    def back(self) -> Any: ...
    @overload
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> Any: ...
    def capacity(self) -> Array_: ...
    def cbegin(self) -> Any: ...
    def cdata(self) -> Any: ...
    def cend(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def crbegin(self) -> Array_: ...
    def crend(self) -> Array_: ...
    def data(self) -> Any: ...
    @overload
    def data(self) -> Any: ...
    def deallocate(self) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> Any: ...
    def erase(selffirst: Any, last1: Any) -> Any: ...
    @overload
    def erase(selfp: Any) -> Any: ...
    def eraseFast(selfp: Any) -> Any: ...
    def fill(self, *args, **kwargs) -> Any: ...
    def front(self) -> Any: ...
    @overload
    def front(self) -> Any: ...
    def getElt(selfi: Array_) -> Any: ...
    def insert(selfp: Any, n: Array_, value: Any) -> Any: ...
    @overload
    def insert(selfp: Any, value: Any) -> Any: ...
    def isOwner(self) -> bool: ...
    def max_size(self) -> Array_: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def raw_push_back(self) -> Any: ...
    def rbegin(self) -> Array_: ...
    @overload
    def rbegin(self) -> Array_: ...
    def rend(self) -> Array_: ...
    @overload
    def rend(self) -> Array_: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def shareData(selfnewData: Any, dataSize: Array_) -> Any: ...
    @overload
    def shareData(selffirst: Any, last1: Any) -> Any: ...
    def shrink_to_fit(self, *args, **kwargs) -> Any: ...
    def size(self) -> Array_: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updElt(selfi: Array_) -> Any: ...

class SimTKArrayRotation:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfn: Array_) -> None: ...
    @overload
    def __init__(selfn: Array_, initVal: Rotation_) -> None: ...
    @overload
    def __init__(selfsrc: Array_) -> None: ...
    @overload
    def __init__(selffirst: Rotation_, last1: Rotation_, arg4: DontCopy) -> None: ...
    def adoptData(selfnewData: Rotation_, dataSize: Array_, dataCapacity: Array_) -> Any: ...
    @overload
    def adoptData(selfnewData: Rotation_, dataSize: Array_) -> Any: ...
    def allocated(self) -> Array_: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def at(selfi: Array_) -> Any: ...
    @overload
    def at(selfi: Array_) -> Any: ...
    def back(self) -> Any: ...
    @overload
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> Any: ...
    def capacity(self) -> Array_: ...
    def cbegin(self) -> Any: ...
    def cdata(self) -> Any: ...
    def cend(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def crbegin(self) -> Array_: ...
    def crend(self) -> Array_: ...
    def data(self) -> Any: ...
    @overload
    def data(self) -> Any: ...
    def deallocate(self) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> Any: ...
    def erase(selffirst: Rotation_, last1: Rotation_) -> Any: ...
    @overload
    def erase(selfp: Rotation_) -> Any: ...
    def eraseFast(selfp: Rotation_) -> Any: ...
    def fill(self, *args, **kwargs) -> Any: ...
    def front(self) -> Any: ...
    @overload
    def front(self) -> Any: ...
    def getElt(selfi: Array_) -> Any: ...
    def insert(selfp: Rotation_, n: Array_, value: Rotation_) -> Any: ...
    @overload
    def insert(selfp: Rotation_, value: Rotation_) -> Any: ...
    def isOwner(self) -> bool: ...
    def max_size(self) -> Array_: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def raw_push_back(self) -> Any: ...
    def rbegin(self) -> Array_: ...
    @overload
    def rbegin(self) -> Array_: ...
    def rend(self) -> Array_: ...
    @overload
    def rend(self) -> Array_: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def shareData(selfnewData: Rotation_, dataSize: Array_) -> Any: ...
    @overload
    def shareData(selffirst: Rotation_, last1: Rotation_) -> Any: ...
    def shrink_to_fit(self, *args, **kwargs) -> Any: ...
    def size(self) -> Array_: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updElt(selfi: Array_) -> Any: ...

class SimTKArrayString:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfn: Array_) -> None: ...
    @overload
    def __init__(selfn: Array_, initVal: str) -> None: ...
    @overload
    def __init__(selfsrc: Array_) -> None: ...
    @overload
    def __init__(selffirst: Any, last1: Any, arg4: DontCopy) -> None: ...
    def adoptData(selfnewData: Any, dataSize: Array_, dataCapacity: Array_) -> Any: ...
    @overload
    def adoptData(selfnewData: Any, dataSize: Array_) -> Any: ...
    def allocated(self) -> Array_: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def at(selfi: Array_) -> Any: ...
    @overload
    def at(selfi: Array_) -> Any: ...
    def back(self) -> Any: ...
    @overload
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> Any: ...
    def capacity(self) -> Array_: ...
    def cbegin(self) -> Any: ...
    def cdata(self) -> Any: ...
    def cend(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def crbegin(self) -> Array_: ...
    def crend(self) -> Array_: ...
    def data(self) -> Any: ...
    @overload
    def data(self) -> Any: ...
    def deallocate(self) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> Any: ...
    def erase(selffirst: Any, last1: Any) -> str: ...
    @overload
    def erase(selfp: Any) -> Any: ...
    def eraseFast(selfp: Any) -> Any: ...
    def fill(self, *args, **kwargs) -> Any: ...
    def front(self) -> Any: ...
    @overload
    def front(self) -> Any: ...
    def getElt(selfi: Array_) -> str: ...
    def insert(selfp: Any, n: Array_, value: str) -> str: ...
    @overload
    def insert(selfp: Any, value: str) -> Any: ...
    def isOwner(self) -> bool: ...
    def max_size(self) -> Array_: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def raw_push_back(self) -> Any: ...
    def rbegin(self) -> Array_: ...
    @overload
    def rbegin(self) -> Array_: ...
    def rend(self) -> Array_: ...
    @overload
    def rend(self) -> Array_: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def shareData(selfnewData: Any, dataSize: Array_) -> Any: ...
    @overload
    def shareData(selffirst: Any, last1: Any) -> Any: ...
    def shrink_to_fit(self, *args, **kwargs) -> Any: ...
    def size(self) -> Array_: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updElt(selfi: Array_) -> Any: ...

class SimTKArrayVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfn: Array_) -> None: ...
    @overload
    def __init__(selfn: Array_, initVal: Vec) -> None: ...
    @overload
    def __init__(selfsrc: Array_) -> None: ...
    @overload
    def __init__(selffirst: Vec, last1: Vec, arg4: DontCopy) -> None: ...
    def adoptData(selfnewData: Vec, dataSize: Array_, dataCapacity: Array_) -> Any: ...
    @overload
    def adoptData(selfnewData: Vec, dataSize: Array_) -> Any: ...
    def allocated(self) -> Array_: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def at(selfi: Array_) -> Any: ...
    @overload
    def at(selfi: Array_) -> Any: ...
    def back(self) -> Any: ...
    @overload
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> Any: ...
    def capacity(self) -> Array_: ...
    def cbegin(self) -> Any: ...
    def cdata(self) -> Any: ...
    def cend(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def crbegin(self) -> Array_: ...
    def crend(self) -> Array_: ...
    def data(self) -> Any: ...
    @overload
    def data(self) -> Any: ...
    def deallocate(self) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> Any: ...
    def erase(selffirst: Vec, last1: Vec) -> Any: ...
    @overload
    def erase(selfp: Vec) -> Any: ...
    def eraseFast(selfp: Vec) -> Any: ...
    def fill(self, *args, **kwargs) -> Any: ...
    def front(self) -> Any: ...
    @overload
    def front(self) -> Any: ...
    def getElt(selfi: Array_) -> Any: ...
    def insert(selfp: Vec, n: Array_, value: Vec) -> Any: ...
    @overload
    def insert(selfp: Vec, value: Vec) -> Any: ...
    def isOwner(self) -> bool: ...
    def max_size(self) -> Array_: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def raw_push_back(self) -> Any: ...
    def rbegin(self) -> Array_: ...
    @overload
    def rbegin(self) -> Array_: ...
    def rend(self) -> Array_: ...
    @overload
    def rend(self) -> Array_: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def shareData(selfnewData: Vec, dataSize: Array_) -> Any: ...
    @overload
    def shareData(selffirst: Vec, last1: Vec) -> Any: ...
    def shrink_to_fit(self, *args, **kwargs) -> Any: ...
    def size(self) -> Array_: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updElt(selfi: Array_) -> Any: ...

class SimTKVisualizer:
    GroundAndSky: Any
    PassThrough: Any
    RealTime: Any
    Sampling: Any
    SolidColor: Any
    ViewMenuId: Any
    def __init__(selfsystem: MultibodySystem) -> None: ...
    @overload
    def __init__(selfsystem: MultibodySystem, searchPath: Array_) -> None: ...
    @overload
    def __init__(selfsrc: Visualizer) -> None: ...
    def addDecoration(selfmobodIx: Any, X_BD: Transform, geometry: DecorativeGeometry) -> int: ...
    def addDecorationGenerator(selfgenerator: DecorationGenerator) -> int: ...
    def addFrameController(selfcontroller: Visualizer) -> int: ...
    def addInputListener(selflistener: Visualizer) -> int: ...
    def addMenu(selftitle: Any, id: int, items: Array_) -> Any: ...
    def addRubberBandLine(selfb1: Any, station1: Vec3, b2: Any, station2: Vec3, line: DecorativeLine) -> int: ...
    def addSlider(selftitle: Any, id: int, min: Real, max: Real, value: Real) -> Any: ...
    def clearStats(self, *args, **kwargs) -> Any: ...
    def drawFrameNow(self, *args, **kwargs) -> Any: ...
    def dumpStats(self, *args, **kwargs) -> Any: ...
    def flushFrames(self, *args, **kwargs) -> Any: ...
    def getActualBufferLengthInFrames(self) -> int: ...
    def getActualBufferLengthInSec(self) -> Real: ...
    def getDecoration(selfi: int) -> Any: ...
    def getDecorationGenerator(selfi: int) -> DecorationGenerator: ...
    def getDesiredBufferLengthInSec(self) -> Real: ...
    def getDesiredFrameRate(self) -> Real: ...
    def getFrameController(selfi: int) -> Visualizer: ...
    def getFrameControllers(self) -> Array_: ...
    def getGroundHeight(self) -> Real: ...
    def getInputListener(selfi: int) -> Any: ...
    def getInputListeners(self) -> Array_: ...
    def getMode(self) -> Visualizer: ...
    def getNumDecorationGenerators(self) -> int: ...
    def getNumDecorations(self) -> int: ...
    def getNumFrameControllers(self) -> int: ...
    def getNumInputListeners(self) -> int: ...
    def getNumRubberBandLines(self) -> int: ...
    def getRealTimeScale(self) -> Real: ...
    def getRefCount(self) -> int: ...
    def getRubberBandLine(selfi: int) -> Any: ...
    def getShutdownWhenDestructed(self) -> bool: ...
    def getSystem(self) -> MultibodySystem: ...
    def getSystemUpDirection(self) -> Any: ...
    def pointCameraAt(selfpoint: Vec3, upDirection: Vec3) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def setBackgroundColor(selfcolor: Vec3) -> Any: ...
    def setBackgroundType(selfbackground: Visualizer) -> Any: ...
    def setBackgroundTypeByInt(selfindex: int) -> Any: ...
    def setCameraClippingPlanes(selfnearPlane: Real, farPlane: Real) -> Any: ...
    def setCameraFieldOfView(selffov: Real) -> Any: ...
    def setCameraTransform(selfX_GC: Transform) -> Any: ...
    def setDesiredBufferLengthInSec(selfbufferLengthInSec: Real) -> Any: ...
    def setDesiredFrameRate(selfframesPerSec: Real) -> Any: ...
    def setGroundHeight(selfheight: Real) -> Any: ...
    def setMode(selfmode: Visualizer) -> Any: ...
    def setRealTimeScale(selfsimTimePerRealSecond: Real) -> Any: ...
    def setShowFrameNumber(selfshowFrameNumber: bool) -> Any: ...
    def setShowFrameRate(selfshowFrameRate: bool) -> Any: ...
    def setShowShadows(selfshowShadows: bool) -> Any: ...
    def setShowSimTime(selfshowSimTime: bool) -> Any: ...
    def setShutdownWhenDestructed(selfshouldShutdown: bool) -> Any: ...
    def setSliderRange(selfslider: int, newMin: Real, newMax: Real) -> Any: ...
    def setSliderValue(selfslider: int, value: Real) -> Any: ...
    def setSystemUpDirection(selfupDirection: CoordinateDirection) -> Any: ...
    def setWindowTitle(selftitle: Any) -> Any: ...
    def shutdown(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updDecoration(selfi: int) -> Any: ...
    def updDecorationGenerator(selfi: int) -> DecorationGenerator: ...
    def updFrameController(selfi: int) -> Visualizer: ...
    def updInputListener(selfi: int) -> Any: ...
    def updRubberBandLine(selfi: int) -> Any: ...
    def zoomCameraToShowAllGeometry(self) -> Any: ...

class SimTKVisualizerInputListener:
    AltIsDown: Any
    ControlIsDown: Any
    IsSpecialKey: Any
    KeyBackspace: Any
    KeyBeep: Any
    KeyControlC: Any
    KeyDelete: Any
    KeyDownArrow: Any
    KeyEnd: Any
    KeyEnter: Any
    KeyEsc: Any
    KeyF1: Any
    KeyF10: Any
    KeyF11: Any
    KeyF12: Any
    KeyF2: Any
    KeyF3: Any
    KeyF4: Any
    KeyF5: Any
    KeyF6: Any
    KeyF7: Any
    KeyF8: Any
    KeyF9: Any
    KeyHome: Any
    KeyInsert: Any
    KeyLF: Any
    KeyLeftArrow: Any
    KeyPageDown: Any
    KeyPageUp: Any
    KeyReturn: Any
    KeyRightArrow: Any
    KeyTab: Any
    KeyUpArrow: Any
    ShiftIsDown: Any
    SpecialKeyOffset: Any
    def __init__(self) -> None: ...
    def keyPressed(selfkey: Any, modifiers: Any) -> bool: ...
    def menuSelected(selfmenu: int, item: int) -> bool: ...
    def sliderMoved(selfslider: int, value: Real) -> bool: ...
    thisown: Any

class SimTKVisualizerInputSilo:
    AltIsDown: Any
    ControlIsDown: Any
    IsSpecialKey: Any
    KeyBackspace: Any
    KeyBeep: Any
    KeyControlC: Any
    KeyDelete: Any
    KeyDownArrow: Any
    KeyEnd: Any
    KeyEnter: Any
    KeyEsc: Any
    KeyF1: Any
    KeyF10: Any
    KeyF11: Any
    KeyF12: Any
    KeyF2: Any
    KeyF3: Any
    KeyF4: Any
    KeyF5: Any
    KeyF6: Any
    KeyF7: Any
    KeyF8: Any
    KeyF9: Any
    KeyHome: Any
    KeyInsert: Any
    KeyLF: Any
    KeyLeftArrow: Any
    KeyPageDown: Any
    KeyPageUp: Any
    KeyReturn: Any
    KeyRightArrow: Any
    KeyTab: Any
    KeyUpArrow: Any
    ShiftIsDown: Any
    SpecialKeyOffset: Any
    def __init__(self) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def isAnyUserInput(self) -> bool: ...
    def keyPressed(selfkey: Any, modifiers: Any) -> bool: ...
    def menuSelected(selfmenu: int, item: int) -> bool: ...
    def sliderMoved(selfslider: int, value: Real) -> bool: ...
    def takeKeyHit(selfkey: Any, modifiers: Any) -> bool: ...
    def takeKeyHitKeyOnly(self) -> Any: ...
    def takeMenuPick(selfmenu: Any, item: Any) -> bool: ...
    def takeSliderMove(selfslider: Any, value: Real) -> bool: ...
    thisown: Any
    def waitForAnyUserInput(self, *args, **kwargs) -> Any: ...
    def waitForKeyHit(self, *args, **kwargs) -> Any: ...
    def waitForMenuPick(self, *args, **kwargs) -> Any: ...
    def waitForSliderMove(self, *args, **kwargs) -> Any: ...

class SimbodyMatterSubsystem:
    def __init__(self) -> None: ...
    def calcAcceleration(self, *args, **kwargs) -> Any: ...
    def calcAccelerationIgnoringConstraints(self, *args, **kwargs) -> Any: ...
    def calcBiasForAccelerationConstraints(self, *args, **kwargs) -> Any: ...
    def calcBiasForFrameJacobian(selfstate: State, onBodyB: Any, originAoInB: Vec3) -> Any: ...
    def calcBiasForMultiplyByG(self, *args, **kwargs) -> Any: ...
    def calcBiasForMultiplyByPq(self, *args, **kwargs) -> Any: ...
    def calcBiasForStationJacobian(selfstate: State, onBodyB: Any, stationPInB: Vec3) -> Any: ...
    def calcBiasForSystemJacobian(self, *args, **kwargs) -> Any: ...
    def calcBodyAccelerationFromUDot(self, *args, **kwargs) -> Any: ...
    def calcConstraintForcesFromMultipliers(self, *args, **kwargs) -> Any: ...
    def calcConstraintPower(selfstate: State) -> Real: ...
    def calcFrameJacobian(self, *args, **kwargs) -> Any: ...
    def calcG(self, *args, **kwargs) -> Any: ...
    def calcGTranspose(self, *args, **kwargs) -> Any: ...
    def calcKineticEnergy(selfstate: State) -> Real: ...
    def calcM(self, *args, **kwargs) -> Any: ...
    def calcMInv(self, *args, **kwargs) -> Any: ...
    def calcMobilizerReactionForces(self, *args, **kwargs) -> Any: ...
    def calcMotionErrors(selfstate: State, stage: Stage) -> Any: ...
    def calcMotionPower(selfstate: State) -> Real: ...
    def calcP(self, *args, **kwargs) -> Any: ...
    def calcPq(self, *args, **kwargs) -> Any: ...
    def calcPqTranspose(self, *args, **kwargs) -> Any: ...
    def calcProjectedMInv(self, *args, **kwargs) -> Any: ...
    def calcPt(self, *args, **kwargs) -> Any: ...
    def calcQDot(self, *args, **kwargs) -> Any: ...
    def calcQDotDot(self, *args, **kwargs) -> Any: ...
    def calcResidualForce(self, *args, **kwargs) -> Any: ...
    def calcResidualForceIgnoringConstraints(self, *args, **kwargs) -> Any: ...
    def calcStationJacobian(self, *args, **kwargs) -> Any: ...
    def calcSystemCentralInertiaInGround(selfs: State) -> Any: ...
    def calcSystemCentralMomentum(selfs: State) -> Any: ...
    def calcSystemJacobian(self, *args, **kwargs) -> Any: ...
    def calcSystemMass(selfs: State) -> Real: ...
    def calcSystemMassCenterAccelerationInGround(selfs: State) -> Any: ...
    def calcSystemMassCenterLocationInGround(selfs: State) -> Any: ...
    def calcSystemMassCenterVelocityInGround(selfs: State) -> Any: ...
    def calcSystemMassPropertiesInGround(selfs: State) -> Any: ...
    def calcSystemMomentumAboutGroundOrigin(selfs: State) -> Any: ...
    def calcTreeEquivalentMobilityForces(self, *args, **kwargs) -> Any: ...
    def downcast(selfarg1: Any) -> Any: ...
    def findConstraintForces(self, *args, **kwargs) -> Any: ...
    def findMotionForces(self, *args, **kwargs) -> Any: ...
    def getConstraintMultipliers(selfstate: State) -> Any: ...
    def getMotionMultipliers(selfstate: State) -> Any: ...
    def getRep(self) -> Any: ...
    def isInstanceOf(selfarg1: Any) -> bool: ...
    def multiplyByFrameJacobian(selfstate: State, onBodyB: Any, originAoInB: Vec3, u: Any) -> Any: ...
    def multiplyByFrameJacobianTranspose(self, *args, **kwargs) -> Any: ...
    def multiplyByG(self, *args, **kwargs) -> Any: ...
    def multiplyByGTranspose(self, *args, **kwargs) -> Any: ...
    def multiplyByM(self, *args, **kwargs) -> Any: ...
    def multiplyByMInv(self, *args, **kwargs) -> Any: ...
    def multiplyByN(self, *args, **kwargs) -> Any: ...
    def multiplyByNDot(self, *args, **kwargs) -> Any: ...
    def multiplyByNInv(self, *args, **kwargs) -> Any: ...
    def multiplyByPq(self, *args, **kwargs) -> Any: ...
    def multiplyByPqTranspose(self, *args, **kwargs) -> Any: ...
    def multiplyByStationJacobian(selfstate: State, onBodyB: Any, stationPInB: Vec3, u: Any) -> Any: ...
    def multiplyByStationJacobianTranspose(self, *args, **kwargs) -> Any: ...
    def multiplyBySystemJacobian(self, *args, **kwargs) -> Any: ...
    def multiplyBySystemJacobianTranspose(self, *args, **kwargs) -> Any: ...
    def solveForConstraintImpulses(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updDowncast(selfarg1: Any) -> Any: ...
    def updRep(self) -> Any: ...

class SpatialVec:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vec) -> None: ...
    @overload
    def __init__(selfe: Vec) -> None: ...
    @overload
    def __init__(selfi: int) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec, e8: Vec) -> None: ...
    def get(selfi: int) -> Any: ...
    def getDefaultTolerance(self) -> float: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNumericallyEqual(selfe: Vec, tol: float) -> bool: ...
    def ncol(self) -> int: ...
    def nrow(self) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setToNaN(self, *args, **kwargs) -> Any: ...
    def setToZero(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...

class Stage:
    Acceleration: Any
    Dynamics: Any
    Empty: Any
    HighestRuntime: Any
    HighestValid: Any
    Infinity: Any
    Instance: Any
    LowestRuntime: Any
    LowestValid: Any
    Model: Any
    NRuntime: Any
    NValid: Any
    Position: Any
    Report: Any
    Time: Any
    Topology: Any
    Velocity: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfl: int) -> None: ...
    def getName(self) -> Any: ...
    def invalidate(self, *args, **kwargs) -> Any: ...
    def isInRuntimeRange(self) -> bool: ...
    def next(self) -> Any: ...
    def prev(self) -> Any: ...
    thisown: Any

class State:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfarg2: State) -> None: ...
    def autoUpdateDiscreteVariables(self, *args, **kwargs) -> Any: ...
    def cacheToString(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def getEventTriggerStartByStage(selfarg2: Stage) -> Any: ...
    def getEventTriggers(self) -> Any: ...
    def getEventTriggersByStage(selfarg2: Stage) -> Any: ...
    @overload
    def getEventTriggersByStage(selfarg2: Any, arg3: Stage) -> Any: ...
    def getLowestSystemStageDifference(selfprevVersions: Array_) -> Any: ...
    def getMultipliers(selfarg2: Any) -> Any: ...
    @overload
    def getMultipliers(self) -> Any: ...
    def getNEventTriggers(self) -> int: ...
    def getNEventTriggersByStage(selfarg2: Stage) -> int: ...
    def getNMultipliers(self) -> int: ...
    def getNQ(self) -> int: ...
    @overload
    def getNQ(selfarg2: Any) -> int: ...
    def getNQErr(self) -> int: ...
    @overload
    def getNQErr(selfarg2: Any) -> int: ...
    def getNU(self) -> int: ...
    @overload
    def getNU(selfarg2: Any) -> int: ...
    def getNUDotErr(self) -> int: ...
    @overload
    def getNUDotErr(selfarg2: Any) -> int: ...
    def getNUErr(self) -> int: ...
    @overload
    def getNUErr(selfarg2: Any) -> int: ...
    def getNY(self) -> int: ...
    def getNYErr(self) -> int: ...
    def getNZ(self) -> int: ...
    @overload
    def getNZ(selfarg2: Any) -> int: ...
    def getNumSubsystems(self) -> int: ...
    def getQ(selfarg2: Any) -> Any: ...
    @overload
    def getQ(self) -> Any: ...
    def getQDot(selfarg2: Any) -> Any: ...
    @overload
    def getQDot(self) -> Any: ...
    def getQDotDot(selfarg2: Any) -> Any: ...
    @overload
    def getQDotDot(self) -> Any: ...
    def getQErr(selfarg2: Any) -> Any: ...
    @overload
    def getQErr(self) -> Any: ...
    def getQErrStart(self) -> Any: ...
    @overload
    def getQErrStart(selfarg2: Any) -> Any: ...
    def getQErrWeights(selfarg2: Any) -> Any: ...
    @overload
    def getQErrWeights(self) -> Any: ...
    def getQStart(self) -> Any: ...
    @overload
    def getQStart(selfarg2: Any) -> Any: ...
    def getSystemStage(self) -> Any: ...
    def getSystemStageVersions(self, *args, **kwargs) -> Any: ...
    def getTime(self) -> Any: ...
    def getU(selfarg2: Any) -> Any: ...
    @overload
    def getU(self) -> Any: ...
    def getUDot(selfarg2: Any) -> Any: ...
    @overload
    def getUDot(self) -> Any: ...
    def getUDotErr(selfarg2: Any) -> Any: ...
    @overload
    def getUDotErr(self) -> Any: ...
    def getUDotErrStart(selfarg2: Any) -> Any: ...
    def getUErr(selfarg2: Any) -> Any: ...
    @overload
    def getUErr(self) -> Any: ...
    def getUErrStart(self) -> Any: ...
    @overload
    def getUErrStart(selfarg2: Any) -> Any: ...
    def getUErrWeights(selfarg2: Any) -> Any: ...
    @overload
    def getUErrWeights(self) -> Any: ...
    def getUStart(self) -> Any: ...
    @overload
    def getUStart(selfarg2: Any) -> Any: ...
    def getUWeights(selfarg2: Any) -> Any: ...
    @overload
    def getUWeights(self) -> Any: ...
    def getY(self) -> Any: ...
    def getYDot(self) -> Any: ...
    def getYErr(self) -> Any: ...
    def getZ(selfarg2: Any) -> Any: ...
    @overload
    def getZ(self) -> Any: ...
    def getZDot(selfarg2: Any) -> Any: ...
    @overload
    def getZDot(self) -> Any: ...
    def getZStart(self) -> Any: ...
    @overload
    def getZStart(selfarg2: Any) -> Any: ...
    def getZWeights(selfarg2: Any) -> Any: ...
    @overload
    def getZWeights(self) -> Any: ...
    def invalidateAll(self, *args, **kwargs) -> Any: ...
    def invalidateAllCacheAtOrAbove(self, *args, **kwargs) -> Any: ...
    def setNumSubsystems(self, *args, **kwargs) -> Any: ...
    def setQ(self, *args, **kwargs) -> Any: ...
    def setSystemTopologyStageVersion(self, *args, **kwargs) -> Any: ...
    def setTime(self, *args, **kwargs) -> Any: ...
    def setU(self, *args, **kwargs) -> Any: ...
    def setY(self, *args, **kwargs) -> Any: ...
    def setZ(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updEventTriggers(self) -> Any: ...
    def updEventTriggersByStage(selfarg2: Stage) -> Any: ...
    @overload
    def updEventTriggersByStage(selfarg2: Any, arg3: Stage) -> Any: ...
    def updMultipliers(selfarg2: Any) -> Any: ...
    @overload
    def updMultipliers(self) -> Any: ...
    def updQ(selfarg2: Any) -> Any: ...
    @overload
    def updQ(self) -> Any: ...
    def updQDot(selfarg2: Any) -> Any: ...
    @overload
    def updQDot(self) -> Any: ...
    def updQDotDot(selfarg2: Any) -> Any: ...
    @overload
    def updQDotDot(self) -> Any: ...
    def updQErr(selfarg2: Any) -> Any: ...
    @overload
    def updQErr(self) -> Any: ...
    def updQErrWeights(selfarg2: Any) -> Any: ...
    @overload
    def updQErrWeights(self) -> Any: ...
    def updTime(self) -> Any: ...
    def updU(selfarg2: Any) -> Any: ...
    @overload
    def updU(self) -> Any: ...
    def updUDot(selfarg2: Any) -> Any: ...
    @overload
    def updUDot(self) -> Any: ...
    def updUDotErr(selfarg2: Any) -> Any: ...
    @overload
    def updUDotErr(self) -> Any: ...
    def updUErr(selfarg2: Any) -> Any: ...
    @overload
    def updUErr(self) -> Any: ...
    def updUErrWeights(selfarg2: Any) -> Any: ...
    @overload
    def updUErrWeights(self) -> Any: ...
    def updUWeights(selfarg2: Any) -> Any: ...
    @overload
    def updUWeights(self) -> Any: ...
    def updY(self) -> Any: ...
    def updYDot(self) -> Any: ...
    def updYErr(self) -> Any: ...
    def updZ(selfarg2: Any) -> Any: ...
    @overload
    def updZ(self) -> Any: ...
    def updZDot(selfarg2: Any) -> Any: ...
    @overload
    def updZDot(self) -> Any: ...
    def updZWeights(selfarg2: Any) -> Any: ...
    @overload
    def updZWeights(self) -> Any: ...

class StdVectorDouble:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfother: Any) -> None: ...
    @overload
    def __init__(selfsize: Any) -> None: ...
    @overload
    def __init__(selfsize: Any, value: Any) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    def capacity(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    def erase(selfpos: Any) -> Any: ...
    @overload
    def erase(selffirst: Any, last: Any) -> Any: ...
    def front(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def insert(self, pos: Any, x: Any, n: Any) -> Any: ...
    def iterator(self) -> Any: ...
    def pop(self) -> Any: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StdVectorInt:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfother: Any) -> None: ...
    @overload
    def __init__(selfsize: Any) -> None: ...
    @overload
    def __init__(selfsize: Any, value: Any) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    def capacity(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    def erase(selfpos: Any) -> Any: ...
    @overload
    def erase(selffirst: Any, last: Any) -> Any: ...
    def front(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def insert(self, pos: Any, x: Any, n: Any) -> Any: ...
    def iterator(self) -> Any: ...
    def pop(self) -> Any: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StdVectorState:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfother: State) -> None: ...
    @overload
    def __init__(selfsize: State) -> None: ...
    @overload
    def __init__(selfsize: State, value: State) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> State: ...
    def capacity(self) -> State: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> State: ...
    def erase(selfpos: State) -> State: ...
    @overload
    def erase(selffirst: State, last: State) -> State: ...
    def front(self) -> Any: ...
    def get_allocator(self) -> State: ...
    def insert(self, pos: State, x: State, n: State) -> State: ...
    def iterator(self) -> Any: ...
    def pop(self) -> Any: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def rbegin(self) -> State: ...
    def rend(self) -> State: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def size(self) -> State: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StdVectorString:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfother: Any) -> None: ...
    @overload
    def __init__(selfsize: Any) -> None: ...
    @overload
    def __init__(selfsize: Any, value: Any) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    def capacity(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    def erase(selfpos: Any) -> Any: ...
    @overload
    def erase(selffirst: Any, last: Any) -> Any: ...
    def front(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def insert(self, pos: Any, x: Any, n: Any) -> Any: ...
    def iterator(self) -> Any: ...
    def pop(self) -> Any: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StdVectorUnsigned:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfother: Any) -> None: ...
    @overload
    def __init__(selfsize: Any) -> None: ...
    @overload
    def __init__(selfsize: Any, value: Any) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    def capacity(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    def erase(selfpos: Any) -> Any: ...
    @overload
    def erase(selffirst: Any, last: Any) -> Any: ...
    def front(self) -> Any: ...
    def get_allocator(self) -> Any: ...
    def insert(self, pos: Any, x: Any, n: Any) -> Any: ...
    def iterator(self) -> Any: ...
    def pop(self) -> Any: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def rbegin(self) -> Any: ...
    def rend(self) -> Any: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def size(self) -> Any: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StdVectorVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfother: Vec3) -> None: ...
    @overload
    def __init__(selfsize: Vec) -> None: ...
    @overload
    def __init__(selfsize: Vec, value: Vec) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> Vec: ...
    def capacity(self) -> Vec: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Vec: ...
    def erase(selfpos: Vec) -> Vec: ...
    @overload
    def erase(selffirst: Vec, last: Vec) -> Vec: ...
    def front(self) -> Any: ...
    def get_allocator(self) -> Vec: ...
    def insert(self, pos: Vec, x: Vec, n: Vec) -> Vec: ...
    def iterator(self) -> Any: ...
    def pop(self) -> Any: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def rbegin(self) -> Vec: ...
    def rend(self) -> Vec: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def size(self) -> Vec: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any

class SwigPyIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def advance(selfn: Any) -> Any: ...
    def copy(self) -> Any: ...
    def decr(selfn: Any) -> Any: ...
    def distance(selfx: Any) -> Any: ...
    def equal(selfx: Any) -> bool: ...
    def incr(selfn: Any) -> Any: ...
    def next(self) -> Any: ...
    def previous(self) -> Any: ...
    thisown: Any
    def value(self) -> Any: ...

class Transform:
    def R(self) -> Any: ...
    def RInv(self) -> Any: ...
    def T(self) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfR: Rotation_, p: Vec) -> None: ...
    @overload
    def __init__(selfR: Rotation_) -> None: ...
    @overload
    def __init__(selfp: Vec) -> None: ...
    def asMat34(self) -> Mat: ...
    def compose(selfX_FY: Transform_) -> Any: ...
    @overload
    def compose(selfX_FY: InverseTransform_) -> Any: ...
    def invert(self) -> InverseTransform_: ...
    def p(self) -> Any: ...
    def pInv(self) -> Any: ...
    def set(selfR: Rotation_, p: Vec) -> Any: ...
    def setP(selfp: Vec) -> Any: ...
    def setPInv(selfp_FB: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def shiftBaseStationToFrame(selfsB: Vec) -> Any: ...
    def shiftFrameStationToBase(selfsF: Vec) -> Any: ...
    thisown: Any
    def toMat34(self) -> Mat: ...
    def toMat44(self) -> Mat: ...
    def updInvert(self) -> InverseTransform_: ...
    def xformBaseVecToFrame(selfvB: Vec) -> Any: ...
    def xformFrameVecToBase(selfvF: Vec) -> Any: ...

class TrueType:
    def __init__(self) -> None: ...
    thisown: Any

class TrustMe:
    def __init__(self) -> None: ...
    thisown: Any

class UnitVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfu: UnitVec) -> None: ...
    @overload
    def __init__(selfv: UnitVec) -> None: ...
    @overload
    def __init__(selfx: Any, y: Any, z: Any) -> None: ...
    @overload
    def __init__(selfaxis: CoordinateAxis) -> None: ...
    @overload
    def __init__(selfdir: CoordinateDirection) -> None: ...
    @overload
    def __init__(selfaxis: int) -> None: ...
    @overload
    def __init__(selfv: UnitVec, arg3: bool) -> None: ...
    def abs(self) -> Any: ...
    def asVec3(self) -> Any: ...
    def createFromMat(selfn: int) -> Any: ...
    def get(selfi: int) -> Vec: ...
    def getAs(selfp: Any) -> Any: ...
    def getDefaultTolerance(self) -> float: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNumericallyEqual(selfe: Any, tol: float) -> bool: ...
    def ncol(self) -> int: ...
    def negate(self) -> Any: ...
    def nrow(self) -> int: ...
    def perp(self) -> Any: ...
    def scalarDivideEq(selfee: Any) -> Any: ...
    def scalarEq(selfee: Any) -> Any: ...
    def scalarMinusEq(selfee: Any) -> Any: ...
    def scalarPlusEq(selfee: Any) -> Any: ...
    def scalarTimesEq(selfee: Any) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setToNaN(self, *args, **kwargs) -> Any: ...
    def setToZero(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def to_numpy(self, *args, **kwargs) -> Any: ...

class Vec2:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vec) -> None: ...
    @overload
    def __init__(selfe: Any) -> None: ...
    @overload
    def __init__(selfi: int) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec, e8: Vec) -> None: ...
    def get(selfi: int) -> Vec: ...
    def getDefaultTolerance(self) -> float: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNumericallyEqual(selfe: Any, tol: float) -> bool: ...
    def ncol(self) -> int: ...
    def nrow(self) -> int: ...
    def scalarDivideEq(selfee: Any) -> Any: ...
    def scalarEq(selfee: Any) -> Any: ...
    def scalarMinusEq(selfee: Any) -> Any: ...
    def scalarPlusEq(selfee: Any) -> Any: ...
    def scalarTimesEq(selfee: Any) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setToNaN(self, *args, **kwargs) -> Any: ...
    def setToZero(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...

class Vec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vec) -> None: ...
    @overload
    def __init__(selfe: Any) -> None: ...
    @overload
    def __init__(selfi: int) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec, e8: Vec) -> None: ...
    @overload
    def __init__(selfn: int) -> None: ...
    def createFromMat(selfn: int) -> Any: ...
    def get(selfi: int) -> Vec: ...
    def getDefaultTolerance(self) -> float: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNumericallyEqual(selfe: Any, tol: float) -> bool: ...
    def ncol(self) -> int: ...
    def nrow(self) -> int: ...
    def scalarDivideEq(selfee: Any) -> Any: ...
    def scalarEq(selfee: Any) -> Any: ...
    def scalarMinusEq(selfee: Any) -> Any: ...
    def scalarPlusEq(selfee: Any) -> Any: ...
    def scalarTimesEq(selfee: Any) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setToNaN(self, *args, **kwargs) -> Any: ...
    def setToZero(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def to_numpy(self, *args, **kwargs) -> Any: ...

class Vec4:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vec) -> None: ...
    @overload
    def __init__(selfe: Any) -> None: ...
    @overload
    def __init__(selfi: int) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec, e8: Vec) -> None: ...
    def get(selfi: int) -> Vec: ...
    def getDefaultTolerance(self) -> float: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNumericallyEqual(selfe: Any, tol: float) -> bool: ...
    def ncol(self) -> int: ...
    def nrow(self) -> int: ...
    def scalarDivideEq(selfee: Any) -> Any: ...
    def scalarEq(selfee: Any) -> Any: ...
    def scalarMinusEq(selfee: Any) -> Any: ...
    def scalarPlusEq(selfee: Any) -> Any: ...
    def scalarTimesEq(selfee: Any) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setToNaN(self, *args, **kwargs) -> Any: ...
    def setToZero(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...

class Vec6:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vec) -> None: ...
    @overload
    def __init__(selfe: Any) -> None: ...
    @overload
    def __init__(selfi: int) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec) -> None: ...
    @overload
    def __init__(selfe0: Vec, e1: Vec, e2: Vec, e3: Vec, e4: Vec, e5: Vec, e6: Vec, e7: Vec, e8: Vec) -> None: ...
    def get(selfi: int) -> Vec: ...
    def getDefaultTolerance(self) -> float: ...
    def isFinite(self) -> bool: ...
    def isInf(self) -> bool: ...
    def isNaN(self) -> bool: ...
    def isNumericallyEqual(selfe: Any, tol: float) -> bool: ...
    def ncol(self) -> int: ...
    def nrow(self) -> int: ...
    def scalarDivideEq(selfee: Any) -> Any: ...
    def scalarEq(selfee: Any) -> Any: ...
    def scalarMinusEq(selfee: Any) -> Any: ...
    def scalarPlusEq(selfee: Any) -> Any: ...
    def scalarTimesEq(selfee: Any) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setToNaN(self, *args, **kwargs) -> Any: ...
    def setToZero(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...

class Vector:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vector_) -> None: ...
    @overload
    def __init__(selfm: int, initialValue: Any) -> None: ...
    @overload
    def __init__(selfrow: Any) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def createFromMat(selfn: int) -> Any: ...
    def get(selfi: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Any) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> float: ...
    thisown: Any
    def toString(self) -> str: ...
    def to_numpy(self, *args, **kwargs) -> Any: ...
    def transpose(self) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorBaseDouble:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: int) -> None: ...
    @overload
    def __init__(selfsource: VectorBase) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Any) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> float: ...
    thisown: Any
    def to_numpy(self, *args, **kwargs) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorBaseMat33:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: int) -> None: ...
    @overload
    def __init__(selfsource: VectorBase) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Mat) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorBaseQuaternion:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: int) -> None: ...
    @overload
    def __init__(selfsource: VectorBase) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Quaternion_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorBaseRotation:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: int) -> None: ...
    @overload
    def __init__(selfsource: VectorBase) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Rotation_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorBaseVec3:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: int) -> None: ...
    @overload
    def __init__(selfsource: VectorBase) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorBaseVec6:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfm: int) -> None: ...
    @overload
    def __init__(selfsource: VectorBase) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorMat33:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vector_) -> None: ...
    @overload
    def __init__(selfm: int, initialValue: Mat) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def get(selfi: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Mat) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorOfSpatialVec:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vector_) -> None: ...
    @overload
    def __init__(selfm: int, initialValue: Vec) -> None: ...
    def get(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...

class VectorQuaternion:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vector_) -> None: ...
    @overload
    def __init__(selfm: int, initialValue: Quaternion_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def get(selfi: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Quaternion_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorRotation:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vector_) -> None: ...
    @overload
    def __init__(selfm: int, initialValue: Rotation_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> VectorView_: ...
    def get(selfi: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Rotation_) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> VectorView_: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorVec3:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vector_) -> None: ...
    @overload
    def __init__(selfm: int, initialValue: Vec) -> None: ...
    @overload
    def __init__(selfrow: Vec3) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def get(selfi: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def transpose(self) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorVec6:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsrc: Vector_) -> None: ...
    @overload
    def __init__(selfm: int, initialValue: Vec) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def get(selfi: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorView:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfv: VectorView_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def multiplyAssign(selft: float) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Any) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> float: ...
    thisown: Any
    def to_numpy(self, *args, **kwargs) -> Any: ...
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorViewMat33:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfv: VectorView_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Mat) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorViewVec3:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfv: VectorView_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def multiplyAssign(selft: float) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

class VectorViewVec6:
    CppNScalarsPerElement: Any
    NScalarsPerElement: Any
    def __init__(selfv: VectorView_) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def col(selfj: int) -> Any: ...
    def getElt(selfi: int, j: int) -> Any: ...
    def isResizeable(self) -> bool: ...
    def lockShape(self, *args, **kwargs) -> Any: ...
    def ncol(self) -> int: ...
    def negateInPlace(self) -> Any: ...
    def nrow(self) -> int: ...
    def resize(selfm: int) -> Any: ...
    def resizeKeep(selfm: int) -> Any: ...
    def row(selfi: int) -> Any: ...
    def setTo(selft: Vec) -> Any: ...
    def setToNaN(self) -> Any: ...
    def setToZero(self) -> Any: ...
    def size(self) -> int: ...
    def sum(self) -> Any: ...
    thisown: Any
    def unlockShape(self, *args, **kwargs) -> Any: ...
    def updCol(selfj: int) -> Any: ...
    def updElt(selfi: int, j: int) -> Any: ...
    def updRow(selfi: int) -> Any: ...

