# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _actuators
else:
    import _actuators

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _actuators.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _actuators.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _actuators.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _actuators.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _actuators.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _actuators.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _actuators.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _actuators.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _actuators.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _actuators.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _actuators.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _actuators.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _actuators.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _actuators:
_actuators.SwigPyIterator_swigregister(SwigPyIterator)
import opensim.simulation
import opensim.common
import opensim.simbody
class CoordinateActuator(opensim.simulation.ScalarActuator):
    r"""Proxy of C++ OpenSim::CoordinateActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> CoordinateActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.CoordinateActuator_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(CoordinateActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.CoordinateActuator_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.CoordinateActuator_getClassName()

    def clone(self):
        r"""clone(CoordinateActuator self) -> CoordinateActuator"""
        return _actuators.CoordinateActuator_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(CoordinateActuator self) -> std::string const &"""
        return _actuators.CoordinateActuator_getConcreteClassName(self)

    def copyProperty_coordinate(self, source):
        r"""
        copyProperty_coordinate(CoordinateActuator self, CoordinateActuator source)

        Parameters
        ----------
        source: OpenSim::CoordinateActuator::Self const &

        """
        return _actuators.CoordinateActuator_copyProperty_coordinate(self, source)

    def append_coordinate(self, value):
        r"""
        append_coordinate(CoordinateActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.CoordinateActuator_append_coordinate(self, value)

    def constructProperty_coordinate(self, *args):
        r"""
        constructProperty_coordinate(CoordinateActuator self)
        constructProperty_coordinate(CoordinateActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.CoordinateActuator_constructProperty_coordinate(self, *args)

    def get_coordinate(self, *args):
        r"""
        get_coordinate(CoordinateActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate(CoordinateActuator self) -> std::string const &
        """
        return _actuators.CoordinateActuator_get_coordinate(self, *args)

    def upd_coordinate(self, *args):
        r"""
        upd_coordinate(CoordinateActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate(CoordinateActuator self) -> std::string &
        """
        return _actuators.CoordinateActuator_upd_coordinate(self, *args)

    def set_coordinate(self, *args):
        r"""
        set_coordinate(CoordinateActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate(CoordinateActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.CoordinateActuator_set_coordinate(self, *args)

    def copyProperty_optimal_force(self, source):
        r"""
        copyProperty_optimal_force(CoordinateActuator self, CoordinateActuator source)

        Parameters
        ----------
        source: OpenSim::CoordinateActuator::Self const &

        """
        return _actuators.CoordinateActuator_copyProperty_optimal_force(self, source)

    def append_optimal_force(self, value):
        r"""
        append_optimal_force(CoordinateActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.CoordinateActuator_append_optimal_force(self, value)

    def constructProperty_optimal_force(self, initValue):
        r"""
        constructProperty_optimal_force(CoordinateActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.CoordinateActuator_constructProperty_optimal_force(self, initValue)

    def get_optimal_force(self, *args):
        r"""
        get_optimal_force(CoordinateActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(CoordinateActuator self) -> double const &
        """
        return _actuators.CoordinateActuator_get_optimal_force(self, *args)

    def upd_optimal_force(self, *args):
        r"""
        upd_optimal_force(CoordinateActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_force(CoordinateActuator self) -> double &
        """
        return _actuators.CoordinateActuator_upd_optimal_force(self, *args)

    def set_optimal_force(self, *args):
        r"""
        set_optimal_force(CoordinateActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_force(CoordinateActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.CoordinateActuator_set_optimal_force(self, *args)

    def __init__(self, *args):
        r"""
        __init__(CoordinateActuator self, std::string const & coordinateName="") -> CoordinateActuator

        Parameters
        ----------
        coordinateName: std::string const &

        """
        _actuators.CoordinateActuator_swiginit(self, _actuators.new_CoordinateActuator(*args))

    def setOptimalForce(self, optimalForce):
        r"""
        setOptimalForce(CoordinateActuator self, double optimalForce)

        Parameters
        ----------
        optimalForce: double

        """
        return _actuators.CoordinateActuator_setOptimalForce(self, optimalForce)

    def getOptimalForce(self):
        r"""getOptimalForce(CoordinateActuator self) -> double"""
        return _actuators.CoordinateActuator_getOptimalForce(self)

    @staticmethod
    def CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce=1, aIncludeLockedAndConstrainedCoordinates=True):
        r"""
        CreateForceSetOfCoordinateActuatorsForModel(State s, Model aModel, double aOptimalForce=1, bool aIncludeLockedAndConstrainedCoordinates=True) -> ForceSet

        Parameters
        ----------
        s: SimTK::State const &
        aModel: OpenSim::Model &
        aOptimalForce: double
        aIncludeLockedAndConstrainedCoordinates: bool

        """
        return _actuators.CoordinateActuator_CreateForceSetOfCoordinateActuatorsForModel(s, aModel, aOptimalForce, aIncludeLockedAndConstrainedCoordinates)

    def isCoordinateValid(self):
        r"""isCoordinateValid(CoordinateActuator self) -> bool"""
        return _actuators.CoordinateActuator_isCoordinateValid(self)

    def getSpeed(self, s):
        r"""
        getSpeed(CoordinateActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.CoordinateActuator_getSpeed(self, s)

    def setCoordinate(self, aCoordinate):
        r"""
        setCoordinate(CoordinateActuator self, Coordinate aCoordinate)

        Parameters
        ----------
        aCoordinate: OpenSim::Coordinate *

        """
        return _actuators.CoordinateActuator_setCoordinate(self, aCoordinate)

    def getCoordinate(self):
        r"""getCoordinate(CoordinateActuator self) -> Coordinate"""
        return _actuators.CoordinateActuator_getCoordinate(self)
    __swig_destroy__ = _actuators.delete_CoordinateActuator

# Register CoordinateActuator in _actuators:
_actuators.CoordinateActuator_swigregister(CoordinateActuator)
class ActivationCoordinateActuator(CoordinateActuator):
    r"""Proxy of C++ OpenSim::ActivationCoordinateActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ActivationCoordinateActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ActivationCoordinateActuator_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ActivationCoordinateActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ActivationCoordinateActuator_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ActivationCoordinateActuator_getClassName()

    def clone(self):
        r"""clone(ActivationCoordinateActuator self) -> ActivationCoordinateActuator"""
        return _actuators.ActivationCoordinateActuator_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ActivationCoordinateActuator self) -> std::string const &"""
        return _actuators.ActivationCoordinateActuator_getConcreteClassName(self)

    def copyProperty_activation_time_constant(self, source):
        r"""
        copyProperty_activation_time_constant(ActivationCoordinateActuator self, ActivationCoordinateActuator source)

        Parameters
        ----------
        source: OpenSim::ActivationCoordinateActuator::Self const &

        """
        return _actuators.ActivationCoordinateActuator_copyProperty_activation_time_constant(self, source)

    def append_activation_time_constant(self, value):
        r"""
        append_activation_time_constant(ActivationCoordinateActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ActivationCoordinateActuator_append_activation_time_constant(self, value)

    def constructProperty_activation_time_constant(self, initValue):
        r"""
        constructProperty_activation_time_constant(ActivationCoordinateActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ActivationCoordinateActuator_constructProperty_activation_time_constant(self, initValue)

    def get_activation_time_constant(self, *args):
        r"""
        get_activation_time_constant(ActivationCoordinateActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_time_constant(ActivationCoordinateActuator self) -> double const &
        """
        return _actuators.ActivationCoordinateActuator_get_activation_time_constant(self, *args)

    def upd_activation_time_constant(self, *args):
        r"""
        upd_activation_time_constant(ActivationCoordinateActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_activation_time_constant(ActivationCoordinateActuator self) -> double &
        """
        return _actuators.ActivationCoordinateActuator_upd_activation_time_constant(self, *args)

    def set_activation_time_constant(self, *args):
        r"""
        set_activation_time_constant(ActivationCoordinateActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_activation_time_constant(ActivationCoordinateActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ActivationCoordinateActuator_set_activation_time_constant(self, *args)

    def copyProperty_default_activation(self, source):
        r"""
        copyProperty_default_activation(ActivationCoordinateActuator self, ActivationCoordinateActuator source)

        Parameters
        ----------
        source: OpenSim::ActivationCoordinateActuator::Self const &

        """
        return _actuators.ActivationCoordinateActuator_copyProperty_default_activation(self, source)

    def append_default_activation(self, value):
        r"""
        append_default_activation(ActivationCoordinateActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ActivationCoordinateActuator_append_default_activation(self, value)

    def constructProperty_default_activation(self, initValue):
        r"""
        constructProperty_default_activation(ActivationCoordinateActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ActivationCoordinateActuator_constructProperty_default_activation(self, initValue)

    def get_default_activation(self, *args):
        r"""
        get_default_activation(ActivationCoordinateActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_activation(ActivationCoordinateActuator self) -> double const &
        """
        return _actuators.ActivationCoordinateActuator_get_default_activation(self, *args)

    def upd_default_activation(self, *args):
        r"""
        upd_default_activation(ActivationCoordinateActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_activation(ActivationCoordinateActuator self) -> double &
        """
        return _actuators.ActivationCoordinateActuator_upd_default_activation(self, *args)

    def set_default_activation(self, *args):
        r"""
        set_default_activation(ActivationCoordinateActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_activation(ActivationCoordinateActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ActivationCoordinateActuator_set_default_activation(self, *args)
    _has_output_statebounds_activation = property(_actuators.ActivationCoordinateActuator__has_output_statebounds_activation_get, _actuators.ActivationCoordinateActuator__has_output_statebounds_activation_set, doc=r"""_has_output_statebounds_activation : bool""")

    def __init__(self, *args):
        r"""
        __init__(ActivationCoordinateActuator self) -> ActivationCoordinateActuator
        __init__(ActivationCoordinateActuator self, std::string const & coordinateName) -> ActivationCoordinateActuator

        Parameters
        ----------
        coordinateName: std::string const &

        """
        _actuators.ActivationCoordinateActuator_swiginit(self, _actuators.new_ActivationCoordinateActuator(*args))

    def getBoundsActivation(self, arg2):
        r"""
        getBoundsActivation(ActivationCoordinateActuator self, State arg2) -> Vec2

        Parameters
        ----------
        arg2: SimTK::State const &

        """
        return _actuators.ActivationCoordinateActuator_getBoundsActivation(self, arg2)
    __swig_destroy__ = _actuators.delete_ActivationCoordinateActuator

# Register ActivationCoordinateActuator in _actuators:
_actuators.ActivationCoordinateActuator_swigregister(ActivationCoordinateActuator)
class PointActuator(opensim.simulation.ScalarActuator):
    r"""Proxy of C++ OpenSim::PointActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> PointActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.PointActuator_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(PointActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.PointActuator_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.PointActuator_getClassName()

    def clone(self):
        r"""clone(PointActuator self) -> PointActuator"""
        return _actuators.PointActuator_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(PointActuator self) -> std::string const &"""
        return _actuators.PointActuator_getConcreteClassName(self)

    def copyProperty_body(self, source):
        r"""
        copyProperty_body(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_body(self, source)

    def append_body(self, value):
        r"""
        append_body(PointActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointActuator_append_body(self, value)

    def constructProperty_body(self, *args):
        r"""
        constructProperty_body(PointActuator self)
        constructProperty_body(PointActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.PointActuator_constructProperty_body(self, *args)

    def get_body(self, *args):
        r"""
        get_body(PointActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_body(PointActuator self) -> std::string const &
        """
        return _actuators.PointActuator_get_body(self, *args)

    def upd_body(self, *args):
        r"""
        upd_body(PointActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_body(PointActuator self) -> std::string &
        """
        return _actuators.PointActuator_upd_body(self, *args)

    def set_body(self, *args):
        r"""
        set_body(PointActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_body(PointActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointActuator_set_body(self, *args)

    def copyProperty_point(self, source):
        r"""
        copyProperty_point(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_point(self, source)

    def append_point(self, value):
        r"""
        append_point(PointActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_append_point(self, value)

    def constructProperty_point(self, initValue):
        r"""
        constructProperty_point(PointActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_constructProperty_point(self, initValue)

    def get_point(self, *args):
        r"""
        get_point(PointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point(PointActuator self) -> Vec3
        """
        return _actuators.PointActuator_get_point(self, *args)

    def upd_point(self, *args):
        r"""
        upd_point(PointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point(PointActuator self) -> Vec3
        """
        return _actuators.PointActuator_upd_point(self, *args)

    def set_point(self, *args):
        r"""
        set_point(PointActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point(PointActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_set_point(self, *args)

    def copyProperty_point_is_global(self, source):
        r"""
        copyProperty_point_is_global(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_point_is_global(self, source)

    def append_point_is_global(self, value):
        r"""
        append_point_is_global(PointActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointActuator_append_point_is_global(self, value)

    def constructProperty_point_is_global(self, initValue):
        r"""
        constructProperty_point_is_global(PointActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.PointActuator_constructProperty_point_is_global(self, initValue)

    def get_point_is_global(self, *args):
        r"""
        get_point_is_global(PointActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_point_is_global(PointActuator self) -> bool const &
        """
        return _actuators.PointActuator_get_point_is_global(self, *args)

    def upd_point_is_global(self, *args):
        r"""
        upd_point_is_global(PointActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_point_is_global(PointActuator self) -> bool &
        """
        return _actuators.PointActuator_upd_point_is_global(self, *args)

    def set_point_is_global(self, *args):
        r"""
        set_point_is_global(PointActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_point_is_global(PointActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointActuator_set_point_is_global(self, *args)

    def copyProperty_direction(self, source):
        r"""
        copyProperty_direction(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_direction(self, source)

    def append_direction(self, value):
        r"""
        append_direction(PointActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_append_direction(self, value)

    def constructProperty_direction(self, initValue):
        r"""
        constructProperty_direction(PointActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_constructProperty_direction(self, initValue)

    def get_direction(self, *args):
        r"""
        get_direction(PointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_direction(PointActuator self) -> Vec3
        """
        return _actuators.PointActuator_get_direction(self, *args)

    def upd_direction(self, *args):
        r"""
        upd_direction(PointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_direction(PointActuator self) -> Vec3
        """
        return _actuators.PointActuator_upd_direction(self, *args)

    def set_direction(self, *args):
        r"""
        set_direction(PointActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_direction(PointActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointActuator_set_direction(self, *args)

    def copyProperty_force_is_global(self, source):
        r"""
        copyProperty_force_is_global(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_force_is_global(self, source)

    def append_force_is_global(self, value):
        r"""
        append_force_is_global(PointActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointActuator_append_force_is_global(self, value)

    def constructProperty_force_is_global(self, initValue):
        r"""
        constructProperty_force_is_global(PointActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.PointActuator_constructProperty_force_is_global(self, initValue)

    def get_force_is_global(self, *args):
        r"""
        get_force_is_global(PointActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_force_is_global(PointActuator self) -> bool const &
        """
        return _actuators.PointActuator_get_force_is_global(self, *args)

    def upd_force_is_global(self, *args):
        r"""
        upd_force_is_global(PointActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_force_is_global(PointActuator self) -> bool &
        """
        return _actuators.PointActuator_upd_force_is_global(self, *args)

    def set_force_is_global(self, *args):
        r"""
        set_force_is_global(PointActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_force_is_global(PointActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointActuator_set_force_is_global(self, *args)

    def copyProperty_optimal_force(self, source):
        r"""
        copyProperty_optimal_force(PointActuator self, PointActuator source)

        Parameters
        ----------
        source: OpenSim::PointActuator::Self const &

        """
        return _actuators.PointActuator_copyProperty_optimal_force(self, source)

    def append_optimal_force(self, value):
        r"""
        append_optimal_force(PointActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.PointActuator_append_optimal_force(self, value)

    def constructProperty_optimal_force(self, initValue):
        r"""
        constructProperty_optimal_force(PointActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.PointActuator_constructProperty_optimal_force(self, initValue)

    def get_optimal_force(self, *args):
        r"""
        get_optimal_force(PointActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(PointActuator self) -> double const &
        """
        return _actuators.PointActuator_get_optimal_force(self, *args)

    def upd_optimal_force(self, *args):
        r"""
        upd_optimal_force(PointActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_force(PointActuator self) -> double &
        """
        return _actuators.PointActuator_upd_optimal_force(self, *args)

    def set_optimal_force(self, *args):
        r"""
        set_optimal_force(PointActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_force(PointActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.PointActuator_set_optimal_force(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PointActuator self, std::string const & bodyName="") -> PointActuator

        Parameters
        ----------
        bodyName: std::string const &

        """
        _actuators.PointActuator_swiginit(self, _actuators.new_PointActuator(*args))

    def setOptimalForce(self, aOptimalForce):
        r"""
        setOptimalForce(PointActuator self, double aOptimalForce)

        Parameters
        ----------
        aOptimalForce: double

        """
        return _actuators.PointActuator_setOptimalForce(self, aOptimalForce)

    def getOptimalForce(self):
        r"""getOptimalForce(PointActuator self) -> double"""
        return _actuators.PointActuator_getOptimalForce(self)
    __swig_destroy__ = _actuators.delete_PointActuator

# Register PointActuator in _actuators:
_actuators.PointActuator_swigregister(PointActuator)
class TorqueActuator(opensim.simulation.ScalarActuator):
    r"""Proxy of C++ OpenSim::TorqueActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> TorqueActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.TorqueActuator_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(TorqueActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.TorqueActuator_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.TorqueActuator_getClassName()

    def clone(self):
        r"""clone(TorqueActuator self) -> TorqueActuator"""
        return _actuators.TorqueActuator_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(TorqueActuator self) -> std::string const &"""
        return _actuators.TorqueActuator_getConcreteClassName(self)

    def copyProperty_bodyA(self, source):
        r"""
        copyProperty_bodyA(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_bodyA(self, source)

    def append_bodyA(self, value):
        r"""
        append_bodyA(TorqueActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.TorqueActuator_append_bodyA(self, value)

    def constructProperty_bodyA(self, *args):
        r"""
        constructProperty_bodyA(TorqueActuator self)
        constructProperty_bodyA(TorqueActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.TorqueActuator_constructProperty_bodyA(self, *args)

    def get_bodyA(self, *args):
        r"""
        get_bodyA(TorqueActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_bodyA(TorqueActuator self) -> std::string const &
        """
        return _actuators.TorqueActuator_get_bodyA(self, *args)

    def upd_bodyA(self, *args):
        r"""
        upd_bodyA(TorqueActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_bodyA(TorqueActuator self) -> std::string &
        """
        return _actuators.TorqueActuator_upd_bodyA(self, *args)

    def set_bodyA(self, *args):
        r"""
        set_bodyA(TorqueActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_bodyA(TorqueActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.TorqueActuator_set_bodyA(self, *args)

    def copyProperty_bodyB(self, source):
        r"""
        copyProperty_bodyB(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_bodyB(self, source)

    def append_bodyB(self, value):
        r"""
        append_bodyB(TorqueActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.TorqueActuator_append_bodyB(self, value)

    def constructProperty_bodyB(self, *args):
        r"""
        constructProperty_bodyB(TorqueActuator self)
        constructProperty_bodyB(TorqueActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.TorqueActuator_constructProperty_bodyB(self, *args)

    def get_bodyB(self, *args):
        r"""
        get_bodyB(TorqueActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_bodyB(TorqueActuator self) -> std::string const &
        """
        return _actuators.TorqueActuator_get_bodyB(self, *args)

    def upd_bodyB(self, *args):
        r"""
        upd_bodyB(TorqueActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_bodyB(TorqueActuator self) -> std::string &
        """
        return _actuators.TorqueActuator_upd_bodyB(self, *args)

    def set_bodyB(self, *args):
        r"""
        set_bodyB(TorqueActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_bodyB(TorqueActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.TorqueActuator_set_bodyB(self, *args)

    def copyProperty_torque_is_global(self, source):
        r"""
        copyProperty_torque_is_global(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_torque_is_global(self, source)

    def append_torque_is_global(self, value):
        r"""
        append_torque_is_global(TorqueActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.TorqueActuator_append_torque_is_global(self, value)

    def constructProperty_torque_is_global(self, initValue):
        r"""
        constructProperty_torque_is_global(TorqueActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.TorqueActuator_constructProperty_torque_is_global(self, initValue)

    def get_torque_is_global(self, *args):
        r"""
        get_torque_is_global(TorqueActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_torque_is_global(TorqueActuator self) -> bool const &
        """
        return _actuators.TorqueActuator_get_torque_is_global(self, *args)

    def upd_torque_is_global(self, *args):
        r"""
        upd_torque_is_global(TorqueActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_torque_is_global(TorqueActuator self) -> bool &
        """
        return _actuators.TorqueActuator_upd_torque_is_global(self, *args)

    def set_torque_is_global(self, *args):
        r"""
        set_torque_is_global(TorqueActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_torque_is_global(TorqueActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.TorqueActuator_set_torque_is_global(self, *args)

    def copyProperty_axis(self, source):
        r"""
        copyProperty_axis(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_axis(self, source)

    def append_axis(self, value):
        r"""
        append_axis(TorqueActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.TorqueActuator_append_axis(self, value)

    def constructProperty_axis(self, initValue):
        r"""
        constructProperty_axis(TorqueActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.TorqueActuator_constructProperty_axis(self, initValue)

    def get_axis(self, *args):
        r"""
        get_axis(TorqueActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_axis(TorqueActuator self) -> Vec3
        """
        return _actuators.TorqueActuator_get_axis(self, *args)

    def upd_axis(self, *args):
        r"""
        upd_axis(TorqueActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_axis(TorqueActuator self) -> Vec3
        """
        return _actuators.TorqueActuator_upd_axis(self, *args)

    def set_axis(self, *args):
        r"""
        set_axis(TorqueActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_axis(TorqueActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.TorqueActuator_set_axis(self, *args)

    def copyProperty_optimal_force(self, source):
        r"""
        copyProperty_optimal_force(TorqueActuator self, TorqueActuator source)

        Parameters
        ----------
        source: OpenSim::TorqueActuator::Self const &

        """
        return _actuators.TorqueActuator_copyProperty_optimal_force(self, source)

    def append_optimal_force(self, value):
        r"""
        append_optimal_force(TorqueActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.TorqueActuator_append_optimal_force(self, value)

    def constructProperty_optimal_force(self, initValue):
        r"""
        constructProperty_optimal_force(TorqueActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.TorqueActuator_constructProperty_optimal_force(self, initValue)

    def get_optimal_force(self, *args):
        r"""
        get_optimal_force(TorqueActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(TorqueActuator self) -> double const &
        """
        return _actuators.TorqueActuator_get_optimal_force(self, *args)

    def upd_optimal_force(self, *args):
        r"""
        upd_optimal_force(TorqueActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_force(TorqueActuator self) -> double &
        """
        return _actuators.TorqueActuator_upd_optimal_force(self, *args)

    def set_optimal_force(self, *args):
        r"""
        set_optimal_force(TorqueActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_force(TorqueActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.TorqueActuator_set_optimal_force(self, *args)

    def __init__(self, *args):
        r"""
        __init__(TorqueActuator self) -> TorqueActuator
        __init__(TorqueActuator self, PhysicalFrame bodyA, PhysicalFrame bodyB, Vec3 axis, bool axisInGround=True) -> TorqueActuator

        Parameters
        ----------
        bodyA: OpenSim::PhysicalFrame const &
        bodyB: OpenSim::PhysicalFrame const &
        axis: SimTK::Vec3 const &
        axisInGround: bool

        """
        _actuators.TorqueActuator_swiginit(self, _actuators.new_TorqueActuator(*args))

    def setAxis(self, axis):
        r"""
        setAxis(TorqueActuator self, Vec3 axis)

        Parameters
        ----------
        axis: SimTK::Vec3 const &

        """
        return _actuators.TorqueActuator_setAxis(self, axis)

    def getAxis(self):
        r"""getAxis(TorqueActuator self) -> Vec3"""
        return _actuators.TorqueActuator_getAxis(self)

    def setTorqueIsGlobal(self, isGlobal):
        r"""
        setTorqueIsGlobal(TorqueActuator self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _actuators.TorqueActuator_setTorqueIsGlobal(self, isGlobal)

    def getTorqueIsGlobal(self):
        r"""getTorqueIsGlobal(TorqueActuator self) -> bool"""
        return _actuators.TorqueActuator_getTorqueIsGlobal(self)

    def setOptimalForce(self, optimalForce):
        r"""
        setOptimalForce(TorqueActuator self, double optimalForce)

        Parameters
        ----------
        optimalForce: double

        """
        return _actuators.TorqueActuator_setOptimalForce(self, optimalForce)

    def getOptimalForce(self):
        r"""getOptimalForce(TorqueActuator self) -> double"""
        return _actuators.TorqueActuator_getOptimalForce(self)

    def setBodyA(self, body):
        r"""
        setBodyA(TorqueActuator self, PhysicalFrame body)

        Parameters
        ----------
        body: OpenSim::PhysicalFrame const &

        """
        return _actuators.TorqueActuator_setBodyA(self, body)

    def setBodyB(self, body):
        r"""
        setBodyB(TorqueActuator self, PhysicalFrame body)

        Parameters
        ----------
        body: OpenSim::PhysicalFrame const &

        """
        return _actuators.TorqueActuator_setBodyB(self, body)

    def getBodyA(self):
        r"""getBodyA(TorqueActuator self) -> PhysicalFrame"""
        return _actuators.TorqueActuator_getBodyA(self)

    def getBodyB(self):
        r"""getBodyB(TorqueActuator self) -> PhysicalFrame"""
        return _actuators.TorqueActuator_getBodyB(self)
    __swig_destroy__ = _actuators.delete_TorqueActuator

# Register TorqueActuator in _actuators:
_actuators.TorqueActuator_swigregister(TorqueActuator)
class BodyActuator(opensim.simulation.Actuator):
    r"""Proxy of C++ OpenSim::BodyActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> BodyActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.BodyActuator_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(BodyActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.BodyActuator_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.BodyActuator_getClassName()

    def clone(self):
        r"""clone(BodyActuator self) -> BodyActuator"""
        return _actuators.BodyActuator_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(BodyActuator self) -> std::string const &"""
        return _actuators.BodyActuator_getConcreteClassName(self)

    def copyProperty_point(self, source):
        r"""
        copyProperty_point(BodyActuator self, BodyActuator source)

        Parameters
        ----------
        source: OpenSim::BodyActuator::Self const &

        """
        return _actuators.BodyActuator_copyProperty_point(self, source)

    def append_point(self, value):
        r"""
        append_point(BodyActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.BodyActuator_append_point(self, value)

    def constructProperty_point(self, initValue):
        r"""
        constructProperty_point(BodyActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.BodyActuator_constructProperty_point(self, initValue)

    def get_point(self, *args):
        r"""
        get_point(BodyActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_point(BodyActuator self) -> Vec3
        """
        return _actuators.BodyActuator_get_point(self, *args)

    def upd_point(self, *args):
        r"""
        upd_point(BodyActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_point(BodyActuator self) -> Vec3
        """
        return _actuators.BodyActuator_upd_point(self, *args)

    def set_point(self, *args):
        r"""
        set_point(BodyActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_point(BodyActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.BodyActuator_set_point(self, *args)

    def copyProperty_point_is_global(self, source):
        r"""
        copyProperty_point_is_global(BodyActuator self, BodyActuator source)

        Parameters
        ----------
        source: OpenSim::BodyActuator::Self const &

        """
        return _actuators.BodyActuator_copyProperty_point_is_global(self, source)

    def append_point_is_global(self, value):
        r"""
        append_point_is_global(BodyActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.BodyActuator_append_point_is_global(self, value)

    def constructProperty_point_is_global(self, initValue):
        r"""
        constructProperty_point_is_global(BodyActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.BodyActuator_constructProperty_point_is_global(self, initValue)

    def get_point_is_global(self, *args):
        r"""
        get_point_is_global(BodyActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_point_is_global(BodyActuator self) -> bool const &
        """
        return _actuators.BodyActuator_get_point_is_global(self, *args)

    def upd_point_is_global(self, *args):
        r"""
        upd_point_is_global(BodyActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_point_is_global(BodyActuator self) -> bool &
        """
        return _actuators.BodyActuator_upd_point_is_global(self, *args)

    def set_point_is_global(self, *args):
        r"""
        set_point_is_global(BodyActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_point_is_global(BodyActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.BodyActuator_set_point_is_global(self, *args)

    def copyProperty_spatial_force_is_global(self, source):
        r"""
        copyProperty_spatial_force_is_global(BodyActuator self, BodyActuator source)

        Parameters
        ----------
        source: OpenSim::BodyActuator::Self const &

        """
        return _actuators.BodyActuator_copyProperty_spatial_force_is_global(self, source)

    def append_spatial_force_is_global(self, value):
        r"""
        append_spatial_force_is_global(BodyActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.BodyActuator_append_spatial_force_is_global(self, value)

    def constructProperty_spatial_force_is_global(self, initValue):
        r"""
        constructProperty_spatial_force_is_global(BodyActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.BodyActuator_constructProperty_spatial_force_is_global(self, initValue)

    def get_spatial_force_is_global(self, *args):
        r"""
        get_spatial_force_is_global(BodyActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_spatial_force_is_global(BodyActuator self) -> bool const &
        """
        return _actuators.BodyActuator_get_spatial_force_is_global(self, *args)

    def upd_spatial_force_is_global(self, *args):
        r"""
        upd_spatial_force_is_global(BodyActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_spatial_force_is_global(BodyActuator self) -> bool &
        """
        return _actuators.BodyActuator_upd_spatial_force_is_global(self, *args)

    def set_spatial_force_is_global(self, *args):
        r"""
        set_spatial_force_is_global(BodyActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_spatial_force_is_global(BodyActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.BodyActuator_set_spatial_force_is_global(self, *args)
    PropertyIndex_socket_body = property(_actuators.BodyActuator_PropertyIndex_socket_body_get, _actuators.BodyActuator_PropertyIndex_socket_body_set, doc=r"""PropertyIndex_socket_body : OpenSim::PropertyIndex""")

    def connectSocket_body(self, object):
        r"""
        connectSocket_body(BodyActuator self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        """
        return _actuators.BodyActuator_connectSocket_body(self, object)

    def __init__(self, *args):
        r"""
        __init__(BodyActuator self) -> BodyActuator
        __init__(BodyActuator self, Body body, Vec3 point=SimTK::Vec3(0), bool pointIsGlobal=False, bool spatialForceIsGlobal=True) -> BodyActuator

        Parameters
        ----------
        body: OpenSim::Body const &
        point: SimTK::Vec3 const &
        pointIsGlobal: bool
        spatialForceIsGlobal: bool

        """
        _actuators.BodyActuator_swiginit(self, _actuators.new_BodyActuator(*args))

    def setPoint(self, point):
        r"""
        setPoint(BodyActuator self, Vec3 point)

        Parameters
        ----------
        point: SimTK::Vec3 &

        """
        return _actuators.BodyActuator_setPoint(self, point)

    def getPoint(self):
        r"""getPoint(BodyActuator self) -> Vec3"""
        return _actuators.BodyActuator_getPoint(self)

    def setPointForceIsGlobal(self, isGlobal):
        r"""
        setPointForceIsGlobal(BodyActuator self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _actuators.BodyActuator_setPointForceIsGlobal(self, isGlobal)

    def getPointIsGlobal(self):
        r"""getPointIsGlobal(BodyActuator self) -> bool"""
        return _actuators.BodyActuator_getPointIsGlobal(self)

    def setSpatialForceIsGlobal(self, isGlobal):
        r"""
        setSpatialForceIsGlobal(BodyActuator self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _actuators.BodyActuator_setSpatialForceIsGlobal(self, isGlobal)

    def getSpatialForceIsGlobal(self):
        r"""getSpatialForceIsGlobal(BodyActuator self) -> bool"""
        return _actuators.BodyActuator_getSpatialForceIsGlobal(self)

    def setBody(self, body):
        r"""
        setBody(BodyActuator self, Body body)

        Parameters
        ----------
        body: OpenSim::Body const &

        """
        return _actuators.BodyActuator_setBody(self, body)

    def getBody(self):
        r"""getBody(BodyActuator self) -> Body"""
        return _actuators.BodyActuator_getBody(self)

    def setBodyName(self, name):
        r"""
        setBodyName(BodyActuator self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _actuators.BodyActuator_setBodyName(self, name)

    def getBodyName(self):
        r"""getBodyName(BodyActuator self) -> std::string const &"""
        return _actuators.BodyActuator_getBodyName(self)
    __swig_destroy__ = _actuators.delete_BodyActuator

# Register BodyActuator in _actuators:
_actuators.BodyActuator_swigregister(BodyActuator)
class PointToPointActuator(opensim.simulation.ScalarActuator):
    r"""Proxy of C++ OpenSim::PointToPointActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> PointToPointActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.PointToPointActuator_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(PointToPointActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.PointToPointActuator_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.PointToPointActuator_getClassName()

    def clone(self):
        r"""clone(PointToPointActuator self) -> PointToPointActuator"""
        return _actuators.PointToPointActuator_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(PointToPointActuator self) -> std::string const &"""
        return _actuators.PointToPointActuator_getConcreteClassName(self)

    def copyProperty_bodyA(self, source):
        r"""
        copyProperty_bodyA(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_bodyA(self, source)

    def append_bodyA(self, value):
        r"""
        append_bodyA(PointToPointActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointToPointActuator_append_bodyA(self, value)

    def constructProperty_bodyA(self, *args):
        r"""
        constructProperty_bodyA(PointToPointActuator self)
        constructProperty_bodyA(PointToPointActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.PointToPointActuator_constructProperty_bodyA(self, *args)

    def get_bodyA(self, *args):
        r"""
        get_bodyA(PointToPointActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_bodyA(PointToPointActuator self) -> std::string const &
        """
        return _actuators.PointToPointActuator_get_bodyA(self, *args)

    def upd_bodyA(self, *args):
        r"""
        upd_bodyA(PointToPointActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_bodyA(PointToPointActuator self) -> std::string &
        """
        return _actuators.PointToPointActuator_upd_bodyA(self, *args)

    def set_bodyA(self, *args):
        r"""
        set_bodyA(PointToPointActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_bodyA(PointToPointActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointToPointActuator_set_bodyA(self, *args)

    def copyProperty_bodyB(self, source):
        r"""
        copyProperty_bodyB(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_bodyB(self, source)

    def append_bodyB(self, value):
        r"""
        append_bodyB(PointToPointActuator self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointToPointActuator_append_bodyB(self, value)

    def constructProperty_bodyB(self, *args):
        r"""
        constructProperty_bodyB(PointToPointActuator self)
        constructProperty_bodyB(PointToPointActuator self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.PointToPointActuator_constructProperty_bodyB(self, *args)

    def get_bodyB(self, *args):
        r"""
        get_bodyB(PointToPointActuator self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_bodyB(PointToPointActuator self) -> std::string const &
        """
        return _actuators.PointToPointActuator_get_bodyB(self, *args)

    def upd_bodyB(self, *args):
        r"""
        upd_bodyB(PointToPointActuator self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_bodyB(PointToPointActuator self) -> std::string &
        """
        return _actuators.PointToPointActuator_upd_bodyB(self, *args)

    def set_bodyB(self, *args):
        r"""
        set_bodyB(PointToPointActuator self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_bodyB(PointToPointActuator self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PointToPointActuator_set_bodyB(self, *args)

    def copyProperty_points_are_global(self, source):
        r"""
        copyProperty_points_are_global(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_points_are_global(self, source)

    def append_points_are_global(self, value):
        r"""
        append_points_are_global(PointToPointActuator self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointToPointActuator_append_points_are_global(self, value)

    def constructProperty_points_are_global(self, initValue):
        r"""
        constructProperty_points_are_global(PointToPointActuator self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.PointToPointActuator_constructProperty_points_are_global(self, initValue)

    def get_points_are_global(self, *args):
        r"""
        get_points_are_global(PointToPointActuator self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_points_are_global(PointToPointActuator self) -> bool const &
        """
        return _actuators.PointToPointActuator_get_points_are_global(self, *args)

    def upd_points_are_global(self, *args):
        r"""
        upd_points_are_global(PointToPointActuator self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_points_are_global(PointToPointActuator self) -> bool &
        """
        return _actuators.PointToPointActuator_upd_points_are_global(self, *args)

    def set_points_are_global(self, *args):
        r"""
        set_points_are_global(PointToPointActuator self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_points_are_global(PointToPointActuator self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.PointToPointActuator_set_points_are_global(self, *args)

    def copyProperty_pointA(self, source):
        r"""
        copyProperty_pointA(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_pointA(self, source)

    def append_pointA(self, value):
        r"""
        append_pointA(PointToPointActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_append_pointA(self, value)

    def constructProperty_pointA(self, initValue):
        r"""
        constructProperty_pointA(PointToPointActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_constructProperty_pointA(self, initValue)

    def get_pointA(self, *args):
        r"""
        get_pointA(PointToPointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_pointA(PointToPointActuator self) -> Vec3
        """
        return _actuators.PointToPointActuator_get_pointA(self, *args)

    def upd_pointA(self, *args):
        r"""
        upd_pointA(PointToPointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_pointA(PointToPointActuator self) -> Vec3
        """
        return _actuators.PointToPointActuator_upd_pointA(self, *args)

    def set_pointA(self, *args):
        r"""
        set_pointA(PointToPointActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_pointA(PointToPointActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_set_pointA(self, *args)

    def copyProperty_pointB(self, source):
        r"""
        copyProperty_pointB(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_pointB(self, source)

    def append_pointB(self, value):
        r"""
        append_pointB(PointToPointActuator self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_append_pointB(self, value)

    def constructProperty_pointB(self, initValue):
        r"""
        constructProperty_pointB(PointToPointActuator self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_constructProperty_pointB(self, initValue)

    def get_pointB(self, *args):
        r"""
        get_pointB(PointToPointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_pointB(PointToPointActuator self) -> Vec3
        """
        return _actuators.PointToPointActuator_get_pointB(self, *args)

    def upd_pointB(self, *args):
        r"""
        upd_pointB(PointToPointActuator self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_pointB(PointToPointActuator self) -> Vec3
        """
        return _actuators.PointToPointActuator_upd_pointB(self, *args)

    def set_pointB(self, *args):
        r"""
        set_pointB(PointToPointActuator self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_pointB(PointToPointActuator self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_set_pointB(self, *args)

    def copyProperty_optimal_force(self, source):
        r"""
        copyProperty_optimal_force(PointToPointActuator self, PointToPointActuator source)

        Parameters
        ----------
        source: OpenSim::PointToPointActuator::Self const &

        """
        return _actuators.PointToPointActuator_copyProperty_optimal_force(self, source)

    def append_optimal_force(self, value):
        r"""
        append_optimal_force(PointToPointActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.PointToPointActuator_append_optimal_force(self, value)

    def constructProperty_optimal_force(self, initValue):
        r"""
        constructProperty_optimal_force(PointToPointActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.PointToPointActuator_constructProperty_optimal_force(self, initValue)

    def get_optimal_force(self, *args):
        r"""
        get_optimal_force(PointToPointActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_optimal_force(PointToPointActuator self) -> double const &
        """
        return _actuators.PointToPointActuator_get_optimal_force(self, *args)

    def upd_optimal_force(self, *args):
        r"""
        upd_optimal_force(PointToPointActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_optimal_force(PointToPointActuator self) -> double &
        """
        return _actuators.PointToPointActuator_upd_optimal_force(self, *args)

    def set_optimal_force(self, *args):
        r"""
        set_optimal_force(PointToPointActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_optimal_force(PointToPointActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.PointToPointActuator_set_optimal_force(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PointToPointActuator self) -> PointToPointActuator
        __init__(PointToPointActuator self, std::string const & bodyNameA, std::string const & bodyNameB) -> PointToPointActuator

        Parameters
        ----------
        bodyNameA: std::string const &
        bodyNameB: std::string const &

        """
        _actuators.PointToPointActuator_swiginit(self, _actuators.new_PointToPointActuator(*args))

    def setPointA(self, pointAPos):
        r"""
        setPointA(PointToPointActuator self, Vec3 pointAPos)

        Parameters
        ----------
        pointAPos: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_setPointA(self, pointAPos)

    def getPointA(self):
        r"""getPointA(PointToPointActuator self) -> Vec3"""
        return _actuators.PointToPointActuator_getPointA(self)

    def setPointB(self, pointBPos):
        r"""
        setPointB(PointToPointActuator self, Vec3 pointBPos)

        Parameters
        ----------
        pointBPos: SimTK::Vec3 const &

        """
        return _actuators.PointToPointActuator_setPointB(self, pointBPos)

    def getPointB(self):
        r"""getPointB(PointToPointActuator self) -> Vec3"""
        return _actuators.PointToPointActuator_getPointB(self)

    def setPointsAreGlobal(self, isGlobal):
        r"""
        setPointsAreGlobal(PointToPointActuator self, bool isGlobal)

        Parameters
        ----------
        isGlobal: bool

        """
        return _actuators.PointToPointActuator_setPointsAreGlobal(self, isGlobal)

    def getPointsAreGlobal(self):
        r"""getPointsAreGlobal(PointToPointActuator self) -> bool"""
        return _actuators.PointToPointActuator_getPointsAreGlobal(self)

    def setOptimalForce(self, optimalForce):
        r"""
        setOptimalForce(PointToPointActuator self, double optimalForce)

        Parameters
        ----------
        optimalForce: double

        """
        return _actuators.PointToPointActuator_setOptimalForce(self, optimalForce)

    def getOptimalForce(self):
        r"""getOptimalForce(PointToPointActuator self) -> double"""
        return _actuators.PointToPointActuator_getOptimalForce(self)
    __swig_destroy__ = _actuators.delete_PointToPointActuator

# Register PointToPointActuator in _actuators:
_actuators.PointToPointActuator_swigregister(PointToPointActuator)
class ClutchedPathSpring(opensim.simulation.PathActuator):
    r"""Proxy of C++ OpenSim::ClutchedPathSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ClutchedPathSpring

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ClutchedPathSpring_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ClutchedPathSpring self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ClutchedPathSpring_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ClutchedPathSpring_getClassName()

    def clone(self):
        r"""clone(ClutchedPathSpring self) -> ClutchedPathSpring"""
        return _actuators.ClutchedPathSpring_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ClutchedPathSpring self) -> std::string const &"""
        return _actuators.ClutchedPathSpring_getConcreteClassName(self)

    def copyProperty_stiffness(self, source):
        r"""
        copyProperty_stiffness(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters
        ----------
        source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _actuators.ClutchedPathSpring_copyProperty_stiffness(self, source)

    def append_stiffness(self, value):
        r"""
        append_stiffness(ClutchedPathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_append_stiffness(self, value)

    def constructProperty_stiffness(self, initValue):
        r"""
        constructProperty_stiffness(ClutchedPathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ClutchedPathSpring_constructProperty_stiffness(self, initValue)

    def get_stiffness(self, *args):
        r"""
        get_stiffness(ClutchedPathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness(ClutchedPathSpring self) -> double const &
        """
        return _actuators.ClutchedPathSpring_get_stiffness(self, *args)

    def upd_stiffness(self, *args):
        r"""
        upd_stiffness(ClutchedPathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness(ClutchedPathSpring self) -> double &
        """
        return _actuators.ClutchedPathSpring_upd_stiffness(self, *args)

    def set_stiffness(self, *args):
        r"""
        set_stiffness(ClutchedPathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness(ClutchedPathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_set_stiffness(self, *args)

    def copyProperty_dissipation(self, source):
        r"""
        copyProperty_dissipation(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters
        ----------
        source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _actuators.ClutchedPathSpring_copyProperty_dissipation(self, source)

    def append_dissipation(self, value):
        r"""
        append_dissipation(ClutchedPathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_append_dissipation(self, value)

    def constructProperty_dissipation(self, initValue):
        r"""
        constructProperty_dissipation(ClutchedPathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ClutchedPathSpring_constructProperty_dissipation(self, initValue)

    def get_dissipation(self, *args):
        r"""
        get_dissipation(ClutchedPathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_dissipation(ClutchedPathSpring self) -> double const &
        """
        return _actuators.ClutchedPathSpring_get_dissipation(self, *args)

    def upd_dissipation(self, *args):
        r"""
        upd_dissipation(ClutchedPathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_dissipation(ClutchedPathSpring self) -> double &
        """
        return _actuators.ClutchedPathSpring_upd_dissipation(self, *args)

    def set_dissipation(self, *args):
        r"""
        set_dissipation(ClutchedPathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_dissipation(ClutchedPathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_set_dissipation(self, *args)

    def copyProperty_relaxation_time_constant(self, source):
        r"""
        copyProperty_relaxation_time_constant(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters
        ----------
        source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _actuators.ClutchedPathSpring_copyProperty_relaxation_time_constant(self, source)

    def append_relaxation_time_constant(self, value):
        r"""
        append_relaxation_time_constant(ClutchedPathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_append_relaxation_time_constant(self, value)

    def constructProperty_relaxation_time_constant(self, initValue):
        r"""
        constructProperty_relaxation_time_constant(ClutchedPathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ClutchedPathSpring_constructProperty_relaxation_time_constant(self, initValue)

    def get_relaxation_time_constant(self, *args):
        r"""
        get_relaxation_time_constant(ClutchedPathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_relaxation_time_constant(ClutchedPathSpring self) -> double const &
        """
        return _actuators.ClutchedPathSpring_get_relaxation_time_constant(self, *args)

    def upd_relaxation_time_constant(self, *args):
        r"""
        upd_relaxation_time_constant(ClutchedPathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_relaxation_time_constant(ClutchedPathSpring self) -> double &
        """
        return _actuators.ClutchedPathSpring_upd_relaxation_time_constant(self, *args)

    def set_relaxation_time_constant(self, *args):
        r"""
        set_relaxation_time_constant(ClutchedPathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_relaxation_time_constant(ClutchedPathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_set_relaxation_time_constant(self, *args)

    def copyProperty_initial_stretch(self, source):
        r"""
        copyProperty_initial_stretch(ClutchedPathSpring self, ClutchedPathSpring source)

        Parameters
        ----------
        source: OpenSim::ClutchedPathSpring::Self const &

        """
        return _actuators.ClutchedPathSpring_copyProperty_initial_stretch(self, source)

    def append_initial_stretch(self, value):
        r"""
        append_initial_stretch(ClutchedPathSpring self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_append_initial_stretch(self, value)

    def constructProperty_initial_stretch(self, initValue):
        r"""
        constructProperty_initial_stretch(ClutchedPathSpring self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.ClutchedPathSpring_constructProperty_initial_stretch(self, initValue)

    def get_initial_stretch(self, *args):
        r"""
        get_initial_stretch(ClutchedPathSpring self, int i) -> double const

        Parameters
        ----------
        i: int

        get_initial_stretch(ClutchedPathSpring self) -> double const &
        """
        return _actuators.ClutchedPathSpring_get_initial_stretch(self, *args)

    def upd_initial_stretch(self, *args):
        r"""
        upd_initial_stretch(ClutchedPathSpring self, int i) -> double

        Parameters
        ----------
        i: int

        upd_initial_stretch(ClutchedPathSpring self) -> double &
        """
        return _actuators.ClutchedPathSpring_upd_initial_stretch(self, *args)

    def set_initial_stretch(self, *args):
        r"""
        set_initial_stretch(ClutchedPathSpring self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_initial_stretch(ClutchedPathSpring self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.ClutchedPathSpring_set_initial_stretch(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ClutchedPathSpring self) -> ClutchedPathSpring
        __init__(ClutchedPathSpring self, std::string const & name, double stiffness, double dissipation, double relaxationTau, double stretch0=0.0) -> ClutchedPathSpring

        Parameters
        ----------
        name: std::string const &
        stiffness: double
        dissipation: double
        relaxationTau: double
        stretch0: double

        """
        _actuators.ClutchedPathSpring_swiginit(self, _actuators.new_ClutchedPathSpring(*args))

    def getStiffness(self):
        r"""getStiffness(ClutchedPathSpring self) -> double"""
        return _actuators.ClutchedPathSpring_getStiffness(self)

    def setStiffness(self, stiffness):
        r"""
        setStiffness(ClutchedPathSpring self, double stiffness)

        Parameters
        ----------
        stiffness: double

        """
        return _actuators.ClutchedPathSpring_setStiffness(self, stiffness)

    def getDissipation(self):
        r"""getDissipation(ClutchedPathSpring self) -> double"""
        return _actuators.ClutchedPathSpring_getDissipation(self)

    def setDissipation(self, dissipation):
        r"""
        setDissipation(ClutchedPathSpring self, double dissipation)

        Parameters
        ----------
        dissipation: double

        """
        return _actuators.ClutchedPathSpring_setDissipation(self, dissipation)

    def getInitialStretch(self):
        r"""getInitialStretch(ClutchedPathSpring self) -> double"""
        return _actuators.ClutchedPathSpring_getInitialStretch(self)

    def setInitialStretch(self, stretch0):
        r"""
        setInitialStretch(ClutchedPathSpring self, double stretch0)

        Parameters
        ----------
        stretch0: double

        """
        return _actuators.ClutchedPathSpring_setInitialStretch(self, stretch0)

    def getStretch(self, s):
        r"""
        getStretch(ClutchedPathSpring self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.ClutchedPathSpring_getStretch(self, s)

    def getTension(self, s):
        r"""
        getTension(ClutchedPathSpring self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.ClutchedPathSpring_getTension(self, s)
    __swig_destroy__ = _actuators.delete_ClutchedPathSpring

# Register ClutchedPathSpring in _actuators:
_actuators.ClutchedPathSpring_swigregister(ClutchedPathSpring)
class SpringGeneralizedForce(opensim.simulation.ForceProducer):
    r"""Proxy of C++ OpenSim::SpringGeneralizedForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SpringGeneralizedForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.SpringGeneralizedForce_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SpringGeneralizedForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.SpringGeneralizedForce_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.SpringGeneralizedForce_getClassName()

    def clone(self):
        r"""clone(SpringGeneralizedForce self) -> SpringGeneralizedForce"""
        return _actuators.SpringGeneralizedForce_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SpringGeneralizedForce self) -> std::string const &"""
        return _actuators.SpringGeneralizedForce_getConcreteClassName(self)

    def copyProperty_coordinate(self, source):
        r"""
        copyProperty_coordinate(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters
        ----------
        source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _actuators.SpringGeneralizedForce_copyProperty_coordinate(self, source)

    def append_coordinate(self, value):
        r"""
        append_coordinate(SpringGeneralizedForce self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.SpringGeneralizedForce_append_coordinate(self, value)

    def constructProperty_coordinate(self, *args):
        r"""
        constructProperty_coordinate(SpringGeneralizedForce self)
        constructProperty_coordinate(SpringGeneralizedForce self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.SpringGeneralizedForce_constructProperty_coordinate(self, *args)

    def get_coordinate(self, *args):
        r"""
        get_coordinate(SpringGeneralizedForce self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate(SpringGeneralizedForce self) -> std::string const &
        """
        return _actuators.SpringGeneralizedForce_get_coordinate(self, *args)

    def upd_coordinate(self, *args):
        r"""
        upd_coordinate(SpringGeneralizedForce self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate(SpringGeneralizedForce self) -> std::string &
        """
        return _actuators.SpringGeneralizedForce_upd_coordinate(self, *args)

    def set_coordinate(self, *args):
        r"""
        set_coordinate(SpringGeneralizedForce self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate(SpringGeneralizedForce self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.SpringGeneralizedForce_set_coordinate(self, *args)

    def copyProperty_stiffness(self, source):
        r"""
        copyProperty_stiffness(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters
        ----------
        source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _actuators.SpringGeneralizedForce_copyProperty_stiffness(self, source)

    def append_stiffness(self, value):
        r"""
        append_stiffness(SpringGeneralizedForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_append_stiffness(self, value)

    def constructProperty_stiffness(self, initValue):
        r"""
        constructProperty_stiffness(SpringGeneralizedForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.SpringGeneralizedForce_constructProperty_stiffness(self, initValue)

    def get_stiffness(self, *args):
        r"""
        get_stiffness(SpringGeneralizedForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_stiffness(SpringGeneralizedForce self) -> double const &
        """
        return _actuators.SpringGeneralizedForce_get_stiffness(self, *args)

    def upd_stiffness(self, *args):
        r"""
        upd_stiffness(SpringGeneralizedForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_stiffness(SpringGeneralizedForce self) -> double &
        """
        return _actuators.SpringGeneralizedForce_upd_stiffness(self, *args)

    def set_stiffness(self, *args):
        r"""
        set_stiffness(SpringGeneralizedForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_stiffness(SpringGeneralizedForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_set_stiffness(self, *args)

    def copyProperty_rest_length(self, source):
        r"""
        copyProperty_rest_length(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters
        ----------
        source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _actuators.SpringGeneralizedForce_copyProperty_rest_length(self, source)

    def append_rest_length(self, value):
        r"""
        append_rest_length(SpringGeneralizedForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_append_rest_length(self, value)

    def constructProperty_rest_length(self, initValue):
        r"""
        constructProperty_rest_length(SpringGeneralizedForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.SpringGeneralizedForce_constructProperty_rest_length(self, initValue)

    def get_rest_length(self, *args):
        r"""
        get_rest_length(SpringGeneralizedForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_rest_length(SpringGeneralizedForce self) -> double const &
        """
        return _actuators.SpringGeneralizedForce_get_rest_length(self, *args)

    def upd_rest_length(self, *args):
        r"""
        upd_rest_length(SpringGeneralizedForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_rest_length(SpringGeneralizedForce self) -> double &
        """
        return _actuators.SpringGeneralizedForce_upd_rest_length(self, *args)

    def set_rest_length(self, *args):
        r"""
        set_rest_length(SpringGeneralizedForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_rest_length(SpringGeneralizedForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_set_rest_length(self, *args)

    def copyProperty_viscosity(self, source):
        r"""
        copyProperty_viscosity(SpringGeneralizedForce self, SpringGeneralizedForce source)

        Parameters
        ----------
        source: OpenSim::SpringGeneralizedForce::Self const &

        """
        return _actuators.SpringGeneralizedForce_copyProperty_viscosity(self, source)

    def append_viscosity(self, value):
        r"""
        append_viscosity(SpringGeneralizedForce self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_append_viscosity(self, value)

    def constructProperty_viscosity(self, initValue):
        r"""
        constructProperty_viscosity(SpringGeneralizedForce self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.SpringGeneralizedForce_constructProperty_viscosity(self, initValue)

    def get_viscosity(self, *args):
        r"""
        get_viscosity(SpringGeneralizedForce self, int i) -> double const

        Parameters
        ----------
        i: int

        get_viscosity(SpringGeneralizedForce self) -> double const &
        """
        return _actuators.SpringGeneralizedForce_get_viscosity(self, *args)

    def upd_viscosity(self, *args):
        r"""
        upd_viscosity(SpringGeneralizedForce self, int i) -> double

        Parameters
        ----------
        i: int

        upd_viscosity(SpringGeneralizedForce self) -> double &
        """
        return _actuators.SpringGeneralizedForce_upd_viscosity(self, *args)

    def set_viscosity(self, *args):
        r"""
        set_viscosity(SpringGeneralizedForce self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_viscosity(SpringGeneralizedForce self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.SpringGeneralizedForce_set_viscosity(self, *args)

    def __init__(self, *args):
        r"""
        __init__(SpringGeneralizedForce self, std::string const & coordinateName="") -> SpringGeneralizedForce

        Parameters
        ----------
        coordinateName: std::string const &

        """
        _actuators.SpringGeneralizedForce_swiginit(self, _actuators.new_SpringGeneralizedForce(*args))

    def setStiffness(self, aStiffness):
        r"""
        setStiffness(SpringGeneralizedForce self, double aStiffness)

        Parameters
        ----------
        aStiffness: double

        """
        return _actuators.SpringGeneralizedForce_setStiffness(self, aStiffness)

    def getStiffness(self):
        r"""getStiffness(SpringGeneralizedForce self) -> double"""
        return _actuators.SpringGeneralizedForce_getStiffness(self)

    def setRestLength(self, aRestLength):
        r"""
        setRestLength(SpringGeneralizedForce self, double aRestLength)

        Parameters
        ----------
        aRestLength: double

        """
        return _actuators.SpringGeneralizedForce_setRestLength(self, aRestLength)

    def getRestLength(self):
        r"""getRestLength(SpringGeneralizedForce self) -> double"""
        return _actuators.SpringGeneralizedForce_getRestLength(self)

    def setViscosity(self, aViscosity):
        r"""
        setViscosity(SpringGeneralizedForce self, double aViscosity)

        Parameters
        ----------
        aViscosity: double

        """
        return _actuators.SpringGeneralizedForce_setViscosity(self, aViscosity)

    def getViscosity(self):
        r"""getViscosity(SpringGeneralizedForce self) -> double"""
        return _actuators.SpringGeneralizedForce_getViscosity(self)

    def getRecordLabels(self):
        r"""getRecordLabels(SpringGeneralizedForce self) -> ArrayStr"""
        return _actuators.SpringGeneralizedForce_getRecordLabels(self)

    def getRecordValues(self, state):
        r"""
        getRecordValues(SpringGeneralizedForce self, State state) -> ArrayDouble

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _actuators.SpringGeneralizedForce_getRecordValues(self, state)
    __swig_destroy__ = _actuators.delete_SpringGeneralizedForce

# Register SpringGeneralizedForce in _actuators:
_actuators.SpringGeneralizedForce_swigregister(SpringGeneralizedForce)
class RigidTendonMuscle(opensim.simulation.Muscle):
    r"""Proxy of C++ OpenSim::RigidTendonMuscle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> RigidTendonMuscle

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.RigidTendonMuscle_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(RigidTendonMuscle self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.RigidTendonMuscle_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.RigidTendonMuscle_getClassName()

    def clone(self):
        r"""clone(RigidTendonMuscle self) -> RigidTendonMuscle"""
        return _actuators.RigidTendonMuscle_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(RigidTendonMuscle self) -> std::string const &"""
        return _actuators.RigidTendonMuscle_getConcreteClassName(self)

    def copyProperty_active_force_length_curve(self, source):
        r"""
        copyProperty_active_force_length_curve(RigidTendonMuscle self, RigidTendonMuscle source)

        Parameters
        ----------
        source: OpenSim::RigidTendonMuscle::Self const &

        """
        return _actuators.RigidTendonMuscle_copyProperty_active_force_length_curve(self, source)

    def append_active_force_length_curve(self, value):
        r"""
        append_active_force_length_curve(RigidTendonMuscle self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_append_active_force_length_curve(self, value)

    def constructProperty_active_force_length_curve(self, initValue):
        r"""
        constructProperty_active_force_length_curve(RigidTendonMuscle self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_constructProperty_active_force_length_curve(self, initValue)

    def get_active_force_length_curve(self, *args):
        r"""
        get_active_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        get_active_force_length_curve(RigidTendonMuscle self) -> Function
        """
        return _actuators.RigidTendonMuscle_get_active_force_length_curve(self, *args)

    def upd_active_force_length_curve(self, *args):
        r"""
        upd_active_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_active_force_length_curve(RigidTendonMuscle self) -> Function
        """
        return _actuators.RigidTendonMuscle_upd_active_force_length_curve(self, *args)

    def set_active_force_length_curve(self, *args):
        r"""
        set_active_force_length_curve(RigidTendonMuscle self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_active_force_length_curve(RigidTendonMuscle self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_set_active_force_length_curve(self, *args)

    def copyProperty_passive_force_length_curve(self, source):
        r"""
        copyProperty_passive_force_length_curve(RigidTendonMuscle self, RigidTendonMuscle source)

        Parameters
        ----------
        source: OpenSim::RigidTendonMuscle::Self const &

        """
        return _actuators.RigidTendonMuscle_copyProperty_passive_force_length_curve(self, source)

    def append_passive_force_length_curve(self, value):
        r"""
        append_passive_force_length_curve(RigidTendonMuscle self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_append_passive_force_length_curve(self, value)

    def constructProperty_passive_force_length_curve(self, initValue):
        r"""
        constructProperty_passive_force_length_curve(RigidTendonMuscle self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_constructProperty_passive_force_length_curve(self, initValue)

    def get_passive_force_length_curve(self, *args):
        r"""
        get_passive_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        get_passive_force_length_curve(RigidTendonMuscle self) -> Function
        """
        return _actuators.RigidTendonMuscle_get_passive_force_length_curve(self, *args)

    def upd_passive_force_length_curve(self, *args):
        r"""
        upd_passive_force_length_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_passive_force_length_curve(RigidTendonMuscle self) -> Function
        """
        return _actuators.RigidTendonMuscle_upd_passive_force_length_curve(self, *args)

    def set_passive_force_length_curve(self, *args):
        r"""
        set_passive_force_length_curve(RigidTendonMuscle self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_passive_force_length_curve(RigidTendonMuscle self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_set_passive_force_length_curve(self, *args)

    def copyProperty_force_velocity_curve(self, source):
        r"""
        copyProperty_force_velocity_curve(RigidTendonMuscle self, RigidTendonMuscle source)

        Parameters
        ----------
        source: OpenSim::RigidTendonMuscle::Self const &

        """
        return _actuators.RigidTendonMuscle_copyProperty_force_velocity_curve(self, source)

    def append_force_velocity_curve(self, value):
        r"""
        append_force_velocity_curve(RigidTendonMuscle self, Function value) -> int

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_append_force_velocity_curve(self, value)

    def constructProperty_force_velocity_curve(self, initValue):
        r"""
        constructProperty_force_velocity_curve(RigidTendonMuscle self, Function initValue)

        Parameters
        ----------
        initValue: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_constructProperty_force_velocity_curve(self, initValue)

    def get_force_velocity_curve(self, *args):
        r"""
        get_force_velocity_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        get_force_velocity_curve(RigidTendonMuscle self) -> Function
        """
        return _actuators.RigidTendonMuscle_get_force_velocity_curve(self, *args)

    def upd_force_velocity_curve(self, *args):
        r"""
        upd_force_velocity_curve(RigidTendonMuscle self, int i) -> Function

        Parameters
        ----------
        i: int

        upd_force_velocity_curve(RigidTendonMuscle self) -> Function
        """
        return _actuators.RigidTendonMuscle_upd_force_velocity_curve(self, *args)

    def set_force_velocity_curve(self, *args):
        r"""
        set_force_velocity_curve(RigidTendonMuscle self, int i, Function value)

        Parameters
        ----------
        i: int
        value: OpenSim::Function const &

        set_force_velocity_curve(RigidTendonMuscle self, Function value)

        Parameters
        ----------
        value: OpenSim::Function const &

        """
        return _actuators.RigidTendonMuscle_set_force_velocity_curve(self, *args)

    def __init__(self, *args):
        r"""
        __init__(RigidTendonMuscle self) -> RigidTendonMuscle
        __init__(RigidTendonMuscle self, std::string const & name, double maxIsometricForce, double optimalFiberLength, double tendonSlackLength, double pennationAngle) -> RigidTendonMuscle

        Parameters
        ----------
        name: std::string const &
        maxIsometricForce: double
        optimalFiberLength: double
        tendonSlackLength: double
        pennationAngle: double

        """
        _actuators.RigidTendonMuscle_swiginit(self, _actuators.new_RigidTendonMuscle(*args))

    def setActivation(self, s, activation):
        r"""
        setActivation(RigidTendonMuscle self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _actuators.RigidTendonMuscle_setActivation(self, s, activation)
    __swig_destroy__ = _actuators.delete_RigidTendonMuscle

# Register RigidTendonMuscle in _actuators:
_actuators.RigidTendonMuscle_swigregister(RigidTendonMuscle)
class Millard2012AccelerationMuscle(opensim.simulation.Muscle):
    r"""Proxy of C++ OpenSim::Millard2012AccelerationMuscle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> Millard2012AccelerationMuscle

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.Millard2012AccelerationMuscle_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(Millard2012AccelerationMuscle self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.Millard2012AccelerationMuscle_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.Millard2012AccelerationMuscle_getClassName()

    def clone(self):
        r"""clone(Millard2012AccelerationMuscle self) -> Millard2012AccelerationMuscle"""
        return _actuators.Millard2012AccelerationMuscle_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(Millard2012AccelerationMuscle self) -> std::string const &"""
        return _actuators.Millard2012AccelerationMuscle_getConcreteClassName(self)

    def copyProperty_default_activation(self, source):
        r"""
        copyProperty_default_activation(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_default_activation(self, source)

    def append_default_activation(self, value):
        r"""
        append_default_activation(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_default_activation(self, value)

    def constructProperty_default_activation(self, initValue):
        r"""
        constructProperty_default_activation(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_default_activation(self, initValue)

    def get_default_activation(self, *args):
        r"""
        get_default_activation(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_activation(Millard2012AccelerationMuscle self) -> double const &
        """
        return _actuators.Millard2012AccelerationMuscle_get_default_activation(self, *args)

    def upd_default_activation(self, *args):
        r"""
        upd_default_activation(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_activation(Millard2012AccelerationMuscle self) -> double &
        """
        return _actuators.Millard2012AccelerationMuscle_upd_default_activation(self, *args)

    def set_default_activation(self, *args):
        r"""
        set_default_activation(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_activation(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_default_activation(self, *args)

    def copyProperty_default_fiber_length(self, source):
        r"""
        copyProperty_default_fiber_length(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_default_fiber_length(self, source)

    def append_default_fiber_length(self, value):
        r"""
        append_default_fiber_length(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_default_fiber_length(self, value)

    def constructProperty_default_fiber_length(self, initValue):
        r"""
        constructProperty_default_fiber_length(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_default_fiber_length(self, initValue)

    def get_default_fiber_length(self, *args):
        r"""
        get_default_fiber_length(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_fiber_length(Millard2012AccelerationMuscle self) -> double const &
        """
        return _actuators.Millard2012AccelerationMuscle_get_default_fiber_length(self, *args)

    def upd_default_fiber_length(self, *args):
        r"""
        upd_default_fiber_length(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_fiber_length(Millard2012AccelerationMuscle self) -> double &
        """
        return _actuators.Millard2012AccelerationMuscle_upd_default_fiber_length(self, *args)

    def set_default_fiber_length(self, *args):
        r"""
        set_default_fiber_length(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_fiber_length(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_default_fiber_length(self, *args)

    def copyProperty_default_fiber_velocity(self, source):
        r"""
        copyProperty_default_fiber_velocity(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_default_fiber_velocity(self, source)

    def append_default_fiber_velocity(self, value):
        r"""
        append_default_fiber_velocity(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_default_fiber_velocity(self, value)

    def constructProperty_default_fiber_velocity(self, initValue):
        r"""
        constructProperty_default_fiber_velocity(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_default_fiber_velocity(self, initValue)

    def get_default_fiber_velocity(self, *args):
        r"""
        get_default_fiber_velocity(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_fiber_velocity(Millard2012AccelerationMuscle self) -> double const &
        """
        return _actuators.Millard2012AccelerationMuscle_get_default_fiber_velocity(self, *args)

    def upd_default_fiber_velocity(self, *args):
        r"""
        upd_default_fiber_velocity(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_fiber_velocity(Millard2012AccelerationMuscle self) -> double &
        """
        return _actuators.Millard2012AccelerationMuscle_upd_default_fiber_velocity(self, *args)

    def set_default_fiber_velocity(self, *args):
        r"""
        set_default_fiber_velocity(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_fiber_velocity(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_default_fiber_velocity(self, *args)

    def copyProperty_MuscleFirstOrderActivationDynamicModel(self, source):
        r"""
        copyProperty_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_MuscleFirstOrderActivationDynamicModel(self, source)

    def append_MuscleFirstOrderActivationDynamicModel(self, value):
        r"""
        append_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel value) -> int

        Parameters
        ----------
        value: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_MuscleFirstOrderActivationDynamicModel(self, value)

    def constructProperty_MuscleFirstOrderActivationDynamicModel(self, initValue):
        r"""
        constructProperty_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel initValue)

        Parameters
        ----------
        initValue: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_MuscleFirstOrderActivationDynamicModel(self, initValue)

    def get_MuscleFirstOrderActivationDynamicModel(self, *args):
        r"""
        get_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, int i) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        i: int

        get_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self) -> MuscleFirstOrderActivationDynamicModel
        """
        return _actuators.Millard2012AccelerationMuscle_get_MuscleFirstOrderActivationDynamicModel(self, *args)

    def upd_MuscleFirstOrderActivationDynamicModel(self, *args):
        r"""
        upd_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, int i) -> MuscleFirstOrderActivationDynamicModel

        Parameters
        ----------
        i: int

        upd_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self) -> MuscleFirstOrderActivationDynamicModel
        """
        return _actuators.Millard2012AccelerationMuscle_upd_MuscleFirstOrderActivationDynamicModel(self, *args)

    def set_MuscleFirstOrderActivationDynamicModel(self, *args):
        r"""
        set_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, int i, MuscleFirstOrderActivationDynamicModel value)

        Parameters
        ----------
        i: int
        value: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        set_MuscleFirstOrderActivationDynamicModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel value)

        Parameters
        ----------
        value: OpenSim::MuscleFirstOrderActivationDynamicModel const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_MuscleFirstOrderActivationDynamicModel(self, *args)

    def copyProperty_ActiveForceLengthCurve(self, source):
        r"""
        copyProperty_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_ActiveForceLengthCurve(self, source)

    def append_ActiveForceLengthCurve(self, value):
        r"""
        append_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::ActiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_ActiveForceLengthCurve(self, value)

    def constructProperty_ActiveForceLengthCurve(self, initValue):
        r"""
        constructProperty_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::ActiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_ActiveForceLengthCurve(self, initValue)

    def get_ActiveForceLengthCurve(self, *args):
        r"""
        get_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> ActiveForceLengthCurve

        Parameters
        ----------
        i: int

        get_ActiveForceLengthCurve(Millard2012AccelerationMuscle self) -> ActiveForceLengthCurve
        """
        return _actuators.Millard2012AccelerationMuscle_get_ActiveForceLengthCurve(self, *args)

    def upd_ActiveForceLengthCurve(self, *args):
        r"""
        upd_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> ActiveForceLengthCurve

        Parameters
        ----------
        i: int

        upd_ActiveForceLengthCurve(Millard2012AccelerationMuscle self) -> ActiveForceLengthCurve
        """
        return _actuators.Millard2012AccelerationMuscle_upd_ActiveForceLengthCurve(self, *args)

    def set_ActiveForceLengthCurve(self, *args):
        r"""
        set_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, int i, ActiveForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::ActiveForceLengthCurve const &

        set_ActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::ActiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_ActiveForceLengthCurve(self, *args)

    def copyProperty_ForceVelocityCurve(self, source):
        r"""
        copyProperty_ForceVelocityCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_ForceVelocityCurve(self, source)

    def append_ForceVelocityCurve(self, value):
        r"""
        append_ForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve value) -> int

        Parameters
        ----------
        value: OpenSim::ForceVelocityCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_ForceVelocityCurve(self, value)

    def constructProperty_ForceVelocityCurve(self, initValue):
        r"""
        constructProperty_ForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::ForceVelocityCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_ForceVelocityCurve(self, initValue)

    def get_ForceVelocityCurve(self, *args):
        r"""
        get_ForceVelocityCurve(Millard2012AccelerationMuscle self, int i) -> ForceVelocityCurve

        Parameters
        ----------
        i: int

        get_ForceVelocityCurve(Millard2012AccelerationMuscle self) -> ForceVelocityCurve
        """
        return _actuators.Millard2012AccelerationMuscle_get_ForceVelocityCurve(self, *args)

    def upd_ForceVelocityCurve(self, *args):
        r"""
        upd_ForceVelocityCurve(Millard2012AccelerationMuscle self, int i) -> ForceVelocityCurve

        Parameters
        ----------
        i: int

        upd_ForceVelocityCurve(Millard2012AccelerationMuscle self) -> ForceVelocityCurve
        """
        return _actuators.Millard2012AccelerationMuscle_upd_ForceVelocityCurve(self, *args)

    def set_ForceVelocityCurve(self, *args):
        r"""
        set_ForceVelocityCurve(Millard2012AccelerationMuscle self, int i, ForceVelocityCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::ForceVelocityCurve const &

        set_ForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve value)

        Parameters
        ----------
        value: OpenSim::ForceVelocityCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_ForceVelocityCurve(self, *args)

    def copyProperty_FiberForceLengthCurve(self, source):
        r"""
        copyProperty_FiberForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_FiberForceLengthCurve(self, source)

    def append_FiberForceLengthCurve(self, value):
        r"""
        append_FiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::FiberForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_FiberForceLengthCurve(self, value)

    def constructProperty_FiberForceLengthCurve(self, initValue):
        r"""
        constructProperty_FiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::FiberForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_FiberForceLengthCurve(self, initValue)

    def get_FiberForceLengthCurve(self, *args):
        r"""
        get_FiberForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberForceLengthCurve

        Parameters
        ----------
        i: int

        get_FiberForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberForceLengthCurve
        """
        return _actuators.Millard2012AccelerationMuscle_get_FiberForceLengthCurve(self, *args)

    def upd_FiberForceLengthCurve(self, *args):
        r"""
        upd_FiberForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberForceLengthCurve

        Parameters
        ----------
        i: int

        upd_FiberForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberForceLengthCurve
        """
        return _actuators.Millard2012AccelerationMuscle_upd_FiberForceLengthCurve(self, *args)

    def set_FiberForceLengthCurve(self, *args):
        r"""
        set_FiberForceLengthCurve(Millard2012AccelerationMuscle self, int i, FiberForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::FiberForceLengthCurve const &

        set_FiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::FiberForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_FiberForceLengthCurve(self, *args)

    def copyProperty_TendonForceLengthCurve(self, source):
        r"""
        copyProperty_TendonForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_TendonForceLengthCurve(self, source)

    def append_TendonForceLengthCurve(self, value):
        r"""
        append_TendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::TendonForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_TendonForceLengthCurve(self, value)

    def constructProperty_TendonForceLengthCurve(self, initValue):
        r"""
        constructProperty_TendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::TendonForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_TendonForceLengthCurve(self, initValue)

    def get_TendonForceLengthCurve(self, *args):
        r"""
        get_TendonForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> TendonForceLengthCurve

        Parameters
        ----------
        i: int

        get_TendonForceLengthCurve(Millard2012AccelerationMuscle self) -> TendonForceLengthCurve
        """
        return _actuators.Millard2012AccelerationMuscle_get_TendonForceLengthCurve(self, *args)

    def upd_TendonForceLengthCurve(self, *args):
        r"""
        upd_TendonForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> TendonForceLengthCurve

        Parameters
        ----------
        i: int

        upd_TendonForceLengthCurve(Millard2012AccelerationMuscle self) -> TendonForceLengthCurve
        """
        return _actuators.Millard2012AccelerationMuscle_upd_TendonForceLengthCurve(self, *args)

    def set_TendonForceLengthCurve(self, *args):
        r"""
        set_TendonForceLengthCurve(Millard2012AccelerationMuscle self, int i, TendonForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::TendonForceLengthCurve const &

        set_TendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::TendonForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_TendonForceLengthCurve(self, *args)

    def copyProperty_FiberCompressiveForceLengthCurve(self, source):
        r"""
        copyProperty_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_FiberCompressiveForceLengthCurve(self, source)

    def append_FiberCompressiveForceLengthCurve(self, value):
        r"""
        append_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve value) -> int

        Parameters
        ----------
        value: OpenSim::FiberCompressiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_FiberCompressiveForceLengthCurve(self, value)

    def constructProperty_FiberCompressiveForceLengthCurve(self, initValue):
        r"""
        constructProperty_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::FiberCompressiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_FiberCompressiveForceLengthCurve(self, initValue)

    def get_FiberCompressiveForceLengthCurve(self, *args):
        r"""
        get_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        i: int

        get_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceLengthCurve
        """
        return _actuators.Millard2012AccelerationMuscle_get_FiberCompressiveForceLengthCurve(self, *args)

    def upd_FiberCompressiveForceLengthCurve(self, *args):
        r"""
        upd_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceLengthCurve

        Parameters
        ----------
        i: int

        upd_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceLengthCurve
        """
        return _actuators.Millard2012AccelerationMuscle_upd_FiberCompressiveForceLengthCurve(self, *args)

    def set_FiberCompressiveForceLengthCurve(self, *args):
        r"""
        set_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, int i, FiberCompressiveForceLengthCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::FiberCompressiveForceLengthCurve const &

        set_FiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve value)

        Parameters
        ----------
        value: OpenSim::FiberCompressiveForceLengthCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_FiberCompressiveForceLengthCurve(self, *args)

    def copyProperty_FiberCompressiveForceCosPennationCurve(self, source):
        r"""
        copyProperty_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_FiberCompressiveForceCosPennationCurve(self, source)

    def append_FiberCompressiveForceCosPennationCurve(self, value):
        r"""
        append_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve value) -> int

        Parameters
        ----------
        value: OpenSim::FiberCompressiveForceCosPennationCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_FiberCompressiveForceCosPennationCurve(self, value)

    def constructProperty_FiberCompressiveForceCosPennationCurve(self, initValue):
        r"""
        constructProperty_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve initValue)

        Parameters
        ----------
        initValue: OpenSim::FiberCompressiveForceCosPennationCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_FiberCompressiveForceCosPennationCurve(self, initValue)

    def get_FiberCompressiveForceCosPennationCurve(self, *args):
        r"""
        get_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        i: int

        get_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceCosPennationCurve
        """
        return _actuators.Millard2012AccelerationMuscle_get_FiberCompressiveForceCosPennationCurve(self, *args)

    def upd_FiberCompressiveForceCosPennationCurve(self, *args):
        r"""
        upd_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, int i) -> FiberCompressiveForceCosPennationCurve

        Parameters
        ----------
        i: int

        upd_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceCosPennationCurve
        """
        return _actuators.Millard2012AccelerationMuscle_upd_FiberCompressiveForceCosPennationCurve(self, *args)

    def set_FiberCompressiveForceCosPennationCurve(self, *args):
        r"""
        set_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, int i, FiberCompressiveForceCosPennationCurve value)

        Parameters
        ----------
        i: int
        value: OpenSim::FiberCompressiveForceCosPennationCurve const &

        set_FiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve value)

        Parameters
        ----------
        value: OpenSim::FiberCompressiveForceCosPennationCurve const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_FiberCompressiveForceCosPennationCurve(self, *args)

    def copyProperty_fiber_damping(self, source):
        r"""
        copyProperty_fiber_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_fiber_damping(self, source)

    def append_fiber_damping(self, value):
        r"""
        append_fiber_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_fiber_damping(self, value)

    def constructProperty_fiber_damping(self, initValue):
        r"""
        constructProperty_fiber_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_fiber_damping(self, initValue)

    def get_fiber_damping(self, *args):
        r"""
        get_fiber_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_damping(Millard2012AccelerationMuscle self) -> double const &
        """
        return _actuators.Millard2012AccelerationMuscle_get_fiber_damping(self, *args)

    def upd_fiber_damping(self, *args):
        r"""
        upd_fiber_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_damping(Millard2012AccelerationMuscle self) -> double &
        """
        return _actuators.Millard2012AccelerationMuscle_upd_fiber_damping(self, *args)

    def set_fiber_damping(self, *args):
        r"""
        set_fiber_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_fiber_damping(self, *args)

    def copyProperty_fiber_force_length_damping(self, source):
        r"""
        copyProperty_fiber_force_length_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_fiber_force_length_damping(self, source)

    def append_fiber_force_length_damping(self, value):
        r"""
        append_fiber_force_length_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_fiber_force_length_damping(self, value)

    def constructProperty_fiber_force_length_damping(self, initValue):
        r"""
        constructProperty_fiber_force_length_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_fiber_force_length_damping(self, initValue)

    def get_fiber_force_length_damping(self, *args):
        r"""
        get_fiber_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_force_length_damping(Millard2012AccelerationMuscle self) -> double const &
        """
        return _actuators.Millard2012AccelerationMuscle_get_fiber_force_length_damping(self, *args)

    def upd_fiber_force_length_damping(self, *args):
        r"""
        upd_fiber_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_force_length_damping(Millard2012AccelerationMuscle self) -> double &
        """
        return _actuators.Millard2012AccelerationMuscle_upd_fiber_force_length_damping(self, *args)

    def set_fiber_force_length_damping(self, *args):
        r"""
        set_fiber_force_length_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_force_length_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_fiber_force_length_damping(self, *args)

    def copyProperty_fiber_compressive_force_length_damping(self, source):
        r"""
        copyProperty_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_fiber_compressive_force_length_damping(self, source)

    def append_fiber_compressive_force_length_damping(self, value):
        r"""
        append_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_fiber_compressive_force_length_damping(self, value)

    def constructProperty_fiber_compressive_force_length_damping(self, initValue):
        r"""
        constructProperty_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_fiber_compressive_force_length_damping(self, initValue)

    def get_fiber_compressive_force_length_damping(self, *args):
        r"""
        get_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self) -> double const &
        """
        return _actuators.Millard2012AccelerationMuscle_get_fiber_compressive_force_length_damping(self, *args)

    def upd_fiber_compressive_force_length_damping(self, *args):
        r"""
        upd_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self) -> double &
        """
        return _actuators.Millard2012AccelerationMuscle_upd_fiber_compressive_force_length_damping(self, *args)

    def set_fiber_compressive_force_length_damping(self, *args):
        r"""
        set_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_compressive_force_length_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_fiber_compressive_force_length_damping(self, *args)

    def copyProperty_fiber_compressive_force_cos_pennation_damping(self, source):
        r"""
        copyProperty_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_fiber_compressive_force_cos_pennation_damping(self, source)

    def append_fiber_compressive_force_cos_pennation_damping(self, value):
        r"""
        append_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_fiber_compressive_force_cos_pennation_damping(self, value)

    def constructProperty_fiber_compressive_force_cos_pennation_damping(self, initValue):
        r"""
        constructProperty_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_fiber_compressive_force_cos_pennation_damping(self, initValue)

    def get_fiber_compressive_force_cos_pennation_damping(self, *args):
        r"""
        get_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self) -> double const &
        """
        return _actuators.Millard2012AccelerationMuscle_get_fiber_compressive_force_cos_pennation_damping(self, *args)

    def upd_fiber_compressive_force_cos_pennation_damping(self, *args):
        r"""
        upd_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self) -> double &
        """
        return _actuators.Millard2012AccelerationMuscle_upd_fiber_compressive_force_cos_pennation_damping(self, *args)

    def set_fiber_compressive_force_cos_pennation_damping(self, *args):
        r"""
        set_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_compressive_force_cos_pennation_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_fiber_compressive_force_cos_pennation_damping(self, *args)

    def copyProperty_tendon_force_length_damping(self, source):
        r"""
        copyProperty_tendon_force_length_damping(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_tendon_force_length_damping(self, source)

    def append_tendon_force_length_damping(self, value):
        r"""
        append_tendon_force_length_damping(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_tendon_force_length_damping(self, value)

    def constructProperty_tendon_force_length_damping(self, initValue):
        r"""
        constructProperty_tendon_force_length_damping(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_tendon_force_length_damping(self, initValue)

    def get_tendon_force_length_damping(self, *args):
        r"""
        get_tendon_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_tendon_force_length_damping(Millard2012AccelerationMuscle self) -> double const &
        """
        return _actuators.Millard2012AccelerationMuscle_get_tendon_force_length_damping(self, *args)

    def upd_tendon_force_length_damping(self, *args):
        r"""
        upd_tendon_force_length_damping(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_tendon_force_length_damping(Millard2012AccelerationMuscle self) -> double &
        """
        return _actuators.Millard2012AccelerationMuscle_upd_tendon_force_length_damping(self, *args)

    def set_tendon_force_length_damping(self, *args):
        r"""
        set_tendon_force_length_damping(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_tendon_force_length_damping(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_tendon_force_length_damping(self, *args)

    def copyProperty_mass(self, source):
        r"""
        copyProperty_mass(Millard2012AccelerationMuscle self, Millard2012AccelerationMuscle source)

        Parameters
        ----------
        source: OpenSim::Millard2012AccelerationMuscle::Self const &

        """
        return _actuators.Millard2012AccelerationMuscle_copyProperty_mass(self, source)

    def append_mass(self, value):
        r"""
        append_mass(Millard2012AccelerationMuscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_append_mass(self, value)

    def constructProperty_mass(self, initValue):
        r"""
        constructProperty_mass(Millard2012AccelerationMuscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_constructProperty_mass(self, initValue)

    def get_mass(self, *args):
        r"""
        get_mass(Millard2012AccelerationMuscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_mass(Millard2012AccelerationMuscle self) -> double const &
        """
        return _actuators.Millard2012AccelerationMuscle_get_mass(self, *args)

    def upd_mass(self, *args):
        r"""
        upd_mass(Millard2012AccelerationMuscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_mass(Millard2012AccelerationMuscle self) -> double &
        """
        return _actuators.Millard2012AccelerationMuscle_upd_mass(self, *args)

    def set_mass(self, *args):
        r"""
        set_mass(Millard2012AccelerationMuscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_mass(Millard2012AccelerationMuscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.Millard2012AccelerationMuscle_set_mass(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Millard2012AccelerationMuscle self) -> Millard2012AccelerationMuscle
        __init__(Millard2012AccelerationMuscle self, std::string const & aName, double aMaxIsometricForce, double aOptimalFiberLength, double aTendonSlackLength, double aPennationAngle) -> Millard2012AccelerationMuscle

        Parameters
        ----------
        aName: std::string const &
        aMaxIsometricForce: double
        aOptimalFiberLength: double
        aTendonSlackLength: double
        aPennationAngle: double

        """
        _actuators.Millard2012AccelerationMuscle_swiginit(self, _actuators.new_Millard2012AccelerationMuscle(*args))

    def getFiberCompressiveForceLengthMultiplier(self, s):
        r"""
        getFiberCompressiveForceLengthMultiplier(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberCompressiveForceLengthMultiplier(self, s)

    def getFiberCompressiveForceCosPennationMultiplier(self, s):
        r"""
        getFiberCompressiveForceCosPennationMultiplier(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberCompressiveForceCosPennationMultiplier(self, s)

    def getTendonForceMultiplier(self, s):
        r"""
        getTendonForceMultiplier(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State &

        """
        return _actuators.Millard2012AccelerationMuscle_getTendonForceMultiplier(self, s)

    def getMass(self):
        r"""getMass(Millard2012AccelerationMuscle self) -> double"""
        return _actuators.Millard2012AccelerationMuscle_getMass(self)

    def getActivationModel(self):
        r"""getActivationModel(Millard2012AccelerationMuscle self) -> MuscleFirstOrderActivationDynamicModel"""
        return _actuators.Millard2012AccelerationMuscle_getActivationModel(self)

    def getPennationModel(self):
        r"""getPennationModel(Millard2012AccelerationMuscle self) -> MuscleFixedWidthPennationModel"""
        return _actuators.Millard2012AccelerationMuscle_getPennationModel(self)

    def getActiveForceLengthCurve(self):
        r"""getActiveForceLengthCurve(Millard2012AccelerationMuscle self) -> ActiveForceLengthCurve"""
        return _actuators.Millard2012AccelerationMuscle_getActiveForceLengthCurve(self)

    def getForceVelocityCurve(self):
        r"""getForceVelocityCurve(Millard2012AccelerationMuscle self) -> ForceVelocityCurve"""
        return _actuators.Millard2012AccelerationMuscle_getForceVelocityCurve(self)

    def getFiberForceLengthCurve(self):
        r"""getFiberForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberForceLengthCurve"""
        return _actuators.Millard2012AccelerationMuscle_getFiberForceLengthCurve(self)

    def getTendonForceLengthCurve(self):
        r"""getTendonForceLengthCurve(Millard2012AccelerationMuscle self) -> TendonForceLengthCurve"""
        return _actuators.Millard2012AccelerationMuscle_getTendonForceLengthCurve(self)

    def getFiberCompressiveForceLengthCurve(self):
        r"""getFiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceLengthCurve"""
        return _actuators.Millard2012AccelerationMuscle_getFiberCompressiveForceLengthCurve(self)

    def getFiberCompressiveForceCosPennationCurve(self):
        r"""getFiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self) -> FiberCompressiveForceCosPennationCurve"""
        return _actuators.Millard2012AccelerationMuscle_getFiberCompressiveForceCosPennationCurve(self)

    def getFiberStiffnessAlongTendon(self, s):
        r"""
        getFiberStiffnessAlongTendon(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberStiffnessAlongTendon(self, s)

    def setActivationModel(self, aActivationMdl):
        r"""
        setActivationModel(Millard2012AccelerationMuscle self, MuscleFirstOrderActivationDynamicModel aActivationMdl)

        Parameters
        ----------
        aActivationMdl: OpenSim::MuscleFirstOrderActivationDynamicModel &

        """
        return _actuators.Millard2012AccelerationMuscle_setActivationModel(self, aActivationMdl)

    def setActiveForceLengthCurve(self, aActiveForceLengthCurve):
        r"""
        setActiveForceLengthCurve(Millard2012AccelerationMuscle self, ActiveForceLengthCurve aActiveForceLengthCurve)

        Parameters
        ----------
        aActiveForceLengthCurve: OpenSim::ActiveForceLengthCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setActiveForceLengthCurve(self, aActiveForceLengthCurve)

    def setForceVelocityCurve(self, aForceVelocityCurve):
        r"""
        setForceVelocityCurve(Millard2012AccelerationMuscle self, ForceVelocityCurve aForceVelocityCurve)

        Parameters
        ----------
        aForceVelocityCurve: OpenSim::ForceVelocityCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setForceVelocityCurve(self, aForceVelocityCurve)

    def setFiberForceLengthCurve(self, aFiberForceLengthCurve):
        r"""
        setFiberForceLengthCurve(Millard2012AccelerationMuscle self, FiberForceLengthCurve aFiberForceLengthCurve)

        Parameters
        ----------
        aFiberForceLengthCurve: OpenSim::FiberForceLengthCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberForceLengthCurve(self, aFiberForceLengthCurve)

    def setTendonForceLengthCurve(self, aTendonForceLengthCurve):
        r"""
        setTendonForceLengthCurve(Millard2012AccelerationMuscle self, TendonForceLengthCurve aTendonForceLengthCurve)

        Parameters
        ----------
        aTendonForceLengthCurve: OpenSim::TendonForceLengthCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setTendonForceLengthCurve(self, aTendonForceLengthCurve)

    def setFiberCompressiveForceLengthCurve(self, aFiberCompressiveForceLengthCurve):
        r"""
        setFiberCompressiveForceLengthCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceLengthCurve aFiberCompressiveForceLengthCurve)

        Parameters
        ----------
        aFiberCompressiveForceLengthCurve: OpenSim::FiberCompressiveForceLengthCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberCompressiveForceLengthCurve(self, aFiberCompressiveForceLengthCurve)

    def setFiberCompressiveForceCosPennationCurve(self, aFiberCompressiveForceCosPennationCurve):
        r"""
        setFiberCompressiveForceCosPennationCurve(Millard2012AccelerationMuscle self, FiberCompressiveForceCosPennationCurve aFiberCompressiveForceCosPennationCurve)

        Parameters
        ----------
        aFiberCompressiveForceCosPennationCurve: OpenSim::FiberCompressiveForceCosPennationCurve &

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberCompressiveForceCosPennationCurve(self, aFiberCompressiveForceCosPennationCurve)

    def setMass(self, mass):
        r"""
        setMass(Millard2012AccelerationMuscle self, double mass)

        Parameters
        ----------
        mass: double

        """
        return _actuators.Millard2012AccelerationMuscle_setMass(self, mass)

    def getDefaultActivation(self):
        r"""getDefaultActivation(Millard2012AccelerationMuscle self) -> double"""
        return _actuators.Millard2012AccelerationMuscle_getDefaultActivation(self)

    def getDefaultFiberLength(self):
        r"""getDefaultFiberLength(Millard2012AccelerationMuscle self) -> double"""
        return _actuators.Millard2012AccelerationMuscle_getDefaultFiberLength(self)

    def getDefaultFiberVelocity(self):
        r"""getDefaultFiberVelocity(Millard2012AccelerationMuscle self) -> double"""
        return _actuators.Millard2012AccelerationMuscle_getDefaultFiberVelocity(self)

    def getActivationRate(self, s):
        r"""
        getActivationRate(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_getActivationRate(self, s)

    def getFiberVelocity(self, s):
        r"""
        getFiberVelocity(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberVelocity(self, s)

    def getFiberAcceleration(self, s):
        r"""
        getFiberAcceleration(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_getFiberAcceleration(self, s)

    def setDefaultActivation(self, activation):
        r"""
        setDefaultActivation(Millard2012AccelerationMuscle self, double activation)

        Parameters
        ----------
        activation: double

        """
        return _actuators.Millard2012AccelerationMuscle_setDefaultActivation(self, activation)

    def setDefaultFiberLength(self, fiberLength):
        r"""
        setDefaultFiberLength(Millard2012AccelerationMuscle self, double fiberLength)

        Parameters
        ----------
        fiberLength: double

        """
        return _actuators.Millard2012AccelerationMuscle_setDefaultFiberLength(self, fiberLength)

    def setDefaultFiberVelocity(self, fiberVelocity):
        r"""
        setDefaultFiberVelocity(Millard2012AccelerationMuscle self, double fiberVelocity)

        Parameters
        ----------
        fiberVelocity: double

        """
        return _actuators.Millard2012AccelerationMuscle_setDefaultFiberVelocity(self, fiberVelocity)

    def setActivation(self, s, activation):
        r"""
        setActivation(Millard2012AccelerationMuscle self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _actuators.Millard2012AccelerationMuscle_setActivation(self, s, activation)

    def setFiberLength(self, s, fiberLength):
        r"""
        setFiberLength(Millard2012AccelerationMuscle self, State s, double fiberLength)

        Parameters
        ----------
        s: SimTK::State &
        fiberLength: double

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberLength(self, s, fiberLength)

    def setFiberVelocity(self, s, fiberVelocity):
        r"""
        setFiberVelocity(Millard2012AccelerationMuscle self, State s, double fiberVelocity)

        Parameters
        ----------
        s: SimTK::State &
        fiberVelocity: double

        """
        return _actuators.Millard2012AccelerationMuscle_setFiberVelocity(self, s, fiberVelocity)

    def computeActuation(self, s):
        r"""
        computeActuation(Millard2012AccelerationMuscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.Millard2012AccelerationMuscle_computeActuation(self, s)

    def computeInitialFiberEquilibrium(self, s):
        r"""
        computeInitialFiberEquilibrium(Millard2012AccelerationMuscle self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _actuators.Millard2012AccelerationMuscle_computeInitialFiberEquilibrium(self, s)

    def calcInextensibleTendonActiveFiberForce(self, s, aActivation):
        r"""
        calcInextensibleTendonActiveFiberForce(Millard2012AccelerationMuscle self, State s, double aActivation) -> double

        Parameters
        ----------
        s: SimTK::State &
        aActivation: double

        """
        return _actuators.Millard2012AccelerationMuscle_calcInextensibleTendonActiveFiberForce(self, s, aActivation)

    def calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity):
        r"""
        calcActiveFiberForceAlongTendon(Millard2012AccelerationMuscle self, double activation, double fiberLength, double fiberVelocity) -> double

        Parameters
        ----------
        activation: double
        fiberLength: double
        fiberVelocity: double

        """
        return _actuators.Millard2012AccelerationMuscle_calcActiveFiberForceAlongTendon(self, activation, fiberLength, fiberVelocity)

    def extendPostScale(self, s, scaleSet):
        r"""
        extendPostScale(Millard2012AccelerationMuscle self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _actuators.Millard2012AccelerationMuscle_extendPostScale(self, s, scaleSet)
    __swig_destroy__ = _actuators.delete_Millard2012AccelerationMuscle

# Register Millard2012AccelerationMuscle in _actuators:
_actuators.Millard2012AccelerationMuscle_swigregister(Millard2012AccelerationMuscle)
class McKibbenActuator(opensim.simulation.PathActuator):
    r"""Proxy of C++ OpenSim::McKibbenActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> McKibbenActuator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.McKibbenActuator_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(McKibbenActuator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.McKibbenActuator_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.McKibbenActuator_getClassName()

    def clone(self):
        r"""clone(McKibbenActuator self) -> McKibbenActuator"""
        return _actuators.McKibbenActuator_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(McKibbenActuator self) -> std::string const &"""
        return _actuators.McKibbenActuator_getConcreteClassName(self)

    def copyProperty_thread_length(self, source):
        r"""
        copyProperty_thread_length(McKibbenActuator self, McKibbenActuator source)

        Parameters
        ----------
        source: OpenSim::McKibbenActuator::Self const &

        """
        return _actuators.McKibbenActuator_copyProperty_thread_length(self, source)

    def append_thread_length(self, value):
        r"""
        append_thread_length(McKibbenActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_append_thread_length(self, value)

    def constructProperty_thread_length(self, initValue):
        r"""
        constructProperty_thread_length(McKibbenActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.McKibbenActuator_constructProperty_thread_length(self, initValue)

    def get_thread_length(self, *args):
        r"""
        get_thread_length(McKibbenActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_thread_length(McKibbenActuator self) -> double const &
        """
        return _actuators.McKibbenActuator_get_thread_length(self, *args)

    def upd_thread_length(self, *args):
        r"""
        upd_thread_length(McKibbenActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_thread_length(McKibbenActuator self) -> double &
        """
        return _actuators.McKibbenActuator_upd_thread_length(self, *args)

    def set_thread_length(self, *args):
        r"""
        set_thread_length(McKibbenActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_thread_length(McKibbenActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_set_thread_length(self, *args)

    def copyProperty_number_of_turns(self, source):
        r"""
        copyProperty_number_of_turns(McKibbenActuator self, McKibbenActuator source)

        Parameters
        ----------
        source: OpenSim::McKibbenActuator::Self const &

        """
        return _actuators.McKibbenActuator_copyProperty_number_of_turns(self, source)

    def append_number_of_turns(self, value):
        r"""
        append_number_of_turns(McKibbenActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_append_number_of_turns(self, value)

    def constructProperty_number_of_turns(self, initValue):
        r"""
        constructProperty_number_of_turns(McKibbenActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.McKibbenActuator_constructProperty_number_of_turns(self, initValue)

    def get_number_of_turns(self, *args):
        r"""
        get_number_of_turns(McKibbenActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_number_of_turns(McKibbenActuator self) -> double const &
        """
        return _actuators.McKibbenActuator_get_number_of_turns(self, *args)

    def upd_number_of_turns(self, *args):
        r"""
        upd_number_of_turns(McKibbenActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_number_of_turns(McKibbenActuator self) -> double &
        """
        return _actuators.McKibbenActuator_upd_number_of_turns(self, *args)

    def set_number_of_turns(self, *args):
        r"""
        set_number_of_turns(McKibbenActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_number_of_turns(McKibbenActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_set_number_of_turns(self, *args)

    def copyProperty_cord_length(self, source):
        r"""
        copyProperty_cord_length(McKibbenActuator self, McKibbenActuator source)

        Parameters
        ----------
        source: OpenSim::McKibbenActuator::Self const &

        """
        return _actuators.McKibbenActuator_copyProperty_cord_length(self, source)

    def append_cord_length(self, value):
        r"""
        append_cord_length(McKibbenActuator self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_append_cord_length(self, value)

    def constructProperty_cord_length(self, initValue):
        r"""
        constructProperty_cord_length(McKibbenActuator self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.McKibbenActuator_constructProperty_cord_length(self, initValue)

    def get_cord_length(self, *args):
        r"""
        get_cord_length(McKibbenActuator self, int i) -> double const

        Parameters
        ----------
        i: int

        get_cord_length(McKibbenActuator self) -> double const &
        """
        return _actuators.McKibbenActuator_get_cord_length(self, *args)

    def upd_cord_length(self, *args):
        r"""
        upd_cord_length(McKibbenActuator self, int i) -> double

        Parameters
        ----------
        i: int

        upd_cord_length(McKibbenActuator self) -> double &
        """
        return _actuators.McKibbenActuator_upd_cord_length(self, *args)

    def set_cord_length(self, *args):
        r"""
        set_cord_length(McKibbenActuator self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_cord_length(McKibbenActuator self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.McKibbenActuator_set_cord_length(self, *args)

    def __init__(self, *args):
        r"""
        __init__(McKibbenActuator self) -> McKibbenActuator
        __init__(McKibbenActuator self, std::string const & name, double num_turns, double thread_length) -> McKibbenActuator

        Parameters
        ----------
        name: std::string const &
        num_turns: double
        thread_length: double

        """
        _actuators.McKibbenActuator_swiginit(self, _actuators.new_McKibbenActuator(*args))

    def setNumberOfTurns(self, val):
        r"""
        setNumberOfTurns(McKibbenActuator self, double val)

        Parameters
        ----------
        val: double

        """
        return _actuators.McKibbenActuator_setNumberOfTurns(self, val)

    def getNumberOfTurns(self):
        r"""getNumberOfTurns(McKibbenActuator self) -> double"""
        return _actuators.McKibbenActuator_getNumberOfTurns(self)

    def setThreadLength(self, val):
        r"""
        setThreadLength(McKibbenActuator self, double val)

        Parameters
        ----------
        val: double

        """
        return _actuators.McKibbenActuator_setThreadLength(self, val)

    def getThreadLength(self):
        r"""getThreadLength(McKibbenActuator self) -> double"""
        return _actuators.McKibbenActuator_getThreadLength(self)

    def setCordLength(self, val):
        r"""
        setCordLength(McKibbenActuator self, double val)

        Parameters
        ----------
        val: double

        """
        return _actuators.McKibbenActuator_setCordLength(self, val)

    def getCordLength(self):
        r"""getCordLength(McKibbenActuator self) -> double"""
        return _actuators.McKibbenActuator_getCordLength(self)

    def computeActuation(self, s):
        r"""
        computeActuation(McKibbenActuator self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.McKibbenActuator_computeActuation(self, s)
    __swig_destroy__ = _actuators.delete_McKibbenActuator

# Register McKibbenActuator in _actuators:
_actuators.McKibbenActuator_swigregister(McKibbenActuator)
class DeGrooteFregly2016Muscle(opensim.simulation.Muscle):
    r"""Proxy of C++ OpenSim::DeGrooteFregly2016Muscle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> DeGrooteFregly2016Muscle

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.DeGrooteFregly2016Muscle_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(DeGrooteFregly2016Muscle self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.DeGrooteFregly2016Muscle_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.DeGrooteFregly2016Muscle_getClassName()

    def clone(self):
        r"""clone(DeGrooteFregly2016Muscle self) -> DeGrooteFregly2016Muscle"""
        return _actuators.DeGrooteFregly2016Muscle_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(DeGrooteFregly2016Muscle self) -> std::string const &"""
        return _actuators.DeGrooteFregly2016Muscle_getConcreteClassName(self)

    def copyProperty_activation_time_constant(self, source):
        r"""
        copyProperty_activation_time_constant(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_activation_time_constant(self, source)

    def append_activation_time_constant(self, value):
        r"""
        append_activation_time_constant(DeGrooteFregly2016Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_activation_time_constant(self, value)

    def constructProperty_activation_time_constant(self, initValue):
        r"""
        constructProperty_activation_time_constant(DeGrooteFregly2016Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_activation_time_constant(self, initValue)

    def get_activation_time_constant(self, *args):
        r"""
        get_activation_time_constant(DeGrooteFregly2016Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_time_constant(DeGrooteFregly2016Muscle self) -> double const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_activation_time_constant(self, *args)

    def upd_activation_time_constant(self, *args):
        r"""
        upd_activation_time_constant(DeGrooteFregly2016Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_activation_time_constant(DeGrooteFregly2016Muscle self) -> double &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_activation_time_constant(self, *args)

    def set_activation_time_constant(self, *args):
        r"""
        set_activation_time_constant(DeGrooteFregly2016Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_activation_time_constant(DeGrooteFregly2016Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_activation_time_constant(self, *args)

    def copyProperty_deactivation_time_constant(self, source):
        r"""
        copyProperty_deactivation_time_constant(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_deactivation_time_constant(self, source)

    def append_deactivation_time_constant(self, value):
        r"""
        append_deactivation_time_constant(DeGrooteFregly2016Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_deactivation_time_constant(self, value)

    def constructProperty_deactivation_time_constant(self, initValue):
        r"""
        constructProperty_deactivation_time_constant(DeGrooteFregly2016Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_deactivation_time_constant(self, initValue)

    def get_deactivation_time_constant(self, *args):
        r"""
        get_deactivation_time_constant(DeGrooteFregly2016Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_deactivation_time_constant(DeGrooteFregly2016Muscle self) -> double const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_deactivation_time_constant(self, *args)

    def upd_deactivation_time_constant(self, *args):
        r"""
        upd_deactivation_time_constant(DeGrooteFregly2016Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_deactivation_time_constant(DeGrooteFregly2016Muscle self) -> double &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_deactivation_time_constant(self, *args)

    def set_deactivation_time_constant(self, *args):
        r"""
        set_deactivation_time_constant(DeGrooteFregly2016Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_deactivation_time_constant(DeGrooteFregly2016Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_deactivation_time_constant(self, *args)

    def copyProperty_default_activation(self, source):
        r"""
        copyProperty_default_activation(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_default_activation(self, source)

    def append_default_activation(self, value):
        r"""
        append_default_activation(DeGrooteFregly2016Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_default_activation(self, value)

    def constructProperty_default_activation(self, initValue):
        r"""
        constructProperty_default_activation(DeGrooteFregly2016Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_default_activation(self, initValue)

    def get_default_activation(self, *args):
        r"""
        get_default_activation(DeGrooteFregly2016Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_activation(DeGrooteFregly2016Muscle self) -> double const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_default_activation(self, *args)

    def upd_default_activation(self, *args):
        r"""
        upd_default_activation(DeGrooteFregly2016Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_activation(DeGrooteFregly2016Muscle self) -> double &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_default_activation(self, *args)

    def set_default_activation(self, *args):
        r"""
        set_default_activation(DeGrooteFregly2016Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_activation(DeGrooteFregly2016Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_default_activation(self, *args)

    def copyProperty_default_normalized_tendon_force(self, source):
        r"""
        copyProperty_default_normalized_tendon_force(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_default_normalized_tendon_force(self, source)

    def append_default_normalized_tendon_force(self, value):
        r"""
        append_default_normalized_tendon_force(DeGrooteFregly2016Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_default_normalized_tendon_force(self, value)

    def constructProperty_default_normalized_tendon_force(self, initValue):
        r"""
        constructProperty_default_normalized_tendon_force(DeGrooteFregly2016Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_default_normalized_tendon_force(self, initValue)

    def get_default_normalized_tendon_force(self, *args):
        r"""
        get_default_normalized_tendon_force(DeGrooteFregly2016Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_default_normalized_tendon_force(DeGrooteFregly2016Muscle self) -> double const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_default_normalized_tendon_force(self, *args)

    def upd_default_normalized_tendon_force(self, *args):
        r"""
        upd_default_normalized_tendon_force(DeGrooteFregly2016Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_default_normalized_tendon_force(DeGrooteFregly2016Muscle self) -> double &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_default_normalized_tendon_force(self, *args)

    def set_default_normalized_tendon_force(self, *args):
        r"""
        set_default_normalized_tendon_force(DeGrooteFregly2016Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_default_normalized_tendon_force(DeGrooteFregly2016Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_default_normalized_tendon_force(self, *args)

    def copyProperty_active_force_width_scale(self, source):
        r"""
        copyProperty_active_force_width_scale(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_active_force_width_scale(self, source)

    def append_active_force_width_scale(self, value):
        r"""
        append_active_force_width_scale(DeGrooteFregly2016Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_active_force_width_scale(self, value)

    def constructProperty_active_force_width_scale(self, initValue):
        r"""
        constructProperty_active_force_width_scale(DeGrooteFregly2016Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_active_force_width_scale(self, initValue)

    def get_active_force_width_scale(self, *args):
        r"""
        get_active_force_width_scale(DeGrooteFregly2016Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_active_force_width_scale(DeGrooteFregly2016Muscle self) -> double const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_active_force_width_scale(self, *args)

    def upd_active_force_width_scale(self, *args):
        r"""
        upd_active_force_width_scale(DeGrooteFregly2016Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_active_force_width_scale(DeGrooteFregly2016Muscle self) -> double &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_active_force_width_scale(self, *args)

    def set_active_force_width_scale(self, *args):
        r"""
        set_active_force_width_scale(DeGrooteFregly2016Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_active_force_width_scale(DeGrooteFregly2016Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_active_force_width_scale(self, *args)

    def copyProperty_fiber_damping(self, source):
        r"""
        copyProperty_fiber_damping(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_fiber_damping(self, source)

    def append_fiber_damping(self, value):
        r"""
        append_fiber_damping(DeGrooteFregly2016Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_fiber_damping(self, value)

    def constructProperty_fiber_damping(self, initValue):
        r"""
        constructProperty_fiber_damping(DeGrooteFregly2016Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_fiber_damping(self, initValue)

    def get_fiber_damping(self, *args):
        r"""
        get_fiber_damping(DeGrooteFregly2016Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_fiber_damping(DeGrooteFregly2016Muscle self) -> double const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_fiber_damping(self, *args)

    def upd_fiber_damping(self, *args):
        r"""
        upd_fiber_damping(DeGrooteFregly2016Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_fiber_damping(DeGrooteFregly2016Muscle self) -> double &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_fiber_damping(self, *args)

    def set_fiber_damping(self, *args):
        r"""
        set_fiber_damping(DeGrooteFregly2016Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_fiber_damping(DeGrooteFregly2016Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_fiber_damping(self, *args)

    def copyProperty_ignore_passive_fiber_force(self, source):
        r"""
        copyProperty_ignore_passive_fiber_force(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_ignore_passive_fiber_force(self, source)

    def append_ignore_passive_fiber_force(self, value):
        r"""
        append_ignore_passive_fiber_force(DeGrooteFregly2016Muscle self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_ignore_passive_fiber_force(self, value)

    def constructProperty_ignore_passive_fiber_force(self, initValue):
        r"""
        constructProperty_ignore_passive_fiber_force(DeGrooteFregly2016Muscle self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_ignore_passive_fiber_force(self, initValue)

    def get_ignore_passive_fiber_force(self, *args):
        r"""
        get_ignore_passive_fiber_force(DeGrooteFregly2016Muscle self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_ignore_passive_fiber_force(DeGrooteFregly2016Muscle self) -> bool const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_ignore_passive_fiber_force(self, *args)

    def upd_ignore_passive_fiber_force(self, *args):
        r"""
        upd_ignore_passive_fiber_force(DeGrooteFregly2016Muscle self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_ignore_passive_fiber_force(DeGrooteFregly2016Muscle self) -> bool &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_ignore_passive_fiber_force(self, *args)

    def set_ignore_passive_fiber_force(self, *args):
        r"""
        set_ignore_passive_fiber_force(DeGrooteFregly2016Muscle self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_ignore_passive_fiber_force(DeGrooteFregly2016Muscle self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_ignore_passive_fiber_force(self, *args)

    def copyProperty_passive_fiber_strain_at_one_norm_force(self, source):
        r"""
        copyProperty_passive_fiber_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_passive_fiber_strain_at_one_norm_force(self, source)

    def append_passive_fiber_strain_at_one_norm_force(self, value):
        r"""
        append_passive_fiber_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_passive_fiber_strain_at_one_norm_force(self, value)

    def constructProperty_passive_fiber_strain_at_one_norm_force(self, initValue):
        r"""
        constructProperty_passive_fiber_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_passive_fiber_strain_at_one_norm_force(self, initValue)

    def get_passive_fiber_strain_at_one_norm_force(self, *args):
        r"""
        get_passive_fiber_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_passive_fiber_strain_at_one_norm_force(DeGrooteFregly2016Muscle self) -> double const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_passive_fiber_strain_at_one_norm_force(self, *args)

    def upd_passive_fiber_strain_at_one_norm_force(self, *args):
        r"""
        upd_passive_fiber_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_passive_fiber_strain_at_one_norm_force(DeGrooteFregly2016Muscle self) -> double &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_passive_fiber_strain_at_one_norm_force(self, *args)

    def set_passive_fiber_strain_at_one_norm_force(self, *args):
        r"""
        set_passive_fiber_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_passive_fiber_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_passive_fiber_strain_at_one_norm_force(self, *args)

    def copyProperty_tendon_strain_at_one_norm_force(self, source):
        r"""
        copyProperty_tendon_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_tendon_strain_at_one_norm_force(self, source)

    def append_tendon_strain_at_one_norm_force(self, value):
        r"""
        append_tendon_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_tendon_strain_at_one_norm_force(self, value)

    def constructProperty_tendon_strain_at_one_norm_force(self, initValue):
        r"""
        constructProperty_tendon_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_tendon_strain_at_one_norm_force(self, initValue)

    def get_tendon_strain_at_one_norm_force(self, *args):
        r"""
        get_tendon_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_tendon_strain_at_one_norm_force(DeGrooteFregly2016Muscle self) -> double const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_tendon_strain_at_one_norm_force(self, *args)

    def upd_tendon_strain_at_one_norm_force(self, *args):
        r"""
        upd_tendon_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_tendon_strain_at_one_norm_force(DeGrooteFregly2016Muscle self) -> double &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_tendon_strain_at_one_norm_force(self, *args)

    def set_tendon_strain_at_one_norm_force(self, *args):
        r"""
        set_tendon_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_tendon_strain_at_one_norm_force(DeGrooteFregly2016Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_tendon_strain_at_one_norm_force(self, *args)

    def copyProperty_tendon_compliance_dynamics_mode(self, source):
        r"""
        copyProperty_tendon_compliance_dynamics_mode(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_tendon_compliance_dynamics_mode(self, source)

    def append_tendon_compliance_dynamics_mode(self, value):
        r"""
        append_tendon_compliance_dynamics_mode(DeGrooteFregly2016Muscle self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_tendon_compliance_dynamics_mode(self, value)

    def constructProperty_tendon_compliance_dynamics_mode(self, initValue):
        r"""
        constructProperty_tendon_compliance_dynamics_mode(DeGrooteFregly2016Muscle self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_tendon_compliance_dynamics_mode(self, initValue)

    def get_tendon_compliance_dynamics_mode(self, *args):
        r"""
        get_tendon_compliance_dynamics_mode(DeGrooteFregly2016Muscle self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_tendon_compliance_dynamics_mode(DeGrooteFregly2016Muscle self) -> std::string const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_tendon_compliance_dynamics_mode(self, *args)

    def upd_tendon_compliance_dynamics_mode(self, *args):
        r"""
        upd_tendon_compliance_dynamics_mode(DeGrooteFregly2016Muscle self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_tendon_compliance_dynamics_mode(DeGrooteFregly2016Muscle self) -> std::string &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_tendon_compliance_dynamics_mode(self, *args)

    def set_tendon_compliance_dynamics_mode(self, *args):
        r"""
        set_tendon_compliance_dynamics_mode(DeGrooteFregly2016Muscle self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_tendon_compliance_dynamics_mode(DeGrooteFregly2016Muscle self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_tendon_compliance_dynamics_mode(self, *args)

    def copyProperty_activation_dynamics_smoothing(self, source):
        r"""
        copyProperty_activation_dynamics_smoothing(DeGrooteFregly2016Muscle self, DeGrooteFregly2016Muscle source)

        Parameters
        ----------
        source: OpenSim::DeGrooteFregly2016Muscle::Self const &

        """
        return _actuators.DeGrooteFregly2016Muscle_copyProperty_activation_dynamics_smoothing(self, source)

    def append_activation_dynamics_smoothing(self, value):
        r"""
        append_activation_dynamics_smoothing(DeGrooteFregly2016Muscle self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_append_activation_dynamics_smoothing(self, value)

    def constructProperty_activation_dynamics_smoothing(self, initValue):
        r"""
        constructProperty_activation_dynamics_smoothing(DeGrooteFregly2016Muscle self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_constructProperty_activation_dynamics_smoothing(self, initValue)

    def get_activation_dynamics_smoothing(self, *args):
        r"""
        get_activation_dynamics_smoothing(DeGrooteFregly2016Muscle self, int i) -> double const

        Parameters
        ----------
        i: int

        get_activation_dynamics_smoothing(DeGrooteFregly2016Muscle self) -> double const &
        """
        return _actuators.DeGrooteFregly2016Muscle_get_activation_dynamics_smoothing(self, *args)

    def upd_activation_dynamics_smoothing(self, *args):
        r"""
        upd_activation_dynamics_smoothing(DeGrooteFregly2016Muscle self, int i) -> double

        Parameters
        ----------
        i: int

        upd_activation_dynamics_smoothing(DeGrooteFregly2016Muscle self) -> double &
        """
        return _actuators.DeGrooteFregly2016Muscle_upd_activation_dynamics_smoothing(self, *args)

    def set_activation_dynamics_smoothing(self, *args):
        r"""
        set_activation_dynamics_smoothing(DeGrooteFregly2016Muscle self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_activation_dynamics_smoothing(DeGrooteFregly2016Muscle self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _actuators.DeGrooteFregly2016Muscle_set_activation_dynamics_smoothing(self, *args)
    _has_output_passive_fiber_elastic_force = property(_actuators.DeGrooteFregly2016Muscle__has_output_passive_fiber_elastic_force_get, _actuators.DeGrooteFregly2016Muscle__has_output_passive_fiber_elastic_force_set, doc=r"""_has_output_passive_fiber_elastic_force : bool""")
    _has_output_passive_fiber_elastic_force_along_tendon = property(_actuators.DeGrooteFregly2016Muscle__has_output_passive_fiber_elastic_force_along_tendon_get, _actuators.DeGrooteFregly2016Muscle__has_output_passive_fiber_elastic_force_along_tendon_set, doc=r"""_has_output_passive_fiber_elastic_force_along_tendon : bool""")
    _has_output_passive_fiber_damping_force = property(_actuators.DeGrooteFregly2016Muscle__has_output_passive_fiber_damping_force_get, _actuators.DeGrooteFregly2016Muscle__has_output_passive_fiber_damping_force_set, doc=r"""_has_output_passive_fiber_damping_force : bool""")
    _has_output_passive_fiber_damping_force_along_tendon = property(_actuators.DeGrooteFregly2016Muscle__has_output_passive_fiber_damping_force_along_tendon_get, _actuators.DeGrooteFregly2016Muscle__has_output_passive_fiber_damping_force_along_tendon_set, doc=r"""_has_output_passive_fiber_damping_force_along_tendon : bool""")
    _has_output_implicitresidual_normalized_tendon_force = property(_actuators.DeGrooteFregly2016Muscle__has_output_implicitresidual_normalized_tendon_force_get, _actuators.DeGrooteFregly2016Muscle__has_output_implicitresidual_normalized_tendon_force_set, doc=r"""_has_output_implicitresidual_normalized_tendon_force : bool""")
    _has_output_implicitenabled_normalized_tendon_force = property(_actuators.DeGrooteFregly2016Muscle__has_output_implicitenabled_normalized_tendon_force_get, _actuators.DeGrooteFregly2016Muscle__has_output_implicitenabled_normalized_tendon_force_set, doc=r"""_has_output_implicitenabled_normalized_tendon_force : bool""")
    _has_output_statebounds_normalized_tendon_force = property(_actuators.DeGrooteFregly2016Muscle__has_output_statebounds_normalized_tendon_force_get, _actuators.DeGrooteFregly2016Muscle__has_output_statebounds_normalized_tendon_force_set, doc=r"""_has_output_statebounds_normalized_tendon_force : bool""")

    def __init__(self):
        r"""__init__(DeGrooteFregly2016Muscle self) -> DeGrooteFregly2016Muscle"""
        _actuators.DeGrooteFregly2016Muscle_swiginit(self, _actuators.new_DeGrooteFregly2016Muscle())

    def getActivation(self, s):
        r"""
        getActivation(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getActivation(self, s)

    def setActivation(self, s, activation):
        r"""
        setActivation(DeGrooteFregly2016Muscle self, State s, double activation)

        Parameters
        ----------
        s: SimTK::State &
        activation: double

        """
        return _actuators.DeGrooteFregly2016Muscle_setActivation(self, s, activation)

    def computeInitialFiberEquilibrium(self, s):
        r"""
        computeInitialFiberEquilibrium(DeGrooteFregly2016Muscle self, State s)

        Parameters
        ----------
        s: SimTK::State &

        """
        return _actuators.DeGrooteFregly2016Muscle_computeInitialFiberEquilibrium(self, s)

    def getPassiveFiberElasticForce(self, s):
        r"""
        getPassiveFiberElasticForce(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getPassiveFiberElasticForce(self, s)

    def getPassiveFiberElasticForceAlongTendon(self, s):
        r"""
        getPassiveFiberElasticForceAlongTendon(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getPassiveFiberElasticForceAlongTendon(self, s)

    def getPassiveFiberDampingForce(self, s):
        r"""
        getPassiveFiberDampingForce(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getPassiveFiberDampingForce(self, s)

    def getPassiveFiberDampingForceAlongTendon(self, s):
        r"""
        getPassiveFiberDampingForceAlongTendon(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getPassiveFiberDampingForceAlongTendon(self, s)

    def getImplicitEnabledNormalizedTendonForce(self, arg2):
        r"""
        getImplicitEnabledNormalizedTendonForce(DeGrooteFregly2016Muscle self, State arg2) -> bool

        Parameters
        ----------
        arg2: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getImplicitEnabledNormalizedTendonForce(self, arg2)

    def getImplicitResidualNormalizedTendonForce(self, s):
        r"""
        getImplicitResidualNormalizedTendonForce(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getImplicitResidualNormalizedTendonForce(self, s)

    def getNormalizedTendonForce(self, s):
        r"""
        getNormalizedTendonForce(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getNormalizedTendonForce(self, s)

    def getNormalizedTendonForceDerivative(self, s):
        r"""
        getNormalizedTendonForceDerivative(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getNormalizedTendonForceDerivative(self, s)

    def getEquilibriumResidual(self, s):
        r"""
        getEquilibriumResidual(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getEquilibriumResidual(self, s)

    def getLinearizedEquilibriumResidualDerivative(self, s):
        r"""
        getLinearizedEquilibriumResidualDerivative(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getLinearizedEquilibriumResidualDerivative(self, s)

    @staticmethod
    def getActivationStateName():
        r"""getActivationStateName() -> std::string"""
        return _actuators.DeGrooteFregly2016Muscle_getActivationStateName()

    @staticmethod
    def getNormalizedTendonForceStateName():
        r"""getNormalizedTendonForceStateName() -> std::string"""
        return _actuators.DeGrooteFregly2016Muscle_getNormalizedTendonForceStateName()

    @staticmethod
    def getImplicitDynamicsDerivativeName():
        r"""getImplicitDynamicsDerivativeName() -> std::string"""
        return _actuators.DeGrooteFregly2016Muscle_getImplicitDynamicsDerivativeName()

    @staticmethod
    def getImplicitDynamicsResidualName():
        r"""getImplicitDynamicsResidualName() -> std::string"""
        return _actuators.DeGrooteFregly2016Muscle_getImplicitDynamicsResidualName()

    @staticmethod
    def getMinNormalizedTendonForce():
        r"""getMinNormalizedTendonForce() -> double"""
        return _actuators.DeGrooteFregly2016Muscle_getMinNormalizedTendonForce()

    @staticmethod
    def getMaxNormalizedTendonForce():
        r"""getMaxNormalizedTendonForce() -> double"""
        return _actuators.DeGrooteFregly2016Muscle_getMaxNormalizedTendonForce()

    def getBoundsNormalizedTendonForce(self, arg2):
        r"""
        getBoundsNormalizedTendonForce(DeGrooteFregly2016Muscle self, State arg2) -> Vec2

        Parameters
        ----------
        arg2: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_getBoundsNormalizedTendonForce(self, arg2)

    @staticmethod
    def getMinNormalizedFiberLength():
        r"""getMinNormalizedFiberLength() -> double"""
        return _actuators.DeGrooteFregly2016Muscle_getMinNormalizedFiberLength()

    @staticmethod
    def getMaxNormalizedFiberLength():
        r"""getMaxNormalizedFiberLength() -> double"""
        return _actuators.DeGrooteFregly2016Muscle_getMaxNormalizedFiberLength()

    def getBoundsNormalizedFiberLength(self):
        r"""getBoundsNormalizedFiberLength(DeGrooteFregly2016Muscle self) -> Vec2"""
        return _actuators.DeGrooteFregly2016Muscle_getBoundsNormalizedFiberLength(self)

    def setNormalizedTendonForce(self, s, normTendonForce):
        r"""
        setNormalizedTendonForce(DeGrooteFregly2016Muscle self, State s, double normTendonForce)

        Parameters
        ----------
        s: SimTK::State &
        normTendonForce: double

        """
        return _actuators.DeGrooteFregly2016Muscle_setNormalizedTendonForce(self, s, normTendonForce)

    def calcActiveForceLengthMultiplier(self, normFiberLength):
        r"""
        calcActiveForceLengthMultiplier(DeGrooteFregly2016Muscle self, SimTK::Real const & normFiberLength) -> SimTK::Real

        Parameters
        ----------
        normFiberLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcActiveForceLengthMultiplier(self, normFiberLength)

    def calcActiveForceLengthMultiplierDerivative(self, normFiberLength):
        r"""
        calcActiveForceLengthMultiplierDerivative(DeGrooteFregly2016Muscle self, SimTK::Real const & normFiberLength) -> SimTK::Real

        Parameters
        ----------
        normFiberLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcActiveForceLengthMultiplierDerivative(self, normFiberLength)

    @staticmethod
    def calcForceVelocityMultiplier(normFiberVelocity):
        r"""
        calcForceVelocityMultiplier(SimTK::Real const & normFiberVelocity) -> SimTK::Real

        Parameters
        ----------
        normFiberVelocity: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcForceVelocityMultiplier(normFiberVelocity)

    @staticmethod
    def calcForceVelocityInverseCurve(forceVelocityMult):
        r"""
        calcForceVelocityInverseCurve(SimTK::Real const & forceVelocityMult) -> SimTK::Real

        Parameters
        ----------
        forceVelocityMult: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcForceVelocityInverseCurve(forceVelocityMult)

    def calcPassiveForceMultiplier(self, normFiberLength):
        r"""
        calcPassiveForceMultiplier(DeGrooteFregly2016Muscle self, SimTK::Real const & normFiberLength) -> SimTK::Real

        Parameters
        ----------
        normFiberLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcPassiveForceMultiplier(self, normFiberLength)

    def calcPassiveForceMultiplierDerivative(self, normFiberLength):
        r"""
        calcPassiveForceMultiplierDerivative(DeGrooteFregly2016Muscle self, SimTK::Real const & normFiberLength) -> SimTK::Real

        Parameters
        ----------
        normFiberLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcPassiveForceMultiplierDerivative(self, normFiberLength)

    def calcPassiveForceMultiplierIntegral(self, normFiberLength):
        r"""
        calcPassiveForceMultiplierIntegral(DeGrooteFregly2016Muscle self, SimTK::Real const & normFiberLength) -> SimTK::Real

        Parameters
        ----------
        normFiberLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcPassiveForceMultiplierIntegral(self, normFiberLength)

    def calcTendonForceMultiplier(self, normTendonLength):
        r"""
        calcTendonForceMultiplier(DeGrooteFregly2016Muscle self, SimTK::Real const & normTendonLength) -> SimTK::Real

        Parameters
        ----------
        normTendonLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcTendonForceMultiplier(self, normTendonLength)

    def calcTendonForceMultiplierDerivative(self, normTendonLength):
        r"""
        calcTendonForceMultiplierDerivative(DeGrooteFregly2016Muscle self, SimTK::Real const & normTendonLength) -> SimTK::Real

        Parameters
        ----------
        normTendonLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcTendonForceMultiplierDerivative(self, normTendonLength)

    def calcTendonForceMultiplierIntegral(self, normTendonLength):
        r"""
        calcTendonForceMultiplierIntegral(DeGrooteFregly2016Muscle self, SimTK::Real const & normTendonLength) -> SimTK::Real

        Parameters
        ----------
        normTendonLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcTendonForceMultiplierIntegral(self, normTendonLength)

    def calcTendonForceLengthInverseCurve(self, normTendonForce):
        r"""
        calcTendonForceLengthInverseCurve(DeGrooteFregly2016Muscle self, SimTK::Real const & normTendonForce) -> SimTK::Real

        Parameters
        ----------
        normTendonForce: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcTendonForceLengthInverseCurve(self, normTendonForce)

    def calcTendonForceLengthInverseCurveDerivative(self, derivNormTendonForce, normTendonLength):
        r"""
        calcTendonForceLengthInverseCurveDerivative(DeGrooteFregly2016Muscle self, SimTK::Real const & derivNormTendonForce, SimTK::Real const & normTendonLength) -> SimTK::Real

        Parameters
        ----------
        derivNormTendonForce: SimTK::Real const &
        normTendonLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcTendonForceLengthInverseCurveDerivative(self, derivNormTendonForce, normTendonLength)

    def calcFiberForce(self, activation, activeForceLengthMultiplier, forceVelocityMultiplier, normPassiveFiberForce, normFiberVelocity, activeFiberForce, conPassiveFiberForce, nonConPassiveFiberForce, totalFiberForce):
        r"""
        calcFiberForce(DeGrooteFregly2016Muscle self, SimTK::Real const & activation, SimTK::Real const & activeForceLengthMultiplier, SimTK::Real const & forceVelocityMultiplier, SimTK::Real const & normPassiveFiberForce, SimTK::Real const & normFiberVelocity, SimTK::Real & activeFiberForce, SimTK::Real & conPassiveFiberForce, SimTK::Real & nonConPassiveFiberForce, SimTK::Real & totalFiberForce)

        Parameters
        ----------
        activation: SimTK::Real const &
        activeForceLengthMultiplier: SimTK::Real const &
        forceVelocityMultiplier: SimTK::Real const &
        normPassiveFiberForce: SimTK::Real const &
        normFiberVelocity: SimTK::Real const &
        activeFiberForce: SimTK::Real &
        conPassiveFiberForce: SimTK::Real &
        nonConPassiveFiberForce: SimTK::Real &
        totalFiberForce: SimTK::Real &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcFiberForce(self, activation, activeForceLengthMultiplier, forceVelocityMultiplier, normPassiveFiberForce, normFiberVelocity, activeFiberForce, conPassiveFiberForce, nonConPassiveFiberForce, totalFiberForce)

    def calcFiberStiffness(self, activation, normFiberLength, fiberVelocityMultiplier):
        r"""
        calcFiberStiffness(DeGrooteFregly2016Muscle self, SimTK::Real const & activation, SimTK::Real const & normFiberLength, SimTK::Real const & fiberVelocityMultiplier) -> SimTK::Real

        Parameters
        ----------
        activation: SimTK::Real const &
        normFiberLength: SimTK::Real const &
        fiberVelocityMultiplier: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcFiberStiffness(self, activation, normFiberLength, fiberVelocityMultiplier)

    def calcTendonStiffness(self, normTendonLength):
        r"""
        calcTendonStiffness(DeGrooteFregly2016Muscle self, SimTK::Real const & normTendonLength) -> SimTK::Real

        Parameters
        ----------
        normTendonLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcTendonStiffness(self, normTendonLength)

    def calcMuscleStiffness(self, *args):
        r"""
        calcMuscleStiffness(DeGrooteFregly2016Muscle self, SimTK::Real const & tendonStiffness, SimTK::Real const & fiberStiffnessAlongTendon) -> SimTK::Real

        Parameters
        ----------
        tendonStiffness: SimTK::Real const &
        fiberStiffnessAlongTendon: SimTK::Real const &

        calcMuscleStiffness(DeGrooteFregly2016Muscle self, State s) -> double

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcMuscleStiffness(self, *args)

    def calcPartialPennationAnglePartialFiberLength(self, fiberLength):
        r"""
        calcPartialPennationAnglePartialFiberLength(DeGrooteFregly2016Muscle self, SimTK::Real const & fiberLength) -> SimTK::Real

        Parameters
        ----------
        fiberLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcPartialPennationAnglePartialFiberLength(self, fiberLength)

    def calcPartialFiberForceAlongTendonPartialFiberLength(self, fiberForce, fiberStiffness, sinPennationAngle, cosPennationAngle, partialPennationAnglePartialFiberLength):
        r"""
        calcPartialFiberForceAlongTendonPartialFiberLength(DeGrooteFregly2016Muscle self, SimTK::Real const & fiberForce, SimTK::Real const & fiberStiffness, SimTK::Real const & sinPennationAngle, SimTK::Real const & cosPennationAngle, SimTK::Real const & partialPennationAnglePartialFiberLength) -> SimTK::Real

        Parameters
        ----------
        fiberForce: SimTK::Real const &
        fiberStiffness: SimTK::Real const &
        sinPennationAngle: SimTK::Real const &
        cosPennationAngle: SimTK::Real const &
        partialPennationAnglePartialFiberLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcPartialFiberForceAlongTendonPartialFiberLength(self, fiberForce, fiberStiffness, sinPennationAngle, cosPennationAngle, partialPennationAnglePartialFiberLength)

    def calcFiberStiffnessAlongTendon(self, fiberLength, partialFiberForceAlongTendonPartialFiberLength, sinPennationAngle, cosPennationAngle, partialPennationAnglePartialFiberLength):
        r"""
        calcFiberStiffnessAlongTendon(DeGrooteFregly2016Muscle self, SimTK::Real const & fiberLength, SimTK::Real const & partialFiberForceAlongTendonPartialFiberLength, SimTK::Real const & sinPennationAngle, SimTK::Real const & cosPennationAngle, SimTK::Real const & partialPennationAnglePartialFiberLength) -> SimTK::Real

        Parameters
        ----------
        fiberLength: SimTK::Real const &
        partialFiberForceAlongTendonPartialFiberLength: SimTK::Real const &
        sinPennationAngle: SimTK::Real const &
        cosPennationAngle: SimTK::Real const &
        partialPennationAnglePartialFiberLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcFiberStiffnessAlongTendon(self, fiberLength, partialFiberForceAlongTendonPartialFiberLength, sinPennationAngle, cosPennationAngle, partialPennationAnglePartialFiberLength)

    def calcPartialTendonLengthPartialFiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, partialPennationAnglePartialFiberLength):
        r"""
        calcPartialTendonLengthPartialFiberLength(DeGrooteFregly2016Muscle self, SimTK::Real const & fiberLength, SimTK::Real const & sinPennationAngle, SimTK::Real const & cosPennationAngle, SimTK::Real const & partialPennationAnglePartialFiberLength) -> SimTK::Real

        Parameters
        ----------
        fiberLength: SimTK::Real const &
        sinPennationAngle: SimTK::Real const &
        cosPennationAngle: SimTK::Real const &
        partialPennationAnglePartialFiberLength: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcPartialTendonLengthPartialFiberLength(self, fiberLength, sinPennationAngle, cosPennationAngle, partialPennationAnglePartialFiberLength)

    def calcPartialTendonForcePartialFiberLength(self, tendonStiffness, fiberLength, sinPennationAngle, cosPennationAngle):
        r"""
        calcPartialTendonForcePartialFiberLength(DeGrooteFregly2016Muscle self, SimTK::Real const & tendonStiffness, SimTK::Real const & fiberLength, SimTK::Real const & sinPennationAngle, SimTK::Real const & cosPennationAngle) -> SimTK::Real

        Parameters
        ----------
        tendonStiffness: SimTK::Real const &
        fiberLength: SimTK::Real const &
        sinPennationAngle: SimTK::Real const &
        cosPennationAngle: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcPartialTendonForcePartialFiberLength(self, tendonStiffness, fiberLength, sinPennationAngle, cosPennationAngle)

    def calcEquilibriumResidual(self, muscleTendonLength, muscleTendonVelocity, activation, normTendonForce, normTendonForceDerivative):
        r"""
        calcEquilibriumResidual(DeGrooteFregly2016Muscle self, SimTK::Real const & muscleTendonLength, SimTK::Real const & muscleTendonVelocity, SimTK::Real const & activation, SimTK::Real const & normTendonForce, SimTK::Real const & normTendonForceDerivative) -> SimTK::Real

        Parameters
        ----------
        muscleTendonLength: SimTK::Real const &
        muscleTendonVelocity: SimTK::Real const &
        activation: SimTK::Real const &
        normTendonForce: SimTK::Real const &
        normTendonForceDerivative: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcEquilibriumResidual(self, muscleTendonLength, muscleTendonVelocity, activation, normTendonForce, normTendonForceDerivative)

    def calcLinearizedEquilibriumResidualDerivative(self, muscleTendonLength, muscleTendonVelocity, activation, normTendonForce, normTendonForceDerivative):
        r"""
        calcLinearizedEquilibriumResidualDerivative(DeGrooteFregly2016Muscle self, SimTK::Real const & muscleTendonLength, SimTK::Real const & muscleTendonVelocity, SimTK::Real const & activation, SimTK::Real const & normTendonForce, SimTK::Real const & normTendonForceDerivative) -> SimTK::Real

        Parameters
        ----------
        muscleTendonLength: SimTK::Real const &
        muscleTendonVelocity: SimTK::Real const &
        activation: SimTK::Real const &
        normTendonForce: SimTK::Real const &
        normTendonForceDerivative: SimTK::Real const &

        """
        return _actuators.DeGrooteFregly2016Muscle_calcLinearizedEquilibriumResidualDerivative(self, muscleTendonLength, muscleTendonVelocity, activation, normTendonForce, normTendonForceDerivative)

    def exportFiberLengthCurvesToTable(self, *args):
        r"""
        exportFiberLengthCurvesToTable(DeGrooteFregly2016Muscle self, Vector normFiberLengths=SimTK::Vector()) -> DataTable

        Parameters
        ----------
        normFiberLengths: SimTK::Vector const &

        """
        return _actuators.DeGrooteFregly2016Muscle_exportFiberLengthCurvesToTable(self, *args)

    def exportFiberVelocityMultiplierToTable(self, *args):
        r"""
        exportFiberVelocityMultiplierToTable(DeGrooteFregly2016Muscle self, Vector normFiberVelocities=SimTK::Vector()) -> DataTable

        Parameters
        ----------
        normFiberVelocities: SimTK::Vector const &

        """
        return _actuators.DeGrooteFregly2016Muscle_exportFiberVelocityMultiplierToTable(self, *args)

    def exportTendonForceMultiplierToTable(self, *args):
        r"""
        exportTendonForceMultiplierToTable(DeGrooteFregly2016Muscle self, Vector normTendonLengths=SimTK::Vector()) -> DataTable

        Parameters
        ----------
        normTendonLengths: SimTK::Vector const &

        """
        return _actuators.DeGrooteFregly2016Muscle_exportTendonForceMultiplierToTable(self, *args)

    def printCurvesToSTOFiles(self, *args):
        r"""
        printCurvesToSTOFiles(DeGrooteFregly2016Muscle self, std::string const & directory=".")

        Parameters
        ----------
        directory: std::string const &

        """
        return _actuators.DeGrooteFregly2016Muscle_printCurvesToSTOFiles(self, *args)

    @staticmethod
    def replaceMuscles(model, allowUnsupportedMuscles=False):
        r"""
        replaceMuscles(Model model, bool allowUnsupportedMuscles=False)

        Parameters
        ----------
        model: OpenSim::Model &
        allowUnsupportedMuscles: bool

        """
        return _actuators.DeGrooteFregly2016Muscle_replaceMuscles(model, allowUnsupportedMuscles)

    def extendPostScale(self, s, scaleSet):
        r"""
        extendPostScale(DeGrooteFregly2016Muscle self, State s, ScaleSet scaleSet)

        Parameters
        ----------
        s: SimTK::State const &
        scaleSet: OpenSim::ScaleSet const &

        """
        return _actuators.DeGrooteFregly2016Muscle_extendPostScale(self, s, scaleSet)
    __swig_destroy__ = _actuators.delete_DeGrooteFregly2016Muscle

# Register DeGrooteFregly2016Muscle in _actuators:
_actuators.DeGrooteFregly2016Muscle_swigregister(DeGrooteFregly2016Muscle)
class SetFunctionBasedPaths(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::Set< OpenSim::FunctionBasedPath > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetFunctionBasedPaths

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.SetFunctionBasedPaths_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetFunctionBasedPaths self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.SetFunctionBasedPaths_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.SetFunctionBasedPaths_getClassName()

    def clone(self):
        r"""clone(SetFunctionBasedPaths self) -> SetFunctionBasedPaths"""
        return _actuators.SetFunctionBasedPaths_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetFunctionBasedPaths self) -> std::string const &"""
        return _actuators.SetFunctionBasedPaths_getConcreteClassName(self)
    __swig_destroy__ = _actuators.delete_SetFunctionBasedPaths

    def __init__(self, *args):
        r"""
        __init__(SetFunctionBasedPaths self) -> SetFunctionBasedPaths
        __init__(SetFunctionBasedPaths self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetFunctionBasedPaths

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(SetFunctionBasedPaths self, SetFunctionBasedPaths aSet) -> SetFunctionBasedPaths

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::FunctionBasedPath,OpenSim::Object > const &

        """
        _actuators.SetFunctionBasedPaths_swiginit(self, _actuators.new_SetFunctionBasedPaths(*args))

    def setupGroups(self):
        r"""setupGroups(SetFunctionBasedPaths self)"""
        return _actuators.SetFunctionBasedPaths_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        setMemoryOwner(SetFunctionBasedPaths self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _actuators.SetFunctionBasedPaths_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        setSize(SetFunctionBasedPaths self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _actuators.SetFunctionBasedPaths_setSize(self, aSize)

    def getSize(self):
        r"""getSize(SetFunctionBasedPaths self) -> int"""
        return _actuators.SetFunctionBasedPaths_getSize(self)

    def getIndex(self, *args):
        r"""
        getIndex(SetFunctionBasedPaths self, FunctionBasedPath aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::FunctionBasedPath const *
        aStartIndex: int

        getIndex(SetFunctionBasedPaths self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _actuators.SetFunctionBasedPaths_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""
        getGroupNamesContaining(SetFunctionBasedPaths self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _actuators.SetFunctionBasedPaths_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        adoptAndAppend(SetFunctionBasedPaths self, FunctionBasedPath aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::FunctionBasedPath *

        """
        return _actuators.SetFunctionBasedPaths_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend(SetFunctionBasedPaths self, FunctionBasedPath aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::FunctionBasedPath const &

        """
        return _actuators.SetFunctionBasedPaths_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        insert(SetFunctionBasedPaths self, int aIndex, FunctionBasedPath aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::FunctionBasedPath *

        """
        return _actuators.SetFunctionBasedPaths_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(SetFunctionBasedPaths self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetFunctionBasedPaths self, FunctionBasedPath aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::FunctionBasedPath const *

        """
        return _actuators.SetFunctionBasedPaths_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetFunctionBasedPaths self)"""
        return _actuators.SetFunctionBasedPaths_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        set(SetFunctionBasedPaths self, int aIndex, FunctionBasedPath aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::FunctionBasedPath *
        preserveGroups: bool

        """
        return _actuators.SetFunctionBasedPaths_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        get(SetFunctionBasedPaths self, int aIndex) -> FunctionBasedPath

        Parameters
        ----------
        aIndex: int

        get(SetFunctionBasedPaths self, std::string const & aName) -> FunctionBasedPath

        Parameters
        ----------
        aName: std::string const &

        """
        return _actuators.SetFunctionBasedPaths_get(self, *args)

    def contains(self, aName):
        r"""
        contains(SetFunctionBasedPaths self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _actuators.SetFunctionBasedPaths_contains(self, aName)

    def getNames(self, rNames):
        r"""
        getNames(SetFunctionBasedPaths self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _actuators.SetFunctionBasedPaths_getNames(self, rNames)

    def getNumGroups(self):
        r"""getNumGroups(SetFunctionBasedPaths self) -> int"""
        return _actuators.SetFunctionBasedPaths_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""
        addGroup(SetFunctionBasedPaths self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _actuators.SetFunctionBasedPaths_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""
        removeGroup(SetFunctionBasedPaths self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _actuators.SetFunctionBasedPaths_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""
        renameGroup(SetFunctionBasedPaths self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _actuators.SetFunctionBasedPaths_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""
        addObjectToGroup(SetFunctionBasedPaths self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _actuators.SetFunctionBasedPaths_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""
        getGroupNames(SetFunctionBasedPaths self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _actuators.SetFunctionBasedPaths_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        getGroup(SetFunctionBasedPaths self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetFunctionBasedPaths self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _actuators.SetFunctionBasedPaths_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetFunctionBasedPaths in _actuators:
_actuators.SetFunctionBasedPaths_swigregister(SetFunctionBasedPaths)
class ModelFactory(object):
    r"""Proxy of C++ OpenSim::ModelFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def createNLinkPendulum(numLinks):
        r"""
        createNLinkPendulum(int numLinks) -> Model

        Parameters
        ----------
        numLinks: int

        """
        return _actuators.ModelFactory_createNLinkPendulum(numLinks)

    @staticmethod
    def createPendulum():
        r"""createPendulum() -> Model"""
        return _actuators.ModelFactory_createPendulum()

    @staticmethod
    def createDoublePendulum():
        r"""createDoublePendulum() -> Model"""
        return _actuators.ModelFactory_createDoublePendulum()

    @staticmethod
    def createSlidingPointMass():
        r"""createSlidingPointMass() -> Model"""
        return _actuators.ModelFactory_createSlidingPointMass()

    @staticmethod
    def createPlanarPointMass():
        r"""createPlanarPointMass() -> Model"""
        return _actuators.ModelFactory_createPlanarPointMass()

    @staticmethod
    def replaceMusclesWithPathActuators(model):
        r"""
        replaceMusclesWithPathActuators(Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _actuators.ModelFactory_replaceMusclesWithPathActuators(model)

    @staticmethod
    def removeMuscles(model):
        r"""
        removeMuscles(Model model)

        Parameters
        ----------
        model: OpenSim::Model &

        """
        return _actuators.ModelFactory_removeMuscles(model)

    @staticmethod
    def replaceJointWithWeldJoint(model, jointName):
        r"""
        replaceJointWithWeldJoint(Model model, std::string const & jointName)

        Parameters
        ----------
        model: OpenSim::Model &
        jointName: std::string const &

        """
        return _actuators.ModelFactory_replaceJointWithWeldJoint(model, jointName)

    @staticmethod
    def createReserveActuators(*args):
        r"""
        createReserveActuators(Model model, double optimalForce, double bound=SimTK::NaN, bool skipCoordinatesWithExistingActuators=True, bool skipResidualCoordinates=False)

        Parameters
        ----------
        model: OpenSim::Model &
        optimalForce: double
        bound: double
        skipCoordinatesWithExistingActuators: bool
        skipResidualCoordinates: bool

        """
        return _actuators.ModelFactory_createReserveActuators(*args)

    @staticmethod
    def createResidualActuators(*args):
        r"""
        createResidualActuators(Model model, double rotationalOptimalForce, double translationalOptimalForce, double bound=SimTK::NaN, bool skipCoordinatesWithExistingActuators=True)

        Parameters
        ----------
        model: OpenSim::Model &
        rotationalOptimalForce: double
        translationalOptimalForce: double
        bound: double
        skipCoordinatesWithExistingActuators: bool

        """
        return _actuators.ModelFactory_createResidualActuators(*args)

    @staticmethod
    def replacePathsWithFunctionBasedPaths(model, functionBasedPaths):
        r"""
        replacePathsWithFunctionBasedPaths(Model model, SetFunctionBasedPaths functionBasedPaths)

        Parameters
        ----------
        model: OpenSim::Model &
        functionBasedPaths: OpenSim::Set< OpenSim::FunctionBasedPath > const &

        """
        return _actuators.ModelFactory_replacePathsWithFunctionBasedPaths(model, functionBasedPaths)

    def __init__(self):
        r"""__init__(ModelFactory self) -> ModelFactory"""
        _actuators.ModelFactory_swiginit(self, _actuators.new_ModelFactory())
    __swig_destroy__ = _actuators.delete_ModelFactory

# Register ModelFactory in _actuators:
_actuators.ModelFactory_swigregister(ModelFactory)
class ModelOperator(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::ModelOperator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModelOperator

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModelOperator_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModelOperator self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModelOperator_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModelOperator_getClassName()

    def clone(self):
        r"""clone(ModelOperator self) -> ModelOperator"""
        return _actuators.ModelOperator_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModelOperator self) -> std::string const &"""
        return _actuators.ModelOperator_getConcreteClassName(self)

    def operate(self, model, relativeToDirectory):
        r"""
        operate(ModelOperator self, Model model, std::string const & relativeToDirectory)

        Parameters
        ----------
        model: OpenSim::Model &
        relativeToDirectory: std::string const &

        """
        return _actuators.ModelOperator_operate(self, model, relativeToDirectory)
    __swig_destroy__ = _actuators.delete_ModelOperator

# Register ModelOperator in _actuators:
_actuators.ModelOperator_swigregister(ModelOperator)
class ModelProcessor(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::ModelProcessor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModelProcessor

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModelProcessor_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModelProcessor self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModelProcessor_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModelProcessor_getClassName()

    def clone(self):
        r"""clone(ModelProcessor self) -> ModelProcessor"""
        return _actuators.ModelProcessor_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModelProcessor self) -> std::string const &"""
        return _actuators.ModelProcessor_getConcreteClassName(self)

    def copyProperty_filepath(self, source):
        r"""
        copyProperty_filepath(ModelProcessor self, ModelProcessor source)

        Parameters
        ----------
        source: OpenSim::ModelProcessor::Self const &

        """
        return _actuators.ModelProcessor_copyProperty_filepath(self, source)

    def append_filepath(self, value):
        r"""
        append_filepath(ModelProcessor self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.ModelProcessor_append_filepath(self, value)

    def constructProperty_filepath(self, initValue):
        r"""
        constructProperty_filepath(ModelProcessor self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.ModelProcessor_constructProperty_filepath(self, initValue)

    def get_filepath(self, *args):
        r"""
        get_filepath(ModelProcessor self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_filepath(ModelProcessor self) -> std::string const &
        """
        return _actuators.ModelProcessor_get_filepath(self, *args)

    def upd_filepath(self, *args):
        r"""
        upd_filepath(ModelProcessor self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_filepath(ModelProcessor self) -> std::string &
        """
        return _actuators.ModelProcessor_upd_filepath(self, *args)

    def set_filepath(self, *args):
        r"""
        set_filepath(ModelProcessor self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_filepath(ModelProcessor self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.ModelProcessor_set_filepath(self, *args)

    def copyProperty_operators(self, source):
        r"""
        copyProperty_operators(ModelProcessor self, ModelProcessor source)

        Parameters
        ----------
        source: OpenSim::ModelProcessor::Self const &

        """
        return _actuators.ModelProcessor_copyProperty_operators(self, source)

    def get_operators(self, i):
        r"""
        get_operators(ModelProcessor self, int i) -> ModelOperator

        Parameters
        ----------
        i: int

        """
        return _actuators.ModelProcessor_get_operators(self, i)

    def upd_operators(self, i):
        r"""
        upd_operators(ModelProcessor self, int i) -> ModelOperator

        Parameters
        ----------
        i: int

        """
        return _actuators.ModelProcessor_upd_operators(self, i)

    def set_operators(self, i, value):
        r"""
        set_operators(ModelProcessor self, int i, ModelOperator value)

        Parameters
        ----------
        i: int
        value: OpenSim::ModelOperator const &

        """
        return _actuators.ModelProcessor_set_operators(self, i, value)

    def append_operators(self, value):
        r"""
        append_operators(ModelProcessor self, ModelOperator value) -> int

        Parameters
        ----------
        value: OpenSim::ModelOperator const &

        """
        return _actuators.ModelProcessor_append_operators(self, value)

    def constructProperty_operators(self):
        r"""constructProperty_operators(ModelProcessor self)"""
        return _actuators.ModelProcessor_constructProperty_operators(self)

    def __init__(self, *args):
        r"""
        __init__(ModelProcessor self) -> ModelProcessor
        __init__(ModelProcessor self, Model model) -> ModelProcessor

        Parameters
        ----------
        model: OpenSim::Model

        __init__(ModelProcessor self, std::string filepath) -> ModelProcessor

        Parameters
        ----------
        filepath: std::string

        """
        _actuators.ModelProcessor_swiginit(self, _actuators.new_ModelProcessor(*args))

    def getModel(self):
        r"""getModel(ModelProcessor self) -> Model"""
        return _actuators.ModelProcessor_getModel(self)

    def updModel(self):
        r"""updModel(ModelProcessor self) -> Model"""
        return _actuators.ModelProcessor_updModel(self)

    def process(self, *args):
        r"""
        process(ModelProcessor self, std::string const & relativeToDirectory={}) -> Model

        Parameters
        ----------
        relativeToDirectory: std::string const &

        """
        return _actuators.ModelProcessor_process(self, *args)

    def append(self, op):
        r"""
        append(ModelProcessor self, ModelOperator op) -> ModelProcessor

        Parameters
        ----------
        op: OpenSim::ModelOperator const &

        """
        return _actuators.ModelProcessor_append(self, op)

    def __or__(self, right):
        r"""
        __or__(ModelProcessor self, ModelOperator right) -> ModelProcessor

        Parameters
        ----------
        right: OpenSim::ModelOperator const &

        """
        return _actuators.ModelProcessor___or__(self, right)

    def setModel(self, model):
        r"""
        setModel(ModelProcessor self, Model model)

        Parameters
        ----------
        model: OpenSim::Model *

        """
        return _actuators.ModelProcessor_setModel(self, model)
    __swig_destroy__ = _actuators.delete_ModelProcessor

# Register ModelProcessor in _actuators:
_actuators.ModelProcessor_swigregister(ModelProcessor)
class ModOpIgnoreActivationDynamics(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpIgnoreActivationDynamics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpIgnoreActivationDynamics

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpIgnoreActivationDynamics_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpIgnoreActivationDynamics self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpIgnoreActivationDynamics_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpIgnoreActivationDynamics_getClassName()

    def clone(self):
        r"""clone(ModOpIgnoreActivationDynamics self) -> ModOpIgnoreActivationDynamics"""
        return _actuators.ModOpIgnoreActivationDynamics_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpIgnoreActivationDynamics self) -> std::string const &"""
        return _actuators.ModOpIgnoreActivationDynamics_getConcreteClassName(self)

    def operate(self, model, arg3):
        r"""
        operate(ModOpIgnoreActivationDynamics self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpIgnoreActivationDynamics_operate(self, model, arg3)

    def __init__(self):
        r"""__init__(ModOpIgnoreActivationDynamics self) -> ModOpIgnoreActivationDynamics"""
        _actuators.ModOpIgnoreActivationDynamics_swiginit(self, _actuators.new_ModOpIgnoreActivationDynamics())
    __swig_destroy__ = _actuators.delete_ModOpIgnoreActivationDynamics

# Register ModOpIgnoreActivationDynamics in _actuators:
_actuators.ModOpIgnoreActivationDynamics_swigregister(ModOpIgnoreActivationDynamics)
class ModOpIgnoreTendonCompliance(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpIgnoreTendonCompliance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpIgnoreTendonCompliance

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpIgnoreTendonCompliance_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpIgnoreTendonCompliance self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpIgnoreTendonCompliance_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpIgnoreTendonCompliance_getClassName()

    def clone(self):
        r"""clone(ModOpIgnoreTendonCompliance self) -> ModOpIgnoreTendonCompliance"""
        return _actuators.ModOpIgnoreTendonCompliance_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpIgnoreTendonCompliance self) -> std::string const &"""
        return _actuators.ModOpIgnoreTendonCompliance_getConcreteClassName(self)

    def operate(self, model, arg3):
        r"""
        operate(ModOpIgnoreTendonCompliance self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpIgnoreTendonCompliance_operate(self, model, arg3)

    def __init__(self):
        r"""__init__(ModOpIgnoreTendonCompliance self) -> ModOpIgnoreTendonCompliance"""
        _actuators.ModOpIgnoreTendonCompliance_swiginit(self, _actuators.new_ModOpIgnoreTendonCompliance())
    __swig_destroy__ = _actuators.delete_ModOpIgnoreTendonCompliance

# Register ModOpIgnoreTendonCompliance in _actuators:
_actuators.ModOpIgnoreTendonCompliance_swigregister(ModOpIgnoreTendonCompliance)
class ModOpScaleMaxIsometricForce(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpScaleMaxIsometricForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpScaleMaxIsometricForce

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpScaleMaxIsometricForce_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpScaleMaxIsometricForce self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpScaleMaxIsometricForce_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpScaleMaxIsometricForce_getClassName()

    def clone(self):
        r"""clone(ModOpScaleMaxIsometricForce self) -> ModOpScaleMaxIsometricForce"""
        return _actuators.ModOpScaleMaxIsometricForce_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpScaleMaxIsometricForce self) -> std::string const &"""
        return _actuators.ModOpScaleMaxIsometricForce_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpScaleMaxIsometricForce self) -> ModOpScaleMaxIsometricForce
        __init__(ModOpScaleMaxIsometricForce self, double scaleFactor) -> ModOpScaleMaxIsometricForce

        Parameters
        ----------
        scaleFactor: double

        """
        _actuators.ModOpScaleMaxIsometricForce_swiginit(self, _actuators.new_ModOpScaleMaxIsometricForce(*args))

    def operate(self, model, arg3):
        r"""
        operate(ModOpScaleMaxIsometricForce self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpScaleMaxIsometricForce_operate(self, model, arg3)
    __swig_destroy__ = _actuators.delete_ModOpScaleMaxIsometricForce

# Register ModOpScaleMaxIsometricForce in _actuators:
_actuators.ModOpScaleMaxIsometricForce_swigregister(ModOpScaleMaxIsometricForce)
class ModOpRemoveMuscles(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpRemoveMuscles class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpRemoveMuscles

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpRemoveMuscles_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpRemoveMuscles self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpRemoveMuscles_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpRemoveMuscles_getClassName()

    def clone(self):
        r"""clone(ModOpRemoveMuscles self) -> ModOpRemoveMuscles"""
        return _actuators.ModOpRemoveMuscles_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpRemoveMuscles self) -> std::string const &"""
        return _actuators.ModOpRemoveMuscles_getConcreteClassName(self)

    def operate(self, model, arg3):
        r"""
        operate(ModOpRemoveMuscles self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpRemoveMuscles_operate(self, model, arg3)

    def __init__(self):
        r"""__init__(ModOpRemoveMuscles self) -> ModOpRemoveMuscles"""
        _actuators.ModOpRemoveMuscles_swiginit(self, _actuators.new_ModOpRemoveMuscles())
    __swig_destroy__ = _actuators.delete_ModOpRemoveMuscles

# Register ModOpRemoveMuscles in _actuators:
_actuators.ModOpRemoveMuscles_swigregister(ModOpRemoveMuscles)
class ModOpAddReserves(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpAddReserves class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpAddReserves

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpAddReserves_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpAddReserves self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpAddReserves_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpAddReserves_getClassName()

    def clone(self):
        r"""clone(ModOpAddReserves self) -> ModOpAddReserves"""
        return _actuators.ModOpAddReserves_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpAddReserves self) -> std::string const &"""
        return _actuators.ModOpAddReserves_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpAddReserves self) -> ModOpAddReserves
        __init__(ModOpAddReserves self, double optimalForce) -> ModOpAddReserves

        Parameters
        ----------
        optimalForce: double

        __init__(ModOpAddReserves self, double optimalForce, double bound) -> ModOpAddReserves

        Parameters
        ----------
        optimalForce: double
        bound: double

        __init__(ModOpAddReserves self, double optimalForce, double bounds, bool skipCoordsWithActu) -> ModOpAddReserves

        Parameters
        ----------
        optimalForce: double
        bounds: double
        skipCoordsWithActu: bool

        __init__(ModOpAddReserves self, double optimalForce, double bounds, bool skipCoordsWithActu, bool skipResidualCoords) -> ModOpAddReserves

        Parameters
        ----------
        optimalForce: double
        bounds: double
        skipCoordsWithActu: bool
        skipResidualCoords: bool

        """
        _actuators.ModOpAddReserves_swiginit(self, _actuators.new_ModOpAddReserves(*args))

    def operate(self, model, arg3):
        r"""
        operate(ModOpAddReserves self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpAddReserves_operate(self, model, arg3)
    __swig_destroy__ = _actuators.delete_ModOpAddReserves

# Register ModOpAddReserves in _actuators:
_actuators.ModOpAddReserves_swigregister(ModOpAddReserves)
class ModOpAddResiduals(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpAddResiduals class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpAddResiduals

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpAddResiduals_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpAddResiduals self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpAddResiduals_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpAddResiduals_getClassName()

    def clone(self):
        r"""clone(ModOpAddResiduals self) -> ModOpAddResiduals"""
        return _actuators.ModOpAddResiduals_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpAddResiduals self) -> std::string const &"""
        return _actuators.ModOpAddResiduals_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpAddResiduals self) -> ModOpAddResiduals
        __init__(ModOpAddResiduals self, double rotOptimalForce, double transOptimalForce) -> ModOpAddResiduals

        Parameters
        ----------
        rotOptimalForce: double
        transOptimalForce: double

        __init__(ModOpAddResiduals self, double rotOptimalForce, double transOptimalForce, double bound) -> ModOpAddResiduals

        Parameters
        ----------
        rotOptimalForce: double
        transOptimalForce: double
        bound: double

        __init__(ModOpAddResiduals self, double rotOptimalForce, double transOptimalForce, double bounds, bool skipCoordsWithActu) -> ModOpAddResiduals

        Parameters
        ----------
        rotOptimalForce: double
        transOptimalForce: double
        bounds: double
        skipCoordsWithActu: bool

        """
        _actuators.ModOpAddResiduals_swiginit(self, _actuators.new_ModOpAddResiduals(*args))

    def operate(self, model, arg3):
        r"""
        operate(ModOpAddResiduals self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpAddResiduals_operate(self, model, arg3)
    __swig_destroy__ = _actuators.delete_ModOpAddResiduals

# Register ModOpAddResiduals in _actuators:
_actuators.ModOpAddResiduals_swigregister(ModOpAddResiduals)
class ModOpAddExternalLoads(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpAddExternalLoads class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpAddExternalLoads

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpAddExternalLoads_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpAddExternalLoads self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpAddExternalLoads_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpAddExternalLoads_getClassName()

    def clone(self):
        r"""clone(ModOpAddExternalLoads self) -> ModOpAddExternalLoads"""
        return _actuators.ModOpAddExternalLoads_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpAddExternalLoads self) -> std::string const &"""
        return _actuators.ModOpAddExternalLoads_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpAddExternalLoads self) -> ModOpAddExternalLoads
        __init__(ModOpAddExternalLoads self, std::string filepath) -> ModOpAddExternalLoads

        Parameters
        ----------
        filepath: std::string

        """
        _actuators.ModOpAddExternalLoads_swiginit(self, _actuators.new_ModOpAddExternalLoads(*args))

    def operate(self, model, relativeToDirectory):
        r"""
        operate(ModOpAddExternalLoads self, Model model, std::string const & relativeToDirectory)

        Parameters
        ----------
        model: OpenSim::Model &
        relativeToDirectory: std::string const &

        """
        return _actuators.ModOpAddExternalLoads_operate(self, model, relativeToDirectory)
    __swig_destroy__ = _actuators.delete_ModOpAddExternalLoads

# Register ModOpAddExternalLoads in _actuators:
_actuators.ModOpAddExternalLoads_swigregister(ModOpAddExternalLoads)
class ModOpReplaceJointsWithWelds(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpReplaceJointsWithWelds class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpReplaceJointsWithWelds

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpReplaceJointsWithWelds_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpReplaceJointsWithWelds self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpReplaceJointsWithWelds_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpReplaceJointsWithWelds_getClassName()

    def clone(self):
        r"""clone(ModOpReplaceJointsWithWelds self) -> ModOpReplaceJointsWithWelds"""
        return _actuators.ModOpReplaceJointsWithWelds_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpReplaceJointsWithWelds self) -> std::string const &"""
        return _actuators.ModOpReplaceJointsWithWelds_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpReplaceJointsWithWelds self) -> ModOpReplaceJointsWithWelds
        __init__(ModOpReplaceJointsWithWelds self, StdVectorString paths) -> ModOpReplaceJointsWithWelds

        Parameters
        ----------
        paths: std::vector< std::string,std::allocator< std::string > > const &

        """
        _actuators.ModOpReplaceJointsWithWelds_swiginit(self, _actuators.new_ModOpReplaceJointsWithWelds(*args))

    def operate(self, model, arg3):
        r"""
        operate(ModOpReplaceJointsWithWelds self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpReplaceJointsWithWelds_operate(self, model, arg3)
    __swig_destroy__ = _actuators.delete_ModOpReplaceJointsWithWelds

# Register ModOpReplaceJointsWithWelds in _actuators:
_actuators.ModOpReplaceJointsWithWelds_swigregister(ModOpReplaceJointsWithWelds)
class ModOpReplaceMusclesWithPathActuators(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpReplaceMusclesWithPathActuators class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpReplaceMusclesWithPathActuators

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpReplaceMusclesWithPathActuators_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpReplaceMusclesWithPathActuators self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpReplaceMusclesWithPathActuators_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpReplaceMusclesWithPathActuators_getClassName()

    def clone(self):
        r"""clone(ModOpReplaceMusclesWithPathActuators self) -> ModOpReplaceMusclesWithPathActuators"""
        return _actuators.ModOpReplaceMusclesWithPathActuators_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpReplaceMusclesWithPathActuators self) -> std::string const &"""
        return _actuators.ModOpReplaceMusclesWithPathActuators_getConcreteClassName(self)

    def operate(self, model, arg3):
        r"""
        operate(ModOpReplaceMusclesWithPathActuators self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpReplaceMusclesWithPathActuators_operate(self, model, arg3)

    def __init__(self):
        r"""__init__(ModOpReplaceMusclesWithPathActuators self) -> ModOpReplaceMusclesWithPathActuators"""
        _actuators.ModOpReplaceMusclesWithPathActuators_swiginit(self, _actuators.new_ModOpReplaceMusclesWithPathActuators())
    __swig_destroy__ = _actuators.delete_ModOpReplaceMusclesWithPathActuators

# Register ModOpReplaceMusclesWithPathActuators in _actuators:
_actuators.ModOpReplaceMusclesWithPathActuators_swigregister(ModOpReplaceMusclesWithPathActuators)
class ModOpReplacePathsWithFunctionBasedPaths(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpReplacePathsWithFunctionBasedPaths class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpReplacePathsWithFunctionBasedPaths

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpReplacePathsWithFunctionBasedPaths_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpReplacePathsWithFunctionBasedPaths self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpReplacePathsWithFunctionBasedPaths_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpReplacePathsWithFunctionBasedPaths_getClassName()

    def clone(self):
        r"""clone(ModOpReplacePathsWithFunctionBasedPaths self) -> ModOpReplacePathsWithFunctionBasedPaths"""
        return _actuators.ModOpReplacePathsWithFunctionBasedPaths_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpReplacePathsWithFunctionBasedPaths self) -> std::string const &"""
        return _actuators.ModOpReplacePathsWithFunctionBasedPaths_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ModOpReplacePathsWithFunctionBasedPaths self) -> ModOpReplacePathsWithFunctionBasedPaths
        __init__(ModOpReplacePathsWithFunctionBasedPaths self, std::string pathsFile) -> ModOpReplacePathsWithFunctionBasedPaths

        Parameters
        ----------
        pathsFile: std::string

        """
        _actuators.ModOpReplacePathsWithFunctionBasedPaths_swiginit(self, _actuators.new_ModOpReplacePathsWithFunctionBasedPaths(*args))

    def operate(self, model, arg3):
        r"""
        operate(ModOpReplacePathsWithFunctionBasedPaths self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpReplacePathsWithFunctionBasedPaths_operate(self, model, arg3)
    __swig_destroy__ = _actuators.delete_ModOpReplacePathsWithFunctionBasedPaths

# Register ModOpReplacePathsWithFunctionBasedPaths in _actuators:
_actuators.ModOpReplacePathsWithFunctionBasedPaths_swigregister(ModOpReplacePathsWithFunctionBasedPaths)
class ModOpPrescribeCoordinateValues(ModelOperator):
    r"""Proxy of C++ OpenSim::ModOpPrescribeCoordinateValues class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModOpPrescribeCoordinateValues

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.ModOpPrescribeCoordinateValues_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModOpPrescribeCoordinateValues self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.ModOpPrescribeCoordinateValues_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.ModOpPrescribeCoordinateValues_getClassName()

    def clone(self):
        r"""clone(ModOpPrescribeCoordinateValues self) -> ModOpPrescribeCoordinateValues"""
        return _actuators.ModOpPrescribeCoordinateValues_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModOpPrescribeCoordinateValues self) -> std::string const &"""
        return _actuators.ModOpPrescribeCoordinateValues_getConcreteClassName(self)

    def __init__(self, table):
        r"""
        __init__(ModOpPrescribeCoordinateValues self, TableProcessor table) -> ModOpPrescribeCoordinateValues

        Parameters
        ----------
        table: OpenSim::TableProcessor

        """
        _actuators.ModOpPrescribeCoordinateValues_swiginit(self, _actuators.new_ModOpPrescribeCoordinateValues(table))

    def operate(self, model, arg3):
        r"""
        operate(ModOpPrescribeCoordinateValues self, Model model, std::string const & arg3)

        Parameters
        ----------
        model: OpenSim::Model &
        arg3: std::string const &

        """
        return _actuators.ModOpPrescribeCoordinateValues_operate(self, model, arg3)
    __swig_destroy__ = _actuators.delete_ModOpPrescribeCoordinateValues

# Register ModOpPrescribeCoordinateValues in _actuators:
_actuators.ModOpPrescribeCoordinateValues_swigregister(ModOpPrescribeCoordinateValues)
class PolynomialPathFitterBounds(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::PolynomialPathFitterBounds class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> PolynomialPathFitterBounds

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.PolynomialPathFitterBounds_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(PolynomialPathFitterBounds self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.PolynomialPathFitterBounds_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.PolynomialPathFitterBounds_getClassName()

    def clone(self):
        r"""clone(PolynomialPathFitterBounds self) -> PolynomialPathFitterBounds"""
        return _actuators.PolynomialPathFitterBounds_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(PolynomialPathFitterBounds self) -> std::string const &"""
        return _actuators.PolynomialPathFitterBounds_getConcreteClassName(self)

    def copyProperty_coordinate_path(self, source):
        r"""
        copyProperty_coordinate_path(PolynomialPathFitterBounds self, PolynomialPathFitterBounds source)

        Parameters
        ----------
        source: OpenSim::PolynomialPathFitterBounds::Self const &

        """
        return _actuators.PolynomialPathFitterBounds_copyProperty_coordinate_path(self, source)

    def append_coordinate_path(self, value):
        r"""
        append_coordinate_path(PolynomialPathFitterBounds self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PolynomialPathFitterBounds_append_coordinate_path(self, value)

    def constructProperty_coordinate_path(self, initValue):
        r"""
        constructProperty_coordinate_path(PolynomialPathFitterBounds self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _actuators.PolynomialPathFitterBounds_constructProperty_coordinate_path(self, initValue)

    def get_coordinate_path(self, *args):
        r"""
        get_coordinate_path(PolynomialPathFitterBounds self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_coordinate_path(PolynomialPathFitterBounds self) -> std::string const &
        """
        return _actuators.PolynomialPathFitterBounds_get_coordinate_path(self, *args)

    def upd_coordinate_path(self, *args):
        r"""
        upd_coordinate_path(PolynomialPathFitterBounds self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_coordinate_path(PolynomialPathFitterBounds self) -> std::string &
        """
        return _actuators.PolynomialPathFitterBounds_upd_coordinate_path(self, *args)

    def set_coordinate_path(self, *args):
        r"""
        set_coordinate_path(PolynomialPathFitterBounds self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_coordinate_path(PolynomialPathFitterBounds self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _actuators.PolynomialPathFitterBounds_set_coordinate_path(self, *args)

    def copyProperty_bounds(self, source):
        r"""
        copyProperty_bounds(PolynomialPathFitterBounds self, PolynomialPathFitterBounds source)

        Parameters
        ----------
        source: OpenSim::PolynomialPathFitterBounds::Self const &

        """
        return _actuators.PolynomialPathFitterBounds_copyProperty_bounds(self, source)

    def append_bounds(self, value):
        r"""
        append_bounds(PolynomialPathFitterBounds self, Vec2 value) -> int

        Parameters
        ----------
        value: SimTK::Vec2 const &

        """
        return _actuators.PolynomialPathFitterBounds_append_bounds(self, value)

    def constructProperty_bounds(self, initValue):
        r"""
        constructProperty_bounds(PolynomialPathFitterBounds self, Vec2 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec2 const &

        """
        return _actuators.PolynomialPathFitterBounds_constructProperty_bounds(self, initValue)

    def get_bounds(self, *args):
        r"""
        get_bounds(PolynomialPathFitterBounds self, int i) -> Vec2

        Parameters
        ----------
        i: int

        get_bounds(PolynomialPathFitterBounds self) -> Vec2
        """
        return _actuators.PolynomialPathFitterBounds_get_bounds(self, *args)

    def upd_bounds(self, *args):
        r"""
        upd_bounds(PolynomialPathFitterBounds self, int i) -> Vec2

        Parameters
        ----------
        i: int

        upd_bounds(PolynomialPathFitterBounds self) -> Vec2
        """
        return _actuators.PolynomialPathFitterBounds_upd_bounds(self, *args)

    def set_bounds(self, *args):
        r"""
        set_bounds(PolynomialPathFitterBounds self, int i, Vec2 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec2 const &

        set_bounds(PolynomialPathFitterBounds self, Vec2 value)

        Parameters
        ----------
        value: SimTK::Vec2 const &

        """
        return _actuators.PolynomialPathFitterBounds_set_bounds(self, *args)

    def __init__(self, *args):
        r"""
        __init__(PolynomialPathFitterBounds self) -> PolynomialPathFitterBounds
        __init__(PolynomialPathFitterBounds self, std::string const & coordinatePath, Vec2 bounds) -> PolynomialPathFitterBounds

        Parameters
        ----------
        coordinatePath: std::string const &
        bounds: SimTK::Vec2 const &

        """
        _actuators.PolynomialPathFitterBounds_swiginit(self, _actuators.new_PolynomialPathFitterBounds(*args))
    __swig_destroy__ = _actuators.delete_PolynomialPathFitterBounds

# Register PolynomialPathFitterBounds in _actuators:
_actuators.PolynomialPathFitterBounds_swigregister(PolynomialPathFitterBounds)
class PolynomialPathFitter(opensim.common.OpenSimObject):
    r"""Proxy of C++ OpenSim::PolynomialPathFitter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> PolynomialPathFitter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _actuators.PolynomialPathFitter_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(PolynomialPathFitter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _actuators.PolynomialPathFitter_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _actuators.PolynomialPathFitter_getClassName()

    def clone(self):
        r"""clone(PolynomialPathFitter self) -> PolynomialPathFitter"""
        return _actuators.PolynomialPathFitter_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(PolynomialPathFitter self) -> std::string const &"""
        return _actuators.PolynomialPathFitter_getConcreteClassName(self)
    __swig_destroy__ = _actuators.delete_PolynomialPathFitter

    def __init__(self, *args):
        r"""
        __init__(PolynomialPathFitter self) -> PolynomialPathFitter
        __init__(PolynomialPathFitter self, PolynomialPathFitter arg2) -> PolynomialPathFitter

        Parameters
        ----------
        arg2: OpenSim::PolynomialPathFitter const &

        __init__(PolynomialPathFitter self, PolynomialPathFitter arg2) -> PolynomialPathFitter

        Parameters
        ----------
        arg2: OpenSim::PolynomialPathFitter &&

        """
        _actuators.PolynomialPathFitter_swiginit(self, _actuators.new_PolynomialPathFitter(*args))

    def setModel(self, model):
        r"""
        setModel(PolynomialPathFitter self, ModelProcessor model)

        Parameters
        ----------
        model: OpenSim::ModelProcessor

        """
        return _actuators.PolynomialPathFitter_setModel(self, model)

    def setCoordinateValues(self, coordinateValues):
        r"""
        setCoordinateValues(PolynomialPathFitter self, TableProcessor coordinateValues)

        Parameters
        ----------
        coordinateValues: OpenSim::TableProcessor

        """
        return _actuators.PolynomialPathFitter_setCoordinateValues(self, coordinateValues)

    def run(self):
        r"""run(PolynomialPathFitter self)"""
        return _actuators.PolynomialPathFitter_run(self)

    def setOutputDirectory(self, directory):
        r"""
        setOutputDirectory(PolynomialPathFitter self, std::string directory)

        Parameters
        ----------
        directory: std::string

        """
        return _actuators.PolynomialPathFitter_setOutputDirectory(self, directory)

    def getOutputDirectory(self):
        r"""getOutputDirectory(PolynomialPathFitter self) -> std::string"""
        return _actuators.PolynomialPathFitter_getOutputDirectory(self)

    def setUseStepwiseRegression(self, tf):
        r"""
        setUseStepwiseRegression(PolynomialPathFitter self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _actuators.PolynomialPathFitter_setUseStepwiseRegression(self, tf)

    def getUseStepwiseRegression(self):
        r"""getUseStepwiseRegression(PolynomialPathFitter self) -> bool"""
        return _actuators.PolynomialPathFitter_getUseStepwiseRegression(self)

    def setMomentArmThreshold(self, threshold):
        r"""
        setMomentArmThreshold(PolynomialPathFitter self, double threshold)

        Parameters
        ----------
        threshold: double

        """
        return _actuators.PolynomialPathFitter_setMomentArmThreshold(self, threshold)

    def getMomentArmThreshold(self):
        r"""getMomentArmThreshold(PolynomialPathFitter self) -> double"""
        return _actuators.PolynomialPathFitter_getMomentArmThreshold(self)

    def setMinimumPolynomialOrder(self, order):
        r"""
        setMinimumPolynomialOrder(PolynomialPathFitter self, int order)

        Parameters
        ----------
        order: int

        """
        return _actuators.PolynomialPathFitter_setMinimumPolynomialOrder(self, order)

    def getMinimumPolynomialOrder(self):
        r"""getMinimumPolynomialOrder(PolynomialPathFitter self) -> int"""
        return _actuators.PolynomialPathFitter_getMinimumPolynomialOrder(self)

    def setMaximumPolynomialOrder(self, order):
        r"""
        setMaximumPolynomialOrder(PolynomialPathFitter self, int order)

        Parameters
        ----------
        order: int

        """
        return _actuators.PolynomialPathFitter_setMaximumPolynomialOrder(self, order)

    def getMaximumPolynomialOrder(self):
        r"""getMaximumPolynomialOrder(PolynomialPathFitter self) -> int"""
        return _actuators.PolynomialPathFitter_getMaximumPolynomialOrder(self)

    def setGlobalCoordinateSamplingBounds(self, bounds):
        r"""
        setGlobalCoordinateSamplingBounds(PolynomialPathFitter self, Vec2 bounds)

        Parameters
        ----------
        bounds: SimTK::Vec2

        """
        return _actuators.PolynomialPathFitter_setGlobalCoordinateSamplingBounds(self, bounds)

    def getGlobalCoordinateSamplingBounds(self):
        r"""getGlobalCoordinateSamplingBounds(PolynomialPathFitter self) -> Vec2"""
        return _actuators.PolynomialPathFitter_getGlobalCoordinateSamplingBounds(self)

    def appendCoordinateSamplingBounds(self, coordinatePath, bounds):
        r"""
        appendCoordinateSamplingBounds(PolynomialPathFitter self, std::string const & coordinatePath, Vec2 bounds)

        Parameters
        ----------
        coordinatePath: std::string const &
        bounds: SimTK::Vec2 const &

        """
        return _actuators.PolynomialPathFitter_appendCoordinateSamplingBounds(self, coordinatePath, bounds)

    def setMomentArmTolerance(self, tolerance):
        r"""
        setMomentArmTolerance(PolynomialPathFitter self, double tolerance)

        Parameters
        ----------
        tolerance: double

        """
        return _actuators.PolynomialPathFitter_setMomentArmTolerance(self, tolerance)

    def getMomentArmTolerance(self):
        r"""getMomentArmTolerance(PolynomialPathFitter self) -> double"""
        return _actuators.PolynomialPathFitter_getMomentArmTolerance(self)

    def setPathLengthTolerance(self, tolerance):
        r"""
        setPathLengthTolerance(PolynomialPathFitter self, double tolerance)

        Parameters
        ----------
        tolerance: double

        """
        return _actuators.PolynomialPathFitter_setPathLengthTolerance(self, tolerance)

    def getPathLengthTolerance(self):
        r"""getPathLengthTolerance(PolynomialPathFitter self) -> double"""
        return _actuators.PolynomialPathFitter_getPathLengthTolerance(self)

    def setNumSamplesPerFrame(self, numSamples):
        r"""
        setNumSamplesPerFrame(PolynomialPathFitter self, int numSamples)

        Parameters
        ----------
        numSamples: int

        """
        return _actuators.PolynomialPathFitter_setNumSamplesPerFrame(self, numSamples)

    def getNumSamplesPerFrame(self):
        r"""getNumSamplesPerFrame(PolynomialPathFitter self) -> int"""
        return _actuators.PolynomialPathFitter_getNumSamplesPerFrame(self)

    def setNumParallelThreads(self, numThreads):
        r"""
        setNumParallelThreads(PolynomialPathFitter self, int numThreads)

        Parameters
        ----------
        numThreads: int

        """
        return _actuators.PolynomialPathFitter_setNumParallelThreads(self, numThreads)

    def getNumParallelThreads(self):
        r"""getNumParallelThreads(PolynomialPathFitter self) -> int"""
        return _actuators.PolynomialPathFitter_getNumParallelThreads(self)

    def setLatinHypercubeAlgorithm(self, algorithm):
        r"""
        setLatinHypercubeAlgorithm(PolynomialPathFitter self, std::string algorithm)

        Parameters
        ----------
        algorithm: std::string

        """
        return _actuators.PolynomialPathFitter_setLatinHypercubeAlgorithm(self, algorithm)

    def getLatinHypercubeAlgorithm(self):
        r"""getLatinHypercubeAlgorithm(PolynomialPathFitter self) -> std::string"""
        return _actuators.PolynomialPathFitter_getLatinHypercubeAlgorithm(self)

    def setIncludeMomentArmFunctions(self, tf):
        r"""
        setIncludeMomentArmFunctions(PolynomialPathFitter self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _actuators.PolynomialPathFitter_setIncludeMomentArmFunctions(self, tf)

    def getIncludeMomentArmFunctions(self):
        r"""getIncludeMomentArmFunctions(PolynomialPathFitter self) -> bool"""
        return _actuators.PolynomialPathFitter_getIncludeMomentArmFunctions(self)

    def setIncludeLengtheningSpeedFunction(self, tf):
        r"""
        setIncludeLengtheningSpeedFunction(PolynomialPathFitter self, bool tf)

        Parameters
        ----------
        tf: bool

        """
        return _actuators.PolynomialPathFitter_setIncludeLengtheningSpeedFunction(self, tf)

    def getIncludeLengtheningSpeedFunction(self):
        r"""getIncludeLengtheningSpeedFunction(PolynomialPathFitter self) -> bool"""
        return _actuators.PolynomialPathFitter_getIncludeLengtheningSpeedFunction(self)

    @staticmethod
    def evaluateFunctionBasedPaths(model, trajectory, functionBasedPathsFile, pathLengthTolerance=1e-4, momentArmTolerance=1e-4):
        r"""
        evaluateFunctionBasedPaths(Model model, TableProcessor trajectory, std::string const & functionBasedPathsFile, double pathLengthTolerance=1e-4, double momentArmTolerance=1e-4)

        Parameters
        ----------
        model: OpenSim::Model
        trajectory: OpenSim::TableProcessor
        functionBasedPathsFile: std::string const &
        pathLengthTolerance: double
        momentArmTolerance: double

        """
        return _actuators.PolynomialPathFitter_evaluateFunctionBasedPaths(model, trajectory, functionBasedPathsFile, pathLengthTolerance, momentArmTolerance)

# Register PolynomialPathFitter in _actuators:
_actuators.PolynomialPathFitter_swigregister(PolynomialPathFitter)

