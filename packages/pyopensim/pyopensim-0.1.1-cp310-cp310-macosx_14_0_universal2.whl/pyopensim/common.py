# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _common
else:
    import _common

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _common.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _common.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _common.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _common.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _common.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _common.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _common.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _common.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _common.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _common.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _common.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _common.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _common:
_common.SwigPyIterator_swigregister(SwigPyIterator)
import opensim.simbody

def opensim_version_common(major, minor, build):
    r"""
    opensim_version_common(int * major, int * minor, int * build)

    Parameters
    ----------
    major: int *
    minor: int *
    build: int *

    """
    return _common.opensim_version_common(major, minor, build)

def opensim_about_common(key, maxlen, value):
    r"""
    opensim_about_common(char const * key, int maxlen, char * value)

    Parameters
    ----------
    key: char const *
    maxlen: int
    value: char *

    """
    return _common.opensim_about_common(key, maxlen, value)

def GetVersionAndDate():
    r"""GetVersionAndDate() -> std::string"""
    return _common.GetVersionAndDate()

def GetVersion():
    r"""GetVersion() -> std::string"""
    return _common.GetVersion()

def GetOSInfoVerbose():
    r"""GetOSInfoVerbose() -> std::string"""
    return _common.GetOSInfoVerbose()

def GetOSInfo():
    r"""GetOSInfo() -> std::string"""
    return _common.GetOSInfo()

def GetCompilerVersion():
    r"""GetCompilerVersion() -> std::string"""
    return _common.GetCompilerVersion()
class OpenSimException(object):
    r"""Proxy of C++ OpenSim::Exception class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Exception(std::string const & aMsg="", std::string const & aFile="", int aLine=-1) -> OpenSimException

        Parameters
        ----------
        aMsg: std::string const &
        aFile: std::string const &
        aLine: int

        Exception(std::string const & file, size_t line, std::string const & func) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        Exception(std::string const & file, size_t line, std::string const & func, std::string const & msg) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        Exception(std::string const & file, size_t line, std::string const & func, OpenSimObject obj) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &

        Exception(std::string const & file, size_t line, std::string const & func, OpenSimObject obj, std::string const & msg) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &
        msg: std::string const &

        Exception(std::string const & file, size_t line, std::string const & func, Component component) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        component: OpenSim::Component const &

        __init__(OpenSimException self, std::string const & file, size_t line, std::string const & func, Component component, std::string const & msg) -> OpenSimException

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        component: OpenSim::Component const &
        msg: std::string const &

        """
        _common.OpenSimException_swiginit(self, _common.new_OpenSimException(*args))
    __swig_destroy__ = _common.delete_OpenSimException

    def setMessage(self, aMsg):
        r"""
        setMessage(OpenSimException self, std::string const & aMsg)

        Parameters
        ----------
        aMsg: std::string const &

        """
        return _common.OpenSimException_setMessage(self, aMsg)

    def getMessage(self):
        r"""getMessage(OpenSimException self) -> char const *"""
        return _common.OpenSimException_getMessage(self)

    def what(self):
        r"""what(OpenSimException self) -> char const *"""
        return _common.OpenSimException_what(self)

# Register OpenSimException in _common:
_common.OpenSimException_swigregister(OpenSimException)
class InvalidArgument(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidArgument class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvalidArgument self, std::string const & file, size_t line, std::string const & func, std::string const & msg="") -> InvalidArgument

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        """
        _common.InvalidArgument_swiginit(self, _common.new_InvalidArgument(*args))
    __swig_destroy__ = _common.delete_InvalidArgument

# Register InvalidArgument in _common:
_common.InvalidArgument_swigregister(InvalidArgument)
class InvalidCall(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidCall class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvalidCall self, std::string const & file, size_t line, std::string const & func, std::string const & msg="") -> InvalidCall

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        """
        _common.InvalidCall_swiginit(self, _common.new_InvalidCall(*args))
    __swig_destroy__ = _common.delete_InvalidCall

# Register InvalidCall in _common:
_common.InvalidCall_swigregister(InvalidCall)
class InvalidTemplateArgument(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidTemplateArgument class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, msg):
        r"""
        __init__(InvalidTemplateArgument self, std::string const & file, size_t line, std::string const & func, std::string const & msg) -> InvalidTemplateArgument

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        """
        _common.InvalidTemplateArgument_swiginit(self, _common.new_InvalidTemplateArgument(file, line, func, msg))
    __swig_destroy__ = _common.delete_InvalidTemplateArgument

# Register InvalidTemplateArgument in _common:
_common.InvalidTemplateArgument_swigregister(InvalidTemplateArgument)
class IndexOutOfRange(OpenSimException):
    r"""Proxy of C++ OpenSim::IndexOutOfRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, index, min, max):
        r"""
        __init__(IndexOutOfRange self, std::string const & file, size_t line, std::string const & func, size_t index, size_t min, size_t max) -> IndexOutOfRange

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        index: size_t
        min: size_t
        max: size_t

        """
        _common.IndexOutOfRange_swiginit(self, _common.new_IndexOutOfRange(file, line, func, index, min, max))
    __swig_destroy__ = _common.delete_IndexOutOfRange

# Register IndexOutOfRange in _common:
_common.IndexOutOfRange_swigregister(IndexOutOfRange)
class KeyNotFound(OpenSimException):
    r"""Proxy of C++ OpenSim::KeyNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        r"""
        __init__(KeyNotFound self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> KeyNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        _common.KeyNotFound_swiginit(self, _common.new_KeyNotFound(file, line, func, key))
    __swig_destroy__ = _common.delete_KeyNotFound

# Register KeyNotFound in _common:
_common.KeyNotFound_swigregister(KeyNotFound)
class IOError(OpenSimException):
    r"""Proxy of C++ OpenSim::IOError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IOError self) -> IOError"""
        _common.IOError_swiginit(self, _common.new_IOError())
    __swig_destroy__ = _common.delete_IOError

# Register IOError in _common:
_common.IOError_swigregister(IOError)
class ComponentNotFound(OpenSimException):
    r"""Proxy of C++ OpenSim::ComponentNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, toFindName, toFindClassName, thisName):
        r"""
        __init__(ComponentNotFound self, std::string const & file, size_t line, std::string const & func, std::string const & toFindName, std::string const & toFindClassName, std::string const & thisName) -> ComponentNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        toFindName: std::string const &
        toFindClassName: std::string const &
        thisName: std::string const &

        """
        _common.ComponentNotFound_swiginit(self, _common.new_ComponentNotFound(file, line, func, toFindName, toFindClassName, thisName))
    __swig_destroy__ = _common.delete_ComponentNotFound

# Register ComponentNotFound in _common:
_common.ComponentNotFound_swigregister(ComponentNotFound)
class NonUniqueLabels(OpenSimException):
    r"""Proxy of C++ OpenSim::NonUniqueLabels class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(NonUniqueLabels self) -> NonUniqueLabels"""
        _common.NonUniqueLabels_swiginit(self, _common.new_NonUniqueLabels())
    __swig_destroy__ = _common.delete_NonUniqueLabels

# Register NonUniqueLabels in _common:
_common.NonUniqueLabels_swigregister(NonUniqueLabels)

def getFormattedDateTime(*args):
    r"""
    getFormattedDateTime(bool appendMicroseconds=False, std::string format="%Y-%m-%dT%H%M%S") -> std::string

    Parameters
    ----------
    appendMicroseconds: bool
    format: std::string

    """
    return _common.getFormattedDateTime(*args)
class FileRemover(object):
    r"""Proxy of C++ OpenSim::FileRemover class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filepath):
        r"""
        __init__(FileRemover self, std::string filepath) -> FileRemover

        Parameters
        ----------
        filepath: std::string

        """
        _common.FileRemover_swiginit(self, _common.new_FileRemover(filepath))

    def remove(self):
        r"""remove(FileRemover self)"""
        return _common.FileRemover_remove(self)
    __swig_destroy__ = _common.delete_FileRemover

# Register FileRemover in _common:
_common.FileRemover_swigregister(FileRemover)

def createVectorLinspace(length, start, end):
    r"""
    createVectorLinspace(int length, double start, double end) -> Vector

    Parameters
    ----------
    length: int
    start: double
    end: double

    """
    return _common.createVectorLinspace(length, start, end)

def detectDelimiter(input, delimiters):
    r"""
    detectDelimiter(std::string const & input, StdVectorString delimiters) -> std::string

    Parameters
    ----------
    input: std::string const &
    delimiters: std::vector< std::string,std::allocator< std::string > > const &

    """
    return _common.detectDelimiter(input, delimiters)

def interpolate(x, y, newX, ignoreNaNs=False, extrapolate=False):
    r"""
    interpolate(Vector x, Vector y, Vector newX, bool const ignoreNaNs=False, bool const extrapolate=False) -> Vector

    Parameters
    ----------
    x: SimTK::Vector const &
    y: SimTK::Vector const &
    newX: SimTK::Vector const &
    ignoreNaNs: bool const
    extrapolate: bool const

    """
    return _common.interpolate(x, y, newX, ignoreNaNs, extrapolate)

def convertRelativeFilePathToAbsoluteFromXMLDocument(documentFileName, filePathRelativeToDirectoryContainingDocument):
    r"""
    convertRelativeFilePathToAbsoluteFromXMLDocument(std::string const & documentFileName, std::string const & filePathRelativeToDirectoryContainingDocument) -> std::string

    Parameters
    ----------
    documentFileName: std::string const &
    filePathRelativeToDirectoryContainingDocument: std::string const &

    """
    return _common.convertRelativeFilePathToAbsoluteFromXMLDocument(documentFileName, filePathRelativeToDirectoryContainingDocument)

def solveBisection(calcResidual, left, right, tolerance=1e-6, maxIterations=1000):
    r"""
    solveBisection(std::function< double (double const &) > calcResidual, double left, double right, double const & tolerance=1e-6, int maxIterations=1000) -> SimTK::Real

    Parameters
    ----------
    calcResidual: std::function< double (double const &) >
    left: double
    right: double
    tolerance: double const &
    maxIterations: int

    """
    return _common.solveBisection(calcResidual, left, right, tolerance, maxIterations)

def computeKNearestNeighbors(x, y, k=1):
    r"""
    computeKNearestNeighbors(Matrix x, Matrix y, int k=1) -> Matrix

    Parameters
    ----------
    x: SimTK::Matrix const &
    y: SimTK::Matrix const &
    k: int

    """
    return _common.computeKNearestNeighbors(x, y, k)

def factorizeMatrixNonNegative(A, numFactors, maxIterations, tolerance, W, H):
    r"""
    factorizeMatrixNonNegative(Matrix A, int numFactors, int maxIterations, double tolerance, Matrix W, Matrix H) -> double

    Parameters
    ----------
    A: SimTK::Matrix const &
    numFactors: int
    maxIterations: int
    tolerance: double
    W: SimTK::Matrix &
    H: SimTK::Matrix &

    """
    return _common.factorizeMatrixNonNegative(A, numFactors, maxIterations, tolerance, W, H)
class LogSink(object):
    r"""Proxy of C++ OpenSim::LogSink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_LogSink

    def sinkImpl(self, msg):
        r"""
        sinkImpl(LogSink self, std::string const & msg)

        Parameters
        ----------
        msg: std::string const &

        """
        return _common.LogSink_sinkImpl(self, msg)

    def flushImpl(self):
        r"""flushImpl(LogSink self)"""
        return _common.LogSink_flushImpl(self)

    def __init__(self):
        r"""
        __init__(LogSink self) -> LogSink

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == LogSink:
            _self = None
        else:
            _self = self
        _common.LogSink_swiginit(self, _common.new_LogSink(_self, ))
    def __disown__(self):
        self.this.disown()
        _common.disown_LogSink(self)
        return weakref.proxy(self)

# Register LogSink in _common:
_common.LogSink_swigregister(LogSink)
class StringLogSink(LogSink):
    r"""Proxy of C++ OpenSim::StringLogSink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clear(self):
        r"""clear(StringLogSink self)"""
        return _common.StringLogSink_clear(self)

    def getString(self):
        r"""getString(StringLogSink self) -> std::string const &"""
        return _common.StringLogSink_getString(self)

    def __init__(self):
        r"""__init__(StringLogSink self) -> StringLogSink"""
        _common.StringLogSink_swiginit(self, _common.new_StringLogSink())
    __swig_destroy__ = _common.delete_StringLogSink

# Register StringLogSink in _common:
_common.StringLogSink_swigregister(StringLogSink)
class Logger(object):
    r"""Proxy of C++ OpenSim::Logger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Level_Off = _common.Logger_Level_Off
    
    Level_Critical = _common.Logger_Level_Critical
    
    Level_Error = _common.Logger_Level_Error
    
    Level_Warn = _common.Logger_Level_Warn
    
    Level_Info = _common.Logger_Level_Info
    
    Level_Debug = _common.Logger_Level_Debug
    
    Level_Trace = _common.Logger_Level_Trace
    

    @staticmethod
    def setLevel(level):
        r"""
        setLevel(OpenSim::Logger::Level level)

        Parameters
        ----------
        level: enum OpenSim::Logger::Level

        """
        return _common.Logger_setLevel(level)

    @staticmethod
    def getLevel():
        r"""getLevel() -> OpenSim::Logger::Level"""
        return _common.Logger_getLevel()

    @staticmethod
    def setLevelString(level):
        r"""
        setLevelString(std::string level)

        Parameters
        ----------
        level: std::string

        """
        return _common.Logger_setLevelString(level)

    @staticmethod
    def getLevelString():
        r"""getLevelString() -> std::string"""
        return _common.Logger_getLevelString()

    @staticmethod
    def shouldLog(level):
        r"""
        shouldLog(OpenSim::Logger::Level level) -> bool

        Parameters
        ----------
        level: enum OpenSim::Logger::Level

        """
        return _common.Logger_shouldLog(level)

    @staticmethod
    def addFileSink(*args):
        r"""
        addFileSink(std::string const & filepath="opensim.log")

        Parameters
        ----------
        filepath: std::string const &

        """
        return _common.Logger_addFileSink(*args)

    @staticmethod
    def removeFileSink():
        r"""removeFileSink()"""
        return _common.Logger_removeFileSink()

    @staticmethod
    def addSink(sink):
        r"""
        addSink(std::shared_ptr< OpenSim::LogSink > const sink)

        Parameters
        ----------
        sink: std::shared_ptr< OpenSim::LogSink > const

        """
        return _common.Logger_addSink(sink)

    @staticmethod
    def removeSink(sink):
        r"""
        removeSink(std::shared_ptr< OpenSim::LogSink > const sink)

        Parameters
        ----------
        sink: std::shared_ptr< OpenSim::LogSink > const

        """
        return _common.Logger_removeSink(sink)
    __swig_destroy__ = _common.delete_Logger

# Register Logger in _common:
_common.Logger_swigregister(Logger)
class BoolLike(object):
    r"""Proxy of C++ OpenSim::detail::BoolLike class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, value_):
        r"""
        __init__(BoolLike self, bool value_) -> BoolLike

        Parameters
        ----------
        value_: bool

        """
        _common.BoolLike_swiginit(self, _common.new_BoolLike(value_))
    __swig_destroy__ = _common.delete_BoolLike

# Register BoolLike in _common:
_common.BoolLike_swigregister(BoolLike)
class InvalidPropertyValue(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidPropertyValue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InvalidPropertyValue self, std::string const & file, size_t line, std::string const & func, OpenSimObject obj, std::string const & propertyName, std::string const & errorMsg) -> InvalidPropertyValue

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        obj: OpenSim::Object const &
        propertyName: std::string const &
        errorMsg: std::string const &

        __init__(InvalidPropertyValue self, std::string const & file, size_t line, std::string const & func, Component component, std::string const & propertyName, std::string const & errorMsg) -> InvalidPropertyValue

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        component: OpenSim::Component const &
        propertyName: std::string const &
        errorMsg: std::string const &

        """
        _common.InvalidPropertyValue_swiginit(self, _common.new_InvalidPropertyValue(*args))
    __swig_destroy__ = _common.delete_InvalidPropertyValue

# Register InvalidPropertyValue in _common:
_common.InvalidPropertyValue_swigregister(InvalidPropertyValue)
class AbstractProperty(object):
    r"""Proxy of C++ OpenSim::AbstractProperty class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setAllowableListSize(self, *args):
        r"""
        setAllowableListSize(AbstractProperty self, int aMin, int aMax)

        Parameters
        ----------
        aMin: int
        aMax: int

        setAllowableListSize(AbstractProperty self, int aNum)

        Parameters
        ----------
        aNum: int

        """
        return _common.AbstractProperty_setAllowableListSize(self, *args)
    __swig_destroy__ = _common.delete_AbstractProperty

    def clone(self):
        r"""clone(AbstractProperty self) -> AbstractProperty"""
        return _common.AbstractProperty_clone(self)

    def toString(self):
        r"""toString(AbstractProperty self) -> std::string"""
        return _common.AbstractProperty_toString(self)

    def toStringForDisplay(self, precision):
        r"""
        toStringForDisplay(AbstractProperty self, int const precision) -> std::string

        Parameters
        ----------
        precision: int const

        """
        return _common.AbstractProperty_toStringForDisplay(self, precision)

    def getTypeName(self):
        r"""getTypeName(AbstractProperty self) -> std::string"""
        return _common.AbstractProperty_getTypeName(self)

    def isObjectProperty(self):
        r"""isObjectProperty(AbstractProperty self) -> bool"""
        return _common.AbstractProperty_isObjectProperty(self)

    def isUnnamedProperty(self):
        r"""isUnnamedProperty(AbstractProperty self) -> bool"""
        return _common.AbstractProperty_isUnnamedProperty(self)

    def equals(self, other):
        r"""
        equals(AbstractProperty self, AbstractProperty other) -> bool

        Parameters
        ----------
        other: OpenSim::AbstractProperty const &

        """
        return _common.AbstractProperty_equals(self, other)

    def isSamePropertyClass(self, other):
        r"""
        isSamePropertyClass(AbstractProperty self, AbstractProperty other) -> bool

        Parameters
        ----------
        other: OpenSim::AbstractProperty const &

        """
        return _common.AbstractProperty_isSamePropertyClass(self, other)

    def size(self):
        r"""size(AbstractProperty self) -> int"""
        return _common.AbstractProperty_size(self)

    def empty(self):
        r"""empty(AbstractProperty self) -> bool"""
        return _common.AbstractProperty_empty(self)

    def clear(self):
        r"""clear(AbstractProperty self)"""
        return _common.AbstractProperty_clear(self)

    def getValueAsObject(self, index=-1):
        r"""
        getValueAsObject(AbstractProperty self, int index=-1) -> OpenSimObject

        Parameters
        ----------
        index: int

        """
        return _common.AbstractProperty_getValueAsObject(self, index)

    def updValueAsObject(self, index=-1):
        r"""
        updValueAsObject(AbstractProperty self, int index=-1) -> OpenSimObject

        Parameters
        ----------
        index: int

        """
        return _common.AbstractProperty_updValueAsObject(self, index)

    def setValueAsObject(self, obj, index=-1):
        r"""
        setValueAsObject(AbstractProperty self, OpenSimObject obj, int index=-1)

        Parameters
        ----------
        obj: OpenSim::Object const &
        index: int

        """
        return _common.AbstractProperty_setValueAsObject(self, obj, index)

    def assign(self, that):
        r"""
        assign(AbstractProperty self, AbstractProperty that)

        Parameters
        ----------
        that: OpenSim::AbstractProperty const &

        """
        return _common.AbstractProperty_assign(self, that)

    def setAllPropertiesUseDefault(self, shouldUseDefault):
        r"""
        setAllPropertiesUseDefault(AbstractProperty self, bool shouldUseDefault)

        Parameters
        ----------
        shouldUseDefault: bool

        """
        return _common.AbstractProperty_setAllPropertiesUseDefault(self, shouldUseDefault)

    def readFromXMLParentElement(self, parent, versionNumber):
        r"""
        readFromXMLParentElement(AbstractProperty self, SimTK::Xml::Element & parent, int versionNumber)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        versionNumber: int

        """
        return _common.AbstractProperty_readFromXMLParentElement(self, parent, versionNumber)

    def writeToXMLParentElement(self, parent):
        r"""
        writeToXMLParentElement(AbstractProperty self, SimTK::Xml::Element & parent)

        Parameters
        ----------
        parent: SimTK::Xml::Element &

        """
        return _common.AbstractProperty_writeToXMLParentElement(self, parent)

    def setName(self, name):
        r"""
        setName(AbstractProperty self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _common.AbstractProperty_setName(self, name)

    def setComment(self, aComment):
        r"""
        setComment(AbstractProperty self, std::string const & aComment)

        Parameters
        ----------
        aComment: std::string const &

        """
        return _common.AbstractProperty_setComment(self, aComment)

    def setValueIsDefault(self, isDefault):
        r"""
        setValueIsDefault(AbstractProperty self, bool isDefault)

        Parameters
        ----------
        isDefault: bool

        """
        return _common.AbstractProperty_setValueIsDefault(self, isDefault)

    def getName(self):
        r"""getName(AbstractProperty self) -> std::string const &"""
        return _common.AbstractProperty_getName(self)

    def getComment(self):
        r"""getComment(AbstractProperty self) -> std::string const &"""
        return _common.AbstractProperty_getComment(self)

    def getValueIsDefault(self):
        r"""getValueIsDefault(AbstractProperty self) -> bool"""
        return _common.AbstractProperty_getValueIsDefault(self)

    def getMinListSize(self):
        r"""getMinListSize(AbstractProperty self) -> int"""
        return _common.AbstractProperty_getMinListSize(self)

    def getMaxListSize(self):
        r"""getMaxListSize(AbstractProperty self) -> int"""
        return _common.AbstractProperty_getMaxListSize(self)

    def isOptionalProperty(self):
        r"""isOptionalProperty(AbstractProperty self) -> bool"""
        return _common.AbstractProperty_isOptionalProperty(self)

    def isListProperty(self):
        r"""isListProperty(AbstractProperty self) -> bool"""
        return _common.AbstractProperty_isListProperty(self)

    def isOneValueProperty(self):
        r"""isOneValueProperty(AbstractProperty self) -> bool"""
        return _common.AbstractProperty_isOneValueProperty(self)

    def isOneObjectProperty(self):
        r"""isOneObjectProperty(AbstractProperty self) -> bool"""
        return _common.AbstractProperty_isOneObjectProperty(self)

# Register AbstractProperty in _common:
_common.AbstractProperty_swigregister(AbstractProperty)
class PropertyGroup(object):
    r"""Proxy of C++ OpenSim::PropertyGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PropertyGroup self) -> PropertyGroup
        __init__(PropertyGroup self, std::string & aName) -> PropertyGroup

        Parameters
        ----------
        aName: std::string &

        __init__(PropertyGroup self, PropertyGroup aGroup) -> PropertyGroup

        Parameters
        ----------
        aGroup: OpenSim::PropertyGroup const &

        """
        _common.PropertyGroup_swiginit(self, _common.new_PropertyGroup(*args))
    __swig_destroy__ = _common.delete_PropertyGroup

    def clone(self):
        r"""clone(PropertyGroup self) -> PropertyGroup"""
        return _common.PropertyGroup_clone(self)

    def copyData(self, aGroup):
        r"""
        copyData(PropertyGroup self, PropertyGroup aGroup)

        Parameters
        ----------
        aGroup: OpenSim::PropertyGroup const &

        """
        return _common.PropertyGroup_copyData(self, aGroup)

    def clear(self):
        r"""clear(PropertyGroup self)"""
        return _common.PropertyGroup_clear(self)

    def contains(self, aName):
        r"""
        contains(PropertyGroup self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.PropertyGroup_contains(self, aName)

    def add(self, aProperty):
        r"""
        add(PropertyGroup self, Property_Deprecated * aProperty)

        Parameters
        ----------
        aProperty: Property_Deprecated *

        """
        return _common.PropertyGroup_add(self, aProperty)

    def remove(self, aProperty):
        r"""
        remove(PropertyGroup self, Property_Deprecated * aProperty)

        Parameters
        ----------
        aProperty: Property_Deprecated *

        """
        return _common.PropertyGroup_remove(self, aProperty)

    def get(self, aIndex):
        r"""
        get(PropertyGroup self, int aIndex) -> Property_Deprecated *

        Parameters
        ----------
        aIndex: int

        """
        return _common.PropertyGroup_get(self, aIndex)

    def getPropertyIndex(self, aProperty):
        r"""
        getPropertyIndex(PropertyGroup self, Property_Deprecated * aProperty) -> int

        Parameters
        ----------
        aProperty: Property_Deprecated *

        """
        return _common.PropertyGroup_getPropertyIndex(self, aProperty)

    def setName(self, aName):
        r"""
        setName(PropertyGroup self, std::string const & aName)

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.PropertyGroup_setName(self, aName)

    def getName(self):
        r"""getName(PropertyGroup self) -> std::string const &"""
        return _common.PropertyGroup_getName(self)

# Register PropertyGroup in _common:
_common.PropertyGroup_swigregister(PropertyGroup)
class ArrayPtrsPropertyGroup(object):
    r"""Proxy of C++ OpenSim::ArrayPtrs< OpenSim::PropertyGroup > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayPtrsPropertyGroup

    def __init__(self, *args):
        r"""
        __init__(ArrayPtrsPropertyGroup self, int aCapacity=1) -> ArrayPtrsPropertyGroup

        Parameters
        ----------
        aCapacity: int

        __init__(ArrayPtrsPropertyGroup self, ArrayPtrsPropertyGroup aArray) -> ArrayPtrsPropertyGroup

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > const &

        """
        _common.ArrayPtrsPropertyGroup_swiginit(self, _common.new_ArrayPtrsPropertyGroup(*args))

    def clearAndDestroy(self):
        r"""clearAndDestroy(ArrayPtrsPropertyGroup self)"""
        return _common.ArrayPtrsPropertyGroup_clearAndDestroy(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayPtrsPropertyGroup self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayPtrsPropertyGroup_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayPtrsPropertyGroup self) -> int"""
        return _common.ArrayPtrsPropertyGroup_getSize(self)

    def size(self):
        r"""size(ArrayPtrsPropertyGroup self) -> int"""
        return _common.ArrayPtrsPropertyGroup_size(self)

    def getIndex(self, *args):
        r"""
        getIndex(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT *
        aStartIndex: int

        getIndex(ArrayPtrsPropertyGroup self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _common.ArrayPtrsPropertyGroup_getIndex(self, *args)

    def append(self, *args):
        r"""
        append(ArrayPtrsPropertyGroup self, PropertyGroup aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::PropertyGroup *

        append(ArrayPtrsPropertyGroup self, ArrayPtrsPropertyGroup aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::PropertyGroup > &

        """
        return _common.ArrayPtrsPropertyGroup_append(self, *args)

    def insert(self, aIndex, aObject):
        r"""
        insert(ArrayPtrsPropertyGroup self, int aIndex, PropertyGroup aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::PropertyGroup *

        """
        return _common.ArrayPtrsPropertyGroup_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(ArrayPtrsPropertyGroup self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT * aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT *

        """
        return _common.ArrayPtrsPropertyGroup_remove(self, *args)

    def set(self, aIndex, aObject):
        r"""
        set(ArrayPtrsPropertyGroup self, int aIndex, PropertyGroup aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::PropertyGroup *

        """
        return _common.ArrayPtrsPropertyGroup_set(self, aIndex, aObject)

    def get(self, *args):
        r"""
        get(ArrayPtrsPropertyGroup self, int aIndex) -> PropertyGroup

        Parameters
        ----------
        aIndex: int

        get(ArrayPtrsPropertyGroup self, std::string const & aName) -> PropertyGroup

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayPtrsPropertyGroup_get(self, *args)

    def getLast(self):
        r"""getLast(ArrayPtrsPropertyGroup self) -> PropertyGroup"""
        return _common.ArrayPtrsPropertyGroup_getLast(self)

    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayPtrsPropertyGroup self, OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT & aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::PropertyGroup >::ConstT &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayPtrsPropertyGroup_searchBinary(self, aObject, aFindFirst, aLo, aHi)

# Register ArrayPtrsPropertyGroup in _common:
_common.ArrayPtrsPropertyGroup_swigregister(ArrayPtrsPropertyGroup)
class PropertyStringList(AbstractProperty):
    r"""Proxy of C++ OpenSim::Property< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(PropertyStringList self) -> PropertyStringList"""
        return _common.PropertyStringList_clone(self)

    def getTypeName(self):
        r"""getTypeName(PropertyStringList self) -> std::string"""
        return _common.PropertyStringList_getTypeName(self)

    def setValue(self, *args):
        r"""
        setValue(PropertyStringList self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        setValue(PropertyStringList self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.PropertyStringList_setValue(self, *args)

    def getValue(self, index=-1):
        r"""
        getValue(PropertyStringList self, int index=-1) -> std::string const

        Parameters
        ----------
        index: int

        """
        return _common.PropertyStringList_getValue(self, index)

    def updValue(self, index=-1):
        r"""
        updValue(PropertyStringList self, int index=-1) -> std::string

        Parameters
        ----------
        index: int

        """
        return _common.PropertyStringList_updValue(self, index)

    def appendValue(self, value):
        r"""
        appendValue(PropertyStringList self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.PropertyStringList_appendValue(self, value)

    def adoptAndAppendValue(self, value):
        r"""
        adoptAndAppendValue(PropertyStringList self, std::string * value) -> int

        Parameters
        ----------
        value: std::string *

        """
        return _common.PropertyStringList_adoptAndAppendValue(self, value)

    def removeValueAtIndex(self, index):
        r"""
        removeValueAtIndex(PropertyStringList self, int index)

        Parameters
        ----------
        index: int

        """
        return _common.PropertyStringList_removeValueAtIndex(self, index)

    def findIndex(self, value):
        r"""
        findIndex(PropertyStringList self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.PropertyStringList_findIndex(self, value)

    def findIndexForName(self, name):
        r"""
        findIndexForName(PropertyStringList self, SimTK::String const & name) -> int

        Parameters
        ----------
        name: SimTK::String const &

        """
        return _common.PropertyStringList_findIndexForName(self, name)

    @staticmethod
    def isA(prop):
        r"""
        isA(AbstractProperty prop) -> bool

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyStringList_isA(prop)

    @staticmethod
    def getAs(prop):
        r"""
        getAs(AbstractProperty prop) -> PropertyStringList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyStringList_getAs(prop)

    @staticmethod
    def updAs(prop):
        r"""
        updAs(AbstractProperty prop) -> PropertyStringList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty &

        """
        return _common.PropertyStringList_updAs(prop)

# Register PropertyStringList in _common:
_common.PropertyStringList_swigregister(PropertyStringList)
class PropertyObjectList(AbstractProperty):
    r"""Proxy of C++ OpenSim::Property< OpenSim::Object > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(PropertyObjectList self) -> PropertyObjectList"""
        return _common.PropertyObjectList_clone(self)

    def getTypeName(self):
        r"""getTypeName(PropertyObjectList self) -> std::string"""
        return _common.PropertyObjectList_getTypeName(self)

    def setValue(self, *args):
        r"""
        setValue(PropertyObjectList self, int i, OpenSimObject value)

        Parameters
        ----------
        i: int
        value: OpenSim::Object const &

        setValue(PropertyObjectList self, OpenSimObject value)

        Parameters
        ----------
        value: OpenSim::Object const &

        """
        return _common.PropertyObjectList_setValue(self, *args)

    def getValue(self, index=-1):
        r"""
        getValue(PropertyObjectList self, int index=-1) -> OpenSimObject

        Parameters
        ----------
        index: int

        """
        return _common.PropertyObjectList_getValue(self, index)

    def updValue(self, index=-1):
        r"""
        updValue(PropertyObjectList self, int index=-1) -> OpenSimObject

        Parameters
        ----------
        index: int

        """
        return _common.PropertyObjectList_updValue(self, index)

    def appendValue(self, *args):
        r"""
        appendValue(PropertyObjectList self, OpenSimObject value) -> int

        Parameters
        ----------
        value: OpenSim::Object const &

        appendValue(PropertyObjectList self, OpenSimObject value) -> int

        Parameters
        ----------
        value: OpenSim::Object const *

        """
        return _common.PropertyObjectList_appendValue(self, *args)

    def adoptAndAppendValue(self, value):
        r"""
        adoptAndAppendValue(PropertyObjectList self, OpenSimObject value) -> int

        Parameters
        ----------
        value: OpenSim::Object *

        """
        return _common.PropertyObjectList_adoptAndAppendValue(self, value)

    def removeValueAtIndex(self, index):
        r"""
        removeValueAtIndex(PropertyObjectList self, int index)

        Parameters
        ----------
        index: int

        """
        return _common.PropertyObjectList_removeValueAtIndex(self, index)

    def findIndex(self, value):
        r"""
        findIndex(PropertyObjectList self, OpenSimObject value) -> int

        Parameters
        ----------
        value: OpenSim::Object const &

        """
        return _common.PropertyObjectList_findIndex(self, value)

    def findIndexForName(self, name):
        r"""
        findIndexForName(PropertyObjectList self, SimTK::String const & name) -> int

        Parameters
        ----------
        name: SimTK::String const &

        """
        return _common.PropertyObjectList_findIndexForName(self, name)

    @staticmethod
    def isA(prop):
        r"""
        isA(AbstractProperty prop) -> bool

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyObjectList_isA(prop)

    @staticmethod
    def getAs(prop):
        r"""
        getAs(AbstractProperty prop) -> PropertyObjectList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyObjectList_getAs(prop)

    @staticmethod
    def updAs(prop):
        r"""
        updAs(AbstractProperty prop) -> PropertyObjectList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty &

        """
        return _common.PropertyObjectList_updAs(prop)

# Register PropertyObjectList in _common:
_common.PropertyObjectList_swigregister(PropertyObjectList)
class PropertyIntList(AbstractProperty):
    r"""Proxy of C++ OpenSim::Property< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(PropertyIntList self) -> PropertyIntList"""
        return _common.PropertyIntList_clone(self)

    def getTypeName(self):
        r"""getTypeName(PropertyIntList self) -> std::string"""
        return _common.PropertyIntList_getTypeName(self)

    def setValue(self, *args):
        r"""
        setValue(PropertyIntList self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        setValue(PropertyIntList self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _common.PropertyIntList_setValue(self, *args)

    def getValue(self, index=-1):
        r"""
        getValue(PropertyIntList self, int index=-1) -> int const

        Parameters
        ----------
        index: int

        """
        return _common.PropertyIntList_getValue(self, index)

    def updValue(self, index=-1):
        r"""
        updValue(PropertyIntList self, int index=-1) -> int

        Parameters
        ----------
        index: int

        """
        return _common.PropertyIntList_updValue(self, index)

    def appendValue(self, *args):
        r"""
        appendValue(PropertyIntList self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        appendValue(PropertyIntList self, int const * value) -> int

        Parameters
        ----------
        value: int const *

        """
        return _common.PropertyIntList_appendValue(self, *args)

    def adoptAndAppendValue(self, value):
        r"""
        adoptAndAppendValue(PropertyIntList self, int * value) -> int

        Parameters
        ----------
        value: int *

        """
        return _common.PropertyIntList_adoptAndAppendValue(self, value)

    def removeValueAtIndex(self, index):
        r"""
        removeValueAtIndex(PropertyIntList self, int index)

        Parameters
        ----------
        index: int

        """
        return _common.PropertyIntList_removeValueAtIndex(self, index)

    def findIndex(self, value):
        r"""
        findIndex(PropertyIntList self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _common.PropertyIntList_findIndex(self, value)

    def findIndexForName(self, name):
        r"""
        findIndexForName(PropertyIntList self, SimTK::String const & name) -> int

        Parameters
        ----------
        name: SimTK::String const &

        """
        return _common.PropertyIntList_findIndexForName(self, name)

    @staticmethod
    def isA(prop):
        r"""
        isA(AbstractProperty prop) -> bool

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyIntList_isA(prop)

    @staticmethod
    def getAs(prop):
        r"""
        getAs(AbstractProperty prop) -> PropertyIntList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyIntList_getAs(prop)

    @staticmethod
    def updAs(prop):
        r"""
        updAs(AbstractProperty prop) -> PropertyIntList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty &

        """
        return _common.PropertyIntList_updAs(prop)

# Register PropertyIntList in _common:
_common.PropertyIntList_swigregister(PropertyIntList)
class PropertyDoubleList(AbstractProperty):
    r"""Proxy of C++ OpenSim::Property< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(PropertyDoubleList self) -> PropertyDoubleList"""
        return _common.PropertyDoubleList_clone(self)

    def getTypeName(self):
        r"""getTypeName(PropertyDoubleList self) -> std::string"""
        return _common.PropertyDoubleList_getTypeName(self)

    def setValue(self, *args):
        r"""
        setValue(PropertyDoubleList self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        setValue(PropertyDoubleList self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _common.PropertyDoubleList_setValue(self, *args)

    def getValue(self, index=-1):
        r"""
        getValue(PropertyDoubleList self, int index=-1) -> double const

        Parameters
        ----------
        index: int

        """
        return _common.PropertyDoubleList_getValue(self, index)

    def updValue(self, index=-1):
        r"""
        updValue(PropertyDoubleList self, int index=-1) -> double

        Parameters
        ----------
        index: int

        """
        return _common.PropertyDoubleList_updValue(self, index)

    def appendValue(self, *args):
        r"""
        appendValue(PropertyDoubleList self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        appendValue(PropertyDoubleList self, double const * value) -> int

        Parameters
        ----------
        value: double const *

        """
        return _common.PropertyDoubleList_appendValue(self, *args)

    def adoptAndAppendValue(self, value):
        r"""
        adoptAndAppendValue(PropertyDoubleList self, double * value) -> int

        Parameters
        ----------
        value: double *

        """
        return _common.PropertyDoubleList_adoptAndAppendValue(self, value)

    def removeValueAtIndex(self, index):
        r"""
        removeValueAtIndex(PropertyDoubleList self, int index)

        Parameters
        ----------
        index: int

        """
        return _common.PropertyDoubleList_removeValueAtIndex(self, index)

    def findIndex(self, value):
        r"""
        findIndex(PropertyDoubleList self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _common.PropertyDoubleList_findIndex(self, value)

    def findIndexForName(self, name):
        r"""
        findIndexForName(PropertyDoubleList self, SimTK::String const & name) -> int

        Parameters
        ----------
        name: SimTK::String const &

        """
        return _common.PropertyDoubleList_findIndexForName(self, name)

    @staticmethod
    def isA(prop):
        r"""
        isA(AbstractProperty prop) -> bool

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyDoubleList_isA(prop)

    @staticmethod
    def getAs(prop):
        r"""
        getAs(AbstractProperty prop) -> PropertyDoubleList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyDoubleList_getAs(prop)

    @staticmethod
    def updAs(prop):
        r"""
        updAs(AbstractProperty prop) -> PropertyDoubleList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty &

        """
        return _common.PropertyDoubleList_updAs(prop)

# Register PropertyDoubleList in _common:
_common.PropertyDoubleList_swigregister(PropertyDoubleList)
class PropertyBoolList(AbstractProperty):
    r"""Proxy of C++ OpenSim::Property< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(PropertyBoolList self) -> PropertyBoolList"""
        return _common.PropertyBoolList_clone(self)

    def getTypeName(self):
        r"""getTypeName(PropertyBoolList self) -> std::string"""
        return _common.PropertyBoolList_getTypeName(self)

    def setValue(self, *args):
        r"""
        setValue(PropertyBoolList self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        setValue(PropertyBoolList self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.PropertyBoolList_setValue(self, *args)

    def getValue(self, index=-1):
        r"""
        getValue(PropertyBoolList self, int index=-1) -> bool const

        Parameters
        ----------
        index: int

        """
        return _common.PropertyBoolList_getValue(self, index)

    def updValue(self, index=-1):
        r"""
        updValue(PropertyBoolList self, int index=-1) -> bool

        Parameters
        ----------
        index: int

        """
        return _common.PropertyBoolList_updValue(self, index)

    def appendValue(self, *args):
        r"""
        appendValue(PropertyBoolList self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        appendValue(PropertyBoolList self, bool const * value) -> int

        Parameters
        ----------
        value: bool const *

        """
        return _common.PropertyBoolList_appendValue(self, *args)

    def adoptAndAppendValue(self, value):
        r"""
        adoptAndAppendValue(PropertyBoolList self, bool * value) -> int

        Parameters
        ----------
        value: bool *

        """
        return _common.PropertyBoolList_adoptAndAppendValue(self, value)

    def removeValueAtIndex(self, index):
        r"""
        removeValueAtIndex(PropertyBoolList self, int index)

        Parameters
        ----------
        index: int

        """
        return _common.PropertyBoolList_removeValueAtIndex(self, index)

    def findIndex(self, value):
        r"""
        findIndex(PropertyBoolList self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.PropertyBoolList_findIndex(self, value)

    def findIndexForName(self, name):
        r"""
        findIndexForName(PropertyBoolList self, SimTK::String const & name) -> int

        Parameters
        ----------
        name: SimTK::String const &

        """
        return _common.PropertyBoolList_findIndexForName(self, name)

    @staticmethod
    def isA(prop):
        r"""
        isA(AbstractProperty prop) -> bool

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyBoolList_isA(prop)

    @staticmethod
    def getAs(prop):
        r"""
        getAs(AbstractProperty prop) -> PropertyBoolList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty const &

        """
        return _common.PropertyBoolList_getAs(prop)

    @staticmethod
    def updAs(prop):
        r"""
        updAs(AbstractProperty prop) -> PropertyBoolList

        Parameters
        ----------
        prop: OpenSim::AbstractProperty &

        """
        return _common.PropertyBoolList_updAs(prop)

# Register PropertyBoolList in _common:
_common.PropertyBoolList_swigregister(PropertyBoolList)
class OpenSimObject(object):
    r"""Proxy of C++ OpenSim::Object class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_OpenSimObject

    def clone(self):
        r"""clone(OpenSimObject self) -> OpenSimObject"""
        return _common.OpenSimObject_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(OpenSimObject self) -> std::string const &"""
        return _common.OpenSimObject_getConcreteClassName(self)

    def assign(self, aObject):
        r"""
        assign(OpenSimObject self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.OpenSimObject_assign(self, aObject)

    def isEqualTo(self, aObject):
        r"""
        isEqualTo(OpenSimObject self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _common.OpenSimObject_isEqualTo(self, aObject)

    def setName(self, name):
        r"""
        setName(OpenSimObject self, std::string const & name)

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OpenSimObject_setName(self, name)

    def getName(self):
        r"""getName(OpenSimObject self) -> std::string const &"""
        return _common.OpenSimObject_getName(self)

    def setDescription(self, description):
        r"""
        setDescription(OpenSimObject self, std::string const & description)

        Parameters
        ----------
        description: std::string const &

        """
        return _common.OpenSimObject_setDescription(self, description)

    def getDescription(self):
        r"""getDescription(OpenSimObject self) -> std::string const &"""
        return _common.OpenSimObject_getDescription(self)

    def getAuthors(self):
        r"""getAuthors(OpenSimObject self) -> std::string const &"""
        return _common.OpenSimObject_getAuthors(self)

    def setAuthors(self, authors):
        r"""
        setAuthors(OpenSimObject self, std::string const & authors)

        Parameters
        ----------
        authors: std::string const &

        """
        return _common.OpenSimObject_setAuthors(self, authors)

    def getReferences(self):
        r"""getReferences(OpenSimObject self) -> std::string const &"""
        return _common.OpenSimObject_getReferences(self)

    def setReferences(self, references):
        r"""
        setReferences(OpenSimObject self, std::string const & references)

        Parameters
        ----------
        references: std::string const &

        """
        return _common.OpenSimObject_setReferences(self, references)

    def getNumProperties(self):
        r"""getNumProperties(OpenSimObject self) -> int"""
        return _common.OpenSimObject_getNumProperties(self)

    def getPropertyByIndex(self, propertyIndex):
        r"""
        getPropertyByIndex(OpenSimObject self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _common.OpenSimObject_getPropertyByIndex(self, propertyIndex)

    def updPropertyByIndex(self, propertyIndex):
        r"""
        updPropertyByIndex(OpenSimObject self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _common.OpenSimObject_updPropertyByIndex(self, propertyIndex)

    def hasProperty(self, name):
        r"""
        hasProperty(OpenSimObject self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OpenSimObject_hasProperty(self, name)

    def getPropertyByName(self, name):
        r"""
        getPropertyByName(OpenSimObject self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OpenSimObject_getPropertyByName(self, name)

    def updPropertyByName(self, name):
        r"""
        updPropertyByName(OpenSimObject self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OpenSimObject_updPropertyByName(self, name)

    def isObjectUpToDateWithProperties(self):
        r"""isObjectUpToDateWithProperties(OpenSimObject self) -> bool"""
        return _common.OpenSimObject_isObjectUpToDateWithProperties(self)

    @staticmethod
    def PrintPropertyInfo(*args):
        r"""
        PrintPropertyInfo(std::ostream & os, std::string const & classNameDotPropertyName, bool printFlagInfo=True) -> bool

        Parameters
        ----------
        os: std::ostream &
        classNameDotPropertyName: std::string const &
        printFlagInfo: bool

        PrintPropertyInfo(std::ostream & os, std::string const & className, std::string const & propertyName, bool printFlagInfo=True) -> bool

        Parameters
        ----------
        os: std::ostream &
        className: std::string const &
        propertyName: std::string const &
        printFlagInfo: bool

        """
        return _common.OpenSimObject_PrintPropertyInfo(*args)

    @staticmethod
    def registerType(defaultObject):
        r"""
        registerType(OpenSimObject defaultObject)

        Parameters
        ----------
        defaultObject: OpenSim::Object const &

        """
        return _common.OpenSimObject_registerType(defaultObject)

    @staticmethod
    def renameType(oldTypeName, newTypeName):
        r"""
        renameType(std::string const & oldTypeName, std::string const & newTypeName)

        Parameters
        ----------
        oldTypeName: std::string const &
        newTypeName: std::string const &

        """
        return _common.OpenSimObject_renameType(oldTypeName, newTypeName)

    @staticmethod
    def getDefaultInstanceOfType(concreteClassName):
        r"""
        getDefaultInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

        Parameters
        ----------
        concreteClassName: std::string const &

        """
        return _common.OpenSimObject_getDefaultInstanceOfType(concreteClassName)

    @staticmethod
    def newInstanceOfType(concreteClassName):
        r"""
        newInstanceOfType(std::string const & concreteClassName) -> OpenSimObject

        Parameters
        ----------
        concreteClassName: std::string const &

        """
        return _common.OpenSimObject_newInstanceOfType(concreteClassName)

    @staticmethod
    def getRegisteredTypenames(typeNames):
        r"""
        getRegisteredTypenames(ArrayStr typeNames)

        Parameters
        ----------
        typeNames: OpenSim::Array< std::string > &

        """
        return _common.OpenSimObject_getRegisteredTypenames(typeNames)

    @staticmethod
    def makeObjectFromFile(fileName):
        r"""
        makeObjectFromFile(std::string const & fileName) -> OpenSimObject

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.OpenSimObject_makeObjectFromFile(fileName)

    def readObjectFromXMLNodeOrFile(self, objectElement, versionNumber):
        r"""
        readObjectFromXMLNodeOrFile(OpenSimObject self, SimTK::Xml::Element & objectElement, int versionNumber)

        Parameters
        ----------
        objectElement: SimTK::Xml::Element &
        versionNumber: int

        """
        return _common.OpenSimObject_readObjectFromXMLNodeOrFile(self, objectElement, versionNumber)

    def updateFromXMLNode(self, objectElement, versionNumber):
        r"""
        updateFromXMLNode(OpenSimObject self, SimTK::Xml::Element & objectElement, int versionNumber)

        Parameters
        ----------
        objectElement: SimTK::Xml::Element &
        versionNumber: int

        """
        return _common.OpenSimObject_updateFromXMLNode(self, objectElement, versionNumber)

    def updateXMLNode(self, parent, prop=None):
        r"""
        updateXMLNode(OpenSimObject self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        """
        return _common.OpenSimObject_updateXMLNode(self, parent, prop)

    def getInlined(self):
        r"""getInlined(OpenSimObject self) -> bool"""
        return _common.OpenSimObject_getInlined(self)

    def setInlined(self, *args):
        r"""
        setInlined(OpenSimObject self, bool aInlined, std::string const & aFileName="")

        Parameters
        ----------
        aInlined: bool
        aFileName: std::string const &

        """
        return _common.OpenSimObject_setInlined(self, *args)

    def getDocumentFileName(self):
        r"""getDocumentFileName(OpenSimObject self) -> std::string"""
        return _common.OpenSimObject_getDocumentFileName(self)

    def getDocumentFileVersion(self):
        r"""getDocumentFileVersion(OpenSimObject self) -> int"""
        return _common.OpenSimObject_getDocumentFileVersion(self)

    def setAllPropertiesUseDefault(self, aUseDefault):
        r"""
        setAllPropertiesUseDefault(OpenSimObject self, bool aUseDefault)

        Parameters
        ----------
        aUseDefault: bool

        """
        return _common.OpenSimObject_setAllPropertiesUseDefault(self, aUseDefault)

    def printToXML(self, fileName):
        r"""
        printToXML(OpenSimObject self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.OpenSimObject_printToXML(self, fileName)

    def dump(self):
        r"""dump(OpenSimObject self) -> std::string"""
        return _common.OpenSimObject_dump(self)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.OpenSimObject_getClassName()

    @staticmethod
    def setSerializeAllDefaults(shouldSerializeDefaults):
        r"""
        setSerializeAllDefaults(bool shouldSerializeDefaults)

        Parameters
        ----------
        shouldSerializeDefaults: bool

        """
        return _common.OpenSimObject_setSerializeAllDefaults(shouldSerializeDefaults)

    @staticmethod
    def getSerializeAllDefaults():
        r"""getSerializeAllDefaults() -> bool"""
        return _common.OpenSimObject_getSerializeAllDefaults()

    @staticmethod
    def isKindOf(type):
        r"""
        isKindOf(char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _common.OpenSimObject_isKindOf(type)

    def isA(self, type):
        r"""
        isA(OpenSimObject self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _common.OpenSimObject_isA(self, type)

    @staticmethod
    def setDebugLevel(newLevel):
        r"""
        setDebugLevel(int newLevel)

        Parameters
        ----------
        newLevel: int

        """
        return _common.OpenSimObject_setDebugLevel(newLevel)

    @staticmethod
    def getDebugLevel():
        r"""getDebugLevel() -> int"""
        return _common.OpenSimObject_getDebugLevel()

    def toString(self):
        r"""toString(OpenSimObject self) -> std::string const &"""
        return _common.OpenSimObject_toString(self)

    @staticmethod
    def SafeCopy(aObject):
        r"""
        SafeCopy(OpenSimObject aObject) -> OpenSimObject

        Parameters
        ----------
        aObject: OpenSim::Object const *

        """
        return _common.OpenSimObject_SafeCopy(aObject)

    @staticmethod
    def RegisterType(defaultObject):
        r"""
        RegisterType(OpenSimObject defaultObject)

        Parameters
        ----------
        defaultObject: OpenSim::Object const &

        """
        return _common.OpenSimObject_RegisterType(defaultObject)

    @staticmethod
    def RenameType(oldName, newName):
        r"""
        RenameType(std::string const & oldName, std::string const & newName)

        Parameters
        ----------
        oldName: std::string const &
        newName: std::string const &

        """
        return _common.OpenSimObject_RenameType(oldName, newName)

    def _markAdopted(self):
        if self.this and self.thisown:
            self.thisown = False


# Register OpenSimObject in _common:
_common.OpenSimObject_swigregister(OpenSimObject)
cvar = _common.cvar
ObjectDEFAULT_NAME = cvar.ObjectDEFAULT_NAME

class ObjectGroup(OpenSimObject):
    r"""Proxy of C++ OpenSim::ObjectGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ObjectGroup

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ObjectGroup_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ObjectGroup self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ObjectGroup_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ObjectGroup_getClassName()

    def clone(self):
        r"""clone(ObjectGroup self) -> ObjectGroup"""
        return _common.ObjectGroup_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ObjectGroup self) -> std::string const &"""
        return _common.ObjectGroup_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ObjectGroup self) -> ObjectGroup
        __init__(ObjectGroup self, std::string const & aName) -> ObjectGroup

        Parameters
        ----------
        aName: std::string const &

        __init__(ObjectGroup self, ObjectGroup aGroup) -> ObjectGroup

        Parameters
        ----------
        aGroup: OpenSim::ObjectGroup const &

        """
        _common.ObjectGroup_swiginit(self, _common.new_ObjectGroup(*args))
    __swig_destroy__ = _common.delete_ObjectGroup

    def copyData(self, aGroup):
        r"""
        copyData(ObjectGroup self, ObjectGroup aGroup)

        Parameters
        ----------
        aGroup: OpenSim::ObjectGroup const &

        """
        return _common.ObjectGroup_copyData(self, aGroup)

    def contains(self, aName):
        r"""
        contains(ObjectGroup self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ObjectGroup_contains(self, aName)

    def add(self, aObject):
        r"""
        add(ObjectGroup self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object const *

        """
        return _common.ObjectGroup_add(self, aObject)

    def remove(self, aObject):
        r"""
        remove(ObjectGroup self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object const *

        """
        return _common.ObjectGroup_remove(self, aObject)

    def replace(self, aOldObject, aNewObject):
        r"""
        replace(ObjectGroup self, OpenSimObject aOldObject, OpenSimObject aNewObject)

        Parameters
        ----------
        aOldObject: OpenSim::Object const *
        aNewObject: OpenSim::Object const *

        """
        return _common.ObjectGroup_replace(self, aOldObject, aNewObject)

    def setupGroup(self, aObjects):
        r"""
        setupGroup(ObjectGroup self, ArrayPtrsObj aObjects)

        Parameters
        ----------
        aObjects: OpenSim::ArrayPtrs< OpenSim::Object > &

        """
        return _common.ObjectGroup_setupGroup(self, aObjects)

    def getMembers(self):
        r"""getMembers(ObjectGroup self) -> ArrayConstObjPtr"""
        return _common.ObjectGroup_getMembers(self)

# Register ObjectGroup in _common:
_common.ObjectGroup_swigregister(ObjectGroup)
class PropertyHelper(object):
    r"""Proxy of C++ OpenSim::PropertyHelper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getValueBool(p, index=-1):
        r"""
        getValueBool(AbstractProperty p, int index=-1) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractProperty const &
        index: int

        """
        return _common.PropertyHelper_getValueBool(p, index)

    @staticmethod
    def setValueBool(v, p, index=-1):
        r"""
        setValueBool(bool v, AbstractProperty p, int index=-1)

        Parameters
        ----------
        v: bool
        p: OpenSim::AbstractProperty &
        index: int

        """
        return _common.PropertyHelper_setValueBool(v, p, index)

    @staticmethod
    def appendValueBool(v, p):
        r"""
        appendValueBool(bool v, AbstractProperty p)

        Parameters
        ----------
        v: bool
        p: OpenSim::AbstractProperty &

        """
        return _common.PropertyHelper_appendValueBool(v, p)

    @staticmethod
    def getValueInt(p, index=-1):
        r"""
        getValueInt(AbstractProperty p, int index=-1) -> int

        Parameters
        ----------
        p: OpenSim::AbstractProperty const &
        index: int

        """
        return _common.PropertyHelper_getValueInt(p, index)

    @staticmethod
    def setValueInt(v, p, index=-1):
        r"""
        setValueInt(int v, AbstractProperty p, int index=-1)

        Parameters
        ----------
        v: int
        p: OpenSim::AbstractProperty &
        index: int

        """
        return _common.PropertyHelper_setValueInt(v, p, index)

    @staticmethod
    def appendValueInt(v, p):
        r"""
        appendValueInt(int v, AbstractProperty p)

        Parameters
        ----------
        v: int
        p: OpenSim::AbstractProperty &

        """
        return _common.PropertyHelper_appendValueInt(v, p)

    @staticmethod
    def getValueDouble(p, index=-1):
        r"""
        getValueDouble(AbstractProperty p, int index=-1) -> double

        Parameters
        ----------
        p: OpenSim::AbstractProperty const &
        index: int

        """
        return _common.PropertyHelper_getValueDouble(p, index)

    @staticmethod
    def setValueDouble(v, p, index=-1):
        r"""
        setValueDouble(double v, AbstractProperty p, int index=-1)

        Parameters
        ----------
        v: double
        p: OpenSim::AbstractProperty &
        index: int

        """
        return _common.PropertyHelper_setValueDouble(v, p, index)

    @staticmethod
    def appendValueDouble(v, p):
        r"""
        appendValueDouble(double v, AbstractProperty p)

        Parameters
        ----------
        v: double
        p: OpenSim::AbstractProperty &

        """
        return _common.PropertyHelper_appendValueDouble(v, p)

    @staticmethod
    def getValueString(p, index=-1):
        r"""
        getValueString(AbstractProperty p, int index=-1) -> std::string

        Parameters
        ----------
        p: OpenSim::AbstractProperty const &
        index: int

        """
        return _common.PropertyHelper_getValueString(p, index)

    @staticmethod
    def setValueString(v, p, index=-1):
        r"""
        setValueString(std::string const & v, AbstractProperty p, int index=-1)

        Parameters
        ----------
        v: std::string const &
        p: OpenSim::AbstractProperty &
        index: int

        """
        return _common.PropertyHelper_setValueString(v, p, index)

    @staticmethod
    def appendValueString(v, p):
        r"""
        appendValueString(std::string const & v, AbstractProperty p)

        Parameters
        ----------
        v: std::string const &
        p: OpenSim::AbstractProperty &

        """
        return _common.PropertyHelper_appendValueString(v, p)

    @staticmethod
    def getValueTransform(p, index):
        r"""
        getValueTransform(AbstractProperty p, int index) -> double

        Parameters
        ----------
        p: OpenSim::AbstractProperty const &
        index: int

        """
        return _common.PropertyHelper_getValueTransform(p, index)

    @staticmethod
    def setValueTransform(v, p, index):
        r"""
        setValueTransform(double v, AbstractProperty p, int index)

        Parameters
        ----------
        v: double
        p: OpenSim::AbstractProperty &
        index: int

        """
        return _common.PropertyHelper_setValueTransform(v, p, index)

    @staticmethod
    def getValueVec3(p, index):
        r"""
        getValueVec3(AbstractProperty p, int index) -> double

        Parameters
        ----------
        p: OpenSim::AbstractProperty const &
        index: int

        """
        return _common.PropertyHelper_getValueVec3(p, index)

    @staticmethod
    def setValueVec3(v, p, index):
        r"""
        setValueVec3(double v, AbstractProperty p, int index)

        Parameters
        ----------
        v: double
        p: OpenSim::AbstractProperty &
        index: int

        """
        return _common.PropertyHelper_setValueVec3(v, p, index)

    @staticmethod
    def getValueVec6(p, index):
        r"""
        getValueVec6(AbstractProperty p, int index) -> double

        Parameters
        ----------
        p: OpenSim::AbstractProperty const &
        index: int

        """
        return _common.PropertyHelper_getValueVec6(p, index)

    @staticmethod
    def setValueVec6(v, p, index):
        r"""
        setValueVec6(double v, AbstractProperty p, int index)

        Parameters
        ----------
        v: double
        p: OpenSim::AbstractProperty &
        index: int

        """
        return _common.PropertyHelper_setValueVec6(v, p, index)

    @staticmethod
    def getValueStringArray(p):
        r"""
        getValueStringArray(AbstractProperty p) -> ArrayStr

        Parameters
        ----------
        p: OpenSim::AbstractProperty const &

        """
        return _common.PropertyHelper_getValueStringArray(p)

    @staticmethod
    def setValueStringArray(p, aStringArray):
        r"""
        setValueStringArray(AbstractProperty p, ArrayStr aStringArray)

        Parameters
        ----------
        p: OpenSim::AbstractProperty &
        aStringArray: OpenSim::Array< std::string > &

        """
        return _common.PropertyHelper_setValueStringArray(p, aStringArray)

    @staticmethod
    def removeItem(p, index):
        r"""
        removeItem(AbstractProperty p, int index)

        Parameters
        ----------
        p: OpenSim::AbstractProperty &
        index: int

        """
        return _common.PropertyHelper_removeItem(p, index)

    def __init__(self):
        r"""__init__(PropertyHelper self) -> PropertyHelper"""
        _common.PropertyHelper_swiginit(self, _common.new_PropertyHelper())
    __swig_destroy__ = _common.delete_PropertyHelper

# Register PropertyHelper in _common:
_common.PropertyHelper_swigregister(PropertyHelper)
class OpenSimObjectSet(OpenSimObject):
    r"""Proxy of C++ OpenSim::Set< OpenSim::Object,OpenSim::Object > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> OpenSimObjectSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.OpenSimObjectSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(OpenSimObjectSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.OpenSimObjectSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.OpenSimObjectSet_getClassName()

    def clone(self):
        r"""clone(OpenSimObjectSet self) -> OpenSimObjectSet"""
        return _common.OpenSimObjectSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(OpenSimObjectSet self) -> std::string const &"""
        return _common.OpenSimObjectSet_getConcreteClassName(self)
    __swig_destroy__ = _common.delete_OpenSimObjectSet

    def __init__(self, *args):
        r"""
        __init__(OpenSimObjectSet self) -> OpenSimObjectSet
        __init__(OpenSimObjectSet self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> OpenSimObjectSet

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(OpenSimObjectSet self, OpenSimObjectSet aSet) -> OpenSimObjectSet

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Object,OpenSim::Object > const &

        """
        _common.OpenSimObjectSet_swiginit(self, _common.new_OpenSimObjectSet(*args))

    def setupGroups(self):
        r"""setupGroups(OpenSimObjectSet self)"""
        return _common.OpenSimObjectSet_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        setMemoryOwner(OpenSimObjectSet self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.OpenSimObjectSet_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        setSize(OpenSimObjectSet self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.OpenSimObjectSet_setSize(self, aSize)

    def getSize(self):
        r"""getSize(OpenSimObjectSet self) -> int"""
        return _common.OpenSimObjectSet_getSize(self)

    def getIndex(self, *args):
        r"""
        getIndex(OpenSimObjectSet self, OpenSimObject aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Object const *
        aStartIndex: int

        getIndex(OpenSimObjectSet self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _common.OpenSimObjectSet_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""
        getGroupNamesContaining(OpenSimObjectSet self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.OpenSimObjectSet_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        adoptAndAppend(OpenSimObjectSet self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object *

        """
        return _common.OpenSimObjectSet_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend(OpenSimObjectSet self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _common.OpenSimObjectSet_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        insert(OpenSimObjectSet self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object *

        """
        return _common.OpenSimObjectSet_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(OpenSimObjectSet self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(OpenSimObjectSet self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const *

        """
        return _common.OpenSimObjectSet_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(OpenSimObjectSet self)"""
        return _common.OpenSimObjectSet_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        set(OpenSimObjectSet self, int aIndex, OpenSimObject aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object *
        preserveGroups: bool

        """
        return _common.OpenSimObjectSet_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        get(OpenSimObjectSet self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        get(OpenSimObjectSet self, std::string const & aName) -> OpenSimObject

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.OpenSimObjectSet_get(self, *args)

    def contains(self, aName):
        r"""
        contains(OpenSimObjectSet self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.OpenSimObjectSet_contains(self, aName)

    def getNames(self, rNames):
        r"""
        getNames(OpenSimObjectSet self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _common.OpenSimObjectSet_getNames(self, rNames)

    def getNumGroups(self):
        r"""getNumGroups(OpenSimObjectSet self) -> int"""
        return _common.OpenSimObjectSet_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""
        addGroup(OpenSimObjectSet self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.OpenSimObjectSet_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""
        removeGroup(OpenSimObjectSet self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.OpenSimObjectSet_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""
        renameGroup(OpenSimObjectSet self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _common.OpenSimObjectSet_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""
        addObjectToGroup(OpenSimObjectSet self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _common.OpenSimObjectSet_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""
        getGroupNames(OpenSimObjectSet self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.OpenSimObjectSet_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        getGroup(OpenSimObjectSet self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(OpenSimObjectSet self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _common.OpenSimObjectSet_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register OpenSimObjectSet in _common:
_common.OpenSimObjectSet_swigregister(OpenSimObjectSet)
class StateVector(object):
    r"""Proxy of C++ OpenSim::StateVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_StateVector

    def __init__(self, *args):
        r"""
        __init__(StateVector self) -> StateVector
        __init__(StateVector self, StateVector arg2) -> StateVector

        Parameters
        ----------
        arg2: OpenSim::StateVector const &

        __init__(StateVector self, double aT) -> StateVector

        Parameters
        ----------
        aT: double

        __init__(StateVector self, double aT, Vector data) -> StateVector

        Parameters
        ----------
        aT: double
        data: SimTK::Vector_< double > const &

        """
        _common.StateVector_swiginit(self, _common.new_StateVector(*args))

    def setStates(self, aT, data):
        r"""
        setStates(StateVector self, double aT, Vector data)

        Parameters
        ----------
        aT: double
        data: SimTK::Vector_< double > const &

        """
        return _common.StateVector_setStates(self, aT, data)

    def getSize(self):
        r"""getSize(StateVector self) -> int"""
        return _common.StateVector_getSize(self)

    def setTime(self, aT):
        r"""
        setTime(StateVector self, double aT)

        Parameters
        ----------
        aT: double

        """
        return _common.StateVector_setTime(self, aT)

    def getTime(self):
        r"""getTime(StateVector self) -> double"""
        return _common.StateVector_getTime(self)

    def getDataValue(self, aIndex, rValue):
        r"""
        getDataValue(StateVector self, int aIndex, double & rValue) -> int

        Parameters
        ----------
        aIndex: int
        rValue: double &

        """
        return _common.StateVector_getDataValue(self, aIndex, rValue)

    def setDataValue(self, aIndex, aValue):
        r"""
        setDataValue(StateVector self, int aIndex, double & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double &

        """
        return _common.StateVector_setDataValue(self, aIndex, aValue)

    def getData(self):
        r"""getData(StateVector self) -> ArrayDouble"""
        return _common.StateVector_getData(self)

    def shiftTime(self, aValue):
        r"""
        shiftTime(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.StateVector_shiftTime(self, aValue)

    def scaleTime(self, aValue):
        r"""
        scaleTime(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.StateVector_scaleTime(self, aValue)

    def add(self, *args):
        r"""
        add(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        add(StateVector self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        add(StateVector self, int aN, double aValue)

        Parameters
        ----------
        aN: int
        aValue: double

        add(StateVector self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        """
        return _common.StateVector_add(self, *args)

    def subtract(self, *args):
        r"""
        subtract(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        subtract(StateVector self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        subtract(StateVector self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        """
        return _common.StateVector_subtract(self, *args)

    def multiply(self, *args):
        r"""
        multiply(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        multiply(StateVector self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        multiply(StateVector self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        """
        return _common.StateVector_multiply(self, *args)

    def divide(self, *args):
        r"""
        divide(StateVector self, double aValue)

        Parameters
        ----------
        aValue: double

        divide(StateVector self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        divide(StateVector self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        """
        return _common.StateVector_divide(self, *args)

# Register StateVector in _common:
_common.StateVector_swigregister(StateVector)
class ArrayStateVector(object):
    r"""Proxy of C++ OpenSim::Array< OpenSim::StateVector > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayStateVector

    def __init__(self, *args):
        r"""
        __init__(ArrayStateVector self, ArrayStateVector arg2) -> ArrayStateVector

        Parameters
        ----------
        arg2: OpenSim::Array< OpenSim::StateVector > const &

        __init__(ArrayStateVector self, ArrayStateVector arg2) -> ArrayStateVector

        Parameters
        ----------
        arg2: OpenSim::Array< OpenSim::StateVector > &&

        __init__(ArrayStateVector self, std::initializer_list< OpenSim::StateVector > initList) -> ArrayStateVector

        Parameters
        ----------
        initList: std::initializer_list< OpenSim::StateVector >

        __init__(ArrayStateVector self, StateVector aDefaultValue=OpenSim::StateVector(), int aSize=0, int aCapacity=1) -> ArrayStateVector

        Parameters
        ----------
        aDefaultValue: OpenSim::StateVector
        aSize: int
        aCapacity: int

        """
        _common.ArrayStateVector_swiginit(self, _common.new_ArrayStateVector(*args))

    def arrayEquals(self, aArray):
        r"""
        arrayEquals(ArrayStateVector self, ArrayStateVector aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::StateVector > const &

        """
        return _common.ArrayStateVector_arrayEquals(self, aArray)

    def trim(self):
        r"""trim(ArrayStateVector self)"""
        return _common.ArrayStateVector_trim(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayStateVector self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayStateVector_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayStateVector self) -> int"""
        return _common.ArrayStateVector_getSize(self)

    def size(self):
        r"""size(ArrayStateVector self) -> int"""
        return _common.ArrayStateVector_size(self)

    def append(self, *args):
        r"""
        append(ArrayStateVector self, StateVector aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &

        append(ArrayStateVector self, ArrayStateVector aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::StateVector > const &

        """
        return _common.ArrayStateVector_append(self, *args)

    def insert(self, aIndex, aValue):
        r"""
        insert(ArrayStateVector self, int aIndex, StateVector aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::StateVector const &

        """
        return _common.ArrayStateVector_insert(self, aIndex, aValue)

    def remove(self, aIndex):
        r"""
        remove(ArrayStateVector self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayStateVector_remove(self, aIndex)

    def set(self, aIndex, aValue):
        r"""
        set(ArrayStateVector self, int aIndex, StateVector aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::StateVector const &

        """
        return _common.ArrayStateVector_set(self, aIndex, aValue)

    def get(self, aIndex):
        r"""
        get(ArrayStateVector self, int aIndex) -> StateVector

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayStateVector_get(self, aIndex)

    def getitem(self, index):
        r"""
        getitem(ArrayStateVector self, int index) -> StateVector

        Parameters
        ----------
        index: int

        """
        return _common.ArrayStateVector_getitem(self, index)

    def setitem(self, index, val):
        r"""
        setitem(ArrayStateVector self, int index, StateVector val)

        Parameters
        ----------
        index: int
        val: OpenSim::StateVector

        """
        return _common.ArrayStateVector_setitem(self, index, val)

    def getLast(self):
        r"""getLast(ArrayStateVector self) -> StateVector"""
        return _common.ArrayStateVector_getLast(self)

    def findIndex(self, aValue):
        r"""
        findIndex(ArrayStateVector self, StateVector aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &

        """
        return _common.ArrayStateVector_findIndex(self, aValue)

    def rfindIndex(self, aValue):
        r"""
        rfindIndex(ArrayStateVector self, StateVector aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &

        """
        return _common.ArrayStateVector_rfindIndex(self, aValue)

    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayStateVector self, StateVector aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::StateVector const &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayStateVector_searchBinary(self, aValue, aFindFirst, aLo, aHi)

# Register ArrayStateVector in _common:
_common.ArrayStateVector_swigregister(ArrayStateVector)
class StorageInterface(OpenSimObject):
    r"""Proxy of C++ OpenSim::StorageInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> StorageInterface

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.StorageInterface_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(StorageInterface self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.StorageInterface_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.StorageInterface_getClassName()

    def clone(self):
        r"""clone(StorageInterface self) -> StorageInterface"""
        return _common.StorageInterface_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(StorageInterface self) -> std::string const &"""
        return _common.StorageInterface_getConcreteClassName(self)
    __swig_destroy__ = _common.delete_StorageInterface

    def getSize(self):
        r"""getSize(StorageInterface self) -> int"""
        return _common.StorageInterface_getSize(self)

    def getStateVector(self, aTimeIndex):
        r"""
        getStateVector(StorageInterface self, int aTimeIndex) -> StateVector

        Parameters
        ----------
        aTimeIndex: int

        """
        return _common.StorageInterface_getStateVector(self, aTimeIndex)

    def getLastStateVector(self):
        r"""getLastStateVector(StorageInterface self) -> StateVector"""
        return _common.StorageInterface_getLastStateVector(self)

    def getFirstTime(self):
        r"""getFirstTime(StorageInterface self) -> double"""
        return _common.StorageInterface_getFirstTime(self)

    def getLastTime(self):
        r"""getLastTime(StorageInterface self) -> double"""
        return _common.StorageInterface_getLastTime(self)

    def getTimeColumn(self, rTimes, aStateIndex=-1):
        r"""
        getTimeColumn(StorageInterface self, ArrayDouble rTimes, int aStateIndex=-1) -> int

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &
        aStateIndex: int

        """
        return _common.StorageInterface_getTimeColumn(self, rTimes, aStateIndex)

    def getTimeColumnWithStartTime(self, rTimes, startTime=0.0):
        r"""
        getTimeColumnWithStartTime(StorageInterface self, ArrayDouble rTimes, double startTime=0.0)

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &
        startTime: double

        """
        return _common.StorageInterface_getTimeColumnWithStartTime(self, rTimes, startTime)

    def getDataAtTime(self, aTime, aN, rData):
        r"""
        getDataAtTime(StorageInterface self, double aTime, int aN, ArrayDouble rData) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        rData: OpenSim::Array< double > &

        """
        return _common.StorageInterface_getDataAtTime(self, aTime, aN, rData)

    def getDataColumn(self, columnName, data, startTime=0.0):
        r"""
        getDataColumn(StorageInterface self, std::string const & columnName, ArrayDouble data, double startTime=0.0)

        Parameters
        ----------
        columnName: std::string const &
        data: OpenSim::Array< double > &
        startTime: double

        """
        return _common.StorageInterface_getDataColumn(self, columnName, data, startTime)

    def append(self, *args):
        r"""
        append(StorageInterface self, StateVector aVec, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aVec: OpenSim::StateVector const &
        aCheckForDuplicateTime: bool

        append(StorageInterface self, ArrayStateVector aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::StateVector > const &

        append(StorageInterface self, double aT, int aN, double const * aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aN: int
        aY: double const *
        aCheckForDuplicateTime: bool

        append(StorageInterface self, double aT, Vector aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vector const &
        aCheckForDuplicateTime: bool

        append(StorageInterface self, double aT, Vec3 aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vec3 const &
        aCheckForDuplicateTime: bool

        """
        return _common.StorageInterface_append(self, *args)

    def store(self, aStep, aT, aN, aY):
        r"""
        store(StorageInterface self, int aStep, double aT, int aN, double const * aY) -> int

        Parameters
        ----------
        aStep: int
        aT: double
        aN: int
        aY: double const *

        """
        return _common.StorageInterface_store(self, aStep, aT, aN, aY)

    def findIndex(self, *args):
        r"""
        findIndex(StorageInterface self, double aT) -> int

        Parameters
        ----------
        aT: double

        findIndex(StorageInterface self, int aI, double aT) -> int

        Parameters
        ----------
        aI: int
        aT: double

        """
        return _common.StorageInterface_findIndex(self, *args)

    def setOutputFileName(self, aFileName):
        r"""
        setOutputFileName(StorageInterface self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _common.StorageInterface_setOutputFileName(self, aFileName)

# Register StorageInterface in _common:
_common.StorageInterface_swigregister(StorageInterface)
class Storage(StorageInterface):
    r"""Proxy of C++ OpenSim::Storage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> Storage

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Storage_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(Storage self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Storage_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.Storage_getClassName()

    def clone(self):
        r"""clone(Storage self) -> Storage"""
        return _common.Storage_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(Storage self) -> std::string const &"""
        return _common.Storage_getConcreteClassName(self)
    DEFAULT_HEADER_TOKEN = property(_common.Storage_DEFAULT_HEADER_TOKEN_get, _common.Storage_DEFAULT_HEADER_TOKEN_set, doc=r"""DEFAULT_HEADER_TOKEN : p.q(const).char""")
    DEFAULT_HEADER_SEPARATOR = property(_common.Storage_DEFAULT_HEADER_SEPARATOR_get, _common.Storage_DEFAULT_HEADER_SEPARATOR_set, doc=r"""DEFAULT_HEADER_SEPARATOR : p.q(const).char""")

    def __init__(self, *args):
        r"""
        __init__(Storage self, int aCapacity=Storage_DEFAULT_CAPACITY, std::string const & aName="UNKNOWN") -> Storage

        Parameters
        ----------
        aCapacity: int
        aName: std::string const &

        __init__(Storage self, std::string const & aFileName, bool readHeadersOnly=False) -> Storage

        Parameters
        ----------
        aFileName: std::string const &
        readHeadersOnly: bool

        __init__(Storage self, Storage aStorage, bool aCopyData=True) -> Storage

        Parameters
        ----------
        aStorage: OpenSim::Storage const &
        aCopyData: bool

        __init__(Storage self, Storage aStorage, int aStateIndex, int aN, char const * aDelimiter="\t") -> Storage

        Parameters
        ----------
        aStorage: OpenSim::Storage const &
        aStateIndex: int
        aN: int
        aDelimiter: char const *

        """
        _common.Storage_swiginit(self, _common.new_Storage(*args))
    __swig_destroy__ = _common.delete_Storage

    def getName(self):
        r"""getName(Storage self) -> std::string const &"""
        return _common.Storage_getName(self)

    def getDescription(self):
        r"""getDescription(Storage self) -> std::string const &"""
        return _common.Storage_getDescription(self)

    def setName(self, aName):
        r"""
        setName(Storage self, std::string const & aName)

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.Storage_setName(self, aName)

    def setDescription(self, aDescription):
        r"""
        setDescription(Storage self, std::string const & aDescription)

        Parameters
        ----------
        aDescription: std::string const &

        """
        return _common.Storage_setDescription(self, aDescription)

    @staticmethod
    def getLatestVersion():
        r"""getLatestVersion() -> int const &"""
        return _common.Storage_getLatestVersion()

    def getFileVersion(self):
        r"""getFileVersion(Storage self) -> int const &"""
        return _common.Storage_getFileVersion(self)

    def getSize(self):
        r"""getSize(Storage self) -> int"""
        return _common.Storage_getSize(self)

    def getSmallestNumberOfStates(self):
        r"""getSmallestNumberOfStates(Storage self) -> int"""
        return _common.Storage_getSmallestNumberOfStates(self)

    def getStateVector(self, aTimeIndex):
        r"""
        getStateVector(Storage self, int aTimeIndex) -> StateVector

        Parameters
        ----------
        aTimeIndex: int

        """
        return _common.Storage_getStateVector(self, aTimeIndex)

    def getLastStateVector(self):
        r"""getLastStateVector(Storage self) -> StateVector"""
        return _common.Storage_getLastStateVector(self)

    def getFirstTime(self):
        r"""getFirstTime(Storage self) -> double"""
        return _common.Storage_getFirstTime(self)

    def getLastTime(self):
        r"""getLastTime(Storage self) -> double"""
        return _common.Storage_getLastTime(self)

    def getMinTimeStep(self):
        r"""getMinTimeStep(Storage self) -> double"""
        return _common.Storage_getMinTimeStep(self)

    def getTime(self, aTimeIndex, rTime, aStateIndex=-1):
        r"""
        getTime(Storage self, int aTimeIndex, double & rTime, int aStateIndex=-1) -> bool

        Parameters
        ----------
        aTimeIndex: int
        rTime: double &
        aStateIndex: int

        """
        return _common.Storage_getTime(self, aTimeIndex, rTime, aStateIndex)

    def getTimeColumn(self, *args):
        r"""
        getTimeColumn(Storage self, double *& rTimes, int aStateIndex=-1) -> int

        Parameters
        ----------
        rTimes: double *&
        aStateIndex: int

        getTimeColumn(Storage self, ArrayDouble rTimes, int aStateIndex=-1) -> int

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &
        aStateIndex: int

        """
        return _common.Storage_getTimeColumn(self, *args)

    def getTimeColumnWithStartTime(self, rTimes, startTime=0.0):
        r"""
        getTimeColumnWithStartTime(Storage self, ArrayDouble rTimes, double startTime=0.0)

        Parameters
        ----------
        rTimes: OpenSim::Array< double > &
        startTime: double

        """
        return _common.Storage_getTimeColumnWithStartTime(self, rTimes, startTime)

    def addKeyValuePair(self, aKey, aValue):
        r"""
        addKeyValuePair(Storage self, std::string const & aKey, std::string const & aValue)

        Parameters
        ----------
        aKey: std::string const &
        aValue: std::string const &

        """
        return _common.Storage_addKeyValuePair(self, aKey, aValue)

    def getValueForKey(self, aKey, rValue):
        r"""
        getValueForKey(Storage self, std::string const & aKey, std::string & rValue)

        Parameters
        ----------
        aKey: std::string const &
        rValue: std::string &

        """
        return _common.Storage_getValueForKey(self, aKey, rValue)

    def hasKey(self, aKey):
        r"""
        hasKey(Storage self, std::string const & aKey) -> bool

        Parameters
        ----------
        aKey: std::string const &

        """
        return _common.Storage_hasKey(self, aKey)

    def isInDegrees(self):
        r"""isInDegrees(Storage self) -> bool"""
        return _common.Storage_isInDegrees(self)

    def setInDegrees(self, isInDegrees):
        r"""
        setInDegrees(Storage self, bool const isInDegrees)

        Parameters
        ----------
        isInDegrees: bool const

        """
        return _common.Storage_setInDegrees(self, isInDegrees)

    def getData(self, *args):
        r"""
        getData(Storage self, int aTimeIndex, int aStateIndex, double & rValue) -> int

        Parameters
        ----------
        aTimeIndex: int
        aStateIndex: int
        rValue: double &

        getData(Storage self, int aTimeIndex, int aStateIndex, int aN, double ** rData) -> int

        Parameters
        ----------
        aTimeIndex: int
        aStateIndex: int
        aN: int
        rData: double **

        """
        return _common.Storage_getData(self, *args)

    def getDataAtTime(self, *args):
        r"""
        getDataAtTime(Storage self, double aTime, int aN, double ** rData) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        rData: double **

        getDataAtTime(Storage self, double aTime, int aN, double * rData) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        rData: double *

        getDataAtTime(Storage self, double aTime, int aN, ArrayDouble rData) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        rData: OpenSim::Array< double > &

        getDataAtTime(Storage self, double aTime, int aN, Vector v) -> int

        Parameters
        ----------
        aTime: double
        aN: int
        v: SimTK::Vector &

        """
        return _common.Storage_getDataAtTime(self, *args)

    def setDataColumnToFixedValue(self, columnName, newValue):
        r"""
        setDataColumnToFixedValue(Storage self, std::string const & columnName, double newValue)

        Parameters
        ----------
        columnName: std::string const &
        newValue: double

        """
        return _common.Storage_setDataColumnToFixedValue(self, columnName, newValue)

    def setDataColumn(self, aStateIndex, aData):
        r"""
        setDataColumn(Storage self, int aStateIndex, ArrayDouble aData)

        Parameters
        ----------
        aStateIndex: int
        aData: OpenSim::Array< double > const &

        """
        return _common.Storage_setDataColumn(self, aStateIndex, aData)

    def getDataColumn(self, *args):
        r"""
        getDataColumn(Storage self, int aStateIndex, double *& rData) -> int

        Parameters
        ----------
        aStateIndex: int
        rData: double *&

        getDataColumn(Storage self, int aStateIndex, ArrayDouble rData) -> int

        Parameters
        ----------
        aStateIndex: int
        rData: OpenSim::Array< double > &

        getDataColumn(Storage self, std::string const & columnName, double *& rData) -> int

        Parameters
        ----------
        columnName: std::string const &
        rData: double *&

        getDataColumn(Storage self, std::string const & columnName, ArrayDouble data, double startTime=0.0)

        Parameters
        ----------
        columnName: std::string const &
        data: OpenSim::Array< double > &
        startTime: double

        """
        return _common.Storage_getDataColumn(self, *args)

    def exportToTable(self):
        r"""exportToTable(Storage self) -> TimeSeriesTable"""
        return _common.Storage_exportToTable(self)

    def getColumnIndicesForIdentifier(self, identifier):
        r"""
        getColumnIndicesForIdentifier(Storage self, std::string const & identifier) -> ArrayInt

        Parameters
        ----------
        identifier: std::string const &

        """
        return _common.Storage_getColumnIndicesForIdentifier(self, identifier)

    def setStepInterval(self, aStepInterval):
        r"""
        setStepInterval(Storage self, int aStepInterval)

        Parameters
        ----------
        aStepInterval: int

        """
        return _common.Storage_setStepInterval(self, aStepInterval)

    def getStepInterval(self):
        r"""getStepInterval(Storage self) -> int"""
        return _common.Storage_getStepInterval(self)

    def setCapacityIncrement(self, arg2):
        r"""
        setCapacityIncrement(Storage self, int arg2)

        Parameters
        ----------
        arg2: int

        """
        return _common.Storage_setCapacityIncrement(self, arg2)

    def getCapacityIncrement(self):
        r"""getCapacityIncrement(Storage self) -> int"""
        return _common.Storage_getCapacityIncrement(self)

    def setWriteSIMMHeader(self, aTrueFalse):
        r"""
        setWriteSIMMHeader(Storage self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.Storage_setWriteSIMMHeader(self, aTrueFalse)

    def getWriteSIMMHeader(self):
        r"""getWriteSIMMHeader(Storage self) -> bool"""
        return _common.Storage_getWriteSIMMHeader(self)

    def setHeaderToken(self, aToken):
        r"""
        setHeaderToken(Storage self, std::string const & aToken)

        Parameters
        ----------
        aToken: std::string const &

        """
        return _common.Storage_setHeaderToken(self, aToken)

    def getHeaderToken(self):
        r"""getHeaderToken(Storage self) -> std::string const &"""
        return _common.Storage_getHeaderToken(self)

    def getStateIndex(self, aColumnName, startIndex=0):
        r"""
        getStateIndex(Storage self, std::string const & aColumnName, int startIndex=0) -> int

        Parameters
        ----------
        aColumnName: std::string const &
        startIndex: int

        """
        return _common.Storage_getStateIndex(self, aColumnName, startIndex)

    def setColumnLabels(self, aColumnLabels):
        r"""
        setColumnLabels(Storage self, ArrayStr aColumnLabels)

        Parameters
        ----------
        aColumnLabels: OpenSim::Array< std::string > const &

        """
        return _common.Storage_setColumnLabels(self, aColumnLabels)

    def getColumnLabels(self):
        r"""getColumnLabels(Storage self) -> ArrayStr"""
        return _common.Storage_getColumnLabels(self)

    def reset(self, *args):
        r"""
        reset(Storage self, int aIndex=0) -> int

        Parameters
        ----------
        aIndex: int

        reset(Storage self, double aTime) -> int

        Parameters
        ----------
        aTime: double

        """
        return _common.Storage_reset(self, *args)

    def purge(self):
        r"""purge(Storage self)"""
        return _common.Storage_purge(self)

    def crop(self, newStartTime, newFinalTime):
        r"""
        crop(Storage self, double const newStartTime, double const newFinalTime)

        Parameters
        ----------
        newStartTime: double const
        newFinalTime: double const

        """
        return _common.Storage_crop(self, newStartTime, newFinalTime)

    def append(self, *args):
        r"""
        append(Storage self, StateVector aVec, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aVec: OpenSim::StateVector const &
        aCheckForDuplicateTime: bool

        append(Storage self, ArrayStateVector aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::StateVector > const &

        append(Storage self, double aT, int aN, double const * aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aN: int
        aY: double const *
        aCheckForDuplicateTime: bool

        append(Storage self, double aT, Vector aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vector const &
        aCheckForDuplicateTime: bool

        append(Storage self, double aT, ArrayDouble aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: OpenSim::Array< double > const &
        aCheckForDuplicateTime: bool

        append(Storage self, double aT, Vec3 aY, bool aCheckForDuplicateTime=True) -> int

        Parameters
        ----------
        aT: double
        aY: SimTK::Vec3 const &
        aCheckForDuplicateTime: bool

        """
        return _common.Storage_append(self, *args)

    def store(self, aStep, aT, aN, aY):
        r"""
        store(Storage self, int aStep, double aT, int aN, double const * aY) -> int

        Parameters
        ----------
        aStep: int
        aT: double
        aN: int
        aY: double const *

        """
        return _common.Storage_store(self, aStep, aT, aN, aY)

    def shiftTime(self, aValue):
        r"""
        shiftTime(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.Storage_shiftTime(self, aValue)

    def scaleTime(self, aValue):
        r"""
        scaleTime(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.Storage_scaleTime(self, aValue)

    def add(self, *args):
        r"""
        add(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        add(Storage self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        add(Storage self, int aN, double aValue)

        Parameters
        ----------
        aN: int
        aValue: double

        add(Storage self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        add(Storage self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage *

        """
        return _common.Storage_add(self, *args)

    def subtract(self, *args):
        r"""
        subtract(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        subtract(Storage self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        subtract(Storage self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        subtract(Storage self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage *

        """
        return _common.Storage_subtract(self, *args)

    def multiplyColumn(self, aIndex, aValue):
        r"""
        multiplyColumn(Storage self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.Storage_multiplyColumn(self, aIndex, aValue)

    def multiply(self, *args):
        r"""
        multiply(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        multiply(Storage self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        multiply(Storage self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        multiply(Storage self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage *

        """
        return _common.Storage_multiply(self, *args)

    def divide(self, *args):
        r"""
        divide(Storage self, double aValue)

        Parameters
        ----------
        aValue: double

        divide(Storage self, Vector values)

        Parameters
        ----------
        values: SimTK::Vector_< double > const &

        divide(Storage self, StateVector aStateVector)

        Parameters
        ----------
        aStateVector: OpenSim::StateVector *

        divide(Storage self, Storage aStorage)

        Parameters
        ----------
        aStorage: OpenSim::Storage *

        """
        return _common.Storage_divide(self, *args)

    def integrate(self, *args):
        r"""
        integrate(Storage self, int aI1=-2, int aI2=-1) -> Storage

        Parameters
        ----------
        aI1: int
        aI2: int

        integrate(Storage self, double aT1, double aT2) -> Storage

        Parameters
        ----------
        aT1: double
        aT2: double

        """
        return _common.Storage_integrate(self, *args)

    def computeArea(self, *args):
        r"""
        computeArea(Storage self, int aN, double * aArea) -> int

        Parameters
        ----------
        aN: int
        aArea: double *

        computeArea(Storage self, double aTI, double aTF, int aN, double * aArea) -> int

        Parameters
        ----------
        aTI: double
        aTF: double
        aN: int
        aArea: double *

        """
        return _common.Storage_computeArea(self, *args)

    def computeAverage(self, *args):
        r"""
        computeAverage(Storage self, int aN, double * aAve) -> int

        Parameters
        ----------
        aN: int
        aAve: double *

        computeAverage(Storage self, double aTI, double aTF, int aN, double * aAve) -> int

        Parameters
        ----------
        aTI: double
        aTF: double
        aN: int
        aAve: double *

        """
        return _common.Storage_computeAverage(self, *args)

    def pad(self, aPadSize):
        r"""
        pad(Storage self, int aPadSize)

        Parameters
        ----------
        aPadSize: int

        """
        return _common.Storage_pad(self, aPadSize)

    def smoothSpline(self, order, cutoffFrequency):
        r"""
        smoothSpline(Storage self, int order, double cutoffFrequency)

        Parameters
        ----------
        order: int
        cutoffFrequency: double

        """
        return _common.Storage_smoothSpline(self, order, cutoffFrequency)

    def lowpassIIR(self, cutoffFrequency):
        r"""
        lowpassIIR(Storage self, double cutoffFrequency)

        Parameters
        ----------
        cutoffFrequency: double

        """
        return _common.Storage_lowpassIIR(self, cutoffFrequency)

    def lowpassFIR(self, order, cutoffFrequency):
        r"""
        lowpassFIR(Storage self, int order, double cutoffFrequency)

        Parameters
        ----------
        order: int
        cutoffFrequency: double

        """
        return _common.Storage_lowpassFIR(self, order, cutoffFrequency)

    def addToRdStorage(self, rStorage, aStartTime, aEndTime):
        r"""
        addToRdStorage(Storage self, Storage rStorage, double aStartTime, double aEndTime)

        Parameters
        ----------
        rStorage: OpenSim::Storage &
        aStartTime: double
        aEndTime: double

        """
        return _common.Storage_addToRdStorage(self, rStorage, aStartTime, aEndTime)

    def findIndex(self, *args):
        r"""
        findIndex(Storage self, double aT) -> int

        Parameters
        ----------
        aT: double

        findIndex(Storage self, int aI, double aT) -> int

        Parameters
        ----------
        aI: int
        aT: double

        """
        return _common.Storage_findIndex(self, *args)

    def findFrameRange(self, aStartTime, aEndTime, oStartFrame, oEndFrame):
        r"""
        findFrameRange(Storage self, double aStartTime, double aEndTime, int & oStartFrame, int & oEndFrame)

        Parameters
        ----------
        aStartTime: double
        aEndTime: double
        oStartFrame: int &
        oEndFrame: int &

        """
        return _common.Storage_findFrameRange(self, aStartTime, aEndTime, oStartFrame, oEndFrame)

    def resample(self, aDT, aDegree):
        r"""
        resample(Storage self, double aDT, int aDegree) -> double

        Parameters
        ----------
        aDT: double
        aDegree: int

        """
        return _common.Storage_resample(self, aDT, aDegree)

    def resampleLinear(self, aDT):
        r"""
        resampleLinear(Storage self, double aDT) -> double

        Parameters
        ----------
        aDT: double

        """
        return _common.Storage_resampleLinear(self, aDT)

    def compareColumn(self, aOtherStorage, aColumnName, startTime, endTime=-1.0):
        r"""
        compareColumn(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime, double endTime=-1.0) -> double

        Parameters
        ----------
        aOtherStorage: OpenSim::Storage &
        aColumnName: std::string const &
        startTime: double
        endTime: double

        """
        return _common.Storage_compareColumn(self, aOtherStorage, aColumnName, startTime, endTime)

    def compareColumnRMS(self, *args):
        r"""
        compareColumnRMS(Storage self, Storage aOtherStorage, std::string const & aColumnName, double startTime=SimTK::NaN, double endTime=SimTK::NaN) -> double

        Parameters
        ----------
        aOtherStorage: OpenSim::Storage const &
        aColumnName: std::string const &
        startTime: double
        endTime: double

        """
        return _common.Storage_compareColumnRMS(self, *args)

    def compareWithStandard(self, standard, columnsUsed, comparisons):
        r"""
        compareWithStandard(Storage self, Storage standard, StdVectorString columnsUsed, StdVectorDouble comparisons)

        Parameters
        ----------
        standard: OpenSim::Storage const &
        columnsUsed: std::vector< std::string,std::allocator< std::string > > &
        comparisons: std::vector< double,std::allocator< double > > &

        """
        return _common.Storage_compareWithStandard(self, standard, columnsUsed, comparisons)

    def makeStorageLabelsUnique(self):
        r"""makeStorageLabelsUnique(Storage self) -> bool"""
        return _common.Storage_makeStorageLabelsUnique(self)

    def storageLabelsAreUnique(self):
        r"""storageLabelsAreUnique(Storage self) -> bool"""
        return _common.Storage_storageLabelsAreUnique(self)

    def printToXML(self, *args):
        
        return _common.Storage_printToXML(self, *args)

    def printToFile(self, *args):
        r"""
        printToFile(Storage self, std::string const & aFileName, std::string const & aMode="w", std::string const & aComment="") -> bool

        Parameters
        ----------
        aFileName: std::string const &
        aMode: std::string const &
        aComment: std::string const &

        printToFile(Storage self, std::string const & aFileName, double aDT, std::string const & aMode="w") -> int

        Parameters
        ----------
        aFileName: std::string const &
        aDT: double
        aMode: std::string const &

        """
        return _common.Storage_printToFile(self, *args)

    def setOutputFileName(self, aFileName):
        r"""
        setOutputFileName(Storage self, std::string const & aFileName)

        Parameters
        ----------
        aFileName: std::string const &

        """
        return _common.Storage_setOutputFileName(self, aFileName)

    @staticmethod
    def printResult(aStorage, aName, aDir, aDT, aExtension):
        r"""
        printResult(Storage aStorage, std::string const & aName, std::string const & aDir, double aDT, std::string const & aExtension)

        Parameters
        ----------
        aStorage: OpenSim::Storage const *
        aName: std::string const &
        aDir: std::string const &
        aDT: double
        aExtension: std::string const &

        """
        return _common.Storage_printResult(aStorage, aName, aDir, aDT, aExtension)

    def interpolateAt(self, targetTimes):
        r"""
        interpolateAt(Storage self, ArrayDouble targetTimes)

        Parameters
        ----------
        targetTimes: OpenSim::Array< double > const &

        """
        return _common.Storage_interpolateAt(self, targetTimes)

# Register Storage in _common:
_common.Storage_swigregister(Storage)
Storage_DEFAULT_CAPACITY = cvar.Storage_DEFAULT_CAPACITY
Storage.MAX_RESAMPLE_SIZE = _common.cvar.Storage_MAX_RESAMPLE_SIZE

class ArrayStorage(object):
    r"""Proxy of C++ OpenSim::ArrayPtrs< OpenSim::Storage > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayStorage

    def __init__(self, *args):
        r"""
        __init__(ArrayStorage self, int aCapacity=1) -> ArrayStorage

        Parameters
        ----------
        aCapacity: int

        __init__(ArrayStorage self, ArrayStorage aArray) -> ArrayStorage

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Storage > const &

        """
        _common.ArrayStorage_swiginit(self, _common.new_ArrayStorage(*args))

    def clearAndDestroy(self):
        r"""clearAndDestroy(ArrayStorage self)"""
        return _common.ArrayStorage_clearAndDestroy(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayStorage self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayStorage_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayStorage self) -> int"""
        return _common.ArrayStorage_getSize(self)

    def size(self):
        r"""size(ArrayStorage self) -> int"""
        return _common.ArrayStorage_size(self)

    def getIndex(self, *args):
        r"""
        getIndex(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT *
        aStartIndex: int

        getIndex(ArrayStorage self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _common.ArrayStorage_getIndex(self, *args)

    def append(self, *args):
        r"""
        append(ArrayStorage self, Storage aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Storage *

        append(ArrayStorage self, ArrayStorage aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Storage > &

        """
        return _common.ArrayStorage_append(self, *args)

    def insert(self, aIndex, aObject):
        r"""
        insert(ArrayStorage self, int aIndex, Storage aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Storage *

        """
        return _common.ArrayStorage_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(ArrayStorage self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT * aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT *

        """
        return _common.ArrayStorage_remove(self, *args)

    def set(self, aIndex, aObject):
        r"""
        set(ArrayStorage self, int aIndex, Storage aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Storage *

        """
        return _common.ArrayStorage_set(self, aIndex, aObject)

    def get(self, *args):
        r"""
        get(ArrayStorage self, int aIndex) -> Storage

        Parameters
        ----------
        aIndex: int

        get(ArrayStorage self, std::string const & aName) -> Storage

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayStorage_get(self, *args)

    def getLast(self):
        r"""getLast(ArrayStorage self) -> Storage"""
        return _common.ArrayStorage_getLast(self)

    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayStorage self, OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT & aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Storage >::ConstT &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayStorage_searchBinary(self, aObject, aFindFirst, aLo, aHi)

# Register ArrayStorage in _common:
_common.ArrayStorage_swigregister(ArrayStorage)
class Units(object):
    r"""Proxy of C++ OpenSim::Units class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    UnknownUnits = _common.Units_UnknownUnits
    
    Radians = _common.Units_Radians
    
    Degrees = _common.Units_Degrees
    
    Millimeters = _common.Units_Millimeters
    
    Centimeters = _common.Units_Centimeters
    
    Meters = _common.Units_Meters
    
    Seconds = _common.Units_Seconds
    
    Milliseconds = _common.Units_Milliseconds
    
    Newtons = _common.Units_Newtons
    

    def __init__(self, *args):
        r"""
        __init__(Units self) -> Units
        __init__(Units self, std::string const aString) -> Units

        Parameters
        ----------
        aString: std::string const

        __init__(Units self, OpenSim::Units::UnitType aType) -> Units

        Parameters
        ----------
        aType: enum OpenSim::Units::UnitType

        """
        _common.Units_swiginit(self, _common.new_Units(*args))
    __swig_destroy__ = _common.delete_Units

    def convertTo(self, *args):
        r"""
        convertTo(Units self, OpenSim::Units::UnitType aType, double aValue) -> double

        Parameters
        ----------
        aType: enum OpenSim::Units::UnitType
        aValue: double

        convertTo(Units self, OpenSim::Units::UnitType aType) -> double

        Parameters
        ----------
        aType: enum OpenSim::Units::UnitType

        convertTo(Units self, Units aUnit) -> double

        Parameters
        ----------
        aUnit: OpenSim::Units const &

        """
        return _common.Units_convertTo(self, *args)

    def getType(self):
        r"""getType(Units self) -> OpenSim::Units::UnitType"""
        return _common.Units_getType(self)

    def getLabel(self):
        r"""getLabel(Units self) -> std::string"""
        return _common.Units_getLabel(self)

    def getAbbreviation(self):
        r"""getAbbreviation(Units self) -> std::string"""
        return _common.Units_getAbbreviation(self)

# Register Units in _common:
_common.Units_swigregister(Units)
class IO(object):
    r"""Proxy of C++ OpenSim::IO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ConstructDateAndTimeStamp():
        r"""ConstructDateAndTimeStamp() -> char *"""
        return _common.IO_ConstructDateAndTimeStamp()

    @staticmethod
    def FixSlashesInFilePath(path):
        r"""
        FixSlashesInFilePath(std::string const & path) -> std::string

        Parameters
        ----------
        path: std::string const &

        """
        return _common.IO_FixSlashesInFilePath(path)

    @staticmethod
    def SetScientific(aTrueFalse):
        r"""
        SetScientific(bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.IO_SetScientific(aTrueFalse)

    @staticmethod
    def GetScientific():
        r"""GetScientific() -> bool"""
        return _common.IO_GetScientific()

    @staticmethod
    def SetGFormatForDoubleOutput(aTrueFalse):
        r"""
        SetGFormatForDoubleOutput(bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.IO_SetGFormatForDoubleOutput(aTrueFalse)

    @staticmethod
    def GetGFormatForDoubleOutput():
        r"""GetGFormatForDoubleOutput() -> bool"""
        return _common.IO_GetGFormatForDoubleOutput()

    @staticmethod
    def SetDigitsPad(aPad):
        r"""
        SetDigitsPad(int aPad)

        Parameters
        ----------
        aPad: int

        """
        return _common.IO_SetDigitsPad(aPad)

    @staticmethod
    def GetDigitsPad():
        r"""GetDigitsPad() -> int"""
        return _common.IO_GetDigitsPad()

    @staticmethod
    def SetPrecision(aPlaces):
        r"""
        SetPrecision(int aPlaces)

        Parameters
        ----------
        aPlaces: int

        """
        return _common.IO_SetPrecision(aPlaces)

    @staticmethod
    def GetPrecision():
        r"""GetPrecision() -> int"""
        return _common.IO_GetPrecision()

    @staticmethod
    def GetDoubleOutputFormat():
        r"""GetDoubleOutputFormat() -> char const *"""
        return _common.IO_GetDoubleOutputFormat()

    @staticmethod
    def SetPrintOfflineDocuments(aTrueFalse):
        r"""
        SetPrintOfflineDocuments(bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.IO_SetPrintOfflineDocuments(aTrueFalse)

    @staticmethod
    def GetPrintOfflineDocuments():
        r"""GetPrintOfflineDocuments() -> bool"""
        return _common.IO_GetPrintOfflineDocuments()

    @staticmethod
    def makeDir(aDirName):
        r"""
        makeDir(std::string const & aDirName) -> int

        Parameters
        ----------
        aDirName: std::string const &

        """
        return _common.IO_makeDir(aDirName)

    @staticmethod
    def chDir(aDirName):
        r"""
        chDir(std::string const & aDirName) -> int

        Parameters
        ----------
        aDirName: std::string const &

        """
        return _common.IO_chDir(aDirName)

    @staticmethod
    def getCwd():
        r"""getCwd() -> std::string"""
        return _common.IO_getCwd()

    @staticmethod
    def getParentDirectory(fileName):
        r"""
        getParentDirectory(std::string const & fileName) -> std::string

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.IO_getParentDirectory(fileName)

    @staticmethod
    def GetFileNameFromURI(aURI):
        r"""
        GetFileNameFromURI(std::string const & aURI) -> std::string

        Parameters
        ----------
        aURI: std::string const &

        """
        return _common.IO_GetFileNameFromURI(aURI)

    @staticmethod
    def formatText(*args):
        r"""
        formatText(std::string const & aComment, std::string const & leadingWhitespace, int width, std::string const & endlineTokenToInsert="\n") -> std::string

        Parameters
        ----------
        aComment: std::string const &
        leadingWhitespace: std::string const &
        width: int
        endlineTokenToInsert: std::string const &

        """
        return _common.IO_formatText(*args)

    @staticmethod
    def GetSuffix(aStr, aLen):
        r"""
        GetSuffix(std::string const & aStr, int aLen) -> std::string

        Parameters
        ----------
        aStr: std::string const &
        aLen: int

        """
        return _common.IO_GetSuffix(aStr, aLen)

    @staticmethod
    def RemoveSuffix(rStr, aLen):
        r"""
        RemoveSuffix(std::string & rStr, int aLen)

        Parameters
        ----------
        rStr: std::string &
        aLen: int

        """
        return _common.IO_RemoveSuffix(rStr, aLen)

    @staticmethod
    def replaceSubstring(aStr, aFrom, aTo):
        r"""
        replaceSubstring(std::string const & aStr, std::string const & aFrom, std::string const & aTo) -> std::string

        Parameters
        ----------
        aStr: std::string const &
        aFrom: std::string const &
        aTo: std::string const &

        """
        return _common.IO_replaceSubstring(aStr, aFrom, aTo)

    @staticmethod
    def TrimLeadingWhitespace(rStr):
        r"""
        TrimLeadingWhitespace(std::string & rStr)

        Parameters
        ----------
        rStr: std::string &

        """
        return _common.IO_TrimLeadingWhitespace(rStr)

    @staticmethod
    def TrimTrailingWhitespace(rStr):
        r"""
        TrimTrailingWhitespace(std::string & rStr)

        Parameters
        ----------
        rStr: std::string &

        """
        return _common.IO_TrimTrailingWhitespace(rStr)

    @staticmethod
    def TrimWhitespace(rStr):
        r"""
        TrimWhitespace(std::string & rStr)

        Parameters
        ----------
        rStr: std::string &

        """
        return _common.IO_TrimWhitespace(rStr)

    @staticmethod
    def Lowercase(aStr):
        r"""
        Lowercase(std::string const & aStr) -> std::string

        Parameters
        ----------
        aStr: std::string const &

        """
        return _common.IO_Lowercase(aStr)

    @staticmethod
    def Uppercase(aStr):
        r"""
        Uppercase(std::string const & aStr) -> std::string

        Parameters
        ----------
        aStr: std::string const &

        """
        return _common.IO_Uppercase(aStr)

    @staticmethod
    def StartsWith(string, start):
        r"""
        StartsWith(std::string const & string, std::string const & start) -> bool

        Parameters
        ----------
        string: std::string const &
        start: std::string const &

        """
        return _common.IO_StartsWith(string, start)

    @staticmethod
    def EndsWith(string, ending):
        r"""
        EndsWith(std::string const & string, std::string const & ending) -> bool

        Parameters
        ----------
        string: std::string const &
        ending: std::string const &

        """
        return _common.IO_EndsWith(string, ending)

    @staticmethod
    def StartsWithIgnoringCase(string, start):
        r"""
        StartsWithIgnoringCase(std::string const & string, std::string const & start) -> bool

        Parameters
        ----------
        string: std::string const &
        start: std::string const &

        """
        return _common.IO_StartsWithIgnoringCase(string, start)

    @staticmethod
    def EndsWithIgnoringCase(string, ending):
        r"""
        EndsWithIgnoringCase(std::string const & string, std::string const & ending) -> bool

        Parameters
        ----------
        string: std::string const &
        ending: std::string const &

        """
        return _common.IO_EndsWithIgnoringCase(string, ending)

    @staticmethod
    def eraseEmptyElements(list):
        r"""
        eraseEmptyElements(StdVectorString list)

        Parameters
        ----------
        list: std::vector< std::string,std::allocator< std::string > > &

        """
        return _common.IO_eraseEmptyElements(list)

    def __init__(self):
        r"""__init__(IO self) -> IO"""
        _common.IO_swiginit(self, _common.new_IO())
    __swig_destroy__ = _common.delete_IO

# Register IO in _common:
_common.IO_swigregister(IO)
IO_STRLEN = cvar.IO_STRLEN

class Function(OpenSimObject):
    r"""Proxy of C++ OpenSim::Function class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> Function

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Function_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(Function self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Function_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.Function_getClassName()

    def clone(self):
        r"""clone(Function self) -> Function"""
        return _common.Function_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(Function self) -> std::string const &"""
        return _common.Function_getConcreteClassName(self)
    __swig_destroy__ = _common.delete_Function

    def init(self, aFunction):
        r"""
        init(Function self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.Function_init(self, aFunction)

    @staticmethod
    def makeFunctionOfType(aFunction, aNewTypeName):
        r"""
        makeFunctionOfType(Function aFunction, std::string const & aNewTypeName) -> Function

        Parameters
        ----------
        aFunction: OpenSim::Function *
        aNewTypeName: std::string const &

        """
        return _common.Function_makeFunctionOfType(aFunction, aNewTypeName)

    def calcValue(self, x):
        r"""
        calcValue(Function self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.Function_calcValue(self, x)

    def calcDerivative(self, derivComponents, x):
        r"""
        calcDerivative(Function self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.Function_calcDerivative(self, derivComponents, x)

    def getArgumentSize(self):
        r"""getArgumentSize(Function self) -> int"""
        return _common.Function_getArgumentSize(self)

    def getMaxDerivativeOrder(self):
        r"""getMaxDerivativeOrder(Function self) -> int"""
        return _common.Function_getMaxDerivativeOrder(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(Function self) -> SimTK::Function *"""
        return _common.Function_createSimTKFunction(self)

# Register Function in _common:
_common.Function_swigregister(Function)
class SetFunctions(OpenSimObject):
    r"""Proxy of C++ OpenSim::Set< OpenSim::Function,OpenSim::Object > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetFunctions

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.SetFunctions_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetFunctions self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.SetFunctions_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.SetFunctions_getClassName()

    def clone(self):
        r"""clone(SetFunctions self) -> SetFunctions"""
        return _common.SetFunctions_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetFunctions self) -> std::string const &"""
        return _common.SetFunctions_getConcreteClassName(self)
    __swig_destroy__ = _common.delete_SetFunctions

    def __init__(self, *args):
        r"""
        __init__(SetFunctions self) -> SetFunctions
        __init__(SetFunctions self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetFunctions

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(SetFunctions self, SetFunctions aSet) -> SetFunctions

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Function,OpenSim::Object > const &

        """
        _common.SetFunctions_swiginit(self, _common.new_SetFunctions(*args))

    def setupGroups(self):
        r"""setupGroups(SetFunctions self)"""
        return _common.SetFunctions_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        setMemoryOwner(SetFunctions self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.SetFunctions_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        setSize(SetFunctions self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.SetFunctions_setSize(self, aSize)

    def getSize(self):
        r"""getSize(SetFunctions self) -> int"""
        return _common.SetFunctions_getSize(self)

    def getIndex(self, *args):
        r"""
        getIndex(SetFunctions self, Function aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Function const *
        aStartIndex: int

        getIndex(SetFunctions self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _common.SetFunctions_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""
        getGroupNamesContaining(SetFunctions self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.SetFunctions_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        adoptAndAppend(SetFunctions self, Function aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Function *

        """
        return _common.SetFunctions_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend(SetFunctions self, Function aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Function const &

        """
        return _common.SetFunctions_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        insert(SetFunctions self, int aIndex, Function aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Function *

        """
        return _common.SetFunctions_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(SetFunctions self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetFunctions self, Function aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Function const *

        """
        return _common.SetFunctions_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetFunctions self)"""
        return _common.SetFunctions_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        set(SetFunctions self, int aIndex, Function aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Function *
        preserveGroups: bool

        """
        return _common.SetFunctions_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        get(SetFunctions self, int aIndex) -> Function

        Parameters
        ----------
        aIndex: int

        get(SetFunctions self, std::string const & aName) -> Function

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetFunctions_get(self, *args)

    def contains(self, aName):
        r"""
        contains(SetFunctions self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetFunctions_contains(self, aName)

    def getNames(self, rNames):
        r"""
        getNames(SetFunctions self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _common.SetFunctions_getNames(self, rNames)

    def getNumGroups(self):
        r"""getNumGroups(SetFunctions self) -> int"""
        return _common.SetFunctions_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""
        addGroup(SetFunctions self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.SetFunctions_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""
        removeGroup(SetFunctions self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.SetFunctions_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""
        renameGroup(SetFunctions self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _common.SetFunctions_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""
        addObjectToGroup(SetFunctions self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _common.SetFunctions_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""
        getGroupNames(SetFunctions self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.SetFunctions_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        getGroup(SetFunctions self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetFunctions self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _common.SetFunctions_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetFunctions in _common:
_common.SetFunctions_swigregister(SetFunctions)
class FunctionSet(SetFunctions):
    r"""Proxy of C++ OpenSim::FunctionSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> FunctionSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.FunctionSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(FunctionSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.FunctionSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.FunctionSet_getClassName()

    def clone(self):
        r"""clone(FunctionSet self) -> FunctionSet"""
        return _common.FunctionSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(FunctionSet self) -> std::string const &"""
        return _common.FunctionSet_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(FunctionSet self) -> FunctionSet
        __init__(FunctionSet self, std::string const & aFileName) -> FunctionSet

        Parameters
        ----------
        aFileName: std::string const &

        """
        _common.FunctionSet_swiginit(self, _common.new_FunctionSet(*args))
    __swig_destroy__ = _common.delete_FunctionSet

    def evaluate(self, *args):
        r"""
        evaluate(FunctionSet self, int aIndex, int aDerivOrder, double aX=0.0) -> double

        Parameters
        ----------
        aIndex: int
        aDerivOrder: int
        aX: double

        evaluate(FunctionSet self, ArrayDouble rValues, int aDerivOrder, double aX=0.0)

        Parameters
        ----------
        rValues: OpenSim::Array< double > &
        aDerivOrder: int
        aX: double

        """
        return _common.FunctionSet_evaluate(self, *args)

    def adoptAndAppend(self, aFunction):
        aFunction._markAdopted()
        return super(FunctionSet, self).adoptAndAppend(aFunction)


# Register FunctionSet in _common:
_common.FunctionSet_swigregister(FunctionSet)
class Constant(Function):
    r"""Proxy of C++ OpenSim::Constant class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> Constant

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Constant_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(Constant self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Constant_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.Constant_getClassName()

    def clone(self):
        r"""clone(Constant self) -> Constant"""
        return _common.Constant_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(Constant self) -> std::string const &"""
        return _common.Constant_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(Constant self) -> Constant
        __init__(Constant self, double value) -> Constant

        Parameters
        ----------
        value: double

        __init__(Constant self, Constant aSpline) -> Constant

        Parameters
        ----------
        aSpline: OpenSim::Constant const &

        """
        _common.Constant_swiginit(self, _common.new_Constant(*args))
    __swig_destroy__ = _common.delete_Constant

    def setValue(self, aValue):
        r"""
        setValue(Constant self, double aValue)

        Parameters
        ----------
        aValue: double

        """
        return _common.Constant_setValue(self, aValue)

    def calcValue(self, xUnused):
        r"""
        calcValue(Constant self, Vector xUnused) -> double

        Parameters
        ----------
        xUnused: SimTK::Vector const &

        """
        return _common.Constant_calcValue(self, xUnused)

    def getValue(self):
        r"""getValue(Constant self) -> double"""
        return _common.Constant_getValue(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(Constant self) -> SimTK::Function *"""
        return _common.Constant_createSimTKFunction(self)

# Register Constant in _common:
_common.Constant_swigregister(Constant)
class SimmSpline(Function):
    r"""Proxy of C++ OpenSim::SimmSpline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SimmSpline

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.SimmSpline_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SimmSpline self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.SimmSpline_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.SimmSpline_getClassName()

    def clone(self):
        r"""clone(SimmSpline self) -> SimmSpline"""
        return _common.SimmSpline_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SimmSpline self) -> std::string const &"""
        return _common.SimmSpline_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(SimmSpline self) -> SimmSpline
        __init__(SimmSpline self, int aN, double const * aTimes, double const * aValues, std::string const & aName="") -> SimmSpline

        Parameters
        ----------
        aN: int
        aTimes: double const *
        aValues: double const *
        aName: std::string const &

        __init__(SimmSpline self, SimmSpline aSpline) -> SimmSpline

        Parameters
        ----------
        aSpline: OpenSim::SimmSpline const &

        """
        _common.SimmSpline_swiginit(self, _common.new_SimmSpline(*args))
    __swig_destroy__ = _common.delete_SimmSpline

    def init(self, aFunction):
        r"""
        init(SimmSpline self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.SimmSpline_init(self, aFunction)

    def getSize(self):
        r"""getSize(SimmSpline self) -> int"""
        return _common.SimmSpline_getSize(self)

    def getXValues(self):
        r"""getXValues(SimmSpline self) -> double const *"""
        return _common.SimmSpline_getXValues(self)

    def getYValues(self):
        r"""getYValues(SimmSpline self) -> double const *"""
        return _common.SimmSpline_getYValues(self)

    def getNumberOfPoints(self):
        r"""getNumberOfPoints(SimmSpline self) -> int"""
        return _common.SimmSpline_getNumberOfPoints(self)

    def getX(self, *args):
        r"""
        getX(SimmSpline self) -> ArrayDouble
        getX(SimmSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.SimmSpline_getX(self, *args)

    def getY(self, *args):
        r"""
        getY(SimmSpline self) -> ArrayDouble
        getY(SimmSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.SimmSpline_getY(self, *args)

    def getZ(self, aIndex):
        r"""
        getZ(SimmSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.SimmSpline_getZ(self, aIndex)

    def setX(self, aIndex, aValue):
        r"""
        setX(SimmSpline self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.SimmSpline_setX(self, aIndex, aValue)

    def setY(self, aIndex, aValue):
        r"""
        setY(SimmSpline self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.SimmSpline_setY(self, aIndex, aValue)

    def deletePoint(self, aIndex):
        r"""
        deletePoint(SimmSpline self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.SimmSpline_deletePoint(self, aIndex)

    def deletePoints(self, indices):
        r"""
        deletePoints(SimmSpline self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.SimmSpline_deletePoints(self, indices)

    def addPoint(self, aX, aY):
        r"""
        addPoint(SimmSpline self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.SimmSpline_addPoint(self, aX, aY)

    def calcValue(self, x):
        r"""
        calcValue(SimmSpline self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.SimmSpline_calcValue(self, x)

    def calcDerivative(self, derivComponents, x):
        r"""
        calcDerivative(SimmSpline self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.SimmSpline_calcDerivative(self, derivComponents, x)

    def getArgumentSize(self):
        r"""getArgumentSize(SimmSpline self) -> int"""
        return _common.SimmSpline_getArgumentSize(self)

    def getMaxDerivativeOrder(self):
        r"""getMaxDerivativeOrder(SimmSpline self) -> int"""
        return _common.SimmSpline_getMaxDerivativeOrder(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(SimmSpline self) -> SimTK::Function *"""
        return _common.SimmSpline_createSimTKFunction(self)

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        r"""
        updateFromXMLNode(SimmSpline self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _common.SimmSpline_updateFromXMLNode(self, aNode, versionNumber)

# Register SimmSpline in _common:
_common.SimmSpline_swigregister(SimmSpline)
class StepFunction(Function):
    r"""Proxy of C++ OpenSim::StepFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> StepFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.StepFunction_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(StepFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.StepFunction_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.StepFunction_getClassName()

    def clone(self):
        r"""clone(StepFunction self) -> StepFunction"""
        return _common.StepFunction_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(StepFunction self) -> std::string const &"""
        return _common.StepFunction_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(StepFunction self) -> StepFunction
        __init__(StepFunction self, double startTime, double endTime, double startValue=0.0, double endValue=1.0) -> StepFunction

        Parameters
        ----------
        startTime: double
        endTime: double
        startValue: double
        endValue: double

        __init__(StepFunction self, StepFunction aSpline) -> StepFunction

        Parameters
        ----------
        aSpline: OpenSim::StepFunction const &

        """
        _common.StepFunction_swiginit(self, _common.new_StepFunction(*args))
    __swig_destroy__ = _common.delete_StepFunction

    def setStartTime(self, time):
        r"""
        setStartTime(StepFunction self, double time)

        Parameters
        ----------
        time: double

        """
        return _common.StepFunction_setStartTime(self, time)

    def getStartTime(self):
        r"""getStartTime(StepFunction self) -> double"""
        return _common.StepFunction_getStartTime(self)

    def setEndTime(self, time):
        r"""
        setEndTime(StepFunction self, double time)

        Parameters
        ----------
        time: double

        """
        return _common.StepFunction_setEndTime(self, time)

    def getEndTime(self):
        r"""getEndTime(StepFunction self) -> double"""
        return _common.StepFunction_getEndTime(self)

    def setStartValue(self, start):
        r"""
        setStartValue(StepFunction self, double start)

        Parameters
        ----------
        start: double

        """
        return _common.StepFunction_setStartValue(self, start)

    def getStartValue(self):
        r"""getStartValue(StepFunction self) -> double"""
        return _common.StepFunction_getStartValue(self)

    def setEndValue(self, end):
        r"""
        setEndValue(StepFunction self, double end)

        Parameters
        ----------
        end: double

        """
        return _common.StepFunction_setEndValue(self, end)

    def getEndValue(self):
        r"""getEndValue(StepFunction self) -> double"""
        return _common.StepFunction_getEndValue(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(StepFunction self) -> SimTK::Function *"""
        return _common.StepFunction_createSimTKFunction(self)

# Register StepFunction in _common:
_common.StepFunction_swigregister(StepFunction)
class PiecewiseConstantFunction(Function):
    r"""Proxy of C++ OpenSim::PiecewiseConstantFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> PiecewiseConstantFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.PiecewiseConstantFunction_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(PiecewiseConstantFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.PiecewiseConstantFunction_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.PiecewiseConstantFunction_getClassName()

    def clone(self):
        r"""clone(PiecewiseConstantFunction self) -> PiecewiseConstantFunction"""
        return _common.PiecewiseConstantFunction_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(PiecewiseConstantFunction self) -> std::string const &"""
        return _common.PiecewiseConstantFunction_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(PiecewiseConstantFunction self) -> PiecewiseConstantFunction
        __init__(PiecewiseConstantFunction self, int aN, double const * aTimes, double const * aValues, std::string const & aName="") -> PiecewiseConstantFunction

        Parameters
        ----------
        aN: int
        aTimes: double const *
        aValues: double const *
        aName: std::string const &

        __init__(PiecewiseConstantFunction self, PiecewiseConstantFunction aFunction) -> PiecewiseConstantFunction

        Parameters
        ----------
        aFunction: OpenSim::PiecewiseConstantFunction const &

        """
        _common.PiecewiseConstantFunction_swiginit(self, _common.new_PiecewiseConstantFunction(*args))
    __swig_destroy__ = _common.delete_PiecewiseConstantFunction

    def init(self, aFunction):
        r"""
        init(PiecewiseConstantFunction self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.PiecewiseConstantFunction_init(self, aFunction)

    def getSize(self):
        r"""getSize(PiecewiseConstantFunction self) -> int"""
        return _common.PiecewiseConstantFunction_getSize(self)

    def getXValues(self):
        r"""getXValues(PiecewiseConstantFunction self) -> double const *"""
        return _common.PiecewiseConstantFunction_getXValues(self)

    def getYValues(self):
        r"""getYValues(PiecewiseConstantFunction self) -> double const *"""
        return _common.PiecewiseConstantFunction_getYValues(self)

    def getNumberOfPoints(self):
        r"""getNumberOfPoints(PiecewiseConstantFunction self) -> int"""
        return _common.PiecewiseConstantFunction_getNumberOfPoints(self)

    def getX(self, *args):
        r"""
        getX(PiecewiseConstantFunction self) -> ArrayDouble
        getX(PiecewiseConstantFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseConstantFunction_getX(self, *args)

    def getY(self, *args):
        r"""
        getY(PiecewiseConstantFunction self) -> ArrayDouble
        getY(PiecewiseConstantFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseConstantFunction_getY(self, *args)

    def getZ(self, aIndex):
        r"""
        getZ(PiecewiseConstantFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseConstantFunction_getZ(self, aIndex)

    def setX(self, aIndex, aValue):
        r"""
        setX(PiecewiseConstantFunction self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.PiecewiseConstantFunction_setX(self, aIndex, aValue)

    def setY(self, aIndex, aValue):
        r"""
        setY(PiecewiseConstantFunction self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.PiecewiseConstantFunction_setY(self, aIndex, aValue)

    def deletePoint(self, aIndex):
        r"""
        deletePoint(PiecewiseConstantFunction self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseConstantFunction_deletePoint(self, aIndex)

    def deletePoints(self, indices):
        r"""
        deletePoints(PiecewiseConstantFunction self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.PiecewiseConstantFunction_deletePoints(self, indices)

    def addPoint(self, aX, aY):
        r"""
        addPoint(PiecewiseConstantFunction self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.PiecewiseConstantFunction_addPoint(self, aX, aY)

    def evaluateTotalFirstDerivative(self, aX, aDxdt):
        r"""
        evaluateTotalFirstDerivative(PiecewiseConstantFunction self, double aX, double aDxdt) -> double

        Parameters
        ----------
        aX: double
        aDxdt: double

        """
        return _common.PiecewiseConstantFunction_evaluateTotalFirstDerivative(self, aX, aDxdt)

    def evaluateTotalSecondDerivative(self, aX, aDxdt, aD2xdt2):
        r"""
        evaluateTotalSecondDerivative(PiecewiseConstantFunction self, double aX, double aDxdt, double aD2xdt2) -> double

        Parameters
        ----------
        aX: double
        aDxdt: double
        aD2xdt2: double

        """
        return _common.PiecewiseConstantFunction_evaluateTotalSecondDerivative(self, aX, aDxdt, aD2xdt2)

    def calcValue(self, x):
        r"""
        calcValue(PiecewiseConstantFunction self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.PiecewiseConstantFunction_calcValue(self, x)

    def calcDerivative(self, derivComponents, x):
        r"""
        calcDerivative(PiecewiseConstantFunction self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.PiecewiseConstantFunction_calcDerivative(self, derivComponents, x)

    def getArgumentSize(self):
        r"""getArgumentSize(PiecewiseConstantFunction self) -> int"""
        return _common.PiecewiseConstantFunction_getArgumentSize(self)

    def getMaxDerivativeOrder(self):
        r"""getMaxDerivativeOrder(PiecewiseConstantFunction self) -> int"""
        return _common.PiecewiseConstantFunction_getMaxDerivativeOrder(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(PiecewiseConstantFunction self) -> SimTK::Function *"""
        return _common.PiecewiseConstantFunction_createSimTKFunction(self)

# Register PiecewiseConstantFunction in _common:
_common.PiecewiseConstantFunction_swigregister(PiecewiseConstantFunction)
class LinearFunction(Function):
    r"""Proxy of C++ OpenSim::LinearFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> LinearFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.LinearFunction_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(LinearFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.LinearFunction_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.LinearFunction_getClassName()

    def clone(self):
        r"""clone(LinearFunction self) -> LinearFunction"""
        return _common.LinearFunction_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(LinearFunction self) -> std::string const &"""
        return _common.LinearFunction_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(LinearFunction self) -> LinearFunction
        __init__(LinearFunction self, ArrayDouble coefficients) -> LinearFunction

        Parameters
        ----------
        coefficients: OpenSim::Array< double >

        __init__(LinearFunction self, double slope, double intercept) -> LinearFunction

        Parameters
        ----------
        slope: double
        intercept: double

        __init__(LinearFunction self, LinearFunction aSpline) -> LinearFunction

        Parameters
        ----------
        aSpline: OpenSim::LinearFunction const &

        """
        _common.LinearFunction_swiginit(self, _common.new_LinearFunction(*args))
    __swig_destroy__ = _common.delete_LinearFunction

    def setCoefficients(self, coefficients):
        r"""
        setCoefficients(LinearFunction self, ArrayDouble coefficients)

        Parameters
        ----------
        coefficients: OpenSim::Array< double >

        """
        return _common.LinearFunction_setCoefficients(self, coefficients)

    def setSlope(self, slope):
        r"""
        setSlope(LinearFunction self, double slope)

        Parameters
        ----------
        slope: double

        """
        return _common.LinearFunction_setSlope(self, slope)

    def setIntercept(self, intercept):
        r"""
        setIntercept(LinearFunction self, double intercept)

        Parameters
        ----------
        intercept: double

        """
        return _common.LinearFunction_setIntercept(self, intercept)

    def getCoefficients(self):
        r"""getCoefficients(LinearFunction self) -> ArrayDouble"""
        return _common.LinearFunction_getCoefficients(self)

    def getSlope(self):
        r"""getSlope(LinearFunction self) -> double"""
        return _common.LinearFunction_getSlope(self)

    def getIntercept(self):
        r"""getIntercept(LinearFunction self) -> double"""
        return _common.LinearFunction_getIntercept(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(LinearFunction self) -> SimTK::Function *"""
        return _common.LinearFunction_createSimTKFunction(self)

# Register LinearFunction in _common:
_common.LinearFunction_swigregister(LinearFunction)
class PiecewiseLinearFunction(Function):
    r"""Proxy of C++ OpenSim::PiecewiseLinearFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> PiecewiseLinearFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.PiecewiseLinearFunction_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(PiecewiseLinearFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.PiecewiseLinearFunction_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.PiecewiseLinearFunction_getClassName()

    def clone(self):
        r"""clone(PiecewiseLinearFunction self) -> PiecewiseLinearFunction"""
        return _common.PiecewiseLinearFunction_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(PiecewiseLinearFunction self) -> std::string const &"""
        return _common.PiecewiseLinearFunction_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(PiecewiseLinearFunction self) -> PiecewiseLinearFunction
        __init__(PiecewiseLinearFunction self, int aN, double const * aTimes, double const * aValues, std::string const & aName="") -> PiecewiseLinearFunction

        Parameters
        ----------
        aN: int
        aTimes: double const *
        aValues: double const *
        aName: std::string const &

        __init__(PiecewiseLinearFunction self, PiecewiseLinearFunction aFunction) -> PiecewiseLinearFunction

        Parameters
        ----------
        aFunction: OpenSim::PiecewiseLinearFunction const &

        """
        _common.PiecewiseLinearFunction_swiginit(self, _common.new_PiecewiseLinearFunction(*args))
    __swig_destroy__ = _common.delete_PiecewiseLinearFunction

    def init(self, aFunction):
        r"""
        init(PiecewiseLinearFunction self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.PiecewiseLinearFunction_init(self, aFunction)

    def getSize(self):
        r"""getSize(PiecewiseLinearFunction self) -> int"""
        return _common.PiecewiseLinearFunction_getSize(self)

    def getXValues(self):
        r"""getXValues(PiecewiseLinearFunction self) -> double const *"""
        return _common.PiecewiseLinearFunction_getXValues(self)

    def getYValues(self):
        r"""getYValues(PiecewiseLinearFunction self) -> double const *"""
        return _common.PiecewiseLinearFunction_getYValues(self)

    def getNumberOfPoints(self):
        r"""getNumberOfPoints(PiecewiseLinearFunction self) -> int"""
        return _common.PiecewiseLinearFunction_getNumberOfPoints(self)

    def getX(self, *args):
        r"""
        getX(PiecewiseLinearFunction self) -> ArrayDouble
        getX(PiecewiseLinearFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseLinearFunction_getX(self, *args)

    def getY(self, *args):
        r"""
        getY(PiecewiseLinearFunction self) -> ArrayDouble
        getY(PiecewiseLinearFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseLinearFunction_getY(self, *args)

    def getZ(self, aIndex):
        r"""
        getZ(PiecewiseLinearFunction self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseLinearFunction_getZ(self, aIndex)

    def setX(self, aIndex, aValue):
        r"""
        setX(PiecewiseLinearFunction self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.PiecewiseLinearFunction_setX(self, aIndex, aValue)

    def setY(self, aIndex, aValue):
        r"""
        setY(PiecewiseLinearFunction self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.PiecewiseLinearFunction_setY(self, aIndex, aValue)

    def deletePoint(self, aIndex):
        r"""
        deletePoint(PiecewiseLinearFunction self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.PiecewiseLinearFunction_deletePoint(self, aIndex)

    def deletePoints(self, indices):
        r"""
        deletePoints(PiecewiseLinearFunction self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.PiecewiseLinearFunction_deletePoints(self, indices)

    def addPoint(self, aX, aY):
        r"""
        addPoint(PiecewiseLinearFunction self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.PiecewiseLinearFunction_addPoint(self, aX, aY)

    def calcValue(self, x):
        r"""
        calcValue(PiecewiseLinearFunction self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.PiecewiseLinearFunction_calcValue(self, x)

    def calcDerivative(self, derivComponents, x):
        r"""
        calcDerivative(PiecewiseLinearFunction self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.PiecewiseLinearFunction_calcDerivative(self, derivComponents, x)

    def getArgumentSize(self):
        r"""getArgumentSize(PiecewiseLinearFunction self) -> int"""
        return _common.PiecewiseLinearFunction_getArgumentSize(self)

    def getMaxDerivativeOrder(self):
        r"""getMaxDerivativeOrder(PiecewiseLinearFunction self) -> int"""
        return _common.PiecewiseLinearFunction_getMaxDerivativeOrder(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(PiecewiseLinearFunction self) -> SimTK::Function *"""
        return _common.PiecewiseLinearFunction_createSimTKFunction(self)

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        r"""
        updateFromXMLNode(PiecewiseLinearFunction self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _common.PiecewiseLinearFunction_updateFromXMLNode(self, aNode, versionNumber)

# Register PiecewiseLinearFunction in _common:
_common.PiecewiseLinearFunction_swigregister(PiecewiseLinearFunction)
class MultiplierFunction(Function):
    r"""Proxy of C++ OpenSim::MultiplierFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MultiplierFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.MultiplierFunction_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MultiplierFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.MultiplierFunction_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.MultiplierFunction_getClassName()

    def clone(self):
        r"""clone(MultiplierFunction self) -> MultiplierFunction"""
        return _common.MultiplierFunction_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MultiplierFunction self) -> std::string const &"""
        return _common.MultiplierFunction_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MultiplierFunction self) -> MultiplierFunction
        __init__(MultiplierFunction self, Function aFunction) -> MultiplierFunction

        Parameters
        ----------
        aFunction: OpenSim::Function *

        __init__(MultiplierFunction self, Function aFunction, double aScaleFactor) -> MultiplierFunction

        Parameters
        ----------
        aFunction: OpenSim::Function *
        aScaleFactor: double

        __init__(MultiplierFunction self, MultiplierFunction aFunction) -> MultiplierFunction

        Parameters
        ----------
        aFunction: OpenSim::MultiplierFunction const &

        """
        _common.MultiplierFunction_swiginit(self, _common.new_MultiplierFunction(*args))
    __swig_destroy__ = _common.delete_MultiplierFunction

    def init(self, aFunction):
        r"""
        init(MultiplierFunction self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.MultiplierFunction_init(self, aFunction)

    def setFunction(self, aFunction):
        r"""
        setFunction(MultiplierFunction self, Function aFunction)

        Parameters
        ----------
        aFunction: OpenSim::Function *

        """
        return _common.MultiplierFunction_setFunction(self, aFunction)

    def setScale(self, aScaleFactor):
        r"""
        setScale(MultiplierFunction self, double aScaleFactor)

        Parameters
        ----------
        aScaleFactor: double

        """
        return _common.MultiplierFunction_setScale(self, aScaleFactor)

    def getFunction(self):
        r"""getFunction(MultiplierFunction self) -> Function"""
        return _common.MultiplierFunction_getFunction(self)

    def getScale(self):
        r"""getScale(MultiplierFunction self) -> double"""
        return _common.MultiplierFunction_getScale(self)

    def calcValue(self, x):
        r"""
        calcValue(MultiplierFunction self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.MultiplierFunction_calcValue(self, x)

    def calcDerivative(self, derivComponents, x):
        r"""
        calcDerivative(MultiplierFunction self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.MultiplierFunction_calcDerivative(self, derivComponents, x)

    def getArgumentSize(self):
        r"""getArgumentSize(MultiplierFunction self) -> int"""
        return _common.MultiplierFunction_getArgumentSize(self)

    def getMaxDerivativeOrder(self):
        r"""getMaxDerivativeOrder(MultiplierFunction self) -> int"""
        return _common.MultiplierFunction_getMaxDerivativeOrder(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(MultiplierFunction self) -> SimTK::Function *"""
        return _common.MultiplierFunction_createSimTKFunction(self)

# Register MultiplierFunction in _common:
_common.MultiplierFunction_swigregister(MultiplierFunction)
class GCVSpline(Function):
    r"""Proxy of C++ OpenSim::GCVSpline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> GCVSpline

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.GCVSpline_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(GCVSpline self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.GCVSpline_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.GCVSpline_getClassName()

    def clone(self):
        r"""clone(GCVSpline self) -> GCVSpline"""
        return _common.GCVSpline_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(GCVSpline self) -> std::string const &"""
        return _common.GCVSpline_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(GCVSpline self) -> GCVSpline
        __init__(GCVSpline self, int aDegree, int aN, double const * aX, double const * aF, std::string const & aName="", double aErrorVariance=0.0) -> GCVSpline

        Parameters
        ----------
        aDegree: int
        aN: int
        aX: double const *
        aF: double const *
        aName: std::string const &
        aErrorVariance: double

        __init__(GCVSpline self, GCVSpline aSpline) -> GCVSpline

        Parameters
        ----------
        aSpline: OpenSim::GCVSpline const &

        """
        _common.GCVSpline_swiginit(self, _common.new_GCVSpline(*args))
    __swig_destroy__ = _common.delete_GCVSpline

    def updateFromXMLNode(self, aNode, versionNumber=-1):
        r"""
        updateFromXMLNode(GCVSpline self, SimTK::Xml::Element & aNode, int versionNumber=-1)

        Parameters
        ----------
        aNode: SimTK::Xml::Element &
        versionNumber: int

        """
        return _common.GCVSpline_updateFromXMLNode(self, aNode, versionNumber)

    def setDegree(self, aDegree):
        r"""
        setDegree(GCVSpline self, int aDegree)

        Parameters
        ----------
        aDegree: int

        """
        return _common.GCVSpline_setDegree(self, aDegree)

    def getDegree(self):
        r"""getDegree(GCVSpline self) -> int"""
        return _common.GCVSpline_getDegree(self)

    def getOrder(self):
        r"""getOrder(GCVSpline self) -> int"""
        return _common.GCVSpline_getOrder(self)

    def getHalfOrder(self):
        r"""getHalfOrder(GCVSpline self) -> int"""
        return _common.GCVSpline_getHalfOrder(self)

    def getSize(self):
        r"""getSize(GCVSpline self) -> int"""
        return _common.GCVSpline_getSize(self)

    def getXValues(self):
        r"""getXValues(GCVSpline self) -> double const *"""
        return _common.GCVSpline_getXValues(self)

    def getYValues(self):
        r"""getYValues(GCVSpline self) -> double const *"""
        return _common.GCVSpline_getYValues(self)

    def getCoefficients(self):
        r"""getCoefficients(GCVSpline self) -> ArrayDouble"""
        return _common.GCVSpline_getCoefficients(self)

    def getNumberOfPoints(self):
        r"""getNumberOfPoints(GCVSpline self) -> int"""
        return _common.GCVSpline_getNumberOfPoints(self)

    def getX(self, *args):
        r"""
        getX(GCVSpline self) -> ArrayDouble
        getX(GCVSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSpline_getX(self, *args)

    def getY(self, aIndex):
        r"""
        getY(GCVSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSpline_getY(self, aIndex)

    def getZ(self, aIndex):
        r"""
        getZ(GCVSpline self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSpline_getZ(self, aIndex)

    def setX(self, aIndex, aValue):
        r"""
        setX(GCVSpline self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.GCVSpline_setX(self, aIndex, aValue)

    def setY(self, aIndex, aValue):
        r"""
        setY(GCVSpline self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.GCVSpline_setY(self, aIndex, aValue)

    def getMinX(self):
        r"""getMinX(GCVSpline self) -> double"""
        return _common.GCVSpline_getMinX(self)

    def getMaxX(self):
        r"""getMaxX(GCVSpline self) -> double"""
        return _common.GCVSpline_getMaxX(self)

    def deletePoint(self, aIndex):
        r"""
        deletePoint(GCVSpline self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSpline_deletePoint(self, aIndex)

    def deletePoints(self, indices):
        r"""
        deletePoints(GCVSpline self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.GCVSpline_deletePoints(self, indices)

    def addPoint(self, aX, aY):
        r"""
        addPoint(GCVSpline self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.GCVSpline_addPoint(self, aX, aY)

    def createSimTKFunction(self):
        r"""createSimTKFunction(GCVSpline self) -> SimTK::Function *"""
        return _common.GCVSpline_createSimTKFunction(self)

# Register GCVSpline in _common:
_common.GCVSpline_swigregister(GCVSpline)
class Sine(Function):
    r"""Proxy of C++ OpenSim::Sine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> Sine

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Sine_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(Sine self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Sine_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.Sine_getClassName()

    def clone(self):
        r"""clone(Sine self) -> Sine"""
        return _common.Sine_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(Sine self) -> std::string const &"""
        return _common.Sine_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(Sine self) -> Sine
        __init__(Sine self, double amplitude, double omega, double phase, double offset=0) -> Sine

        Parameters
        ----------
        amplitude: double
        omega: double
        phase: double
        offset: double

        """
        _common.Sine_swiginit(self, _common.new_Sine(*args))
    __swig_destroy__ = _common.delete_Sine

    def calcValue(self, x):
        r"""
        calcValue(Sine self, Vector x) -> double

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.Sine_calcValue(self, x)

    def calcDerivative(self, derivComponents, x):
        r"""
        calcDerivative(Sine self, StdVectorInt derivComponents, Vector x) -> double

        Parameters
        ----------
        derivComponents: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.Sine_calcDerivative(self, derivComponents, x)

    def createSimTKFunction(self):
        r"""createSimTKFunction(Sine self) -> SimTK::Function *"""
        return _common.Sine_createSimTKFunction(self)

    def getArgumentSize(self):
        r"""getArgumentSize(Sine self) -> int"""
        return _common.Sine_getArgumentSize(self)

    def getMaxDerivativeOrder(self):
        r"""getMaxDerivativeOrder(Sine self) -> int"""
        return _common.Sine_getMaxDerivativeOrder(self)

# Register Sine in _common:
_common.Sine_swigregister(Sine)
class PolynomialFunction(Function):
    r"""Proxy of C++ OpenSim::PolynomialFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> PolynomialFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.PolynomialFunction_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(PolynomialFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.PolynomialFunction_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.PolynomialFunction_getClassName()

    def clone(self):
        r"""clone(PolynomialFunction self) -> PolynomialFunction"""
        return _common.PolynomialFunction_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(PolynomialFunction self) -> std::string const &"""
        return _common.PolynomialFunction_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(PolynomialFunction self) -> PolynomialFunction
        __init__(PolynomialFunction self, Vector coefficients) -> PolynomialFunction

        Parameters
        ----------
        coefficients: SimTK::Vector

        """
        _common.PolynomialFunction_swiginit(self, _common.new_PolynomialFunction(*args))
    __swig_destroy__ = _common.delete_PolynomialFunction

    def setCoefficients(self, coefficients):
        r"""
        setCoefficients(PolynomialFunction self, Vector coefficients)

        Parameters
        ----------
        coefficients: SimTK::Vector

        """
        return _common.PolynomialFunction_setCoefficients(self, coefficients)

    def getCoefficients(self):
        r"""getCoefficients(PolynomialFunction self) -> Vector"""
        return _common.PolynomialFunction_getCoefficients(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(PolynomialFunction self) -> SimTK::Function *"""
        return _common.PolynomialFunction_createSimTKFunction(self)

# Register PolynomialFunction in _common:
_common.PolynomialFunction_swigregister(PolynomialFunction)
class MultivariatePolynomialFunction(Function):
    r"""Proxy of C++ OpenSim::MultivariatePolynomialFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MultivariatePolynomialFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.MultivariatePolynomialFunction_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MultivariatePolynomialFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.MultivariatePolynomialFunction_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.MultivariatePolynomialFunction_getClassName()

    def clone(self):
        r"""clone(MultivariatePolynomialFunction self) -> MultivariatePolynomialFunction"""
        return _common.MultivariatePolynomialFunction_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MultivariatePolynomialFunction self) -> std::string const &"""
        return _common.MultivariatePolynomialFunction_getConcreteClassName(self)

    def copyProperty_coefficients(self, source):
        r"""
        copyProperty_coefficients(MultivariatePolynomialFunction self, MultivariatePolynomialFunction source)

        Parameters
        ----------
        source: OpenSim::MultivariatePolynomialFunction::Self const &

        """
        return _common.MultivariatePolynomialFunction_copyProperty_coefficients(self, source)

    def append_coefficients(self, value):
        r"""
        append_coefficients(MultivariatePolynomialFunction self, Vector value) -> int

        Parameters
        ----------
        value: SimTK::Vector const &

        """
        return _common.MultivariatePolynomialFunction_append_coefficients(self, value)

    def constructProperty_coefficients(self, initValue):
        r"""
        constructProperty_coefficients(MultivariatePolynomialFunction self, Vector initValue)

        Parameters
        ----------
        initValue: SimTK::Vector const &

        """
        return _common.MultivariatePolynomialFunction_constructProperty_coefficients(self, initValue)

    def get_coefficients(self, *args):
        r"""
        get_coefficients(MultivariatePolynomialFunction self, int i) -> Vector

        Parameters
        ----------
        i: int

        get_coefficients(MultivariatePolynomialFunction self) -> Vector
        """
        return _common.MultivariatePolynomialFunction_get_coefficients(self, *args)

    def upd_coefficients(self, *args):
        r"""
        upd_coefficients(MultivariatePolynomialFunction self, int i) -> Vector

        Parameters
        ----------
        i: int

        upd_coefficients(MultivariatePolynomialFunction self) -> Vector
        """
        return _common.MultivariatePolynomialFunction_upd_coefficients(self, *args)

    def set_coefficients(self, *args):
        r"""
        set_coefficients(MultivariatePolynomialFunction self, int i, Vector value)

        Parameters
        ----------
        i: int
        value: SimTK::Vector const &

        set_coefficients(MultivariatePolynomialFunction self, Vector value)

        Parameters
        ----------
        value: SimTK::Vector const &

        """
        return _common.MultivariatePolynomialFunction_set_coefficients(self, *args)

    def copyProperty_dimension(self, source):
        r"""
        copyProperty_dimension(MultivariatePolynomialFunction self, MultivariatePolynomialFunction source)

        Parameters
        ----------
        source: OpenSim::MultivariatePolynomialFunction::Self const &

        """
        return _common.MultivariatePolynomialFunction_copyProperty_dimension(self, source)

    def append_dimension(self, value):
        r"""
        append_dimension(MultivariatePolynomialFunction self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _common.MultivariatePolynomialFunction_append_dimension(self, value)

    def constructProperty_dimension(self, initValue):
        r"""
        constructProperty_dimension(MultivariatePolynomialFunction self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _common.MultivariatePolynomialFunction_constructProperty_dimension(self, initValue)

    def get_dimension(self, *args):
        r"""
        get_dimension(MultivariatePolynomialFunction self, int i) -> int const

        Parameters
        ----------
        i: int

        get_dimension(MultivariatePolynomialFunction self) -> int const &
        """
        return _common.MultivariatePolynomialFunction_get_dimension(self, *args)

    def upd_dimension(self, *args):
        r"""
        upd_dimension(MultivariatePolynomialFunction self, int i) -> int

        Parameters
        ----------
        i: int

        upd_dimension(MultivariatePolynomialFunction self) -> int &
        """
        return _common.MultivariatePolynomialFunction_upd_dimension(self, *args)

    def set_dimension(self, *args):
        r"""
        set_dimension(MultivariatePolynomialFunction self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_dimension(MultivariatePolynomialFunction self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _common.MultivariatePolynomialFunction_set_dimension(self, *args)

    def copyProperty_order(self, source):
        r"""
        copyProperty_order(MultivariatePolynomialFunction self, MultivariatePolynomialFunction source)

        Parameters
        ----------
        source: OpenSim::MultivariatePolynomialFunction::Self const &

        """
        return _common.MultivariatePolynomialFunction_copyProperty_order(self, source)

    def append_order(self, value):
        r"""
        append_order(MultivariatePolynomialFunction self, int const & value) -> int

        Parameters
        ----------
        value: int const &

        """
        return _common.MultivariatePolynomialFunction_append_order(self, value)

    def constructProperty_order(self, initValue):
        r"""
        constructProperty_order(MultivariatePolynomialFunction self, int const & initValue)

        Parameters
        ----------
        initValue: int const &

        """
        return _common.MultivariatePolynomialFunction_constructProperty_order(self, initValue)

    def get_order(self, *args):
        r"""
        get_order(MultivariatePolynomialFunction self, int i) -> int const

        Parameters
        ----------
        i: int

        get_order(MultivariatePolynomialFunction self) -> int const &
        """
        return _common.MultivariatePolynomialFunction_get_order(self, *args)

    def upd_order(self, *args):
        r"""
        upd_order(MultivariatePolynomialFunction self, int i) -> int

        Parameters
        ----------
        i: int

        upd_order(MultivariatePolynomialFunction self) -> int &
        """
        return _common.MultivariatePolynomialFunction_upd_order(self, *args)

    def set_order(self, *args):
        r"""
        set_order(MultivariatePolynomialFunction self, int i, int const & value)

        Parameters
        ----------
        i: int
        value: int const &

        set_order(MultivariatePolynomialFunction self, int const & value)

        Parameters
        ----------
        value: int const &

        """
        return _common.MultivariatePolynomialFunction_set_order(self, *args)

    def __init__(self, *args):
        r"""
        __init__(MultivariatePolynomialFunction self) -> MultivariatePolynomialFunction
        __init__(MultivariatePolynomialFunction self, Vector coefficients, int dimension, int order) -> MultivariatePolynomialFunction

        Parameters
        ----------
        coefficients: SimTK::Vector
        dimension: int
        order: int

        """
        _common.MultivariatePolynomialFunction_swiginit(self, _common.new_MultivariatePolynomialFunction(*args))

    def setCoefficients(self, coefficients):
        r"""
        setCoefficients(MultivariatePolynomialFunction self, Vector coefficients)

        Parameters
        ----------
        coefficients: SimTK::Vector

        """
        return _common.MultivariatePolynomialFunction_setCoefficients(self, coefficients)

    def getCoefficients(self):
        r"""getCoefficients(MultivariatePolynomialFunction self) -> Vector"""
        return _common.MultivariatePolynomialFunction_getCoefficients(self)

    def setDimension(self, dimension):
        r"""
        setDimension(MultivariatePolynomialFunction self, int dimension)

        Parameters
        ----------
        dimension: int

        """
        return _common.MultivariatePolynomialFunction_setDimension(self, dimension)

    def getDimension(self):
        r"""getDimension(MultivariatePolynomialFunction self) -> int"""
        return _common.MultivariatePolynomialFunction_getDimension(self)

    def setOrder(self, order):
        r"""
        setOrder(MultivariatePolynomialFunction self, int order)

        Parameters
        ----------
        order: int

        """
        return _common.MultivariatePolynomialFunction_setOrder(self, order)

    def getOrder(self):
        r"""getOrder(MultivariatePolynomialFunction self) -> int"""
        return _common.MultivariatePolynomialFunction_getOrder(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(MultivariatePolynomialFunction self) -> SimTK::Function *"""
        return _common.MultivariatePolynomialFunction_createSimTKFunction(self)

    def getTermValues(self, x):
        r"""
        getTermValues(MultivariatePolynomialFunction self, Vector x) -> Vector

        Parameters
        ----------
        x: SimTK::Vector const &

        """
        return _common.MultivariatePolynomialFunction_getTermValues(self, x)

    def getTermDerivatives(self, derivComponent, x):
        r"""
        getTermDerivatives(MultivariatePolynomialFunction self, StdVectorInt derivComponent, Vector x) -> Vector

        Parameters
        ----------
        derivComponent: std::vector< int,std::allocator< int > > const &
        x: SimTK::Vector const &

        """
        return _common.MultivariatePolynomialFunction_getTermDerivatives(self, derivComponent, x)

    def generateDerivativeFunction(self, derivComponent, negateCoefficients=False):
        r"""
        generateDerivativeFunction(MultivariatePolynomialFunction self, int derivComponent, bool negateCoefficients=False) -> MultivariatePolynomialFunction

        Parameters
        ----------
        derivComponent: int
        negateCoefficients: bool

        """
        return _common.MultivariatePolynomialFunction_generateDerivativeFunction(self, derivComponent, negateCoefficients)

    def generatePartialVelocityFunction(self):
        r"""generatePartialVelocityFunction(MultivariatePolynomialFunction self) -> MultivariatePolynomialFunction"""
        return _common.MultivariatePolynomialFunction_generatePartialVelocityFunction(self)
    __swig_destroy__ = _common.delete_MultivariatePolynomialFunction

# Register MultivariatePolynomialFunction in _common:
_common.MultivariatePolynomialFunction_swigregister(MultivariatePolynomialFunction)
class ExpressionBasedFunction(Function):
    r"""Proxy of C++ OpenSim::ExpressionBasedFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ExpressionBasedFunction

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ExpressionBasedFunction_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ExpressionBasedFunction self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ExpressionBasedFunction_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ExpressionBasedFunction_getClassName()

    def clone(self):
        r"""clone(ExpressionBasedFunction self) -> ExpressionBasedFunction"""
        return _common.ExpressionBasedFunction_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ExpressionBasedFunction self) -> std::string const &"""
        return _common.ExpressionBasedFunction_getConcreteClassName(self)

    def copyProperty_expression(self, source):
        r"""
        copyProperty_expression(ExpressionBasedFunction self, ExpressionBasedFunction source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedFunction::Self const &

        """
        return _common.ExpressionBasedFunction_copyProperty_expression(self, source)

    def append_expression(self, value):
        r"""
        append_expression(ExpressionBasedFunction self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.ExpressionBasedFunction_append_expression(self, value)

    def constructProperty_expression(self, initValue):
        r"""
        constructProperty_expression(ExpressionBasedFunction self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.ExpressionBasedFunction_constructProperty_expression(self, initValue)

    def get_expression(self, *args):
        r"""
        get_expression(ExpressionBasedFunction self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_expression(ExpressionBasedFunction self) -> std::string const &
        """
        return _common.ExpressionBasedFunction_get_expression(self, *args)

    def upd_expression(self, *args):
        r"""
        upd_expression(ExpressionBasedFunction self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_expression(ExpressionBasedFunction self) -> std::string &
        """
        return _common.ExpressionBasedFunction_upd_expression(self, *args)

    def set_expression(self, *args):
        r"""
        set_expression(ExpressionBasedFunction self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_expression(ExpressionBasedFunction self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.ExpressionBasedFunction_set_expression(self, *args)

    def copyProperty_variables(self, source):
        r"""
        copyProperty_variables(ExpressionBasedFunction self, ExpressionBasedFunction source)

        Parameters
        ----------
        source: OpenSim::ExpressionBasedFunction::Self const &

        """
        return _common.ExpressionBasedFunction_copyProperty_variables(self, source)

    def get_variables(self, i):
        r"""
        get_variables(ExpressionBasedFunction self, int i) -> std::string const &

        Parameters
        ----------
        i: int

        """
        return _common.ExpressionBasedFunction_get_variables(self, i)

    def upd_variables(self, i):
        r"""
        upd_variables(ExpressionBasedFunction self, int i) -> std::string &

        Parameters
        ----------
        i: int

        """
        return _common.ExpressionBasedFunction_upd_variables(self, i)

    def set_variables(self, i, value):
        r"""
        set_variables(ExpressionBasedFunction self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        """
        return _common.ExpressionBasedFunction_set_variables(self, i, value)

    def append_variables(self, value):
        r"""
        append_variables(ExpressionBasedFunction self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.ExpressionBasedFunction_append_variables(self, value)

    def constructProperty_variables(self):
        r"""constructProperty_variables(ExpressionBasedFunction self)"""
        return _common.ExpressionBasedFunction_constructProperty_variables(self)

    def __init__(self, *args):
        r"""
        __init__(ExpressionBasedFunction self) -> ExpressionBasedFunction
        __init__(ExpressionBasedFunction self, std::string expression, StdVectorString variables) -> ExpressionBasedFunction

        Parameters
        ----------
        expression: std::string
        variables: std::vector< std::string,std::allocator< std::string > > const &

        """
        _common.ExpressionBasedFunction_swiginit(self, _common.new_ExpressionBasedFunction(*args))

    def setExpression(self, expression):
        r"""
        setExpression(ExpressionBasedFunction self, std::string expression)

        Parameters
        ----------
        expression: std::string

        """
        return _common.ExpressionBasedFunction_setExpression(self, expression)

    def getExpression(self):
        r"""getExpression(ExpressionBasedFunction self) -> std::string const &"""
        return _common.ExpressionBasedFunction_getExpression(self)

    def setVariables(self, variables):
        r"""
        setVariables(ExpressionBasedFunction self, StdVectorString variables)

        Parameters
        ----------
        variables: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.ExpressionBasedFunction_setVariables(self, variables)

    def getVariables(self):
        r"""getVariables(ExpressionBasedFunction self) -> StdVectorString"""
        return _common.ExpressionBasedFunction_getVariables(self)

    def createSimTKFunction(self):
        r"""createSimTKFunction(ExpressionBasedFunction self) -> SimTK::Function *"""
        return _common.ExpressionBasedFunction_createSimTKFunction(self)
    __swig_destroy__ = _common.delete_ExpressionBasedFunction

# Register ExpressionBasedFunction in _common:
_common.ExpressionBasedFunction_swigregister(ExpressionBasedFunction)
class SmoothSegmentedFunctionFactory(object):
    r"""Proxy of C++ OpenSim::SmoothSegmentedFunctionFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName):
        r"""
        createFiberActiveForceLengthCurve(double lce0, double lce1, double lce2, double lce3, double minActiveForceLengthValue, double plateauSlope, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        lce0: double
        lce1: double
        lce2: double
        lce3: double
        minActiveForceLengthValue: double
        plateauSlope: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberActiveForceLengthCurve(lce0, lce1, lce2, lce3, minActiveForceLengthValue, plateauSlope, curviness, computeIntegral, curveName)

    @staticmethod
    def createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName):
        r"""
        createFiberForceVelocityCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        fmaxE: double
        dydxC: double
        dydxNearC: double
        dydxIso: double
        dydxE: double
        dydxNearE: double
        concCurviness: double
        eccCurviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberForceVelocityCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, curveName)

    @staticmethod
    def createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName):
        r"""
        createFiberForceVelocityInverseCurve(double fmaxE, double dydxC, double dydxNearC, double dydxIso, double dydxE, double dydxNearE, double concCurviness, double eccCurviness, bool computeIntegral, std::string const & muscleName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        fmaxE: double
        dydxC: double
        dydxNearC: double
        dydxIso: double
        dydxE: double
        dydxNearE: double
        concCurviness: double
        eccCurviness: double
        computeIntegral: bool
        muscleName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberForceVelocityInverseCurve(fmaxE, dydxC, dydxNearC, dydxIso, dydxE, dydxNearE, concCurviness, eccCurviness, computeIntegral, muscleName)

    @staticmethod
    def createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName):
        r"""
        createFiberCompressiveForcePennationCurve(double phi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        phi0: double
        kiso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberCompressiveForcePennationCurve(phi0, kiso, curviness, computeIntegral, curveName)

    @staticmethod
    def createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName):
        r"""
        createFiberCompressiveForceCosPennationCurve(double cosPhi0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        cosPhi0: double
        kiso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberCompressiveForceCosPennationCurve(cosPhi0, kiso, curviness, computeIntegral, curveName)

    @staticmethod
    def createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName):
        r"""
        createFiberCompressiveForceLengthCurve(double l0, double kiso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        l0: double
        kiso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberCompressiveForceLengthCurve(l0, kiso, curviness, computeIntegral, curveName)

    @staticmethod
    def createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName):
        r"""
        createFiberForceLengthCurve(double eZero, double eIso, double kLow, double kIso, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        eZero: double
        eIso: double
        kLow: double
        kIso: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createFiberForceLengthCurve(eZero, eIso, kLow, kIso, curviness, computeIntegral, curveName)

    @staticmethod
    def createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName):
        r"""
        createTendonForceLengthCurve(double eIso, double kIso, double fToe, double curviness, bool computeIntegral, std::string const & curveName) -> SmoothSegmentedFunction *

        Parameters
        ----------
        eIso: double
        kIso: double
        fToe: double
        curviness: double
        computeIntegral: bool
        curveName: std::string const &

        """
        return _common.SmoothSegmentedFunctionFactory_createTendonForceLengthCurve(eIso, kIso, fToe, curviness, computeIntegral, curveName)

    def __init__(self):
        r"""__init__(SmoothSegmentedFunctionFactory self) -> SmoothSegmentedFunctionFactory"""
        _common.SmoothSegmentedFunctionFactory_swiginit(self, _common.new_SmoothSegmentedFunctionFactory())
    __swig_destroy__ = _common.delete_SmoothSegmentedFunctionFactory

# Register SmoothSegmentedFunctionFactory in _common:
_common.SmoothSegmentedFunctionFactory_swigregister(SmoothSegmentedFunctionFactory)
class SmoothSegmentedFunction(object):
    r"""Proxy of C++ OpenSim::SmoothSegmentedFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_SmoothSegmentedFunction

    def __init__(self, *args):
        r"""
        __init__(SmoothSegmentedFunction self) -> SmoothSegmentedFunction
        __init__(SmoothSegmentedFunction self, SmoothSegmentedFunction arg2) -> SmoothSegmentedFunction

        Parameters
        ----------
        arg2: OpenSim::SmoothSegmentedFunction const &

        __init__(SmoothSegmentedFunction self, SmoothSegmentedFunction arg2) -> SmoothSegmentedFunction

        Parameters
        ----------
        arg2: OpenSim::SmoothSegmentedFunction &&

        """
        _common.SmoothSegmentedFunction_swiginit(self, _common.new_SmoothSegmentedFunction(*args))

    def calcValue(self, x):
        r"""
        calcValue(SmoothSegmentedFunction self, double x) -> double

        Parameters
        ----------
        x: double

        """
        return _common.SmoothSegmentedFunction_calcValue(self, x)

    def calcDerivative(self, x, order):
        r"""
        calcDerivative(SmoothSegmentedFunction self, double x, int order) -> double

        Parameters
        ----------
        x: double
        order: int

        """
        return _common.SmoothSegmentedFunction_calcDerivative(self, x, order)

    def calcValueAndFirstDerivative(self, x):
        r"""
        calcValueAndFirstDerivative(SmoothSegmentedFunction self, double x) -> OpenSim::SmoothSegmentedFunction::ValueAndDerivative

        Parameters
        ----------
        x: double

        """
        return _common.SmoothSegmentedFunction_calcValueAndFirstDerivative(self, x)

    def calcIntegral(self, x):
        r"""
        calcIntegral(SmoothSegmentedFunction self, double x) -> double

        Parameters
        ----------
        x: double

        """
        return _common.SmoothSegmentedFunction_calcIntegral(self, x)

    def isIntegralAvailable(self):
        r"""isIntegralAvailable(SmoothSegmentedFunction self) -> bool"""
        return _common.SmoothSegmentedFunction_isIntegralAvailable(self)

    def isIntegralComputedLeftToRight(self):
        r"""isIntegralComputedLeftToRight(SmoothSegmentedFunction self) -> bool"""
        return _common.SmoothSegmentedFunction_isIntegralComputedLeftToRight(self)

    def getName(self):
        r"""getName(SmoothSegmentedFunction self) -> std::string"""
        return _common.SmoothSegmentedFunction_getName(self)

    def setName(self, name):
        r"""
        setName(SmoothSegmentedFunction self, std::string & name)

        Parameters
        ----------
        name: std::string &

        """
        return _common.SmoothSegmentedFunction_setName(self, name)

    def getCurveDomain(self):
        r"""getCurveDomain(SmoothSegmentedFunction self) -> Vec2"""
        return _common.SmoothSegmentedFunction_getCurveDomain(self)

    def printMuscleCurveToCSVFile(self, path, domainMin, domainMax):
        r"""
        printMuscleCurveToCSVFile(SmoothSegmentedFunction self, std::string const & path, double domainMin, double domainMax)

        Parameters
        ----------
        path: std::string const &
        domainMin: double
        domainMax: double

        """
        return _common.SmoothSegmentedFunction_printMuscleCurveToCSVFile(self, path, domainMin, domainMax)

    def calcSampledMuscleCurve(self, maxOrder, domainMin, domainMax):
        r"""
        calcSampledMuscleCurve(SmoothSegmentedFunction self, int maxOrder, double domainMin, double domainMax) -> Matrix

        Parameters
        ----------
        maxOrder: int
        domainMin: double
        domainMax: double

        """
        return _common.SmoothSegmentedFunction_calcSampledMuscleCurve(self, maxOrder, domainMin, domainMax)

# Register SmoothSegmentedFunction in _common:
_common.SmoothSegmentedFunction_swigregister(SmoothSegmentedFunction)
class XYPoint(object):
    r"""Proxy of C++ OpenSim::XYPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _x = property(_common.XYPoint__x_get, _common.XYPoint__x_set, doc=r"""_x : double""")
    _y = property(_common.XYPoint__y_get, _common.XYPoint__y_set, doc=r"""_y : double""")

    def __init__(self, *args):
        r"""
        __init__(XYPoint self) -> XYPoint
        __init__(XYPoint self, double aX, double aY) -> XYPoint

        Parameters
        ----------
        aX: double
        aY: double

        """
        _common.XYPoint_swiginit(self, _common.new_XYPoint(*args))
    __swig_destroy__ = _common.delete_XYPoint

# Register XYPoint in _common:
_common.XYPoint_swigregister(XYPoint)
class XYFunctionInterface(OpenSimObject):
    r"""Proxy of C++ OpenSim::XYFunctionInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> XYFunctionInterface

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.XYFunctionInterface_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(XYFunctionInterface self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.XYFunctionInterface_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.XYFunctionInterface_getClassName()

    def clone(self):
        r"""clone(XYFunctionInterface self) -> XYFunctionInterface"""
        return _common.XYFunctionInterface_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(XYFunctionInterface self) -> std::string const &"""
        return _common.XYFunctionInterface_getConcreteClassName(self)
    typeConstant = _common.XYFunctionInterface_typeConstant
    
    typeStepFunction = _common.XYFunctionInterface_typeStepFunction
    
    typePiecewiseConstantFunction = _common.XYFunctionInterface_typePiecewiseConstantFunction
    
    typePiecewiseLinearFunction = _common.XYFunctionInterface_typePiecewiseLinearFunction
    
    typeLinearFunction = _common.XYFunctionInterface_typeLinearFunction
    
    typeNatCubicSpline = _common.XYFunctionInterface_typeNatCubicSpline
    
    typeGCVSpline = _common.XYFunctionInterface_typeGCVSpline
    
    typeUndefined = _common.XYFunctionInterface_typeUndefined
    

    @staticmethod
    def isXYFunction(f):
        r"""
        isXYFunction(Function f) -> bool

        Parameters
        ----------
        f: OpenSim::Function *

        """
        return _common.XYFunctionInterface_isXYFunction(f)

    def __init__(self, f):
        r"""
        __init__(XYFunctionInterface self, Function f) -> XYFunctionInterface

        Parameters
        ----------
        f: OpenSim::Function *

        """
        _common.XYFunctionInterface_swiginit(self, _common.new_XYFunctionInterface(f))

    def isSpecifiedByControlPoints(self):
        r"""isSpecifiedByControlPoints(XYFunctionInterface self) -> bool"""
        return _common.XYFunctionInterface_isSpecifiedByControlPoints(self)

    def getNumberOfPoints(self):
        r"""getNumberOfPoints(XYFunctionInterface self) -> int"""
        return _common.XYFunctionInterface_getNumberOfPoints(self)

    def getXValues(self):
        r"""getXValues(XYFunctionInterface self) -> double const *"""
        return _common.XYFunctionInterface_getXValues(self)

    def getYValues(self):
        r"""getYValues(XYFunctionInterface self) -> double const *"""
        return _common.XYFunctionInterface_getYValues(self)

    def getX(self, aIndex):
        r"""
        getX(XYFunctionInterface self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.XYFunctionInterface_getX(self, aIndex)

    def getY(self, aIndex):
        r"""
        getY(XYFunctionInterface self, int aIndex) -> double

        Parameters
        ----------
        aIndex: int

        """
        return _common.XYFunctionInterface_getY(self, aIndex)

    def setX(self, aIndex, aValue):
        r"""
        setX(XYFunctionInterface self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.XYFunctionInterface_setX(self, aIndex, aValue)

    def setY(self, aIndex, aValue):
        r"""
        setY(XYFunctionInterface self, int aIndex, double aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double

        """
        return _common.XYFunctionInterface_setY(self, aIndex, aValue)

    def deletePoint(self, aIndex):
        r"""
        deletePoint(XYFunctionInterface self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        """
        return _common.XYFunctionInterface_deletePoint(self, aIndex)

    def deletePoints(self, indices):
        r"""
        deletePoints(XYFunctionInterface self, ArrayInt indices) -> bool

        Parameters
        ----------
        indices: OpenSim::Array< int > const &

        """
        return _common.XYFunctionInterface_deletePoints(self, indices)

    def addPoint(self, aX, aY):
        r"""
        addPoint(XYFunctionInterface self, double aX, double aY) -> int

        Parameters
        ----------
        aX: double
        aY: double

        """
        return _common.XYFunctionInterface_addPoint(self, aX, aY)

    def renderAsLineSegments(self, aIndex):
        r"""
        renderAsLineSegments(XYFunctionInterface self, int aIndex) -> ArrayXYPoint

        Parameters
        ----------
        aIndex: int

        """
        return _common.XYFunctionInterface_renderAsLineSegments(self, aIndex)

    @staticmethod
    def deleteXYPointArray(aArray):
        r"""
        deleteXYPointArray(ArrayXYPoint aArray)

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::XYPoint > *

        """
        return _common.XYFunctionInterface_deleteXYPointArray(aArray)

    def getFunctionType(self):
        r"""getFunctionType(XYFunctionInterface self) -> OpenSim::XYFunctionInterface::FunctionType"""
        return _common.XYFunctionInterface_getFunctionType(self)

    def getScale(self):
        r"""getScale(XYFunctionInterface self) -> double"""
        return _common.XYFunctionInterface_getScale(self)

    def getConstant(self):
        r"""getConstant(XYFunctionInterface self) -> Constant"""
        return _common.XYFunctionInterface_getConstant(self)

    def getStepFunction(self):
        r"""getStepFunction(XYFunctionInterface self) -> StepFunction"""
        return _common.XYFunctionInterface_getStepFunction(self)

    def getMultiStepFunction(self):
        r"""getMultiStepFunction(XYFunctionInterface self) -> PiecewiseConstantFunction"""
        return _common.XYFunctionInterface_getMultiStepFunction(self)

    def getPiecewiseLinearFunction(self):
        r"""getPiecewiseLinearFunction(XYFunctionInterface self) -> PiecewiseLinearFunction"""
        return _common.XYFunctionInterface_getPiecewiseLinearFunction(self)

    def getLinearFunction(self):
        r"""getLinearFunction(XYFunctionInterface self) -> LinearFunction"""
        return _common.XYFunctionInterface_getLinearFunction(self)

    def getSimmSpline(self):
        r"""getSimmSpline(XYFunctionInterface self) -> SimmSpline"""
        return _common.XYFunctionInterface_getSimmSpline(self)

    def getGCVSpline(self):
        r"""getGCVSpline(XYFunctionInterface self) -> GCVSpline"""
        return _common.XYFunctionInterface_getGCVSpline(self)
    __swig_destroy__ = _common.delete_XYFunctionInterface

# Register XYFunctionInterface in _common:
_common.XYFunctionInterface_swigregister(XYFunctionInterface)
class ArrayXYPoint(object):
    r"""Proxy of C++ OpenSim::Array< XYPoint > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayXYPoint

    def __init__(self, *args):
        r"""
        __init__(ArrayXYPoint self, ArrayXYPoint arg2) -> ArrayXYPoint

        Parameters
        ----------
        arg2: OpenSim::Array< OpenSim::XYPoint > const &

        __init__(ArrayXYPoint self, ArrayXYPoint arg2) -> ArrayXYPoint

        Parameters
        ----------
        arg2: OpenSim::Array< OpenSim::XYPoint > &&

        __init__(ArrayXYPoint self, std::initializer_list< OpenSim::XYPoint > initList) -> ArrayXYPoint

        Parameters
        ----------
        initList: std::initializer_list< OpenSim::XYPoint >

        __init__(ArrayXYPoint self, XYPoint aDefaultValue=OpenSim::XYPoint(), int aSize=0, int aCapacity=1) -> ArrayXYPoint

        Parameters
        ----------
        aDefaultValue: OpenSim::XYPoint
        aSize: int
        aCapacity: int

        """
        _common.ArrayXYPoint_swiginit(self, _common.new_ArrayXYPoint(*args))

    def arrayEquals(self, aArray):
        r"""
        arrayEquals(ArrayXYPoint self, ArrayXYPoint aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::XYPoint > const &

        """
        return _common.ArrayXYPoint_arrayEquals(self, aArray)

    def trim(self):
        r"""trim(ArrayXYPoint self)"""
        return _common.ArrayXYPoint_trim(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayXYPoint self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayXYPoint_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayXYPoint self) -> int"""
        return _common.ArrayXYPoint_getSize(self)

    def size(self):
        r"""size(ArrayXYPoint self) -> int"""
        return _common.ArrayXYPoint_size(self)

    def append(self, *args):
        r"""
        append(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &

        append(ArrayXYPoint self, ArrayXYPoint aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::XYPoint > const &

        """
        return _common.ArrayXYPoint_append(self, *args)

    def insert(self, aIndex, aValue):
        r"""
        insert(ArrayXYPoint self, int aIndex, XYPoint aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::XYPoint const &

        """
        return _common.ArrayXYPoint_insert(self, aIndex, aValue)

    def remove(self, aIndex):
        r"""
        remove(ArrayXYPoint self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayXYPoint_remove(self, aIndex)

    def set(self, aIndex, aValue):
        r"""
        set(ArrayXYPoint self, int aIndex, XYPoint aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::XYPoint const &

        """
        return _common.ArrayXYPoint_set(self, aIndex, aValue)

    def get(self, aIndex):
        r"""
        get(ArrayXYPoint self, int aIndex) -> XYPoint

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayXYPoint_get(self, aIndex)

    def getitem(self, index):
        r"""
        getitem(ArrayXYPoint self, int index) -> XYPoint

        Parameters
        ----------
        index: int

        """
        return _common.ArrayXYPoint_getitem(self, index)

    def setitem(self, index, val):
        r"""
        setitem(ArrayXYPoint self, int index, XYPoint val)

        Parameters
        ----------
        index: int
        val: OpenSim::XYPoint

        """
        return _common.ArrayXYPoint_setitem(self, index, val)

    def getLast(self):
        r"""getLast(ArrayXYPoint self) -> XYPoint"""
        return _common.ArrayXYPoint_getLast(self)

    def findIndex(self, aValue):
        r"""
        findIndex(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &

        """
        return _common.ArrayXYPoint_findIndex(self, aValue)

    def rfindIndex(self, aValue):
        r"""
        rfindIndex(ArrayXYPoint self, XYPoint aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &

        """
        return _common.ArrayXYPoint_rfindIndex(self, aValue)

    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayXYPoint self, XYPoint aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::XYPoint const &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayXYPoint_searchBinary(self, aValue, aFindFirst, aLo, aHi)

# Register ArrayXYPoint in _common:
_common.ArrayXYPoint_swigregister(ArrayXYPoint)
class ArrayBool(object):
    r"""Proxy of C++ OpenSim::Array< bool > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayBool

    def __init__(self, *args):
        r"""
        __init__(ArrayBool self, ArrayBool arg2) -> ArrayBool

        Parameters
        ----------
        arg2: OpenSim::Array< bool > const &

        __init__(ArrayBool self, ArrayBool arg2) -> ArrayBool

        Parameters
        ----------
        arg2: OpenSim::Array< bool > &&

        __init__(ArrayBool self, std::initializer_list< bool > initList) -> ArrayBool

        Parameters
        ----------
        initList: std::initializer_list< bool >

        __init__(ArrayBool self, bool aDefaultValue=bool(), int aSize=0, int aCapacity=1) -> ArrayBool

        Parameters
        ----------
        aDefaultValue: bool
        aSize: int
        aCapacity: int

        """
        _common.ArrayBool_swiginit(self, _common.new_ArrayBool(*args))

    def arrayEquals(self, aArray):
        r"""
        arrayEquals(ArrayBool self, ArrayBool aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< bool > const &

        """
        return _common.ArrayBool_arrayEquals(self, aArray)

    def trim(self):
        r"""trim(ArrayBool self)"""
        return _common.ArrayBool_trim(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayBool self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayBool_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayBool self) -> int"""
        return _common.ArrayBool_getSize(self)

    def size(self):
        r"""size(ArrayBool self) -> int"""
        return _common.ArrayBool_size(self)

    def append(self, *args):
        r"""
        append(ArrayBool self, bool const & aValue) -> int

        Parameters
        ----------
        aValue: bool const &

        append(ArrayBool self, ArrayBool aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< bool > const &

        """
        return _common.ArrayBool_append(self, *args)

    def insert(self, aIndex, aValue):
        r"""
        insert(ArrayBool self, int aIndex, bool const & aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: bool const &

        """
        return _common.ArrayBool_insert(self, aIndex, aValue)

    def remove(self, aIndex):
        r"""
        remove(ArrayBool self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayBool_remove(self, aIndex)

    def set(self, aIndex, aValue):
        r"""
        set(ArrayBool self, int aIndex, bool const & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: bool const &

        """
        return _common.ArrayBool_set(self, aIndex, aValue)

    def get(self, aIndex):
        r"""
        get(ArrayBool self, int aIndex) -> bool const &

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayBool_get(self, aIndex)

    def getitem(self, index):
        r"""
        getitem(ArrayBool self, int index) -> bool

        Parameters
        ----------
        index: int

        """
        return _common.ArrayBool_getitem(self, index)

    def setitem(self, index, val):
        r"""
        setitem(ArrayBool self, int index, bool val)

        Parameters
        ----------
        index: int
        val: bool

        """
        return _common.ArrayBool_setitem(self, index, val)

    def getLast(self):
        r"""getLast(ArrayBool self) -> bool const &"""
        return _common.ArrayBool_getLast(self)

    def findIndex(self, aValue):
        r"""
        findIndex(ArrayBool self, bool const & aValue) -> int

        Parameters
        ----------
        aValue: bool const &

        """
        return _common.ArrayBool_findIndex(self, aValue)

    def rfindIndex(self, aValue):
        r"""
        rfindIndex(ArrayBool self, bool const & aValue) -> int

        Parameters
        ----------
        aValue: bool const &

        """
        return _common.ArrayBool_rfindIndex(self, aValue)

    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayBool self, bool const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: bool const &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayBool_searchBinary(self, aValue, aFindFirst, aLo, aHi)

# Register ArrayBool in _common:
_common.ArrayBool_swigregister(ArrayBool)
class ArrayDouble(object):
    r"""Proxy of C++ OpenSim::Array< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayDouble

    def __init__(self, *args):
        r"""
        __init__(ArrayDouble self, ArrayDouble arg2) -> ArrayDouble

        Parameters
        ----------
        arg2: OpenSim::Array< double > const &

        __init__(ArrayDouble self, ArrayDouble arg2) -> ArrayDouble

        Parameters
        ----------
        arg2: OpenSim::Array< double > &&

        __init__(ArrayDouble self, std::initializer_list< double > initList) -> ArrayDouble

        Parameters
        ----------
        initList: std::initializer_list< double >

        __init__(ArrayDouble self, double aDefaultValue=double(), int aSize=0, int aCapacity=1) -> ArrayDouble

        Parameters
        ----------
        aDefaultValue: double
        aSize: int
        aCapacity: int

        """
        _common.ArrayDouble_swiginit(self, _common.new_ArrayDouble(*args))

    def arrayEquals(self, aArray):
        r"""
        arrayEquals(ArrayDouble self, ArrayDouble aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< double > const &

        """
        return _common.ArrayDouble_arrayEquals(self, aArray)

    def trim(self):
        r"""trim(ArrayDouble self)"""
        return _common.ArrayDouble_trim(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayDouble self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayDouble_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayDouble self) -> int"""
        return _common.ArrayDouble_getSize(self)

    def size(self):
        r"""size(ArrayDouble self) -> int"""
        return _common.ArrayDouble_size(self)

    def append(self, *args):
        r"""
        append(ArrayDouble self, double const & aValue) -> int

        Parameters
        ----------
        aValue: double const &

        append(ArrayDouble self, ArrayDouble aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< double > const &

        """
        return _common.ArrayDouble_append(self, *args)

    def insert(self, aIndex, aValue):
        r"""
        insert(ArrayDouble self, int aIndex, double const & aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: double const &

        """
        return _common.ArrayDouble_insert(self, aIndex, aValue)

    def remove(self, aIndex):
        r"""
        remove(ArrayDouble self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayDouble_remove(self, aIndex)

    def set(self, aIndex, aValue):
        r"""
        set(ArrayDouble self, int aIndex, double const & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: double const &

        """
        return _common.ArrayDouble_set(self, aIndex, aValue)

    def get(self, aIndex):
        r"""
        get(ArrayDouble self, int aIndex) -> double const &

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayDouble_get(self, aIndex)

    def getitem(self, index):
        r"""
        getitem(ArrayDouble self, int index) -> double

        Parameters
        ----------
        index: int

        """
        return _common.ArrayDouble_getitem(self, index)

    def setitem(self, index, val):
        r"""
        setitem(ArrayDouble self, int index, double val)

        Parameters
        ----------
        index: int
        val: double

        """
        return _common.ArrayDouble_setitem(self, index, val)

    def getLast(self):
        r"""getLast(ArrayDouble self) -> double const &"""
        return _common.ArrayDouble_getLast(self)

    def findIndex(self, aValue):
        r"""
        findIndex(ArrayDouble self, double const & aValue) -> int

        Parameters
        ----------
        aValue: double const &

        """
        return _common.ArrayDouble_findIndex(self, aValue)

    def rfindIndex(self, aValue):
        r"""
        rfindIndex(ArrayDouble self, double const & aValue) -> int

        Parameters
        ----------
        aValue: double const &

        """
        return _common.ArrayDouble_rfindIndex(self, aValue)

    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayDouble self, double const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: double const &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayDouble_searchBinary(self, aValue, aFindFirst, aLo, aHi)

    def appendVec3(self, vec3):
        r"""
        appendVec3(ArrayDouble self, Vec3 vec3)

        Parameters
        ----------
        vec3: SimTK::Vec3

        """
        return _common.ArrayDouble_appendVec3(self, vec3)

    def appendVector(self, vec):
        r"""
        appendVector(ArrayDouble self, Vector vec)

        Parameters
        ----------
        vec: SimTK::Vector

        """
        return _common.ArrayDouble_appendVector(self, vec)

    def getAsVec3(self):
        r"""getAsVec3(ArrayDouble self) -> Vec3"""
        return _common.ArrayDouble_getAsVec3(self)

    @staticmethod
    def createVec3(*args):
        r"""
        createVec3(double e1, double e2, double e3) -> Vec3

        Parameters
        ----------
        e1: double
        e2: double
        e3: double

        createVec3(double e1) -> Vec3

        Parameters
        ----------
        e1: double

        createVec3(double [3] es) -> Vec3

        Parameters
        ----------
        es: double [3]

        """
        return _common.ArrayDouble_createVec3(*args)

    def getAsVector(self):
        r"""getAsVector(ArrayDouble self) -> Vector"""
        return _common.ArrayDouble_getAsVector(self)

    def populateFromVector(self, aVector):
        r"""
        populateFromVector(ArrayDouble self, Vector aVector)

        Parameters
        ----------
        aVector: SimTK::Vector_< double >

        """
        return _common.ArrayDouble_populateFromVector(self, aVector)

    @staticmethod
    def getValuesFromVec3(vec3):
        r"""
        getValuesFromVec3(Vec3 vec3) -> ArrayDouble

        Parameters
        ----------
        vec3: SimTK::Vec3

        """
        return _common.ArrayDouble_getValuesFromVec3(vec3)

    def toString(self):
        r"""toString(ArrayDouble self) -> std::string"""
        return _common.ArrayDouble_toString(self)

    def setFromPyArray(self, dValues, size):
        r"""
        setFromPyArray(ArrayDouble self, double * dValues, int size)

        Parameters
        ----------
        dValues: double *
        size: int

        """
        return _common.ArrayDouble_setFromPyArray(self, dValues, size)

# Register ArrayDouble in _common:
_common.ArrayDouble_swigregister(ArrayDouble)
class ArrayInt(object):
    r"""Proxy of C++ OpenSim::Array< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayInt

    def __init__(self, *args):
        r"""
        __init__(ArrayInt self, ArrayInt arg2) -> ArrayInt

        Parameters
        ----------
        arg2: OpenSim::Array< int > const &

        __init__(ArrayInt self, ArrayInt arg2) -> ArrayInt

        Parameters
        ----------
        arg2: OpenSim::Array< int > &&

        __init__(ArrayInt self, std::initializer_list< int > initList) -> ArrayInt

        Parameters
        ----------
        initList: std::initializer_list< int >

        __init__(ArrayInt self, int aDefaultValue=int(), int aSize=0, int aCapacity=1) -> ArrayInt

        Parameters
        ----------
        aDefaultValue: int
        aSize: int
        aCapacity: int

        """
        _common.ArrayInt_swiginit(self, _common.new_ArrayInt(*args))

    def arrayEquals(self, aArray):
        r"""
        arrayEquals(ArrayInt self, ArrayInt aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< int > const &

        """
        return _common.ArrayInt_arrayEquals(self, aArray)

    def trim(self):
        r"""trim(ArrayInt self)"""
        return _common.ArrayInt_trim(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayInt self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayInt_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayInt self) -> int"""
        return _common.ArrayInt_getSize(self)

    def size(self):
        r"""size(ArrayInt self) -> int"""
        return _common.ArrayInt_size(self)

    def append(self, *args):
        r"""
        append(ArrayInt self, int const & aValue) -> int

        Parameters
        ----------
        aValue: int const &

        append(ArrayInt self, ArrayInt aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< int > const &

        """
        return _common.ArrayInt_append(self, *args)

    def insert(self, aIndex, aValue):
        r"""
        insert(ArrayInt self, int aIndex, int const & aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: int const &

        """
        return _common.ArrayInt_insert(self, aIndex, aValue)

    def remove(self, aIndex):
        r"""
        remove(ArrayInt self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayInt_remove(self, aIndex)

    def set(self, aIndex, aValue):
        r"""
        set(ArrayInt self, int aIndex, int const & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: int const &

        """
        return _common.ArrayInt_set(self, aIndex, aValue)

    def get(self, aIndex):
        r"""
        get(ArrayInt self, int aIndex) -> int const &

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayInt_get(self, aIndex)

    def getitem(self, index):
        r"""
        getitem(ArrayInt self, int index) -> int

        Parameters
        ----------
        index: int

        """
        return _common.ArrayInt_getitem(self, index)

    def setitem(self, index, val):
        r"""
        setitem(ArrayInt self, int index, int val)

        Parameters
        ----------
        index: int
        val: int

        """
        return _common.ArrayInt_setitem(self, index, val)

    def getLast(self):
        r"""getLast(ArrayInt self) -> int const &"""
        return _common.ArrayInt_getLast(self)

    def findIndex(self, aValue):
        r"""
        findIndex(ArrayInt self, int const & aValue) -> int

        Parameters
        ----------
        aValue: int const &

        """
        return _common.ArrayInt_findIndex(self, aValue)

    def rfindIndex(self, aValue):
        r"""
        rfindIndex(ArrayInt self, int const & aValue) -> int

        Parameters
        ----------
        aValue: int const &

        """
        return _common.ArrayInt_rfindIndex(self, aValue)

    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayInt self, int const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: int const &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayInt_searchBinary(self, aValue, aFindFirst, aLo, aHi)

# Register ArrayInt in _common:
_common.ArrayInt_swigregister(ArrayInt)
class ArrayStr(object):
    r"""Proxy of C++ OpenSim::Array< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayStr

    def __init__(self, *args):
        r"""
        __init__(ArrayStr self, ArrayStr arg2) -> ArrayStr

        Parameters
        ----------
        arg2: OpenSim::Array< std::string > const &

        __init__(ArrayStr self, ArrayStr arg2) -> ArrayStr

        Parameters
        ----------
        arg2: OpenSim::Array< std::string > &&

        __init__(ArrayStr self, std::initializer_list< std::string > initList) -> ArrayStr

        Parameters
        ----------
        initList: std::initializer_list< std::string >

        __init__(ArrayStr self, std::string aDefaultValue=std::string(), int aSize=0, int aCapacity=1) -> ArrayStr

        Parameters
        ----------
        aDefaultValue: std::string
        aSize: int
        aCapacity: int

        """
        _common.ArrayStr_swiginit(self, _common.new_ArrayStr(*args))

    def arrayEquals(self, aArray):
        r"""
        arrayEquals(ArrayStr self, ArrayStr aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< std::string > const &

        """
        return _common.ArrayStr_arrayEquals(self, aArray)

    def trim(self):
        r"""trim(ArrayStr self)"""
        return _common.ArrayStr_trim(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayStr self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayStr_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayStr self) -> int"""
        return _common.ArrayStr_getSize(self)

    def size(self):
        r"""size(ArrayStr self) -> int"""
        return _common.ArrayStr_size(self)

    def append(self, *args):
        r"""
        append(ArrayStr self, std::string const & aValue) -> int

        Parameters
        ----------
        aValue: std::string const &

        append(ArrayStr self, ArrayStr aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< std::string > const &

        """
        return _common.ArrayStr_append(self, *args)

    def insert(self, aIndex, aValue):
        r"""
        insert(ArrayStr self, int aIndex, std::string const & aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: std::string const &

        """
        return _common.ArrayStr_insert(self, aIndex, aValue)

    def remove(self, aIndex):
        r"""
        remove(ArrayStr self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayStr_remove(self, aIndex)

    def set(self, aIndex, aValue):
        r"""
        set(ArrayStr self, int aIndex, std::string const & aValue)

        Parameters
        ----------
        aIndex: int
        aValue: std::string const &

        """
        return _common.ArrayStr_set(self, aIndex, aValue)

    def get(self, aIndex):
        r"""
        get(ArrayStr self, int aIndex) -> std::string const &

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayStr_get(self, aIndex)

    def getitem(self, index):
        r"""
        getitem(ArrayStr self, int index) -> std::string

        Parameters
        ----------
        index: int

        """
        return _common.ArrayStr_getitem(self, index)

    def setitem(self, index, val):
        r"""
        setitem(ArrayStr self, int index, std::string val)

        Parameters
        ----------
        index: int
        val: std::string

        """
        return _common.ArrayStr_setitem(self, index, val)

    def getLast(self):
        r"""getLast(ArrayStr self) -> std::string const &"""
        return _common.ArrayStr_getLast(self)

    def findIndex(self, aValue):
        r"""
        findIndex(ArrayStr self, std::string const & aValue) -> int

        Parameters
        ----------
        aValue: std::string const &

        """
        return _common.ArrayStr_findIndex(self, aValue)

    def rfindIndex(self, aValue):
        r"""
        rfindIndex(ArrayStr self, std::string const & aValue) -> int

        Parameters
        ----------
        aValue: std::string const &

        """
        return _common.ArrayStr_rfindIndex(self, aValue)

    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayStr self, std::string const & aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: std::string const &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayStr_searchBinary(self, aValue, aFindFirst, aLo, aHi)

# Register ArrayStr in _common:
_common.ArrayStr_swigregister(ArrayStr)
class ArrayVec3(object):
    r"""Proxy of C++ OpenSim::Array< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayVec3

    def __init__(self, *args):
        r"""
        __init__(ArrayVec3 self, ArrayVec3 arg2) -> ArrayVec3

        Parameters
        ----------
        arg2: OpenSim::Array< SimTK::Vec3 > const &

        __init__(ArrayVec3 self, ArrayVec3 arg2) -> ArrayVec3

        Parameters
        ----------
        arg2: OpenSim::Array< SimTK::Vec3 > &&

        __init__(ArrayVec3 self, std::initializer_list< SimTK::Vec< 3,double,1 > > initList) -> ArrayVec3

        Parameters
        ----------
        initList: std::initializer_list< SimTK::Vec< 3,double,1 > >

        __init__(ArrayVec3 self, Vec3 aDefaultValue=SimTK::Vec< 3,double,1 >(), int aSize=0, int aCapacity=1) -> ArrayVec3

        Parameters
        ----------
        aDefaultValue: SimTK::Vec< 3,double,1 >
        aSize: int
        aCapacity: int

        """
        _common.ArrayVec3_swiginit(self, _common.new_ArrayVec3(*args))

    def arrayEquals(self, aArray):
        r"""
        arrayEquals(ArrayVec3 self, ArrayVec3 aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< SimTK::Vec3 > const &

        """
        return _common.ArrayVec3_arrayEquals(self, aArray)

    def trim(self):
        r"""trim(ArrayVec3 self)"""
        return _common.ArrayVec3_trim(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayVec3 self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayVec3_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayVec3 self) -> int"""
        return _common.ArrayVec3_getSize(self)

    def size(self):
        r"""size(ArrayVec3 self) -> int"""
        return _common.ArrayVec3_size(self)

    def append(self, *args):
        r"""
        append(ArrayVec3 self, Vec3 aValue) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &

        append(ArrayVec3 self, ArrayVec3 aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< SimTK::Vec3 > const &

        """
        return _common.ArrayVec3_append(self, *args)

    def insert(self, aIndex, aValue):
        r"""
        insert(ArrayVec3 self, int aIndex, Vec3 aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: SimTK::Vec< 3,double,1 > const &

        """
        return _common.ArrayVec3_insert(self, aIndex, aValue)

    def remove(self, aIndex):
        r"""
        remove(ArrayVec3 self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayVec3_remove(self, aIndex)

    def set(self, aIndex, aValue):
        r"""
        set(ArrayVec3 self, int aIndex, Vec3 aValue)

        Parameters
        ----------
        aIndex: int
        aValue: SimTK::Vec< 3,double,1 > const &

        """
        return _common.ArrayVec3_set(self, aIndex, aValue)

    def get(self, aIndex):
        r"""
        get(ArrayVec3 self, int aIndex) -> Vec3

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayVec3_get(self, aIndex)

    def getitem(self, index):
        r"""
        getitem(ArrayVec3 self, int index) -> Vec3

        Parameters
        ----------
        index: int

        """
        return _common.ArrayVec3_getitem(self, index)

    def setitem(self, index, val):
        r"""
        setitem(ArrayVec3 self, int index, Vec3 val)

        Parameters
        ----------
        index: int
        val: SimTK::Vec< 3,double,1 >

        """
        return _common.ArrayVec3_setitem(self, index, val)

    def getLast(self):
        r"""getLast(ArrayVec3 self) -> Vec3"""
        return _common.ArrayVec3_getLast(self)

    def findIndex(self, aValue):
        r"""
        findIndex(ArrayVec3 self, Vec3 aValue) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &

        """
        return _common.ArrayVec3_findIndex(self, aValue)

    def rfindIndex(self, aValue):
        r"""
        rfindIndex(ArrayVec3 self, Vec3 aValue) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &

        """
        return _common.ArrayVec3_rfindIndex(self, aValue)

    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayVec3 self, Vec3 aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: SimTK::Vec< 3,double,1 > const &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayVec3_searchBinary(self, aValue, aFindFirst, aLo, aHi)

# Register ArrayVec3 in _common:
_common.ArrayVec3_swigregister(ArrayVec3)
class ArrayObjPtr(object):
    r"""Proxy of C++ OpenSim::Array< OpenSim::Object * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayObjPtr

    def __init__(self, *args):
        r"""
        __init__(ArrayObjPtr self, ArrayObjPtr arg2) -> ArrayObjPtr

        Parameters
        ----------
        arg2: OpenSim::Array< OpenSim::Object * > const &

        __init__(ArrayObjPtr self, ArrayObjPtr arg2) -> ArrayObjPtr

        Parameters
        ----------
        arg2: OpenSim::Array< OpenSim::Object * > &&

        __init__(ArrayObjPtr self, std::initializer_list< OpenSim::Object * > initList) -> ArrayObjPtr

        Parameters
        ----------
        initList: std::initializer_list< OpenSim::Object * >

        __init__(ArrayObjPtr self, OpenSimObject aDefaultValue=OpenSim::Object *(), int aSize=0, int aCapacity=1) -> ArrayObjPtr

        Parameters
        ----------
        aDefaultValue: OpenSim::Object *
        aSize: int
        aCapacity: int

        """
        _common.ArrayObjPtr_swiginit(self, _common.new_ArrayObjPtr(*args))

    def arrayEquals(self, aArray):
        r"""
        arrayEquals(ArrayObjPtr self, ArrayObjPtr aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object * > const &

        """
        return _common.ArrayObjPtr_arrayEquals(self, aArray)

    def trim(self):
        r"""trim(ArrayObjPtr self)"""
        return _common.ArrayObjPtr_trim(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayObjPtr self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayObjPtr_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayObjPtr self) -> int"""
        return _common.ArrayObjPtr_getSize(self)

    def size(self):
        r"""size(ArrayObjPtr self) -> int"""
        return _common.ArrayObjPtr_size(self)

    def append(self, *args):
        r"""
        append(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &

        append(ArrayObjPtr self, ArrayObjPtr aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object * > const &

        """
        return _common.ArrayObjPtr_append(self, *args)

    def insert(self, aIndex, aValue):
        r"""
        insert(ArrayObjPtr self, int aIndex, OpenSimObject aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::Object *const &

        """
        return _common.ArrayObjPtr_insert(self, aIndex, aValue)

    def remove(self, aIndex):
        r"""
        remove(ArrayObjPtr self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayObjPtr_remove(self, aIndex)

    def set(self, aIndex, aValue):
        r"""
        set(ArrayObjPtr self, int aIndex, OpenSimObject aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::Object *const &

        """
        return _common.ArrayObjPtr_set(self, aIndex, aValue)

    def get(self, aIndex):
        r"""
        get(ArrayObjPtr self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayObjPtr_get(self, aIndex)

    def getitem(self, index):
        r"""
        getitem(ArrayObjPtr self, int index) -> OpenSimObject

        Parameters
        ----------
        index: int

        """
        return _common.ArrayObjPtr_getitem(self, index)

    def setitem(self, index, val):
        r"""
        setitem(ArrayObjPtr self, int index, OpenSimObject val)

        Parameters
        ----------
        index: int
        val: OpenSim::Object *

        """
        return _common.ArrayObjPtr_setitem(self, index, val)

    def getLast(self):
        r"""getLast(ArrayObjPtr self) -> OpenSimObject"""
        return _common.ArrayObjPtr_getLast(self)

    def findIndex(self, aValue):
        r"""
        findIndex(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &

        """
        return _common.ArrayObjPtr_findIndex(self, aValue)

    def rfindIndex(self, aValue):
        r"""
        rfindIndex(ArrayObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &

        """
        return _common.ArrayObjPtr_rfindIndex(self, aValue)

    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayObjPtr self, OpenSimObject aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::Object *const &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayObjPtr_searchBinary(self, aValue, aFindFirst, aLo, aHi)

# Register ArrayObjPtr in _common:
_common.ArrayObjPtr_swigregister(ArrayObjPtr)
class ArrayPtrsObj(object):
    r"""Proxy of C++ OpenSim::ArrayPtrs< OpenSim::Object > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayPtrsObj

    def __init__(self, *args):
        r"""
        __init__(ArrayPtrsObj self, int aCapacity=1) -> ArrayPtrsObj

        Parameters
        ----------
        aCapacity: int

        __init__(ArrayPtrsObj self, ArrayPtrsObj aArray) -> ArrayPtrsObj

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Object > const &

        """
        _common.ArrayPtrsObj_swiginit(self, _common.new_ArrayPtrsObj(*args))

    def clearAndDestroy(self):
        r"""clearAndDestroy(ArrayPtrsObj self)"""
        return _common.ArrayPtrsObj_clearAndDestroy(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayPtrsObj self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayPtrsObj_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayPtrsObj self) -> int"""
        return _common.ArrayPtrsObj_getSize(self)

    def size(self):
        r"""size(ArrayPtrsObj self) -> int"""
        return _common.ArrayPtrsObj_size(self)

    def getIndex(self, *args):
        r"""
        getIndex(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT *
        aStartIndex: int

        getIndex(ArrayPtrsObj self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _common.ArrayPtrsObj_getIndex(self, *args)

    def append(self, *args):
        r"""
        append(ArrayPtrsObj self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object *

        append(ArrayPtrsObj self, ArrayPtrsObj aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Object > &

        """
        return _common.ArrayPtrsObj_append(self, *args)

    def insert(self, aIndex, aObject):
        r"""
        insert(ArrayPtrsObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object *

        """
        return _common.ArrayPtrsObj_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(ArrayPtrsObj self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT * aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT *

        """
        return _common.ArrayPtrsObj_remove(self, *args)

    def set(self, aIndex, aObject):
        r"""
        set(ArrayPtrsObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object *

        """
        return _common.ArrayPtrsObj_set(self, aIndex, aObject)

    def get(self, *args):
        r"""
        get(ArrayPtrsObj self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        get(ArrayPtrsObj self, std::string const & aName) -> OpenSimObject

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayPtrsObj_get(self, *args)

    def getLast(self):
        r"""getLast(ArrayPtrsObj self) -> OpenSimObject"""
        return _common.ArrayPtrsObj_getLast(self)

    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayPtrsObj self, OpenSim::ArrayPtrs< OpenSim::Object >::ConstT & aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object >::ConstT &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayPtrsObj_searchBinary(self, aObject, aFindFirst, aLo, aHi)

# Register ArrayPtrsObj in _common:
_common.ArrayPtrsObj_swigregister(ArrayPtrsObj)
class ArrayConstObjPtr(object):
    r"""Proxy of C++ OpenSim::Array< OpenSim::Object const * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayConstObjPtr

    def __init__(self, *args):
        r"""
        __init__(ArrayConstObjPtr self, ArrayConstObjPtr arg2) -> ArrayConstObjPtr

        Parameters
        ----------
        arg2: OpenSim::Array< OpenSim::Object const * > const &

        __init__(ArrayConstObjPtr self, ArrayConstObjPtr arg2) -> ArrayConstObjPtr

        Parameters
        ----------
        arg2: OpenSim::Array< OpenSim::Object const * > &&

        __init__(ArrayConstObjPtr self, std::initializer_list< OpenSim::Object const * > initList) -> ArrayConstObjPtr

        Parameters
        ----------
        initList: std::initializer_list< OpenSim::Object const * >

        __init__(ArrayConstObjPtr self, OpenSimObject aDefaultValue=OpenSim::Object const *(), int aSize=0, int aCapacity=1) -> ArrayConstObjPtr

        Parameters
        ----------
        aDefaultValue: OpenSim::Object const *
        aSize: int
        aCapacity: int

        """
        _common.ArrayConstObjPtr_swiginit(self, _common.new_ArrayConstObjPtr(*args))

    def arrayEquals(self, aArray):
        r"""
        arrayEquals(ArrayConstObjPtr self, ArrayConstObjPtr aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object const * > const &

        """
        return _common.ArrayConstObjPtr_arrayEquals(self, aArray)

    def trim(self):
        r"""trim(ArrayConstObjPtr self)"""
        return _common.ArrayConstObjPtr_trim(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayConstObjPtr self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayConstObjPtr_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayConstObjPtr self) -> int"""
        return _common.ArrayConstObjPtr_getSize(self)

    def size(self):
        r"""size(ArrayConstObjPtr self) -> int"""
        return _common.ArrayConstObjPtr_size(self)

    def append(self, *args):
        r"""
        append(ArrayConstObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &

        append(ArrayConstObjPtr self, ArrayConstObjPtr aArray) -> int

        Parameters
        ----------
        aArray: OpenSim::Array< OpenSim::Object const * > const &

        """
        return _common.ArrayConstObjPtr_append(self, *args)

    def insert(self, aIndex, aValue):
        r"""
        insert(ArrayConstObjPtr self, int aIndex, OpenSimObject aValue) -> int

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::Object const *const &

        """
        return _common.ArrayConstObjPtr_insert(self, aIndex, aValue)

    def remove(self, aIndex):
        r"""
        remove(ArrayConstObjPtr self, int aIndex) -> int

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayConstObjPtr_remove(self, aIndex)

    def set(self, aIndex, aValue):
        r"""
        set(ArrayConstObjPtr self, int aIndex, OpenSimObject aValue)

        Parameters
        ----------
        aIndex: int
        aValue: OpenSim::Object const *const &

        """
        return _common.ArrayConstObjPtr_set(self, aIndex, aValue)

    def get(self, aIndex):
        r"""
        get(ArrayConstObjPtr self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        """
        return _common.ArrayConstObjPtr_get(self, aIndex)

    def getitem(self, index):
        r"""
        getitem(ArrayConstObjPtr self, int index) -> OpenSimObject

        Parameters
        ----------
        index: int

        """
        return _common.ArrayConstObjPtr_getitem(self, index)

    def setitem(self, index, val):
        r"""
        setitem(ArrayConstObjPtr self, int index, OpenSimObject val)

        Parameters
        ----------
        index: int
        val: OpenSim::Object const *

        """
        return _common.ArrayConstObjPtr_setitem(self, index, val)

    def getLast(self):
        r"""getLast(ArrayConstObjPtr self) -> OpenSimObject"""
        return _common.ArrayConstObjPtr_getLast(self)

    def findIndex(self, aValue):
        r"""
        findIndex(ArrayConstObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &

        """
        return _common.ArrayConstObjPtr_findIndex(self, aValue)

    def rfindIndex(self, aValue):
        r"""
        rfindIndex(ArrayConstObjPtr self, OpenSimObject aValue) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &

        """
        return _common.ArrayConstObjPtr_rfindIndex(self, aValue)

    def searchBinary(self, aValue, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayConstObjPtr self, OpenSimObject aValue, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aValue: OpenSim::Object const *const &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayConstObjPtr_searchBinary(self, aValue, aFindFirst, aLo, aHi)

# Register ArrayConstObjPtr in _common:
_common.ArrayConstObjPtr_swigregister(ArrayConstObjPtr)
class ArrayPtrsConstObj(object):
    r"""Proxy of C++ OpenSim::ArrayPtrs< OpenSim::Object const > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ArrayPtrsConstObj

    def __init__(self, *args):
        r"""
        __init__(ArrayPtrsConstObj self, int aCapacity=1) -> ArrayPtrsConstObj

        Parameters
        ----------
        aCapacity: int

        __init__(ArrayPtrsConstObj self, ArrayPtrsConstObj aArray) -> ArrayPtrsConstObj

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Object const > const &

        """
        _common.ArrayPtrsConstObj_swiginit(self, _common.new_ArrayPtrsConstObj(*args))

    def clearAndDestroy(self):
        r"""clearAndDestroy(ArrayPtrsConstObj self)"""
        return _common.ArrayPtrsConstObj_clearAndDestroy(self)

    def setSize(self, aSize):
        r"""
        setSize(ArrayPtrsConstObj self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.ArrayPtrsConstObj_setSize(self, aSize)

    def getSize(self):
        r"""getSize(ArrayPtrsConstObj self) -> int"""
        return _common.ArrayPtrsConstObj_getSize(self)

    def size(self):
        r"""size(ArrayPtrsConstObj self) -> int"""
        return _common.ArrayPtrsConstObj_size(self)

    def getIndex(self, *args):
        r"""
        getIndex(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT * aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT *
        aStartIndex: int

        getIndex(ArrayPtrsConstObj self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _common.ArrayPtrsConstObj_getIndex(self, *args)

    def append(self, *args):
        r"""
        append(ArrayPtrsConstObj self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const *

        append(ArrayPtrsConstObj self, ArrayPtrsConstObj aArray) -> bool

        Parameters
        ----------
        aArray: OpenSim::ArrayPtrs< OpenSim::Object const > &

        """
        return _common.ArrayPtrsConstObj_append(self, *args)

    def insert(self, aIndex, aObject):
        r"""
        insert(ArrayPtrsConstObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object const *

        """
        return _common.ArrayPtrsConstObj_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(ArrayPtrsConstObj self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT * aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT *

        """
        return _common.ArrayPtrsConstObj_remove(self, *args)

    def set(self, aIndex, aObject):
        r"""
        set(ArrayPtrsConstObj self, int aIndex, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Object const *

        """
        return _common.ArrayPtrsConstObj_set(self, aIndex, aObject)

    def get(self, *args):
        r"""
        get(ArrayPtrsConstObj self, int aIndex) -> OpenSimObject

        Parameters
        ----------
        aIndex: int

        get(ArrayPtrsConstObj self, std::string const & aName) -> OpenSimObject

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.ArrayPtrsConstObj_get(self, *args)

    def getLast(self):
        r"""getLast(ArrayPtrsConstObj self) -> OpenSimObject"""
        return _common.ArrayPtrsConstObj_getLast(self)

    def searchBinary(self, aObject, aFindFirst=False, aLo=-1, aHi=-1):
        r"""
        searchBinary(ArrayPtrsConstObj self, OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT & aObject, bool aFindFirst=False, int aLo=-1, int aHi=-1) -> int

        Parameters
        ----------
        aObject: OpenSim::ArrayPtrs< OpenSim::Object const >::ConstT &
        aFindFirst: bool
        aLo: int
        aHi: int

        """
        return _common.ArrayPtrsConstObj_searchBinary(self, aObject, aFindFirst, aLo, aHi)

# Register ArrayPtrsConstObj in _common:
_common.ArrayPtrsConstObj_swigregister(ArrayPtrsConstObj)

def LoadOpenSimLibrary(*args):
    r"""
    LoadOpenSimLibrary(std::string const & lpLibFileName, bool verbose)

    Parameters
    ----------
    lpLibFileName: std::string const &
    verbose: bool

    LoadOpenSimLibrary(std::string const & aLibraryName)

    Parameters
    ----------
    aLibraryName: std::string const &

    """
    return _common.LoadOpenSimLibrary(*args)

def LoadOpenSimLibraryExact(exactPath, verbose=True):
    r"""
    LoadOpenSimLibraryExact(std::string const & exactPath, bool verbose=True) -> bool

    Parameters
    ----------
    exactPath: std::string const &
    verbose: bool

    """
    return _common.LoadOpenSimLibraryExact(exactPath, verbose)
class ModelDisplayHints(OpenSimObject):
    r"""Proxy of C++ OpenSim::ModelDisplayHints class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ModelDisplayHints

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ModelDisplayHints_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ModelDisplayHints self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ModelDisplayHints_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ModelDisplayHints_getClassName()

    def clone(self):
        r"""clone(ModelDisplayHints self) -> ModelDisplayHints"""
        return _common.ModelDisplayHints_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ModelDisplayHints self) -> std::string const &"""
        return _common.ModelDisplayHints_getConcreteClassName(self)

    def copyProperty_show_wrap_geometry(self, source):
        r"""
        copyProperty_show_wrap_geometry(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_wrap_geometry(self, source)

    def append_show_wrap_geometry(self, value):
        r"""
        append_show_wrap_geometry(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_wrap_geometry(self, value)

    def constructProperty_show_wrap_geometry(self, initValue):
        r"""
        constructProperty_show_wrap_geometry(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_wrap_geometry(self, initValue)

    def get_show_wrap_geometry(self, *args):
        r"""
        get_show_wrap_geometry(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_wrap_geometry(ModelDisplayHints self) -> bool const &
        """
        return _common.ModelDisplayHints_get_show_wrap_geometry(self, *args)

    def upd_show_wrap_geometry(self, *args):
        r"""
        upd_show_wrap_geometry(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_wrap_geometry(ModelDisplayHints self) -> bool &
        """
        return _common.ModelDisplayHints_upd_show_wrap_geometry(self, *args)

    def set_show_wrap_geometry(self, *args):
        r"""
        set_show_wrap_geometry(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_wrap_geometry(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_wrap_geometry(self, *args)

    def copyProperty_show_contact_geometry(self, source):
        r"""
        copyProperty_show_contact_geometry(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_contact_geometry(self, source)

    def append_show_contact_geometry(self, value):
        r"""
        append_show_contact_geometry(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_contact_geometry(self, value)

    def constructProperty_show_contact_geometry(self, initValue):
        r"""
        constructProperty_show_contact_geometry(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_contact_geometry(self, initValue)

    def get_show_contact_geometry(self, *args):
        r"""
        get_show_contact_geometry(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_contact_geometry(ModelDisplayHints self) -> bool const &
        """
        return _common.ModelDisplayHints_get_show_contact_geometry(self, *args)

    def upd_show_contact_geometry(self, *args):
        r"""
        upd_show_contact_geometry(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_contact_geometry(ModelDisplayHints self) -> bool &
        """
        return _common.ModelDisplayHints_upd_show_contact_geometry(self, *args)

    def set_show_contact_geometry(self, *args):
        r"""
        set_show_contact_geometry(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_contact_geometry(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_contact_geometry(self, *args)

    def copyProperty_show_path_geometry(self, source):
        r"""
        copyProperty_show_path_geometry(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_path_geometry(self, source)

    def append_show_path_geometry(self, value):
        r"""
        append_show_path_geometry(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_path_geometry(self, value)

    def constructProperty_show_path_geometry(self, initValue):
        r"""
        constructProperty_show_path_geometry(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_path_geometry(self, initValue)

    def get_show_path_geometry(self, *args):
        r"""
        get_show_path_geometry(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_path_geometry(ModelDisplayHints self) -> bool const &
        """
        return _common.ModelDisplayHints_get_show_path_geometry(self, *args)

    def upd_show_path_geometry(self, *args):
        r"""
        upd_show_path_geometry(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_path_geometry(ModelDisplayHints self) -> bool &
        """
        return _common.ModelDisplayHints_upd_show_path_geometry(self, *args)

    def set_show_path_geometry(self, *args):
        r"""
        set_show_path_geometry(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_path_geometry(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_path_geometry(self, *args)

    def copyProperty_show_path_points(self, source):
        r"""
        copyProperty_show_path_points(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_path_points(self, source)

    def append_show_path_points(self, value):
        r"""
        append_show_path_points(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_path_points(self, value)

    def constructProperty_show_path_points(self, initValue):
        r"""
        constructProperty_show_path_points(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_path_points(self, initValue)

    def get_show_path_points(self, *args):
        r"""
        get_show_path_points(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_path_points(ModelDisplayHints self) -> bool const &
        """
        return _common.ModelDisplayHints_get_show_path_points(self, *args)

    def upd_show_path_points(self, *args):
        r"""
        upd_show_path_points(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_path_points(ModelDisplayHints self) -> bool &
        """
        return _common.ModelDisplayHints_upd_show_path_points(self, *args)

    def set_show_path_points(self, *args):
        r"""
        set_show_path_points(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_path_points(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_path_points(self, *args)

    def copyProperty_show_markers(self, source):
        r"""
        copyProperty_show_markers(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_markers(self, source)

    def append_show_markers(self, value):
        r"""
        append_show_markers(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_markers(self, value)

    def constructProperty_show_markers(self, initValue):
        r"""
        constructProperty_show_markers(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_markers(self, initValue)

    def get_show_markers(self, *args):
        r"""
        get_show_markers(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_markers(ModelDisplayHints self) -> bool const &
        """
        return _common.ModelDisplayHints_get_show_markers(self, *args)

    def upd_show_markers(self, *args):
        r"""
        upd_show_markers(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_markers(ModelDisplayHints self) -> bool &
        """
        return _common.ModelDisplayHints_upd_show_markers(self, *args)

    def set_show_markers(self, *args):
        r"""
        set_show_markers(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_markers(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_markers(self, *args)

    def copyProperty_marker_color(self, source):
        r"""
        copyProperty_marker_color(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_marker_color(self, source)

    def append_marker_color(self, value):
        r"""
        append_marker_color(ModelDisplayHints self, Vec3 value) -> int

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _common.ModelDisplayHints_append_marker_color(self, value)

    def constructProperty_marker_color(self, initValue):
        r"""
        constructProperty_marker_color(ModelDisplayHints self, Vec3 initValue)

        Parameters
        ----------
        initValue: SimTK::Vec3 const &

        """
        return _common.ModelDisplayHints_constructProperty_marker_color(self, initValue)

    def get_marker_color(self, *args):
        r"""
        get_marker_color(ModelDisplayHints self, int i) -> Vec3

        Parameters
        ----------
        i: int

        get_marker_color(ModelDisplayHints self) -> Vec3
        """
        return _common.ModelDisplayHints_get_marker_color(self, *args)

    def upd_marker_color(self, *args):
        r"""
        upd_marker_color(ModelDisplayHints self, int i) -> Vec3

        Parameters
        ----------
        i: int

        upd_marker_color(ModelDisplayHints self) -> Vec3
        """
        return _common.ModelDisplayHints_upd_marker_color(self, *args)

    def set_marker_color(self, *args):
        r"""
        set_marker_color(ModelDisplayHints self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3 const &

        set_marker_color(ModelDisplayHints self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec3 const &

        """
        return _common.ModelDisplayHints_set_marker_color(self, *args)

    def copyProperty_show_forces(self, source):
        r"""
        copyProperty_show_forces(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_forces(self, source)

    def append_show_forces(self, value):
        r"""
        append_show_forces(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_forces(self, value)

    def constructProperty_show_forces(self, initValue):
        r"""
        constructProperty_show_forces(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_forces(self, initValue)

    def get_show_forces(self, *args):
        r"""
        get_show_forces(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_forces(ModelDisplayHints self) -> bool const &
        """
        return _common.ModelDisplayHints_get_show_forces(self, *args)

    def upd_show_forces(self, *args):
        r"""
        upd_show_forces(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_forces(ModelDisplayHints self) -> bool &
        """
        return _common.ModelDisplayHints_upd_show_forces(self, *args)

    def set_show_forces(self, *args):
        r"""
        set_show_forces(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_forces(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_forces(self, *args)

    def copyProperty_show_frames(self, source):
        r"""
        copyProperty_show_frames(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_frames(self, source)

    def append_show_frames(self, value):
        r"""
        append_show_frames(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_frames(self, value)

    def constructProperty_show_frames(self, initValue):
        r"""
        constructProperty_show_frames(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_frames(self, initValue)

    def get_show_frames(self, *args):
        r"""
        get_show_frames(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_frames(ModelDisplayHints self) -> bool const &
        """
        return _common.ModelDisplayHints_get_show_frames(self, *args)

    def upd_show_frames(self, *args):
        r"""
        upd_show_frames(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_frames(ModelDisplayHints self) -> bool &
        """
        return _common.ModelDisplayHints_upd_show_frames(self, *args)

    def set_show_frames(self, *args):
        r"""
        set_show_frames(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_frames(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_frames(self, *args)

    def copyProperty_show_labels(self, source):
        r"""
        copyProperty_show_labels(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_labels(self, source)

    def append_show_labels(self, value):
        r"""
        append_show_labels(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_labels(self, value)

    def constructProperty_show_labels(self, initValue):
        r"""
        constructProperty_show_labels(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_labels(self, initValue)

    def get_show_labels(self, *args):
        r"""
        get_show_labels(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_labels(ModelDisplayHints self) -> bool const &
        """
        return _common.ModelDisplayHints_get_show_labels(self, *args)

    def upd_show_labels(self, *args):
        r"""
        upd_show_labels(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_labels(ModelDisplayHints self) -> bool &
        """
        return _common.ModelDisplayHints_upd_show_labels(self, *args)

    def set_show_labels(self, *args):
        r"""
        set_show_labels(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_labels(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_labels(self, *args)

    def copyProperty_show_debug_geometry(self, source):
        r"""
        copyProperty_show_debug_geometry(ModelDisplayHints self, ModelDisplayHints source)

        Parameters
        ----------
        source: OpenSim::ModelDisplayHints::Self const &

        """
        return _common.ModelDisplayHints_copyProperty_show_debug_geometry(self, source)

    def append_show_debug_geometry(self, value):
        r"""
        append_show_debug_geometry(ModelDisplayHints self, bool const & value) -> int

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_append_show_debug_geometry(self, value)

    def constructProperty_show_debug_geometry(self, initValue):
        r"""
        constructProperty_show_debug_geometry(ModelDisplayHints self, bool const & initValue)

        Parameters
        ----------
        initValue: bool const &

        """
        return _common.ModelDisplayHints_constructProperty_show_debug_geometry(self, initValue)

    def get_show_debug_geometry(self, *args):
        r"""
        get_show_debug_geometry(ModelDisplayHints self, int i) -> bool const

        Parameters
        ----------
        i: int

        get_show_debug_geometry(ModelDisplayHints self) -> bool const &
        """
        return _common.ModelDisplayHints_get_show_debug_geometry(self, *args)

    def upd_show_debug_geometry(self, *args):
        r"""
        upd_show_debug_geometry(ModelDisplayHints self, int i) -> bool

        Parameters
        ----------
        i: int

        upd_show_debug_geometry(ModelDisplayHints self) -> bool &
        """
        return _common.ModelDisplayHints_upd_show_debug_geometry(self, *args)

    def set_show_debug_geometry(self, *args):
        r"""
        set_show_debug_geometry(ModelDisplayHints self, int i, bool const & value)

        Parameters
        ----------
        i: int
        value: bool const &

        set_show_debug_geometry(ModelDisplayHints self, bool const & value)

        Parameters
        ----------
        value: bool const &

        """
        return _common.ModelDisplayHints_set_show_debug_geometry(self, *args)

    def __init__(self):
        r"""__init__(ModelDisplayHints self) -> ModelDisplayHints"""
        _common.ModelDisplayHints_swiginit(self, _common.new_ModelDisplayHints())

    def disableVisualization(self):
        r"""disableVisualization(ModelDisplayHints self)"""
        return _common.ModelDisplayHints_disableVisualization(self)

    def isVisualizationEnabled(self):
        r"""isVisualizationEnabled(ModelDisplayHints self) -> bool"""
        return _common.ModelDisplayHints_isVisualizationEnabled(self)
    __swig_destroy__ = _common.delete_ModelDisplayHints

# Register ModelDisplayHints in _common:
_common.ModelDisplayHints_swigregister(ModelDisplayHints)
class AbstractChannel(object):
    r"""Proxy of C++ OpenSim::AbstractChannel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractChannel

    def getChannelName(self):
        r"""getChannelName(AbstractChannel self) -> std::string const &"""
        return _common.AbstractChannel_getChannelName(self)

    def getTypeName(self):
        r"""getTypeName(AbstractChannel self) -> std::string"""
        return _common.AbstractChannel_getTypeName(self)

    def getName(self):
        r"""getName(AbstractChannel self) -> std::string"""
        return _common.AbstractChannel_getName(self)

    def getPathName(self):
        r"""getPathName(AbstractChannel self) -> std::string"""
        return _common.AbstractChannel_getPathName(self)

# Register AbstractChannel in _common:
_common.AbstractChannel_swigregister(AbstractChannel)
class AbstractOutput(object):
    r"""Proxy of C++ OpenSim::AbstractOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractOutput

    def getName(self):
        r"""getName(AbstractOutput self) -> std::string const &"""
        return _common.AbstractOutput_getName(self)

    def getDependsOnStage(self):
        r"""getDependsOnStage(AbstractOutput self) -> Stage"""
        return _common.AbstractOutput_getDependsOnStage(self)

    def isListOutput(self):
        r"""isListOutput(AbstractOutput self) -> bool"""
        return _common.AbstractOutput_isListOutput(self)

    def getOwner(self):
        r"""getOwner(AbstractOutput self) -> Component"""
        return _common.AbstractOutput_getOwner(self)

    def getPathName(self):
        r"""getPathName(AbstractOutput self) -> std::string"""
        return _common.AbstractOutput_getPathName(self)

    def clearChannels(self):
        r"""clearChannels(AbstractOutput self)"""
        return _common.AbstractOutput_clearChannels(self)

    def addChannel(self, channelName):
        r"""
        addChannel(AbstractOutput self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.AbstractOutput_addChannel(self, channelName)

    def getChannel(self, name):
        r"""
        getChannel(AbstractOutput self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.AbstractOutput_getChannel(self, name)

    def getTypeName(self):
        r"""getTypeName(AbstractOutput self) -> std::string"""
        return _common.AbstractOutput_getTypeName(self)

    def getValueAsString(self, state):
        r"""
        getValueAsString(AbstractOutput self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.AbstractOutput_getValueAsString(self, state)

    def isCompatible(self, arg2):
        r"""
        isCompatible(AbstractOutput self, AbstractOutput arg2) -> bool

        Parameters
        ----------
        arg2: OpenSim::AbstractOutput const &

        """
        return _common.AbstractOutput_isCompatible(self, arg2)

    def compatibleAssign(self, arg2):
        r"""
        compatibleAssign(AbstractOutput self, AbstractOutput arg2)

        Parameters
        ----------
        arg2: OpenSim::AbstractOutput const &

        """
        return _common.AbstractOutput_compatibleAssign(self, arg2)

    def clone(self):
        r"""clone(AbstractOutput self) -> AbstractOutput"""
        return _common.AbstractOutput_clone(self)

    def getNumberOfSignificantDigits(self):
        r"""getNumberOfSignificantDigits(AbstractOutput self) -> unsigned int"""
        return _common.AbstractOutput_getNumberOfSignificantDigits(self)

    def setNumberOfSignificantDigits(self, numSigFigs):
        r"""
        setNumberOfSignificantDigits(AbstractOutput self, unsigned int numSigFigs)

        Parameters
        ----------
        numSigFigs: unsigned int

        """
        return _common.AbstractOutput_setNumberOfSignificantDigits(self, numSigFigs)

# Register AbstractOutput in _common:
_common.AbstractOutput_swigregister(AbstractOutput)
class OutputDouble(AbstractOutput):
    r"""Proxy of C++ OpenSim::Output< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputDouble self) -> OutputDouble
        __init__(OutputDouble self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,double &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputDouble

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,double &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OutputDouble self, OutputDouble source) -> OutputDouble

        Parameters
        ----------
        source: OpenSim::Output< double > const &

        """
        _common.OutputDouble_swiginit(self, _common.new_OutputDouble(*args))
    __swig_destroy__ = _common.delete_OutputDouble

    def isCompatible(self, o):
        r"""
        isCompatible(OutputDouble self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputDouble_isCompatible(self, o)

    def compatibleAssign(self, o):
        r"""
        compatibleAssign(OutputDouble self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputDouble_compatibleAssign(self, o)

    def clearChannels(self):
        r"""clearChannels(OutputDouble self)"""
        return _common.OutputDouble_clearChannels(self)

    def addChannel(self, channelName):
        r"""
        addChannel(OutputDouble self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputDouble_addChannel(self, channelName)

    def getChannel(self, name):
        r"""
        getChannel(OutputDouble self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputDouble_getChannel(self, name)

    def getChannels(self):
        r"""getChannels(OutputDouble self) -> OpenSim::Output< double >::ChannelMap const &"""
        return _common.OutputDouble_getChannels(self)

    def getValue(self, state):
        r"""
        getValue(OutputDouble self, State state) -> double const &

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputDouble_getValue(self, state)

    def getTypeName(self):
        r"""getTypeName(OutputDouble self) -> std::string"""
        return _common.OutputDouble_getTypeName(self)

    def getValueAsString(self, state):
        r"""
        getValueAsString(OutputDouble self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputDouble_getValueAsString(self, state)

    def clone(self):
        r"""clone(OutputDouble self) -> OutputDouble"""
        return _common.OutputDouble_clone(self)

    @staticmethod
    def isA(p):
        r"""
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputDouble_isA(p)

    @staticmethod
    def downcast(p):
        r"""
        downcast(AbstractOutput p) -> OutputDouble

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputDouble_downcast(p)

    @staticmethod
    def updDowncast(p):
        r"""
        updDowncast(AbstractOutput p) -> OutputDouble

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputDouble_updDowncast(p)

    @staticmethod
    def safeDownCast(parent):
        r"""
        safeDownCast(AbstractOutput parent) -> OutputDouble

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputDouble_safeDownCast(parent)

# Register OutputDouble in _common:
_common.OutputDouble_swigregister(OutputDouble)
class OutputVec3(AbstractOutput):
    r"""Proxy of C++ OpenSim::Output< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputVec3 self) -> OutputVec3
        __init__(OutputVec3 self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vec< 3,double,1 > &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputVec3

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vec< 3,double,1 > &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OutputVec3 self, OutputVec3 source) -> OutputVec3

        Parameters
        ----------
        source: OpenSim::Output< SimTK::Vec3 > const &

        """
        _common.OutputVec3_swiginit(self, _common.new_OutputVec3(*args))
    __swig_destroy__ = _common.delete_OutputVec3

    def isCompatible(self, o):
        r"""
        isCompatible(OutputVec3 self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputVec3_isCompatible(self, o)

    def compatibleAssign(self, o):
        r"""
        compatibleAssign(OutputVec3 self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputVec3_compatibleAssign(self, o)

    def clearChannels(self):
        r"""clearChannels(OutputVec3 self)"""
        return _common.OutputVec3_clearChannels(self)

    def addChannel(self, channelName):
        r"""
        addChannel(OutputVec3 self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputVec3_addChannel(self, channelName)

    def getChannel(self, name):
        r"""
        getChannel(OutputVec3 self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputVec3_getChannel(self, name)

    def getChannels(self):
        r"""getChannels(OutputVec3 self) -> OpenSim::Output< SimTK::Vec< 3,double,1 > >::ChannelMap const &"""
        return _common.OutputVec3_getChannels(self)

    def getValue(self, state):
        r"""
        getValue(OutputVec3 self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputVec3_getValue(self, state)

    def getTypeName(self):
        r"""getTypeName(OutputVec3 self) -> std::string"""
        return _common.OutputVec3_getTypeName(self)

    def getValueAsString(self, state):
        r"""
        getValueAsString(OutputVec3 self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputVec3_getValueAsString(self, state)

    def clone(self):
        r"""clone(OutputVec3 self) -> OutputVec3"""
        return _common.OutputVec3_clone(self)

    @staticmethod
    def isA(p):
        r"""
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputVec3_isA(p)

    @staticmethod
    def downcast(p):
        r"""
        downcast(AbstractOutput p) -> OutputVec3

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputVec3_downcast(p)

    @staticmethod
    def updDowncast(p):
        r"""
        updDowncast(AbstractOutput p) -> OutputVec3

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputVec3_updDowncast(p)

    @staticmethod
    def safeDownCast(parent):
        r"""
        safeDownCast(AbstractOutput parent) -> OutputVec3

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputVec3_safeDownCast(parent)

# Register OutputVec3 in _common:
_common.OutputVec3_swigregister(OutputVec3)
class OutputTransform(AbstractOutput):
    r"""Proxy of C++ OpenSim::Output< SimTK::Transform > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputTransform self) -> OutputTransform
        __init__(OutputTransform self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Transform_< double > &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputTransform

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Transform_< double > &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OutputTransform self, OutputTransform source) -> OutputTransform

        Parameters
        ----------
        source: OpenSim::Output< SimTK::Transform > const &

        """
        _common.OutputTransform_swiginit(self, _common.new_OutputTransform(*args))
    __swig_destroy__ = _common.delete_OutputTransform

    def isCompatible(self, o):
        r"""
        isCompatible(OutputTransform self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputTransform_isCompatible(self, o)

    def compatibleAssign(self, o):
        r"""
        compatibleAssign(OutputTransform self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputTransform_compatibleAssign(self, o)

    def clearChannels(self):
        r"""clearChannels(OutputTransform self)"""
        return _common.OutputTransform_clearChannels(self)

    def addChannel(self, channelName):
        r"""
        addChannel(OutputTransform self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputTransform_addChannel(self, channelName)

    def getChannel(self, name):
        r"""
        getChannel(OutputTransform self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputTransform_getChannel(self, name)

    def getChannels(self):
        r"""getChannels(OutputTransform self) -> OpenSim::Output< SimTK::Transform_< double > >::ChannelMap const &"""
        return _common.OutputTransform_getChannels(self)

    def getValue(self, state):
        r"""
        getValue(OutputTransform self, State state) -> Transform

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputTransform_getValue(self, state)

    def getTypeName(self):
        r"""getTypeName(OutputTransform self) -> std::string"""
        return _common.OutputTransform_getTypeName(self)

    def getValueAsString(self, state):
        r"""
        getValueAsString(OutputTransform self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputTransform_getValueAsString(self, state)

    def clone(self):
        r"""clone(OutputTransform self) -> OutputTransform"""
        return _common.OutputTransform_clone(self)

    @staticmethod
    def isA(p):
        r"""
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputTransform_isA(p)

    @staticmethod
    def downcast(p):
        r"""
        downcast(AbstractOutput p) -> OutputTransform

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputTransform_downcast(p)

    @staticmethod
    def updDowncast(p):
        r"""
        updDowncast(AbstractOutput p) -> OutputTransform

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputTransform_updDowncast(p)

    @staticmethod
    def safeDownCast(parent):
        r"""
        safeDownCast(AbstractOutput parent) -> OutputTransform

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputTransform_safeDownCast(parent)

# Register OutputTransform in _common:
_common.OutputTransform_swigregister(OutputTransform)
class OutputVector(AbstractOutput):
    r"""Proxy of C++ OpenSim::Output< SimTK::Vector > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputVector self) -> OutputVector
        __init__(OutputVector self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vector_< double > &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputVector

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vector_< double > &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OutputVector self, OutputVector source) -> OutputVector

        Parameters
        ----------
        source: OpenSim::Output< SimTK::Vector > const &

        """
        _common.OutputVector_swiginit(self, _common.new_OutputVector(*args))
    __swig_destroy__ = _common.delete_OutputVector

    def isCompatible(self, o):
        r"""
        isCompatible(OutputVector self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputVector_isCompatible(self, o)

    def compatibleAssign(self, o):
        r"""
        compatibleAssign(OutputVector self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputVector_compatibleAssign(self, o)

    def clearChannels(self):
        r"""clearChannels(OutputVector self)"""
        return _common.OutputVector_clearChannels(self)

    def addChannel(self, channelName):
        r"""
        addChannel(OutputVector self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputVector_addChannel(self, channelName)

    def getChannel(self, name):
        r"""
        getChannel(OutputVector self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputVector_getChannel(self, name)

    def getChannels(self):
        r"""getChannels(OutputVector self) -> OpenSim::Output< SimTK::Vector_< double > >::ChannelMap const &"""
        return _common.OutputVector_getChannels(self)

    def getValue(self, state):
        r"""
        getValue(OutputVector self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputVector_getValue(self, state)

    def getTypeName(self):
        r"""getTypeName(OutputVector self) -> std::string"""
        return _common.OutputVector_getTypeName(self)

    def getValueAsString(self, state):
        r"""
        getValueAsString(OutputVector self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputVector_getValueAsString(self, state)

    def clone(self):
        r"""clone(OutputVector self) -> OutputVector"""
        return _common.OutputVector_clone(self)

    @staticmethod
    def isA(p):
        r"""
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputVector_isA(p)

    @staticmethod
    def downcast(p):
        r"""
        downcast(AbstractOutput p) -> OutputVector

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputVector_downcast(p)

    @staticmethod
    def updDowncast(p):
        r"""
        updDowncast(AbstractOutput p) -> OutputVector

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputVector_updDowncast(p)

    @staticmethod
    def safeDownCast(parent):
        r"""
        safeDownCast(AbstractOutput parent) -> OutputVector

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputVector_safeDownCast(parent)

# Register OutputVector in _common:
_common.OutputVector_swigregister(OutputVector)
class OutputSpatialVec(AbstractOutput):
    r"""Proxy of C++ OpenSim::Output< SimTK::SpatialVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(OutputSpatialVec self) -> OutputSpatialVec
        __init__(OutputSpatialVec self, std::string const & name, std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > &) > const & outputFunction, Stage dependsOnStage, bool isList) -> OutputSpatialVec

        Parameters
        ----------
        name: std::string const &
        outputFunction: std::function< void (OpenSim::Component const *,SimTK::State const &,std::string const &,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > &) > const &
        dependsOnStage: SimTK::Stage const &
        isList: bool

        __init__(OutputSpatialVec self, OutputSpatialVec source) -> OutputSpatialVec

        Parameters
        ----------
        source: OpenSim::Output< SimTK::SpatialVec > const &

        """
        _common.OutputSpatialVec_swiginit(self, _common.new_OutputSpatialVec(*args))
    __swig_destroy__ = _common.delete_OutputSpatialVec

    def isCompatible(self, o):
        r"""
        isCompatible(OutputSpatialVec self, AbstractOutput o) -> bool

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputSpatialVec_isCompatible(self, o)

    def compatibleAssign(self, o):
        r"""
        compatibleAssign(OutputSpatialVec self, AbstractOutput o)

        Parameters
        ----------
        o: OpenSim::AbstractOutput const &

        """
        return _common.OutputSpatialVec_compatibleAssign(self, o)

    def clearChannels(self):
        r"""clearChannels(OutputSpatialVec self)"""
        return _common.OutputSpatialVec_clearChannels(self)

    def addChannel(self, channelName):
        r"""
        addChannel(OutputSpatialVec self, std::string const & channelName)

        Parameters
        ----------
        channelName: std::string const &

        """
        return _common.OutputSpatialVec_addChannel(self, channelName)

    def getChannel(self, name):
        r"""
        getChannel(OutputSpatialVec self, std::string const & name) -> AbstractChannel

        Parameters
        ----------
        name: std::string const &

        """
        return _common.OutputSpatialVec_getChannel(self, name)

    def getChannels(self):
        r"""getChannels(OutputSpatialVec self) -> OpenSim::Output< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::ChannelMap const &"""
        return _common.OutputSpatialVec_getChannels(self)

    def getValue(self, state):
        r"""
        getValue(OutputSpatialVec self, State state) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputSpatialVec_getValue(self, state)

    def getTypeName(self):
        r"""getTypeName(OutputSpatialVec self) -> std::string"""
        return _common.OutputSpatialVec_getTypeName(self)

    def getValueAsString(self, state):
        r"""
        getValueAsString(OutputSpatialVec self, State state) -> std::string

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.OutputSpatialVec_getValueAsString(self, state)

    def clone(self):
        r"""clone(OutputSpatialVec self) -> OutputSpatialVec"""
        return _common.OutputSpatialVec_clone(self)

    @staticmethod
    def isA(p):
        r"""
        isA(AbstractOutput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputSpatialVec_isA(p)

    @staticmethod
    def downcast(p):
        r"""
        downcast(AbstractOutput p) -> OutputSpatialVec

        Parameters
        ----------
        p: OpenSim::AbstractOutput const &

        """
        return _common.OutputSpatialVec_downcast(p)

    @staticmethod
    def updDowncast(p):
        r"""
        updDowncast(AbstractOutput p) -> OutputSpatialVec

        Parameters
        ----------
        p: OpenSim::AbstractOutput &

        """
        return _common.OutputSpatialVec_updDowncast(p)

    @staticmethod
    def safeDownCast(parent):
        r"""
        safeDownCast(AbstractOutput parent) -> OutputSpatialVec

        Parameters
        ----------
        parent: OpenSim::AbstractOutput *

        """
        return _common.OutputSpatialVec_safeDownCast(parent)

# Register OutputSpatialVec in _common:
_common.OutputSpatialVec_swigregister(OutputSpatialVec)
class InputNotConnected(OpenSimException):
    r"""Proxy of C++ OpenSim::InputNotConnected class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, inputName):
        r"""
        __init__(InputNotConnected self, std::string const & file, size_t line, std::string const & func, std::string const & inputName) -> InputNotConnected

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        inputName: std::string const &

        """
        _common.InputNotConnected_swiginit(self, _common.new_InputNotConnected(file, line, func, inputName))
    __swig_destroy__ = _common.delete_InputNotConnected

# Register InputNotConnected in _common:
_common.InputNotConnected_swigregister(InputNotConnected)
class AbstractSocket(object):
    r"""Proxy of C++ OpenSim::AbstractSocket class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractSocket

    def clone(self):
        r"""clone(AbstractSocket self) -> AbstractSocket"""
        return _common.AbstractSocket_clone(self)

    def getName(self):
        r"""getName(AbstractSocket self) -> std::string const &"""
        return _common.AbstractSocket_getName(self)

    def getConnectAtStage(self):
        r"""getConnectAtStage(AbstractSocket self) -> Stage"""
        return _common.AbstractSocket_getConnectAtStage(self)

    def isListSocket(self):
        r"""isListSocket(AbstractSocket self) -> bool"""
        return _common.AbstractSocket_isListSocket(self)

    def getNumConnectees(self):
        r"""getNumConnectees(AbstractSocket self) -> unsigned int"""
        return _common.AbstractSocket_getNumConnectees(self)

    def isConnected(self):
        r"""isConnected(AbstractSocket self) -> bool"""
        return _common.AbstractSocket_isConnected(self)

    def getConnecteeTypeName(self):
        r"""getConnecteeTypeName(AbstractSocket self) -> std::string"""
        return _common.AbstractSocket_getConnecteeTypeName(self)

    def getConnecteeAsObject(self, index=-1):
        r"""
        getConnecteeAsObject(AbstractSocket self, int index=-1) -> OpenSimObject

        Parameters
        ----------
        index: int

        """
        return _common.AbstractSocket_getConnecteeAsObject(self, index)

    def canConnectTo(self, arg2):
        r"""
        canConnectTo(AbstractSocket self, OpenSimObject arg2) -> bool

        Parameters
        ----------
        arg2: OpenSim::Object const &

        """
        return _common.AbstractSocket_canConnectTo(self, arg2)

    def connect(self, connectee):
        r"""
        connect(AbstractSocket self, OpenSimObject connectee)

        Parameters
        ----------
        connectee: OpenSim::Object const &

        """
        return _common.AbstractSocket_connect(self, connectee)

    def findAndConnect(self, *args):
        r"""
        findAndConnect(AbstractSocket self, ComponentPath const & connectee)

        Parameters
        ----------
        connectee: ComponentPath const &

        findAndConnect(AbstractSocket self, std::string const & connectee)

        Parameters
        ----------
        connectee: std::string const &

        """
        return _common.AbstractSocket_findAndConnect(self, *args)

    def finalizeConnection(self, root):
        r"""
        finalizeConnection(AbstractSocket self, Component root)

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        return _common.AbstractSocket_finalizeConnection(self, root)

    def disconnect(self):
        r"""disconnect(AbstractSocket self)"""
        return _common.AbstractSocket_disconnect(self)

    def setConnecteePath(self, path, index=-1):
        r"""
        setConnecteePath(AbstractSocket self, std::string const & path, int index=-1)

        Parameters
        ----------
        path: std::string const &
        index: int

        """
        return _common.AbstractSocket_setConnecteePath(self, path, index)

    def getConnecteePath(self, index=-1):
        r"""
        getConnecteePath(AbstractSocket self, int index=-1) -> std::string const

        Parameters
        ----------
        index: int

        """
        return _common.AbstractSocket_getConnecteePath(self, index)

    def appendConnecteePath(self, path):
        r"""
        appendConnecteePath(AbstractSocket self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _common.AbstractSocket_appendConnecteePath(self, path)

    def assignConnecteePath(self, path):
        r"""
        assignConnecteePath(AbstractSocket self, std::string const & path)

        Parameters
        ----------
        path: std::string const &

        """
        return _common.AbstractSocket_assignConnecteePath(self, path)

    def clearConnecteePath(self):
        r"""clearConnecteePath(AbstractSocket self)"""
        return _common.AbstractSocket_clearConnecteePath(self)

    def isConnecteePathEmpty(self):
        r"""isConnecteePathEmpty(AbstractSocket self) -> bool"""
        return _common.AbstractSocket_isConnecteePathEmpty(self)

    def getOwner(self):
        r"""getOwner(AbstractSocket self) -> Component"""
        return _common.AbstractSocket_getOwner(self)

# Register AbstractSocket in _common:
_common.AbstractSocket_swigregister(AbstractSocket)
class AbstractInput(AbstractSocket):
    r"""Proxy of C++ OpenSim::AbstractInput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractInput

    def clone(self):
        r"""clone(AbstractInput self) -> AbstractInput"""
        return _common.AbstractInput_clone(self)

    def canConnectTo(self, arg2):
        r"""
        canConnectTo(AbstractInput self, OpenSimObject arg2) -> bool

        Parameters
        ----------
        arg2: OpenSim::Object const &

        """
        return _common.AbstractInput_canConnectTo(self, arg2)

    def connect(self, *args):
        r"""
        connect(AbstractInput self, OpenSimObject object)

        Parameters
        ----------
        object: OpenSim::Object const &

        connect(AbstractInput self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connect(AbstractInput self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _common.AbstractInput_connect(self, *args)

    def getAlias(self, *args):
        r"""
        getAlias(AbstractInput self) -> std::string const
        getAlias(AbstractInput self, unsigned int index) -> std::string const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.AbstractInput_getAlias(self, *args)

    def setAlias(self, *args):
        r"""
        setAlias(AbstractInput self, std::string const & alias)

        Parameters
        ----------
        alias: std::string const &

        setAlias(AbstractInput self, unsigned int index, std::string const & alias)

        Parameters
        ----------
        index: unsigned int
        alias: std::string const &

        """
        return _common.AbstractInput_setAlias(self, *args)

    def getLabel(self, *args):
        r"""
        getLabel(AbstractInput self) -> std::string
        getLabel(AbstractInput self, unsigned int index) -> std::string

        Parameters
        ----------
        index: unsigned int

        """
        return _common.AbstractInput_getLabel(self, *args)

    @staticmethod
    def parseConnecteePath(connecteePath, componentPath, outputName, channelName, alias):
        r"""
        parseConnecteePath(std::string const & connecteePath, std::string & componentPath, std::string & outputName, std::string & channelName, std::string & alias) -> bool

        Parameters
        ----------
        connecteePath: std::string const &
        componentPath: std::string &
        outputName: std::string &
        channelName: std::string &
        alias: std::string &

        """
        return _common.AbstractInput_parseConnecteePath(connecteePath, componentPath, outputName, channelName, alias)

    @staticmethod
    def composeConnecteePath(componentPath, outputName, channelName, alias):
        r"""
        composeConnecteePath(std::string const & componentPath, std::string const & outputName, std::string const & channelName, std::string const & alias) -> std::string

        Parameters
        ----------
        componentPath: std::string const &
        outputName: std::string const &
        channelName: std::string const &
        alias: std::string const &

        """
        return _common.AbstractInput_composeConnecteePath(componentPath, outputName, channelName, alias)

# Register AbstractInput in _common:
_common.AbstractInput_swigregister(AbstractInput)
class InputDouble(AbstractInput):
    r"""Proxy of C++ OpenSim::Input< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(InputDouble self) -> InputDouble"""
        return _common.InputDouble_clone(self)

    def connect(self, *args):
        r"""
        connect(InputDouble self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connect(InputDouble self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _common.InputDouble_connect(self, *args)

    def finalizeConnection(self, root):
        r"""
        finalizeConnection(InputDouble self, Component root)

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        return _common.InputDouble_finalizeConnection(self, root)

    def disconnect(self):
        r"""disconnect(InputDouble self)"""
        return _common.InputDouble_disconnect(self)

    def isConnected(self):
        r"""isConnected(InputDouble self) -> bool"""
        return _common.InputDouble_isConnected(self)

    def getValue(self, *args):
        r"""
        getValue(InputDouble self, State state) -> double const

        Parameters
        ----------
        state: SimTK::State const &

        getValue(InputDouble self, State state, unsigned int index) -> double const &

        Parameters
        ----------
        state: SimTK::State const &
        index: unsigned int

        """
        return _common.InputDouble_getValue(self, *args)

    def getChannel(self, *args):
        r"""
        getChannel(InputDouble self) -> OpenSim::Input< double >::Channel const
        getChannel(InputDouble self, unsigned int index) -> OpenSim::Input< double >::Channel const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputDouble_getChannel(self, *args)

    def getAlias(self, *args):
        r"""
        getAlias(InputDouble self) -> std::string const
        getAlias(InputDouble self, unsigned int index) -> std::string const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputDouble_getAlias(self, *args)

    def setAlias(self, *args):
        r"""
        setAlias(InputDouble self, std::string const & alias)

        Parameters
        ----------
        alias: std::string const &

        setAlias(InputDouble self, unsigned int index, std::string const & alias)

        Parameters
        ----------
        index: unsigned int
        alias: std::string const &

        """
        return _common.InputDouble_setAlias(self, *args)

    def getLabel(self, *args):
        r"""
        getLabel(InputDouble self) -> std::string
        getLabel(InputDouble self, unsigned int index) -> std::string

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputDouble_getLabel(self, *args)

    def getVector(self, state):
        r"""
        getVector(InputDouble self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.InputDouble_getVector(self, state)

    def getChannels(self):
        r"""getChannels(InputDouble self) -> OpenSim::Input< double >::ChannelList const &"""
        return _common.InputDouble_getChannels(self)

    def getConnecteeTypeName(self):
        r"""getConnecteeTypeName(InputDouble self) -> std::string"""
        return _common.InputDouble_getConnecteeTypeName(self)

    @staticmethod
    def isA(p):
        r"""
        isA(AbstractInput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractInput const &

        """
        return _common.InputDouble_isA(p)

    @staticmethod
    def downcast(p):
        r"""
        downcast(AbstractInput p) -> InputDouble

        Parameters
        ----------
        p: OpenSim::AbstractInput const &

        """
        return _common.InputDouble_downcast(p)

    @staticmethod
    def updDowncast(p):
        r"""
        updDowncast(AbstractInput p) -> InputDouble

        Parameters
        ----------
        p: OpenSim::AbstractInput &

        """
        return _common.InputDouble_updDowncast(p)

    @staticmethod
    def safeDownCast(base):
        r"""
        safeDownCast(AbstractInput base) -> InputDouble

        Parameters
        ----------
        base: OpenSim::AbstractInput *

        """
        return _common.InputDouble_safeDownCast(base)
    __swig_destroy__ = _common.delete_InputDouble

# Register InputDouble in _common:
_common.InputDouble_swigregister(InputDouble)
class InputVec3(AbstractInput):
    r"""Proxy of C++ OpenSim::Input< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(InputVec3 self) -> InputVec3"""
        return _common.InputVec3_clone(self)

    def connect(self, *args):
        r"""
        connect(InputVec3 self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connect(InputVec3 self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _common.InputVec3_connect(self, *args)

    def finalizeConnection(self, root):
        r"""
        finalizeConnection(InputVec3 self, Component root)

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        return _common.InputVec3_finalizeConnection(self, root)

    def disconnect(self):
        r"""disconnect(InputVec3 self)"""
        return _common.InputVec3_disconnect(self)

    def isConnected(self):
        r"""isConnected(InputVec3 self) -> bool"""
        return _common.InputVec3_isConnected(self)

    def getValue(self, *args):
        r"""
        getValue(InputVec3 self, State state) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &

        getValue(InputVec3 self, State state, unsigned int index) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        index: unsigned int

        """
        return _common.InputVec3_getValue(self, *args)

    def getChannel(self, *args):
        r"""
        getChannel(InputVec3 self) -> OpenSim::Input< SimTK::Vec< 3,double,1 > >::Channel const
        getChannel(InputVec3 self, unsigned int index) -> OpenSim::Input< SimTK::Vec< 3,double,1 > >::Channel const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputVec3_getChannel(self, *args)

    def getAlias(self, *args):
        r"""
        getAlias(InputVec3 self) -> std::string const
        getAlias(InputVec3 self, unsigned int index) -> std::string const &

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputVec3_getAlias(self, *args)

    def setAlias(self, *args):
        r"""
        setAlias(InputVec3 self, std::string const & alias)

        Parameters
        ----------
        alias: std::string const &

        setAlias(InputVec3 self, unsigned int index, std::string const & alias)

        Parameters
        ----------
        index: unsigned int
        alias: std::string const &

        """
        return _common.InputVec3_setAlias(self, *args)

    def getLabel(self, *args):
        r"""
        getLabel(InputVec3 self) -> std::string
        getLabel(InputVec3 self, unsigned int index) -> std::string

        Parameters
        ----------
        index: unsigned int

        """
        return _common.InputVec3_getLabel(self, *args)

    def getVector(self, state):
        r"""
        getVector(InputVec3 self, State state) -> VectorVec3

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.InputVec3_getVector(self, state)

    def getChannels(self):
        r"""getChannels(InputVec3 self) -> OpenSim::Input< SimTK::Vec< 3,double,1 > >::ChannelList const &"""
        return _common.InputVec3_getChannels(self)

    def getConnecteeTypeName(self):
        r"""getConnecteeTypeName(InputVec3 self) -> std::string"""
        return _common.InputVec3_getConnecteeTypeName(self)

    @staticmethod
    def isA(p):
        r"""
        isA(AbstractInput p) -> bool

        Parameters
        ----------
        p: OpenSim::AbstractInput const &

        """
        return _common.InputVec3_isA(p)

    @staticmethod
    def downcast(p):
        r"""
        downcast(AbstractInput p) -> InputVec3

        Parameters
        ----------
        p: OpenSim::AbstractInput const &

        """
        return _common.InputVec3_downcast(p)

    @staticmethod
    def updDowncast(p):
        r"""
        updDowncast(AbstractInput p) -> InputVec3

        Parameters
        ----------
        p: OpenSim::AbstractInput &

        """
        return _common.InputVec3_updDowncast(p)

    @staticmethod
    def safeDownCast(base):
        r"""
        safeDownCast(AbstractInput base) -> InputVec3

        Parameters
        ----------
        base: OpenSim::AbstractInput *

        """
        return _common.InputVec3_safeDownCast(base)
    __swig_destroy__ = _common.delete_InputVec3

# Register InputVec3 in _common:
_common.InputVec3_swigregister(InputVec3)
class ComponentFilter(object):
    r"""Proxy of C++ OpenSim::ComponentFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ComponentFilter

    def isMatch(self, comp):
        r"""
        isMatch(ComponentFilter self, Component comp) -> bool

        Parameters
        ----------
        comp: OpenSim::Component const &

        """
        return _common.ComponentFilter_isMatch(self, comp)

    def clone(self):
        r"""clone(ComponentFilter self) -> ComponentFilter"""
        return _common.ComponentFilter_clone(self)

# Register ComponentFilter in _common:
_common.ComponentFilter_swigregister(ComponentFilter)
class ComponentFilterMatchAll(ComponentFilter):
    r"""Proxy of C++ OpenSim::ComponentFilterMatchAll class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ComponentFilterMatchAll self) -> ComponentFilterMatchAll"""
        _common.ComponentFilterMatchAll_swiginit(self, _common.new_ComponentFilterMatchAll())

    def isMatch(self, comp):
        r"""
        isMatch(ComponentFilterMatchAll self, Component comp) -> bool

        Parameters
        ----------
        comp: OpenSim::Component const &

        """
        return _common.ComponentFilterMatchAll_isMatch(self, comp)
    __swig_destroy__ = _common.delete_ComponentFilterMatchAll

    def clone(self):
        r"""clone(ComponentFilterMatchAll self) -> ComponentFilterMatchAll"""
        return _common.ComponentFilterMatchAll_clone(self)

# Register ComponentFilterMatchAll in _common:
_common.ComponentFilterMatchAll_swigregister(ComponentFilterMatchAll)
class ComponentFilterAbsolutePathNameContainsString(ComponentFilter):
    r"""Proxy of C++ OpenSim::ComponentFilterAbsolutePathNameContainsString class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, substring):
        r"""
        __init__(ComponentFilterAbsolutePathNameContainsString self, std::string const & substring) -> ComponentFilterAbsolutePathNameContainsString

        Parameters
        ----------
        substring: std::string const &

        """
        _common.ComponentFilterAbsolutePathNameContainsString_swiginit(self, _common.new_ComponentFilterAbsolutePathNameContainsString(substring))

    def isMatch(self, comp):
        r"""
        isMatch(ComponentFilterAbsolutePathNameContainsString self, Component comp) -> bool

        Parameters
        ----------
        comp: OpenSim::Component const &

        """
        return _common.ComponentFilterAbsolutePathNameContainsString_isMatch(self, comp)

    def clone(self):
        r"""clone(ComponentFilterAbsolutePathNameContainsString self) -> ComponentFilterAbsolutePathNameContainsString"""
        return _common.ComponentFilterAbsolutePathNameContainsString_clone(self)
    __swig_destroy__ = _common.delete_ComponentFilterAbsolutePathNameContainsString

# Register ComponentFilterAbsolutePathNameContainsString in _common:
_common.ComponentFilterAbsolutePathNameContainsString_swigregister(ComponentFilterAbsolutePathNameContainsString)
class ComponentPath(object):
    r"""Proxy of C++ OpenSim::ComponentPath class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def separator():
        r"""separator() -> char"""
        return _common.ComponentPath_separator()

    @staticmethod
    def root():
        r"""root() -> ComponentPath"""
        return _common.ComponentPath_root()

    def __init__(self, *args):
        r"""
        __init__(ComponentPath self) -> ComponentPath
        __init__(ComponentPath self, std::string arg2) -> ComponentPath

        Parameters
        ----------
        arg2: std::string

        __init__(ComponentPath self, StdVectorString pathVec, bool isAbsolute) -> ComponentPath

        Parameters
        ----------
        pathVec: std::vector< std::string,std::allocator< std::string > > const &
        isAbsolute: bool

        """
        _common.ComponentPath_swiginit(self, _common.new_ComponentPath(*args))

    def clear(self):
        r"""clear(ComponentPath self)"""
        return _common.ComponentPath_clear(self)

    def getSeparator(self):
        r"""getSeparator(ComponentPath self) -> char"""
        return _common.ComponentPath_getSeparator(self)

    def getInvalidChars(self):
        r"""getInvalidChars(ComponentPath self) -> std::string const &"""
        return _common.ComponentPath_getInvalidChars(self)

    def formAbsolutePath(self, otherPath):
        r"""
        formAbsolutePath(ComponentPath self, ComponentPath otherPath) -> ComponentPath

        Parameters
        ----------
        otherPath: OpenSim::ComponentPath const &

        """
        return _common.ComponentPath_formAbsolutePath(self, otherPath)

    def formRelativePath(self, otherPath):
        r"""
        formRelativePath(ComponentPath self, ComponentPath otherPath) -> ComponentPath

        Parameters
        ----------
        otherPath: OpenSim::ComponentPath const &

        """
        return _common.ComponentPath_formRelativePath(self, otherPath)

    def getParentPath(self):
        r"""getParentPath(ComponentPath self) -> ComponentPath"""
        return _common.ComponentPath_getParentPath(self)

    def getParentPathString(self):
        r"""getParentPathString(ComponentPath self) -> std::string"""
        return _common.ComponentPath_getParentPathString(self)

    def getSubcomponentNameAtLevel(self, index):
        r"""
        getSubcomponentNameAtLevel(ComponentPath self, size_t index) -> std::string

        Parameters
        ----------
        index: size_t

        """
        return _common.ComponentPath_getSubcomponentNameAtLevel(self, index)

    def getComponentName(self):
        r"""getComponentName(ComponentPath self) -> std::string"""
        return _common.ComponentPath_getComponentName(self)

    def toString(self):
        r"""toString(ComponentPath self) -> std::string const &"""
        return _common.ComponentPath_toString(self)

    def empty(self):
        r"""empty(ComponentPath self) -> bool"""
        return _common.ComponentPath_empty(self)

    def isAbsolute(self):
        r"""isAbsolute(ComponentPath self) -> bool"""
        return _common.ComponentPath_isAbsolute(self)

    def getNumPathLevels(self):
        r"""getNumPathLevels(ComponentPath self) -> size_t"""
        return _common.ComponentPath_getNumPathLevels(self)

    def pushBack(self, pathElement):
        r"""
        pushBack(ComponentPath self, std::string const & pathElement)

        Parameters
        ----------
        pathElement: std::string const &

        """
        return _common.ComponentPath_pushBack(self, pathElement)

    def isLegalPathElement(self, pathElement):
        r"""
        isLegalPathElement(ComponentPath self, std::string const & pathElement) -> bool

        Parameters
        ----------
        pathElement: std::string const &

        """
        return _common.ComponentPath_isLegalPathElement(self, pathElement)

    def trimDotAndDotDotElements(self):
        r"""trimDotAndDotDotElements(ComponentPath self)"""
        return _common.ComponentPath_trimDotAndDotDotElements(self)
    __swig_destroy__ = _common.delete_ComponentPath

# Register ComponentPath in _common:
_common.ComponentPath_swigregister(ComponentPath)
class EmptyComponentPath(OpenSimException):
    r"""Proxy of C++ OpenSim::EmptyComponentPath class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, componentName):
        r"""
        __init__(EmptyComponentPath self, std::string const & file, size_t line, std::string const & methodName, std::string const & componentName) -> EmptyComponentPath

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        componentName: std::string const &

        """
        _common.EmptyComponentPath_swiginit(self, _common.new_EmptyComponentPath(file, line, methodName, componentName))
    __swig_destroy__ = _common.delete_EmptyComponentPath

# Register EmptyComponentPath in _common:
_common.EmptyComponentPath_swigregister(EmptyComponentPath)
class ComponentHasNoName(OpenSimException):
    r"""Proxy of C++ OpenSim::ComponentHasNoName class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, componentConcreteClassName):
        r"""
        __init__(ComponentHasNoName self, std::string const & file, size_t line, std::string const & methodName, std::string const & componentConcreteClassName) -> ComponentHasNoName

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        componentConcreteClassName: std::string const &

        """
        _common.ComponentHasNoName_swiginit(self, _common.new_ComponentHasNoName(file, line, methodName, componentConcreteClassName))
    __swig_destroy__ = _common.delete_ComponentHasNoName

# Register ComponentHasNoName in _common:
_common.ComponentHasNoName_swigregister(ComponentHasNoName)
class InvalidComponentName(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidComponentName class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, thisName, invalidChars, componentConcreteClassName):
        r"""
        __init__(InvalidComponentName self, std::string const & file, size_t line, std::string const & methodName, std::string const & thisName, std::string const & invalidChars, std::string const & componentConcreteClassName) -> InvalidComponentName

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        thisName: std::string const &
        invalidChars: std::string const &
        componentConcreteClassName: std::string const &

        """
        _common.InvalidComponentName_swiginit(self, _common.new_InvalidComponentName(file, line, methodName, thisName, invalidChars, componentConcreteClassName))
    __swig_destroy__ = _common.delete_InvalidComponentName

# Register InvalidComponentName in _common:
_common.InvalidComponentName_swigregister(InvalidComponentName)
class ComponentNotFoundOnSpecifiedPath(ComponentNotFound):
    r"""Proxy of C++ OpenSim::ComponentNotFoundOnSpecifiedPath class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, toFindName, toFindClassName, thisName):
        r"""
        __init__(ComponentNotFoundOnSpecifiedPath self, std::string const & file, size_t line, std::string const & methodName, std::string const & toFindName, std::string const & toFindClassName, std::string const & thisName) -> ComponentNotFoundOnSpecifiedPath

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        toFindName: std::string const &
        toFindClassName: std::string const &
        thisName: std::string const &

        """
        _common.ComponentNotFoundOnSpecifiedPath_swiginit(self, _common.new_ComponentNotFoundOnSpecifiedPath(file, line, methodName, toFindName, toFindClassName, thisName))
    __swig_destroy__ = _common.delete_ComponentNotFoundOnSpecifiedPath

# Register ComponentNotFoundOnSpecifiedPath in _common:
_common.ComponentNotFoundOnSpecifiedPath_swigregister(ComponentNotFoundOnSpecifiedPath)
class VariableOwnerNotFoundOnSpecifiedPath(ComponentNotFound):
    r"""Proxy of C++ OpenSim::VariableOwnerNotFoundOnSpecifiedPath class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, componentName, varName, ownerPath):
        r"""
        __init__(VariableOwnerNotFoundOnSpecifiedPath self, std::string const & file, size_t line, std::string const & methodName, std::string const & componentName, std::string const & varName, std::string const & ownerPath) -> VariableOwnerNotFoundOnSpecifiedPath

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        componentName: std::string const &
        varName: std::string const &
        ownerPath: std::string const &

        """
        _common.VariableOwnerNotFoundOnSpecifiedPath_swiginit(self, _common.new_VariableOwnerNotFoundOnSpecifiedPath(file, line, methodName, componentName, varName, ownerPath))
    __swig_destroy__ = _common.delete_VariableOwnerNotFoundOnSpecifiedPath

# Register VariableOwnerNotFoundOnSpecifiedPath in _common:
_common.VariableOwnerNotFoundOnSpecifiedPath_swigregister(VariableOwnerNotFoundOnSpecifiedPath)
class ModelingOptionMaxExceeded(OpenSimException):
    r"""Proxy of C++ OpenSim::ModelingOptionMaxExceeded class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, componentName, moName, flag, max):
        r"""
        __init__(ModelingOptionMaxExceeded self, std::string const & file, size_t line, std::string const & methodName, std::string const & componentName, std::string const & moName, int const flag, int const max) -> ModelingOptionMaxExceeded

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        componentName: std::string const &
        moName: std::string const &
        flag: int const
        max: int const

        """
        _common.ModelingOptionMaxExceeded_swiginit(self, _common.new_ModelingOptionMaxExceeded(file, line, methodName, componentName, moName, flag, max))
    __swig_destroy__ = _common.delete_ModelingOptionMaxExceeded

# Register ModelingOptionMaxExceeded in _common:
_common.ModelingOptionMaxExceeded_swigregister(ModelingOptionMaxExceeded)
class VariableNotFound(OpenSimException):
    r"""Proxy of C++ OpenSim::VariableNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, componentName, varName):
        r"""
        __init__(VariableNotFound self, std::string const & file, size_t line, std::string const & methodName, std::string const & componentName, std::string const & varName) -> VariableNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        componentName: std::string const &
        varName: std::string const &

        """
        _common.VariableNotFound_swiginit(self, _common.new_VariableNotFound(file, line, methodName, componentName, varName))
    __swig_destroy__ = _common.delete_VariableNotFound

# Register VariableNotFound in _common:
_common.VariableNotFound_swigregister(VariableNotFound)
class ComponentIsAnOrphan(OpenSimException):
    r"""Proxy of C++ OpenSim::ComponentIsAnOrphan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, thisName, componentConcreteClassName):
        r"""
        __init__(ComponentIsAnOrphan self, std::string const & file, size_t line, std::string const & methodName, std::string const & thisName, std::string const & componentConcreteClassName) -> ComponentIsAnOrphan

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        thisName: std::string const &
        componentConcreteClassName: std::string const &

        """
        _common.ComponentIsAnOrphan_swiginit(self, _common.new_ComponentIsAnOrphan(file, line, methodName, thisName, componentConcreteClassName))
    __swig_destroy__ = _common.delete_ComponentIsAnOrphan

# Register ComponentIsAnOrphan in _common:
_common.ComponentIsAnOrphan_swigregister(ComponentIsAnOrphan)
class SubcomponentsWithDuplicateName(OpenSimException):
    r"""Proxy of C++ OpenSim::SubcomponentsWithDuplicateName class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, thisName, duplicateName):
        r"""
        __init__(SubcomponentsWithDuplicateName self, std::string const & file, size_t line, std::string const & methodName, std::string const & thisName, std::string const & duplicateName) -> SubcomponentsWithDuplicateName

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        thisName: std::string const &
        duplicateName: std::string const &

        """
        _common.SubcomponentsWithDuplicateName_swiginit(self, _common.new_SubcomponentsWithDuplicateName(file, line, methodName, thisName, duplicateName))
    __swig_destroy__ = _common.delete_SubcomponentsWithDuplicateName

# Register SubcomponentsWithDuplicateName in _common:
_common.SubcomponentsWithDuplicateName_swigregister(SubcomponentsWithDuplicateName)
class ComponentIsRootWithNoSubcomponents(OpenSimException):
    r"""Proxy of C++ OpenSim::ComponentIsRootWithNoSubcomponents class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, thisName, componentConcreteClassName):
        r"""
        __init__(ComponentIsRootWithNoSubcomponents self, std::string const & file, size_t line, std::string const & methodName, std::string const & thisName, std::string const & componentConcreteClassName) -> ComponentIsRootWithNoSubcomponents

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        thisName: std::string const &
        componentConcreteClassName: std::string const &

        """
        _common.ComponentIsRootWithNoSubcomponents_swiginit(self, _common.new_ComponentIsRootWithNoSubcomponents(file, line, methodName, thisName, componentConcreteClassName))
    __swig_destroy__ = _common.delete_ComponentIsRootWithNoSubcomponents

# Register ComponentIsRootWithNoSubcomponents in _common:
_common.ComponentIsRootWithNoSubcomponents_swigregister(ComponentIsRootWithNoSubcomponents)
class ComponentAlreadyPartOfOwnershipTree(OpenSimException):
    r"""Proxy of C++ OpenSim::ComponentAlreadyPartOfOwnershipTree class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, compName, thisName):
        r"""
        __init__(ComponentAlreadyPartOfOwnershipTree self, std::string const & file, size_t line, std::string const & methodName, std::string const & compName, std::string const & thisName) -> ComponentAlreadyPartOfOwnershipTree

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        compName: std::string const &
        thisName: std::string const &

        """
        _common.ComponentAlreadyPartOfOwnershipTree_swiginit(self, _common.new_ComponentAlreadyPartOfOwnershipTree(file, line, methodName, compName, thisName))
    __swig_destroy__ = _common.delete_ComponentAlreadyPartOfOwnershipTree

# Register ComponentAlreadyPartOfOwnershipTree in _common:
_common.ComponentAlreadyPartOfOwnershipTree_swigregister(ComponentAlreadyPartOfOwnershipTree)
class ComponentHasNoSystem(OpenSimException):
    r"""Proxy of C++ OpenSim::ComponentHasNoSystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, obj):
        r"""
        __init__(ComponentHasNoSystem self, std::string const & file, size_t line, std::string const & methodName, OpenSimObject obj) -> ComponentHasNoSystem

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        obj: OpenSim::Object const &

        """
        _common.ComponentHasNoSystem_swiginit(self, _common.new_ComponentHasNoSystem(file, line, methodName, obj))
    __swig_destroy__ = _common.delete_ComponentHasNoSystem

# Register ComponentHasNoSystem in _common:
_common.ComponentHasNoSystem_swigregister(ComponentHasNoSystem)
class SocketNotFound(OpenSimException):
    r"""Proxy of C++ OpenSim::SocketNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, obj, socketName):
        r"""
        __init__(SocketNotFound self, std::string const & file, size_t line, std::string const & methodName, OpenSimObject obj, std::string const & socketName) -> SocketNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        obj: OpenSim::Object const &
        socketName: std::string const &

        """
        _common.SocketNotFound_swiginit(self, _common.new_SocketNotFound(file, line, methodName, obj, socketName))
    __swig_destroy__ = _common.delete_SocketNotFound

# Register SocketNotFound in _common:
_common.SocketNotFound_swigregister(SocketNotFound)
class InputNotFound(OpenSimException):
    r"""Proxy of C++ OpenSim::InputNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, obj, inputName):
        r"""
        __init__(InputNotFound self, std::string const & file, size_t line, std::string const & methodName, OpenSimObject obj, std::string const & inputName) -> InputNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        obj: OpenSim::Object const &
        inputName: std::string const &

        """
        _common.InputNotFound_swiginit(self, _common.new_InputNotFound(file, line, methodName, obj, inputName))
    __swig_destroy__ = _common.delete_InputNotFound

# Register InputNotFound in _common:
_common.InputNotFound_swigregister(InputNotFound)
class OutputNotFound(OpenSimException):
    r"""Proxy of C++ OpenSim::OutputNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, methodName, obj, outputName):
        r"""
        __init__(OutputNotFound self, std::string const & file, size_t line, std::string const & methodName, OpenSimObject obj, std::string const & outputName) -> OutputNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        methodName: std::string const &
        obj: OpenSim::Object const &
        outputName: std::string const &

        """
        _common.OutputNotFound_swiginit(self, _common.new_OutputNotFound(file, line, methodName, obj, outputName))
    __swig_destroy__ = _common.delete_OutputNotFound

# Register OutputNotFound in _common:
_common.OutputNotFound_swigregister(OutputNotFound)
class Component(OpenSimObject):
    r"""Proxy of C++ OpenSim::Component class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> Component

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Component_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(Component self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Component_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.Component_getClassName()

    def clone(self):
        r"""clone(Component self) -> Component"""
        return _common.Component_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(Component self) -> std::string const &"""
        return _common.Component_getConcreteClassName(self)
    __swig_destroy__ = _common.delete_Component

    def finalizeFromProperties(self):
        r"""finalizeFromProperties(Component self)"""
        return _common.Component_finalizeFromProperties(self)

    def finalizeConnections(self, root):
        r"""
        finalizeConnections(Component self, Component root)

        Parameters
        ----------
        root: OpenSim::Component &

        """
        return _common.Component_finalizeConnections(self, root)

    def clearConnections(self):
        r"""clearConnections(Component self)"""
        return _common.Component_clearConnections(self)

    def addToSystem(self, system):
        r"""
        addToSystem(Component self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _common.Component_addToSystem(self, system)

    def initStateFromProperties(self, state):
        r"""
        initStateFromProperties(Component self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _common.Component_initStateFromProperties(self, state)

    def setPropertiesFromState(self, state):
        r"""
        setPropertiesFromState(Component self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.Component_setPropertiesFromState(self, state)

    def generateDecorations(self, fixed, hints, state, appendToThis):
        r"""
        generateDecorations(Component self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _common.Component_generateDecorations(self, fixed, hints, state, appendToThis)

    def getSystem(self):
        r"""getSystem(Component self) -> SimTK::MultibodySystem const &"""
        return _common.Component_getSystem(self)

    def hasSystem(self):
        r"""hasSystem(Component self) -> bool"""
        return _common.Component_hasSystem(self)

    def isComponentInOwnershipTree(self, component):
        r"""
        isComponentInOwnershipTree(Component self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _common.Component_isComponentInOwnershipTree(self, component)

    def addComponent(self, subcomponent):
        r"""
        addComponent(Component self, Component subcomponent)

        Parameters
        ----------
        subcomponent: OpenSim::Component *

        """
        val = _common.Component_addComponent(self, subcomponent)

        subcomponent._markAdopted()


        return val


    def getAbsolutePathString(self):
        r"""getAbsolutePathString(Component self) -> std::string"""
        return _common.Component_getAbsolutePathString(self)

    def getAbsolutePath(self):
        r"""getAbsolutePath(Component self) -> ComponentPath"""
        return _common.Component_getAbsolutePath(self)

    def getRelativePathString(self, wrt):
        r"""
        getRelativePathString(Component self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _common.Component_getRelativePathString(self, wrt)

    def getRelativePath(self, wrt):
        r"""
        getRelativePath(Component self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _common.Component_getRelativePath(self, wrt)

    def hasComponent(self, pathname):
        r"""
        hasComponent(Component self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.Component_hasComponent(self, pathname)

    def getComponent(self, pathname):
        r"""
        getComponent(Component self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.Component_getComponent(self, pathname)

    def updComponent(self, pathname):
        r"""
        updComponent(Component self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.Component_updComponent(self, pathname)

    def printComponentsMatching(self, substring):
        r"""
        printComponentsMatching(Component self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _common.Component_printComponentsMatching(self, substring)

    def getNumStateVariables(self):
        r"""getNumStateVariables(Component self) -> int"""
        return _common.Component_getNumStateVariables(self)

    def getStateVariableNames(self):
        r"""getStateVariableNames(Component self) -> ArrayStr"""
        return _common.Component_getStateVariableNames(self)

    def getDiscreteVariableNames(self):
        r"""getDiscreteVariableNames(Component self) -> ArrayStr"""
        return _common.Component_getDiscreteVariableNames(self)

    def getModelingOptionNames(self):
        r"""getModelingOptionNames(Component self) -> ArrayStr"""
        return _common.Component_getModelingOptionNames(self)

    def getNumSockets(self):
        r"""getNumSockets(Component self) -> int"""
        return _common.Component_getNumSockets(self)

    def getSocketNames(self):
        r"""getSocketNames(Component self) -> StdVectorString"""
        return _common.Component_getSocketNames(self)

    def getConnectee(self, *args):
        r"""
        getConnectee(Component self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        getConnectee(Component self, std::string const & name, int index) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &
        index: int

        """
        return _common.Component_getConnectee(self, *args)

    def tryGetSocket(self, name):
        r"""
        tryGetSocket(Component self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_tryGetSocket(self, name)

    def getSocket(self, name):
        r"""
        getSocket(Component self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_getSocket(self, name)

    def tryUpdSocket(self, name):
        r"""
        tryUpdSocket(Component self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_tryUpdSocket(self, name)

    def updSocket(self, name):
        r"""
        updSocket(Component self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_updSocket(self, name)

    def getNumInputs(self):
        r"""getNumInputs(Component self) -> int"""
        return _common.Component_getNumInputs(self)

    def getNumOutputs(self):
        r"""getNumOutputs(Component self) -> int"""
        return _common.Component_getNumOutputs(self)

    def getInputNames(self):
        r"""getInputNames(Component self) -> StdVectorString"""
        return _common.Component_getInputNames(self)

    def getOutputNames(self):
        r"""getOutputNames(Component self) -> StdVectorString"""
        return _common.Component_getOutputNames(self)

    def getInput(self, name):
        r"""
        getInput(Component self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_getInput(self, name)

    def updInput(self, name):
        r"""
        updInput(Component self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_updInput(self, name)

    def tryGetOutput(self, name):
        r"""
        tryGetOutput(Component self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_tryGetOutput(self, name)

    def getOutput(self, name):
        r"""
        getOutput(Component self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_getOutput(self, name)

    def tryUpdOutput(self, name):
        r"""
        tryUpdOutput(Component self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_tryUpdOutput(self, name)

    def updOutput(self, name):
        r"""
        updOutput(Component self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_updOutput(self, name)

    def getModelingOption(self, *args):
        r"""
        getModelingOption(Component self, State state, std::string const & path) -> int

        Parameters
        ----------
        state: SimTK::State const &
        path: std::string const &

        getModelingOption(Component self, State state, ComponentPath path) -> int

        Parameters
        ----------
        state: SimTK::State const &
        path: OpenSim::ComponentPath const &

        """
        return _common.Component_getModelingOption(self, *args)

    def setModelingOption(self, *args):
        r"""
        setModelingOption(Component self, State state, std::string const & path, int flag)

        Parameters
        ----------
        state: SimTK::State &
        path: std::string const &
        flag: int

        setModelingOption(Component self, State state, ComponentPath path, int flag)

        Parameters
        ----------
        state: SimTK::State &
        path: OpenSim::ComponentPath const &
        flag: int

        """
        return _common.Component_setModelingOption(self, *args)

    def getStateVariableValue(self, *args):
        r"""
        getStateVariableValue(Component self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        getStateVariableValue(Component self, State state, ComponentPath path) -> double

        Parameters
        ----------
        state: SimTK::State const &
        path: OpenSim::ComponentPath const &

        """
        return _common.Component_getStateVariableValue(self, *args)

    def setStateVariableValue(self, state, name, value):
        r"""
        setStateVariableValue(Component self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _common.Component_setStateVariableValue(self, state, name, value)

    def getStateVariableValues(self, state):
        r"""
        getStateVariableValues(Component self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.Component_getStateVariableValues(self, state)

    def setStateVariableValues(self, state, values):
        r"""
        setStateVariableValues(Component self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _common.Component_setStateVariableValues(self, state, values)

    def getStateVariableDerivativeValue(self, *args):
        r"""
        getStateVariableDerivativeValue(Component self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        getStateVariableDerivativeValue(Component self, State state, ComponentPath path) -> double

        Parameters
        ----------
        state: SimTK::State const &
        path: OpenSim::ComponentPath const &

        """
        return _common.Component_getStateVariableDerivativeValue(self, *args)

    def resolveVariableNameAndOwner(self, path, varName):
        r"""
        resolveVariableNameAndOwner(Component self, ComponentPath path, std::string & varName) -> Component

        Parameters
        ----------
        path: OpenSim::ComponentPath const &
        varName: std::string &

        """
        return _common.Component_resolveVariableNameAndOwner(self, path, varName)

    def getDiscreteVariableValue(self, state, path):
        r"""
        getDiscreteVariableValue(Component self, State state, std::string const & path) -> double

        Parameters
        ----------
        state: SimTK::State const &
        path: std::string const &

        """
        return _common.Component_getDiscreteVariableValue(self, state, path)

    def getDiscreteVariableAbstractValue(self, state, path):
        r"""
        getDiscreteVariableAbstractValue(Component self, State state, std::string const & path) -> SimTK::AbstractValue const &

        Parameters
        ----------
        state: SimTK::State const &
        path: std::string const &

        """
        return _common.Component_getDiscreteVariableAbstractValue(self, state, path)

    def setDiscreteVariableValue(self, state, path, value):
        r"""
        setDiscreteVariableValue(Component self, State state, std::string const & path, double value)

        Parameters
        ----------
        state: SimTK::State &
        path: std::string const &
        value: double

        """
        return _common.Component_setDiscreteVariableValue(self, state, path, value)

    def updDiscreteVariableAbstractValue(self, state, path):
        r"""
        updDiscreteVariableAbstractValue(Component self, State state, std::string const & path) -> SimTK::AbstractValue &

        Parameters
        ----------
        state: SimTK::State &
        path: std::string const &

        """
        return _common.Component_updDiscreteVariableAbstractValue(self, state, path)

    def getCacheVariableIndex(self, name):
        r"""
        getCacheVariableIndex(Component self, std::string const & name) -> SimTK::CacheEntryIndex

        Parameters
        ----------
        name: std::string const &

        """
        return _common.Component_getCacheVariableIndex(self, name)

    def isCacheVariableValid(self, state, name):
        r"""
        isCacheVariableValid(Component self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_isCacheVariableValid(self, state, name)

    def markCacheVariableValid(self, state, name):
        r"""
        markCacheVariableValid(Component self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_markCacheVariableValid(self, state, name)

    def markCacheVariableInvalid(self, state, name):
        r"""
        markCacheVariableInvalid(Component self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.Component_markCacheVariableInvalid(self, state, name)

    def printSubcomponentInfo(self):
        r"""printSubcomponentInfo(Component self)"""
        return _common.Component_printSubcomponentInfo(self)

    def printSocketInfo(self):
        r"""printSocketInfo(Component self)"""
        return _common.Component_printSocketInfo(self)

    def printInputInfo(self):
        r"""printInputInfo(Component self)"""
        return _common.Component_printInputInfo(self)

    def printOutputInfo(self, includeDescendants=True):
        r"""
        printOutputInfo(Component self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        """
        return _common.Component_printOutputInfo(self, includeDescendants)

    def getOwner(self):
        r"""getOwner(Component self) -> Component"""
        return _common.Component_getOwner(self)

    def hasOwner(self):
        r"""hasOwner(Component self) -> bool"""
        return _common.Component_hasOwner(self)

    def getRoot(self):
        r"""getRoot(Component self) -> Component"""
        return _common.Component_getRoot(self)

    def findComponent(self, *args):
        r"""
        findComponent(Component self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(Component self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _common.Component_findComponent(self, *args)

    def getComponentsList(self):
        r"""getComponentsList(Component self) -> ComponentsList"""
        return _common.Component_getComponentsList(self)

# Register Component in _common:
_common.Component_swigregister(Component)
class ConnecteeNotSpecified(OpenSimException):
    r"""Proxy of C++ OpenSim::ConnecteeNotSpecified class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, socket, owner):
        r"""
        __init__(ConnecteeNotSpecified self, std::string const & file, size_t line, std::string const & func, AbstractSocket socket, Component owner) -> ConnecteeNotSpecified

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        socket: OpenSim::AbstractSocket const &
        owner: OpenSim::Component const &

        """
        _common.ConnecteeNotSpecified_swiginit(self, _common.new_ConnecteeNotSpecified(file, line, func, socket, owner))
    __swig_destroy__ = _common.delete_ConnecteeNotSpecified

# Register ConnecteeNotSpecified in _common:
_common.ConnecteeNotSpecified_swigregister(ConnecteeNotSpecified)
class ComponentsList(object):
    r"""Proxy of C++ OpenSim::ComponentList< OpenSim::Component const > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ComponentsList self, Component root, ComponentFilter f) -> ComponentsList

        Parameters
        ----------
        root: OpenSim::Component const &
        f: OpenSim::ComponentFilter const &

        __init__(ComponentsList self, Component root) -> ComponentsList

        Parameters
        ----------
        root: OpenSim::Component const &

        """
        _common.ComponentsList_swiginit(self, _common.new_ComponentsList(*args))
    __swig_destroy__ = _common.delete_ComponentsList

    def begin(self, *args):
        r"""
        begin(ComponentsList self) -> ComponentIterator
        begin(ComponentsList self) -> OpenSim::ComponentList< OpenSim::Component const >::const_iterator
        """
        return _common.ComponentsList_begin(self, *args)

    def cbegin(self):
        r"""cbegin(ComponentsList self) -> OpenSim::ComponentList< OpenSim::Component const >::const_iterator"""
        return _common.ComponentsList_cbegin(self)

    def end(self, *args):
        r"""
        end(ComponentsList self) -> ComponentIterator
        end(ComponentsList self) -> OpenSim::ComponentList< OpenSim::Component const >::const_iterator
        """
        return _common.ComponentsList_end(self, *args)

    def cend(self):
        r"""cend(ComponentsList self) -> OpenSim::ComponentList< OpenSim::Component const >::const_iterator"""
        return _common.ComponentsList_cend(self)

    def setFilter(self, filter):
        r"""
        setFilter(ComponentsList self, ComponentFilter filter)

        Parameters
        ----------
        filter: OpenSim::ComponentFilter const &

        """
        return _common.ComponentsList_setFilter(self, filter)


    def __iter__(self):
        """Get an iterator for this ComponentList, to be used as such::

            for c in model.getComponentsList():
                c.getName()
        """
        import sys
        opensim_pkg = sys.modules[__name__.partition('.')[0]]
        it = self.begin()
        while it != self.end():
            component = it.__deref__()
            try:
                ConcreteClass = getattr(opensim_pkg, component.getConcreteClassName())
                concrete_component = ConcreteClass.safeDownCast(component)
                yield concrete_component 
            except:
                yield component
            it.next()


# Register ComponentsList in _common:
_common.ComponentsList_swigregister(ComponentsList)
class ComponentIterator(object):
    r"""Proxy of C++ OpenSim::ComponentListIterator< OpenSim::Component const > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def equals(self, other):
        r"""
        equals(ComponentIterator self, ComponentIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Component const > const &

        """
        return _common.ComponentIterator_equals(self, other)

    def __eq__(self, other):
        r"""
        __eq__(ComponentIterator self, ComponentIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Component const > const &

        """
        return _common.ComponentIterator___eq__(self, other)

    def __ne__(self, other):
        r"""
        __ne__(ComponentIterator self, ComponentIterator other) -> bool

        Parameters
        ----------
        other: OpenSim::ComponentListIterator< OpenSim::Component const > const &

        """
        return _common.ComponentIterator___ne__(self, other)

    def __ref__(self):
        r"""__ref__(ComponentIterator self) -> Component"""
        return _common.ComponentIterator___ref__(self)

    def deref(self):
        r"""deref(ComponentIterator self) -> Component"""
        return _common.ComponentIterator_deref(self)

    def __deref__(self):
        r"""__deref__(ComponentIterator self) -> Component"""
        return _common.ComponentIterator___deref__(self)

    def next(self):
        r"""next(ComponentIterator self) -> ComponentIterator"""
        return _common.ComponentIterator_next(self)
    __swig_destroy__ = _common.delete_ComponentIterator

    def clone(self):
        r"""clone(ComponentIterator self) -> Component"""
        return _common.ComponentIterator_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ComponentIterator self) -> std::string const &"""
        return _common.ComponentIterator_getConcreteClassName(self)

    def addToSystem(self, system):
        r"""
        addToSystem(ComponentIterator self, SimTK::MultibodySystem & system)

        Parameters
        ----------
        system: SimTK::MultibodySystem &

        """
        return _common.ComponentIterator_addToSystem(self, system)

    def initStateFromProperties(self, state):
        r"""
        initStateFromProperties(ComponentIterator self, State state)

        Parameters
        ----------
        state: SimTK::State &

        """
        return _common.ComponentIterator_initStateFromProperties(self, state)

    def generateDecorations(self, fixed, hints, state, appendToThis):
        r"""
        generateDecorations(ComponentIterator self, bool fixed, ModelDisplayHints hints, State state, ArrayDecorativeGeometry appendToThis)

        Parameters
        ----------
        fixed: bool
        hints: OpenSim::ModelDisplayHints const &
        state: SimTK::State const &
        appendToThis: SimTK::Array_< SimTK::DecorativeGeometry,unsigned int > &

        """
        return _common.ComponentIterator_generateDecorations(self, fixed, hints, state, appendToThis)

    def getSystem(self):
        r"""getSystem(ComponentIterator self) -> SimTK::MultibodySystem const &"""
        return _common.ComponentIterator_getSystem(self)

    def hasSystem(self):
        r"""hasSystem(ComponentIterator self) -> bool"""
        return _common.ComponentIterator_hasSystem(self)

    def isComponentInOwnershipTree(self, component):
        r"""
        isComponentInOwnershipTree(ComponentIterator self, Component component) -> bool

        Parameters
        ----------
        component: OpenSim::Component const *

        """
        return _common.ComponentIterator_isComponentInOwnershipTree(self, component)

    def getAbsolutePathString(self):
        r"""getAbsolutePathString(ComponentIterator self) -> std::string"""
        return _common.ComponentIterator_getAbsolutePathString(self)

    def getAbsolutePath(self):
        r"""getAbsolutePath(ComponentIterator self) -> ComponentPath"""
        return _common.ComponentIterator_getAbsolutePath(self)

    def getRelativePathString(self, wrt):
        r"""
        getRelativePathString(ComponentIterator self, Component wrt) -> std::string

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _common.ComponentIterator_getRelativePathString(self, wrt)

    def getRelativePath(self, wrt):
        r"""
        getRelativePath(ComponentIterator self, Component wrt) -> ComponentPath

        Parameters
        ----------
        wrt: OpenSim::Component const &

        """
        return _common.ComponentIterator_getRelativePath(self, wrt)

    def hasComponent(self, pathname):
        r"""
        hasComponent(ComponentIterator self, std::string const & pathname) -> bool

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.ComponentIterator_hasComponent(self, pathname)

    def getComponent(self, pathname):
        r"""
        getComponent(ComponentIterator self, std::string const & pathname) -> Component

        Parameters
        ----------
        pathname: std::string const &

        """
        return _common.ComponentIterator_getComponent(self, pathname)

    def printComponentsMatching(self, substring):
        r"""
        printComponentsMatching(ComponentIterator self, std::string const & substring) -> unsigned int

        Parameters
        ----------
        substring: std::string const &

        """
        return _common.ComponentIterator_printComponentsMatching(self, substring)

    def getNumStateVariables(self):
        r"""getNumStateVariables(ComponentIterator self) -> int"""
        return _common.ComponentIterator_getNumStateVariables(self)

    def getStateVariableNames(self):
        r"""getStateVariableNames(ComponentIterator self) -> ArrayStr"""
        return _common.ComponentIterator_getStateVariableNames(self)

    def getDiscreteVariableNames(self):
        r"""getDiscreteVariableNames(ComponentIterator self) -> ArrayStr"""
        return _common.ComponentIterator_getDiscreteVariableNames(self)

    def getModelingOptionNames(self):
        r"""getModelingOptionNames(ComponentIterator self) -> ArrayStr"""
        return _common.ComponentIterator_getModelingOptionNames(self)

    def getNumSockets(self):
        r"""getNumSockets(ComponentIterator self) -> int"""
        return _common.ComponentIterator_getNumSockets(self)

    def getSocketNames(self):
        r"""getSocketNames(ComponentIterator self) -> StdVectorString"""
        return _common.ComponentIterator_getSocketNames(self)

    def getConnectee(self, *args):
        r"""
        getConnectee(ComponentIterator self, std::string const & name) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &

        getConnectee(ComponentIterator self, std::string const & name, int index) -> OpenSimObject

        Parameters
        ----------
        name: std::string const &
        index: int

        """
        return _common.ComponentIterator_getConnectee(self, *args)

    def tryGetSocket(self, name):
        r"""
        tryGetSocket(ComponentIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_tryGetSocket(self, name)

    def getSocket(self, name):
        r"""
        getSocket(ComponentIterator self, std::string const & name) -> AbstractSocket

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getSocket(self, name)

    def getNumInputs(self):
        r"""getNumInputs(ComponentIterator self) -> int"""
        return _common.ComponentIterator_getNumInputs(self)

    def getNumOutputs(self):
        r"""getNumOutputs(ComponentIterator self) -> int"""
        return _common.ComponentIterator_getNumOutputs(self)

    def getInputNames(self):
        r"""getInputNames(ComponentIterator self) -> StdVectorString"""
        return _common.ComponentIterator_getInputNames(self)

    def getOutputNames(self):
        r"""getOutputNames(ComponentIterator self) -> StdVectorString"""
        return _common.ComponentIterator_getOutputNames(self)

    def getInput(self, name):
        r"""
        getInput(ComponentIterator self, std::string const & name) -> AbstractInput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getInput(self, name)

    def tryGetOutput(self, name):
        r"""
        tryGetOutput(ComponentIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_tryGetOutput(self, name)

    def getOutput(self, name):
        r"""
        getOutput(ComponentIterator self, std::string const & name) -> AbstractOutput

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getOutput(self, name)

    def getModelingOption(self, *args):
        r"""
        getModelingOption(ComponentIterator self, State state, std::string const & path) -> int

        Parameters
        ----------
        state: SimTK::State const &
        path: std::string const &

        getModelingOption(ComponentIterator self, State state, ComponentPath path) -> int

        Parameters
        ----------
        state: SimTK::State const &
        path: OpenSim::ComponentPath const &

        """
        return _common.ComponentIterator_getModelingOption(self, *args)

    def setModelingOption(self, *args):
        r"""
        setModelingOption(ComponentIterator self, State state, std::string const & path, int flag)

        Parameters
        ----------
        state: SimTK::State &
        path: std::string const &
        flag: int

        setModelingOption(ComponentIterator self, State state, ComponentPath path, int flag)

        Parameters
        ----------
        state: SimTK::State &
        path: OpenSim::ComponentPath const &
        flag: int

        """
        return _common.ComponentIterator_setModelingOption(self, *args)

    def getStateVariableValue(self, *args):
        r"""
        getStateVariableValue(ComponentIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        getStateVariableValue(ComponentIterator self, State state, ComponentPath path) -> double

        Parameters
        ----------
        state: SimTK::State const &
        path: OpenSim::ComponentPath const &

        """
        return _common.ComponentIterator_getStateVariableValue(self, *args)

    def setStateVariableValue(self, state, name, value):
        r"""
        setStateVariableValue(ComponentIterator self, State state, std::string const & name, double value)

        Parameters
        ----------
        state: SimTK::State &
        name: std::string const &
        value: double

        """
        return _common.ComponentIterator_setStateVariableValue(self, state, name, value)

    def getStateVariableValues(self, state):
        r"""
        getStateVariableValues(ComponentIterator self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _common.ComponentIterator_getStateVariableValues(self, state)

    def setStateVariableValues(self, state, values):
        r"""
        setStateVariableValues(ComponentIterator self, State state, Vector values)

        Parameters
        ----------
        state: SimTK::State &
        values: SimTK::Vector const &

        """
        return _common.ComponentIterator_setStateVariableValues(self, state, values)

    def getStateVariableDerivativeValue(self, *args):
        r"""
        getStateVariableDerivativeValue(ComponentIterator self, State state, std::string const & name) -> double

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        getStateVariableDerivativeValue(ComponentIterator self, State state, ComponentPath path) -> double

        Parameters
        ----------
        state: SimTK::State const &
        path: OpenSim::ComponentPath const &

        """
        return _common.ComponentIterator_getStateVariableDerivativeValue(self, *args)

    def resolveVariableNameAndOwner(self, path, varName):
        r"""
        resolveVariableNameAndOwner(ComponentIterator self, ComponentPath path, std::string & varName) -> Component

        Parameters
        ----------
        path: OpenSim::ComponentPath const &
        varName: std::string &

        """
        return _common.ComponentIterator_resolveVariableNameAndOwner(self, path, varName)

    def getDiscreteVariableValue(self, state, path):
        r"""
        getDiscreteVariableValue(ComponentIterator self, State state, std::string const & path) -> double

        Parameters
        ----------
        state: SimTK::State const &
        path: std::string const &

        """
        return _common.ComponentIterator_getDiscreteVariableValue(self, state, path)

    def getDiscreteVariableAbstractValue(self, state, path):
        r"""
        getDiscreteVariableAbstractValue(ComponentIterator self, State state, std::string const & path) -> SimTK::AbstractValue const &

        Parameters
        ----------
        state: SimTK::State const &
        path: std::string const &

        """
        return _common.ComponentIterator_getDiscreteVariableAbstractValue(self, state, path)

    def setDiscreteVariableValue(self, state, path, value):
        r"""
        setDiscreteVariableValue(ComponentIterator self, State state, std::string const & path, double value)

        Parameters
        ----------
        state: SimTK::State &
        path: std::string const &
        value: double

        """
        return _common.ComponentIterator_setDiscreteVariableValue(self, state, path, value)

    def updDiscreteVariableAbstractValue(self, state, path):
        r"""
        updDiscreteVariableAbstractValue(ComponentIterator self, State state, std::string const & path) -> SimTK::AbstractValue &

        Parameters
        ----------
        state: SimTK::State &
        path: std::string const &

        """
        return _common.ComponentIterator_updDiscreteVariableAbstractValue(self, state, path)

    def getCacheVariableIndex(self, name):
        r"""
        getCacheVariableIndex(ComponentIterator self, std::string const & name) -> SimTK::CacheEntryIndex

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getCacheVariableIndex(self, name)

    def isCacheVariableValid(self, state, name):
        r"""
        isCacheVariableValid(ComponentIterator self, State state, std::string const & name) -> bool

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_isCacheVariableValid(self, state, name)

    def markCacheVariableValid(self, state, name):
        r"""
        markCacheVariableValid(ComponentIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_markCacheVariableValid(self, state, name)

    def markCacheVariableInvalid(self, state, name):
        r"""
        markCacheVariableInvalid(ComponentIterator self, State state, std::string const & name)

        Parameters
        ----------
        state: SimTK::State const &
        name: std::string const &

        """
        return _common.ComponentIterator_markCacheVariableInvalid(self, state, name)

    def printSubcomponentInfo(self):
        r"""printSubcomponentInfo(ComponentIterator self)"""
        return _common.ComponentIterator_printSubcomponentInfo(self)

    def printSocketInfo(self):
        r"""printSocketInfo(ComponentIterator self)"""
        return _common.ComponentIterator_printSocketInfo(self)

    def printInputInfo(self):
        r"""printInputInfo(ComponentIterator self)"""
        return _common.ComponentIterator_printInputInfo(self)

    def printOutputInfo(self, includeDescendants=True):
        r"""
        printOutputInfo(ComponentIterator self, bool const includeDescendants=True)

        Parameters
        ----------
        includeDescendants: bool const

        """
        return _common.ComponentIterator_printOutputInfo(self, includeDescendants)

    def getOwner(self):
        r"""getOwner(ComponentIterator self) -> Component"""
        return _common.ComponentIterator_getOwner(self)

    def hasOwner(self):
        r"""hasOwner(ComponentIterator self) -> bool"""
        return _common.ComponentIterator_hasOwner(self)

    def getRoot(self):
        r"""getRoot(ComponentIterator self) -> Component"""
        return _common.ComponentIterator_getRoot(self)

    def findComponent(self, *args):
        r"""
        findComponent(ComponentIterator self, ComponentPath pathToFind) -> Component

        Parameters
        ----------
        pathToFind: OpenSim::ComponentPath const &

        findComponent(ComponentIterator self, std::string const & pathToFind) -> Component

        Parameters
        ----------
        pathToFind: std::string const &

        """
        return _common.ComponentIterator_findComponent(self, *args)

    def getComponentsList(self):
        r"""getComponentsList(ComponentIterator self) -> ComponentsList"""
        return _common.ComponentIterator_getComponentsList(self)

    def isEqualTo(self, aObject):
        r"""
        isEqualTo(ComponentIterator self, OpenSimObject aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Object const &

        """
        return _common.ComponentIterator_isEqualTo(self, aObject)

    def getName(self):
        r"""getName(ComponentIterator self) -> std::string const &"""
        return _common.ComponentIterator_getName(self)

    def getDescription(self):
        r"""getDescription(ComponentIterator self) -> std::string const &"""
        return _common.ComponentIterator_getDescription(self)

    def getAuthors(self):
        r"""getAuthors(ComponentIterator self) -> std::string const &"""
        return _common.ComponentIterator_getAuthors(self)

    def getReferences(self):
        r"""getReferences(ComponentIterator self) -> std::string const &"""
        return _common.ComponentIterator_getReferences(self)

    def getNumProperties(self):
        r"""getNumProperties(ComponentIterator self) -> int"""
        return _common.ComponentIterator_getNumProperties(self)

    def getPropertyByIndex(self, propertyIndex):
        r"""
        getPropertyByIndex(ComponentIterator self, int propertyIndex) -> AbstractProperty

        Parameters
        ----------
        propertyIndex: int

        """
        return _common.ComponentIterator_getPropertyByIndex(self, propertyIndex)

    def hasProperty(self, name):
        r"""
        hasProperty(ComponentIterator self, std::string const & name) -> bool

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_hasProperty(self, name)

    def getPropertyByName(self, name):
        r"""
        getPropertyByName(ComponentIterator self, std::string const & name) -> AbstractProperty

        Parameters
        ----------
        name: std::string const &

        """
        return _common.ComponentIterator_getPropertyByName(self, name)

    def isObjectUpToDateWithProperties(self):
        r"""isObjectUpToDateWithProperties(ComponentIterator self) -> bool"""
        return _common.ComponentIterator_isObjectUpToDateWithProperties(self)

    def updateXMLNode(self, parent, prop=None):
        r"""
        updateXMLNode(ComponentIterator self, SimTK::Xml::Element & parent, AbstractProperty prop=None)

        Parameters
        ----------
        parent: SimTK::Xml::Element &
        prop: OpenSim::AbstractProperty const *

        """
        return _common.ComponentIterator_updateXMLNode(self, parent, prop)

    def getInlined(self):
        r"""getInlined(ComponentIterator self) -> bool"""
        return _common.ComponentIterator_getInlined(self)

    def getDocumentFileName(self):
        r"""getDocumentFileName(ComponentIterator self) -> std::string"""
        return _common.ComponentIterator_getDocumentFileName(self)

    def getDocumentFileVersion(self):
        r"""getDocumentFileVersion(ComponentIterator self) -> int"""
        return _common.ComponentIterator_getDocumentFileVersion(self)

    def printToXML(self, fileName):
        r"""
        printToXML(ComponentIterator self, std::string const & fileName) -> bool

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.ComponentIterator_printToXML(self, fileName)

    def dump(self):
        r"""dump(ComponentIterator self) -> std::string"""
        return _common.ComponentIterator_dump(self)

    def isA(self, type):
        r"""
        isA(ComponentIterator self, char const * type) -> bool

        Parameters
        ----------
        type: char const *

        """
        return _common.ComponentIterator_isA(self, type)

    def toString(self):
        r"""toString(ComponentIterator self) -> std::string const &"""
        return _common.ComponentIterator_toString(self)

# Register ComponentIterator in _common:
_common.ComponentIterator_swigregister(ComponentIterator)
class Scale(OpenSimObject):
    r"""Proxy of C++ OpenSim::Scale class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> Scale

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.Scale_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(Scale self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.Scale_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.Scale_getClassName()

    def clone(self):
        r"""clone(Scale self) -> Scale"""
        return _common.Scale_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(Scale self) -> std::string const &"""
        return _common.Scale_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(Scale self) -> Scale
        __init__(Scale self, Scale aMarker) -> Scale

        Parameters
        ----------
        aMarker: OpenSim::Scale const &

        __init__(Scale self, std::string const & scaleFileName) -> Scale

        Parameters
        ----------
        scaleFileName: std::string const &

        """
        _common.Scale_swiginit(self, _common.new_Scale(*args))
    __swig_destroy__ = _common.delete_Scale

    def getSegmentName(self):
        r"""getSegmentName(Scale self) -> std::string const &"""
        return _common.Scale_getSegmentName(self)

    def setSegmentName(self, aSegmentName):
        r"""
        setSegmentName(Scale self, std::string const & aSegmentName)

        Parameters
        ----------
        aSegmentName: std::string const &

        """
        return _common.Scale_setSegmentName(self, aSegmentName)

    def getScaleFactors(self, *args):
        r"""
        getScaleFactors(Scale self, Vec3 aScaleFactors)

        Parameters
        ----------
        aScaleFactors: SimTK::Vec3 &

        getScaleFactors(Scale self) -> Vec3
        """
        return _common.Scale_getScaleFactors(self, *args)

    def setScaleFactors(self, aScaleFactors):
        r"""
        setScaleFactors(Scale self, Vec3 aScaleFactors)

        Parameters
        ----------
        aScaleFactors: SimTK::Vec3 const &

        """
        return _common.Scale_setScaleFactors(self, aScaleFactors)

    def getApply(self):
        r"""getApply(Scale self) -> bool"""
        return _common.Scale_getApply(self)

    def setApply(self, state):
        r"""
        setApply(Scale self, bool state)

        Parameters
        ----------
        state: bool

        """
        return _common.Scale_setApply(self, state)

# Register Scale in _common:
_common.Scale_swigregister(Scale)
class SetScales(OpenSimObject):
    r"""Proxy of C++ OpenSim::Set< OpenSim::Scale,OpenSim::Object > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> SetScales

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.SetScales_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(SetScales self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.SetScales_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.SetScales_getClassName()

    def clone(self):
        r"""clone(SetScales self) -> SetScales"""
        return _common.SetScales_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(SetScales self) -> std::string const &"""
        return _common.SetScales_getConcreteClassName(self)
    __swig_destroy__ = _common.delete_SetScales

    def __init__(self, *args):
        r"""
        __init__(SetScales self) -> SetScales
        __init__(SetScales self, std::string const & aFileName, bool aUpdateFromXMLNode=True) -> SetScales

        Parameters
        ----------
        aFileName: std::string const &
        aUpdateFromXMLNode: bool

        __init__(SetScales self, SetScales aSet) -> SetScales

        Parameters
        ----------
        aSet: OpenSim::Set< OpenSim::Scale,OpenSim::Object > const &

        """
        _common.SetScales_swiginit(self, _common.new_SetScales(*args))

    def setupGroups(self):
        r"""setupGroups(SetScales self)"""
        return _common.SetScales_setupGroups(self)

    def setMemoryOwner(self, aTrueFalse):
        r"""
        setMemoryOwner(SetScales self, bool aTrueFalse)

        Parameters
        ----------
        aTrueFalse: bool

        """
        return _common.SetScales_setMemoryOwner(self, aTrueFalse)

    def setSize(self, aSize):
        r"""
        setSize(SetScales self, int aSize) -> bool

        Parameters
        ----------
        aSize: int

        """
        return _common.SetScales_setSize(self, aSize)

    def getSize(self):
        r"""getSize(SetScales self) -> int"""
        return _common.SetScales_getSize(self)

    def getIndex(self, *args):
        r"""
        getIndex(SetScales self, Scale aObject, int aStartIndex=0) -> int

        Parameters
        ----------
        aObject: OpenSim::Scale const *
        aStartIndex: int

        getIndex(SetScales self, std::string const & aName, int aStartIndex=0) -> int

        Parameters
        ----------
        aName: std::string const &
        aStartIndex: int

        """
        return _common.SetScales_getIndex(self, *args)

    def getGroupNamesContaining(self, aObjectName, rGroupNames):
        r"""
        getGroupNamesContaining(SetScales self, std::string const & aObjectName, ArrayStr rGroupNames)

        Parameters
        ----------
        aObjectName: std::string const &
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.SetScales_getGroupNamesContaining(self, aObjectName, rGroupNames)

    def adoptAndAppend(self, aObject):
        r"""
        adoptAndAppend(SetScales self, Scale aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Scale *

        """
        return _common.SetScales_adoptAndAppend(self, aObject)

    def cloneAndAppend(self, aObject):
        r"""
        cloneAndAppend(SetScales self, Scale aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Scale const &

        """
        return _common.SetScales_cloneAndAppend(self, aObject)

    def insert(self, aIndex, aObject):
        r"""
        insert(SetScales self, int aIndex, Scale aObject) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Scale *

        """
        return _common.SetScales_insert(self, aIndex, aObject)

    def remove(self, *args):
        r"""
        remove(SetScales self, int aIndex) -> bool

        Parameters
        ----------
        aIndex: int

        remove(SetScales self, Scale aObject) -> bool

        Parameters
        ----------
        aObject: OpenSim::Scale const *

        """
        return _common.SetScales_remove(self, *args)

    def clearAndDestroy(self):
        r"""clearAndDestroy(SetScales self)"""
        return _common.SetScales_clearAndDestroy(self)

    def set(self, aIndex, aObject, preserveGroups=False):
        r"""
        set(SetScales self, int aIndex, Scale aObject, bool preserveGroups=False) -> bool

        Parameters
        ----------
        aIndex: int
        aObject: OpenSim::Scale *
        preserveGroups: bool

        """
        return _common.SetScales_set(self, aIndex, aObject, preserveGroups)

    def get(self, *args):
        r"""
        get(SetScales self, int aIndex) -> Scale

        Parameters
        ----------
        aIndex: int

        get(SetScales self, std::string const & aName) -> Scale

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetScales_get(self, *args)

    def contains(self, aName):
        r"""
        contains(SetScales self, std::string const & aName) -> bool

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.SetScales_contains(self, aName)

    def getNames(self, rNames):
        r"""
        getNames(SetScales self, ArrayStr rNames)

        Parameters
        ----------
        rNames: OpenSim::Array< std::string > &

        """
        return _common.SetScales_getNames(self, rNames)

    def getNumGroups(self):
        r"""getNumGroups(SetScales self) -> int"""
        return _common.SetScales_getNumGroups(self)

    def addGroup(self, aGroupName):
        r"""
        addGroup(SetScales self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.SetScales_addGroup(self, aGroupName)

    def removeGroup(self, aGroupName):
        r"""
        removeGroup(SetScales self, std::string const & aGroupName)

        Parameters
        ----------
        aGroupName: std::string const &

        """
        return _common.SetScales_removeGroup(self, aGroupName)

    def renameGroup(self, oldGroupName, newGroupName):
        r"""
        renameGroup(SetScales self, std::string const & oldGroupName, std::string const & newGroupName)

        Parameters
        ----------
        oldGroupName: std::string const &
        newGroupName: std::string const &

        """
        return _common.SetScales_renameGroup(self, oldGroupName, newGroupName)

    def addObjectToGroup(self, aGroupName, aObjectName):
        r"""
        addObjectToGroup(SetScales self, std::string const & aGroupName, std::string const & aObjectName)

        Parameters
        ----------
        aGroupName: std::string const &
        aObjectName: std::string const &

        """
        return _common.SetScales_addObjectToGroup(self, aGroupName, aObjectName)

    def getGroupNames(self, rGroupNames):
        r"""
        getGroupNames(SetScales self, ArrayStr rGroupNames)

        Parameters
        ----------
        rGroupNames: OpenSim::Array< std::string > &

        """
        return _common.SetScales_getGroupNames(self, rGroupNames)

    def getGroup(self, *args):
        r"""
        getGroup(SetScales self, std::string const & aGroupName) -> ObjectGroup

        Parameters
        ----------
        aGroupName: std::string const &

        getGroup(SetScales self, int aIndex) -> ObjectGroup

        Parameters
        ----------
        aIndex: int

        """
        return _common.SetScales_getGroup(self, *args)

    class SetIterator(object):
        """
        Use this object to iterate over a Set. You create an instance of
        this nested class by calling Set.__iter__().
        """
        def __init__(self, set_obj, index):
            """Construct an iterator for the Set `set`."""
            self._set_obj = set_obj
            self._index = index
        def __iter__(self):
            """This iterator is also iterable."""
            return self
        def next(self):
            if self._index < self._set_obj.getSize():
                current_index = self._index
                self._index += 1
                return self._set_obj.get(current_index)
            else:
    # This is how Python knows to stop iterating.
                 raise StopIteration()
        __next__ = next # For Python 3.

    def __iter__(self):
        """Get an iterator for this Set, starting at index 0."""
        return self.SetIterator(self, 0)

    def items(self):
        """
        A generator function that allows you to iterate over the key-value
        pairs of this Set. You can use this in a for-loop as such::

            for key, val in my_function_set.items():
    # `val` is an item in the Set, and `key` is its name.
                print key, val
        """
        index = 0
        while index < self.getSize():
            yield self.get(index).getName(), self.get(index)
            index += 1


# Register SetScales in _common:
_common.SetScales_swigregister(SetScales)
class ScaleSet(SetScales):
    r"""Proxy of C++ OpenSim::ScaleSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ScaleSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ScaleSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ScaleSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ScaleSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ScaleSet_getClassName()

    def clone(self):
        r"""clone(ScaleSet self) -> ScaleSet"""
        return _common.ScaleSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ScaleSet self) -> std::string const &"""
        return _common.ScaleSet_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(ScaleSet self) -> ScaleSet
        __init__(ScaleSet self, std::string const & scalesFileName) -> ScaleSet

        Parameters
        ----------
        scalesFileName: std::string const &

        """
        _common.ScaleSet_swiginit(self, _common.new_ScaleSet(*args))
    __swig_destroy__ = _common.delete_ScaleSet

    def adoptAndAppend(self, aScale):
        aScale._markAdopted()
        return super(ScaleSet, self).adoptAndAppend(aScale)


# Register ScaleSet in _common:
_common.ScaleSet_swigregister(ScaleSet)
class MarkerFrame(OpenSimObject):
    r"""Proxy of C++ OpenSim::MarkerFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MarkerFrame

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.MarkerFrame_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MarkerFrame self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.MarkerFrame_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.MarkerFrame_getClassName()

    def clone(self):
        r"""clone(MarkerFrame self) -> MarkerFrame"""
        return _common.MarkerFrame_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MarkerFrame self) -> std::string const &"""
        return _common.MarkerFrame_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MarkerFrame self) -> MarkerFrame
        __init__(MarkerFrame self, int aNumMarkers, int aFrameNumber, double aTime, Units aUnits) -> MarkerFrame

        Parameters
        ----------
        aNumMarkers: int
        aFrameNumber: int
        aTime: double
        aUnits: OpenSim::Units &

        """
        _common.MarkerFrame_swiginit(self, _common.new_MarkerFrame(*args))
    __swig_destroy__ = _common.delete_MarkerFrame

    def addMarker(self, aCoords):
        r"""
        addMarker(MarkerFrame self, Vec3 aCoords)

        Parameters
        ----------
        aCoords: SimTK::Vec3 const &

        """
        return _common.MarkerFrame_addMarker(self, aCoords)

    def getMarker(self, aIndex):
        r"""
        getMarker(MarkerFrame self, int aIndex) -> Vec3

        Parameters
        ----------
        aIndex: int

        """
        return _common.MarkerFrame_getMarker(self, aIndex)

    def updMarker(self, aIndex):
        r"""
        updMarker(MarkerFrame self, int aIndex) -> Vec3

        Parameters
        ----------
        aIndex: int

        """
        return _common.MarkerFrame_updMarker(self, aIndex)

    def getFrameNumber(self):
        r"""getFrameNumber(MarkerFrame self) -> int"""
        return _common.MarkerFrame_getFrameNumber(self)

    def setFrameNumber(self, aNumber):
        r"""
        setFrameNumber(MarkerFrame self, int aNumber)

        Parameters
        ----------
        aNumber: int

        """
        return _common.MarkerFrame_setFrameNumber(self, aNumber)

    def getFrameTime(self):
        r"""getFrameTime(MarkerFrame self) -> double"""
        return _common.MarkerFrame_getFrameTime(self)

    def scale(self, aScaleFactor):
        r"""
        scale(MarkerFrame self, double aScaleFactor)

        Parameters
        ----------
        aScaleFactor: double

        """
        return _common.MarkerFrame_scale(self, aScaleFactor)

    def getMarkers(self):
        r"""getMarkers(MarkerFrame self) -> SimTKArrayVec3"""
        return _common.MarkerFrame_getMarkers(self)

# Register MarkerFrame in _common:
_common.MarkerFrame_swigregister(MarkerFrame)
class MarkerData(OpenSimObject):
    r"""Proxy of C++ OpenSim::MarkerData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> MarkerData

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.MarkerData_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(MarkerData self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.MarkerData_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.MarkerData_getClassName()

    def clone(self):
        r"""clone(MarkerData self) -> MarkerData"""
        return _common.MarkerData_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(MarkerData self) -> std::string const &"""
        return _common.MarkerData_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(MarkerData self) -> MarkerData
        __init__(MarkerData self, std::string const & aFileName) -> MarkerData

        Parameters
        ----------
        aFileName: std::string const &

        """
        _common.MarkerData_swiginit(self, _common.new_MarkerData(*args))
    __swig_destroy__ = _common.delete_MarkerData

    def findFrameRange(self, aStartTime, aEndTime, rStartFrame, rEndFrame):
        r"""
        findFrameRange(MarkerData self, double aStartTime, double aEndTime, int & rStartFrame, int & rEndFrame)

        Parameters
        ----------
        aStartTime: double
        aEndTime: double
        rStartFrame: int &
        rEndFrame: int &

        """
        return _common.MarkerData_findFrameRange(self, aStartTime, aEndTime, rStartFrame, rEndFrame)

    def averageFrames(self, *args):
        r"""
        averageFrames(MarkerData self, double aThreshold=-1.0, double aStartTime=-SimTK::Infinity, double aEndTime=SimTK::Infinity)

        Parameters
        ----------
        aThreshold: double
        aStartTime: double
        aEndTime: double

        """
        return _common.MarkerData_averageFrames(self, *args)

    def getFileName(self):
        r"""getFileName(MarkerData self) -> std::string const &"""
        return _common.MarkerData_getFileName(self)

    def makeRdStorage(self, rStorage):
        r"""
        makeRdStorage(MarkerData self, Storage rStorage)

        Parameters
        ----------
        rStorage: OpenSim::Storage &

        """
        return _common.MarkerData_makeRdStorage(self, rStorage)

    def getFrame(self, aIndex):
        r"""
        getFrame(MarkerData self, int aIndex) -> MarkerFrame

        Parameters
        ----------
        aIndex: int

        """
        return _common.MarkerData_getFrame(self, aIndex)

    def getMarkerIndex(self, aName):
        r"""
        getMarkerIndex(MarkerData self, std::string const & aName) -> int

        Parameters
        ----------
        aName: std::string const &

        """
        return _common.MarkerData_getMarkerIndex(self, aName)

    def getUnits(self):
        r"""getUnits(MarkerData self) -> Units"""
        return _common.MarkerData_getUnits(self)

    def convertToUnits(self, aUnits):
        r"""
        convertToUnits(MarkerData self, Units aUnits)

        Parameters
        ----------
        aUnits: OpenSim::Units const &

        """
        return _common.MarkerData_convertToUnits(self, aUnits)

    def getMarkerNames(self):
        r"""getMarkerNames(MarkerData self) -> ArrayStr"""
        return _common.MarkerData_getMarkerNames(self)

    def getNumMarkers(self):
        r"""getNumMarkers(MarkerData self) -> int"""
        return _common.MarkerData_getNumMarkers(self)

    def getNumFrames(self):
        r"""getNumFrames(MarkerData self) -> int"""
        return _common.MarkerData_getNumFrames(self)

    def getStartFrameTime(self):
        r"""getStartFrameTime(MarkerData self) -> double"""
        return _common.MarkerData_getStartFrameTime(self)

    def getLastFrameTime(self):
        r"""getLastFrameTime(MarkerData self) -> double"""
        return _common.MarkerData_getLastFrameTime(self)

    def getDataRate(self):
        r"""getDataRate(MarkerData self) -> double"""
        return _common.MarkerData_getDataRate(self)

    def getCameraRate(self):
        r"""getCameraRate(MarkerData self) -> double"""
        return _common.MarkerData_getCameraRate(self)

# Register MarkerData in _common:
_common.MarkerData_swigregister(MarkerData)
class StdVectorMatrix(object):
    r"""Proxy of C++ std::vector< SimTK::Matrix_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdVectorMatrix self) -> SwigPyIterator"""
        return _common.StdVectorMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdVectorMatrix self) -> bool"""
        return _common.StdVectorMatrix___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdVectorMatrix self) -> bool"""
        return _common.StdVectorMatrix___bool__(self)

    def __len__(self):
        r"""__len__(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::size_type"""
        return _common.StdVectorMatrix___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, std::vector< SimTK::Matrix_< double > >::difference_type j) -> StdVectorMatrix

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        j: std::vector< SimTK::Matrix_< double > >::difference_type

        """
        return _common.StdVectorMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, std::vector< SimTK::Matrix_< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        j: std::vector< SimTK::Matrix_< double > >::difference_type

        __setslice__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, std::vector< SimTK::Matrix_< double > >::difference_type j, StdVectorMatrix v)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        j: std::vector< SimTK::Matrix_< double > >::difference_type
        v: std::vector< SimTK::Matrix_< double >,std::allocator< SimTK::Matrix_< double > > > const &

        """
        return _common.StdVectorMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, std::vector< SimTK::Matrix_< double > >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        j: std::vector< SimTK::Matrix_< double > >::difference_type

        """
        return _common.StdVectorMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type

        __delitem__(StdVectorMatrix self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _common.StdVectorMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StdVectorMatrix self, SWIGPY_SLICEOBJECT * slice) -> StdVectorMatrix

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i) -> Matrix

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type

        """
        return _common.StdVectorMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdVectorMatrix self, SWIGPY_SLICEOBJECT * slice, StdVectorMatrix v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< SimTK::Matrix_< double >,std::allocator< SimTK::Matrix_< double > > > const &

        __setitem__(StdVectorMatrix self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::difference_type i, Matrix x)

        Parameters
        ----------
        i: std::vector< SimTK::Matrix_< double > >::difference_type
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix___setitem__(self, *args)

    def pop(self):
        r"""pop(StdVectorMatrix self) -> Matrix"""
        return _common.StdVectorMatrix_pop(self)

    def append(self, x):
        r"""
        append(StdVectorMatrix self, Matrix x)

        Parameters
        ----------
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_append(self, x)

    def empty(self):
        r"""empty(StdVectorMatrix self) -> bool"""
        return _common.StdVectorMatrix_empty(self)

    def size(self):
        r"""size(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::size_type"""
        return _common.StdVectorMatrix_size(self)

    def swap(self, v):
        r"""
        swap(StdVectorMatrix self, StdVectorMatrix v)

        Parameters
        ----------
        v: std::vector< SimTK::Matrix_< double > > &

        """
        return _common.StdVectorMatrix_swap(self, v)

    def begin(self):
        r"""begin(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::iterator"""
        return _common.StdVectorMatrix_begin(self)

    def end(self):
        r"""end(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::iterator"""
        return _common.StdVectorMatrix_end(self)

    def rbegin(self):
        r"""rbegin(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::reverse_iterator"""
        return _common.StdVectorMatrix_rbegin(self)

    def rend(self):
        r"""rend(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::reverse_iterator"""
        return _common.StdVectorMatrix_rend(self)

    def clear(self):
        r"""clear(StdVectorMatrix self)"""
        return _common.StdVectorMatrix_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::allocator_type"""
        return _common.StdVectorMatrix_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StdVectorMatrix self)"""
        return _common.StdVectorMatrix_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::iterator pos) -> std::vector< SimTK::Matrix_< double > >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::Matrix_< double > >::iterator

        erase(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::iterator first, std::vector< SimTK::Matrix_< double > >::iterator last) -> std::vector< SimTK::Matrix_< double > >::iterator

        Parameters
        ----------
        first: std::vector< SimTK::Matrix_< double > >::iterator
        last: std::vector< SimTK::Matrix_< double > >::iterator

        """
        return _common.StdVectorMatrix_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StdVectorMatrix self) -> StdVectorMatrix
        __init__(StdVectorMatrix self, StdVectorMatrix other) -> StdVectorMatrix

        Parameters
        ----------
        other: std::vector< SimTK::Matrix_< double > > const &

        __init__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type size) -> StdVectorMatrix

        Parameters
        ----------
        size: std::vector< SimTK::Matrix_< double > >::size_type

        __init__(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type size, Matrix value) -> StdVectorMatrix

        Parameters
        ----------
        size: std::vector< SimTK::Matrix_< double > >::size_type
        value: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        _common.StdVectorMatrix_swiginit(self, _common.new_StdVectorMatrix(*args))

    def push_back(self, x):
        r"""
        push_back(StdVectorMatrix self, Matrix x)

        Parameters
        ----------
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_push_back(self, x)

    def front(self):
        r"""front(StdVectorMatrix self) -> Matrix"""
        return _common.StdVectorMatrix_front(self)

    def back(self):
        r"""back(StdVectorMatrix self) -> Matrix"""
        return _common.StdVectorMatrix_back(self)

    def assign(self, n, x):
        r"""
        assign(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type n, Matrix x)

        Parameters
        ----------
        n: std::vector< SimTK::Matrix_< double > >::size_type
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< SimTK::Matrix_< double > >::size_type

        resize(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type new_size, Matrix x)

        Parameters
        ----------
        new_size: std::vector< SimTK::Matrix_< double > >::size_type
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::iterator pos, Matrix x) -> std::vector< SimTK::Matrix_< double > >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::Matrix_< double > >::iterator
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        insert(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::iterator pos, std::vector< SimTK::Matrix_< double > >::size_type n, Matrix x)

        Parameters
        ----------
        pos: std::vector< SimTK::Matrix_< double > >::iterator
        n: std::vector< SimTK::Matrix_< double > >::size_type
        x: std::vector< SimTK::Matrix_< double > >::value_type const &

        """
        return _common.StdVectorMatrix_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StdVectorMatrix self, std::vector< SimTK::Matrix_< double > >::size_type n)

        Parameters
        ----------
        n: std::vector< SimTK::Matrix_< double > >::size_type

        """
        return _common.StdVectorMatrix_reserve(self, n)

    def capacity(self):
        r"""capacity(StdVectorMatrix self) -> std::vector< SimTK::Matrix_< double > >::size_type"""
        return _common.StdVectorMatrix_capacity(self)
    __swig_destroy__ = _common.delete_StdVectorMatrix

# Register StdVectorMatrix in _common:
_common.StdVectorMatrix_swigregister(StdVectorMatrix)
class InvalidRow(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidRow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InvalidRow self) -> InvalidRow"""
        _common.InvalidRow_swiginit(self, _common.new_InvalidRow())
    __swig_destroy__ = _common.delete_InvalidRow

# Register InvalidRow in _common:
_common.InvalidRow_swigregister(InvalidRow)
class InvalidColumn(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidColumn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InvalidColumn self) -> InvalidColumn"""
        _common.InvalidColumn_swiginit(self, _common.new_InvalidColumn())
    __swig_destroy__ = _common.delete_InvalidColumn

# Register InvalidColumn in _common:
_common.InvalidColumn_swigregister(InvalidColumn)
class InvalidColumnLabel(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidColumnLabel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InvalidColumnLabel self) -> InvalidColumnLabel"""
        _common.InvalidColumnLabel_swiginit(self, _common.new_InvalidColumnLabel())
    __swig_destroy__ = _common.delete_InvalidColumnLabel

# Register InvalidColumnLabel in _common:
_common.InvalidColumnLabel_swigregister(InvalidColumnLabel)
class IncorrectNumColumns(InvalidRow):
    r"""Proxy of C++ OpenSim::IncorrectNumColumns class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, expected, received):
        r"""
        __init__(IncorrectNumColumns self, std::string const & file, size_t line, std::string const & func, size_t expected, size_t received) -> IncorrectNumColumns

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        expected: size_t
        received: size_t

        """
        _common.IncorrectNumColumns_swiginit(self, _common.new_IncorrectNumColumns(file, line, func, expected, received))
    __swig_destroy__ = _common.delete_IncorrectNumColumns

# Register IncorrectNumColumns in _common:
_common.IncorrectNumColumns_swigregister(IncorrectNumColumns)
class IncorrectNumRows(InvalidColumn):
    r"""Proxy of C++ OpenSim::IncorrectNumRows class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, expected, received):
        r"""
        __init__(IncorrectNumRows self, std::string const & file, size_t line, std::string const & func, size_t expected, size_t received) -> IncorrectNumRows

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        expected: size_t
        received: size_t

        """
        _common.IncorrectNumRows_swiginit(self, _common.new_IncorrectNumRows(file, line, func, expected, received))
    __swig_destroy__ = _common.delete_IncorrectNumRows

# Register IncorrectNumRows in _common:
_common.IncorrectNumRows_swigregister(IncorrectNumRows)
class RowIndexOutOfRange(IndexOutOfRange):
    r"""Proxy of C++ OpenSim::RowIndexOutOfRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_RowIndexOutOfRange

# Register RowIndexOutOfRange in _common:
_common.RowIndexOutOfRange_swigregister(RowIndexOutOfRange)
class ColumnIndexOutOfRange(IndexOutOfRange):
    r"""Proxy of C++ OpenSim::ColumnIndexOutOfRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_ColumnIndexOutOfRange

# Register ColumnIndexOutOfRange in _common:
_common.ColumnIndexOutOfRange_swigregister(ColumnIndexOutOfRange)
class MissingMetaData(OpenSimException):
    r"""Proxy of C++ OpenSim::MissingMetaData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        r"""
        __init__(MissingMetaData self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> MissingMetaData

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        _common.MissingMetaData_swiginit(self, _common.new_MissingMetaData(file, line, func, key))
    __swig_destroy__ = _common.delete_MissingMetaData

# Register MissingMetaData in _common:
_common.MissingMetaData_swigregister(MissingMetaData)
class NoColumnLabels(OpenSimException):
    r"""Proxy of C++ OpenSim::NoColumnLabels class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        r"""
        __init__(NoColumnLabels self, std::string const & file, size_t line, std::string const & func) -> NoColumnLabels

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        _common.NoColumnLabels_swiginit(self, _common.new_NoColumnLabels(file, line, func))
    __swig_destroy__ = _common.delete_NoColumnLabels

# Register NoColumnLabels in _common:
_common.NoColumnLabels_swigregister(NoColumnLabels)
class IncorrectMetaDataLength(OpenSimException):
    r"""Proxy of C++ OpenSim::IncorrectMetaDataLength class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key, expected, received):
        r"""
        __init__(IncorrectMetaDataLength self, std::string const & file, size_t line, std::string const & func, std::string const & key, size_t expected, size_t received) -> IncorrectMetaDataLength

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &
        expected: size_t
        received: size_t

        """
        _common.IncorrectMetaDataLength_swiginit(self, _common.new_IncorrectMetaDataLength(file, line, func, key, expected, received))
    __swig_destroy__ = _common.delete_IncorrectMetaDataLength

# Register IncorrectMetaDataLength in _common:
_common.IncorrectMetaDataLength_swigregister(IncorrectMetaDataLength)
class EmptyTable(OpenSimException):
    r"""Proxy of C++ OpenSim::EmptyTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        r"""
        __init__(EmptyTable self, std::string const & file, size_t line, std::string const & func) -> EmptyTable

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        _common.EmptyTable_swiginit(self, _common.new_EmptyTable(file, line, func))
    __swig_destroy__ = _common.delete_EmptyTable

# Register EmptyTable in _common:
_common.EmptyTable_swigregister(EmptyTable)
class KeyExists(OpenSimException):
    r"""Proxy of C++ OpenSim::KeyExists class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        r"""
        __init__(KeyExists self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> KeyExists

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        _common.KeyExists_swiginit(self, _common.new_KeyExists(file, line, func, key))
    __swig_destroy__ = _common.delete_KeyExists

# Register KeyExists in _common:
_common.KeyExists_swigregister(KeyExists)
class AbstractDataTable(object):
    r"""Proxy of C++ OpenSim::AbstractDataTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_AbstractDataTable

    def numComponentsPerElement(self):
        r"""numComponentsPerElement(AbstractDataTable self) -> unsigned int"""
        return _common.AbstractDataTable_numComponentsPerElement(self)

    def getNumRows(self):
        r"""getNumRows(AbstractDataTable self) -> size_t"""
        return _common.AbstractDataTable_getNumRows(self)

    def getNumColumns(self):
        r"""getNumColumns(AbstractDataTable self) -> size_t"""
        return _common.AbstractDataTable_getNumColumns(self)

    def hasTableMetaDataKey(self, key):
        r"""
        hasTableMetaDataKey(AbstractDataTable self, std::string const & key) -> bool

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_hasTableMetaDataKey(self, key)

    def getTableMetaDataAsString(self, key):
        r"""
        getTableMetaDataAsString(AbstractDataTable self, std::string const & key) -> std::string

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getTableMetaDataAsString(self, key)

    def removeTableMetaDataKey(self, key):
        r"""
        removeTableMetaDataKey(AbstractDataTable self, std::string const & key)

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_removeTableMetaDataKey(self, key)

    def getTableMetaDataKeys(self):
        r"""getTableMetaDataKeys(AbstractDataTable self) -> StdVectorString"""
        return _common.AbstractDataTable_getTableMetaDataKeys(self)

    def removeDependentsMetaDataForKey(self, key):
        r"""
        removeDependentsMetaDataForKey(AbstractDataTable self, std::string const & key)

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_removeDependentsMetaDataForKey(self, key)

    def hasColumnLabels(self):
        r"""hasColumnLabels(AbstractDataTable self) -> bool"""
        return _common.AbstractDataTable_hasColumnLabels(self)

    def getColumnLabels(self):
        r"""getColumnLabels(AbstractDataTable self) -> StdVectorString"""
        return _common.AbstractDataTable_getColumnLabels(self)

    def getColumnLabel(self, columnIndex):
        r"""
        getColumnLabel(AbstractDataTable self, size_t const columnIndex) -> std::string const &

        Parameters
        ----------
        columnIndex: size_t const

        """
        return _common.AbstractDataTable_getColumnLabel(self, columnIndex)

    def setColumnLabel(self, columnIndex, columnLabel):
        r"""
        setColumnLabel(AbstractDataTable self, size_t const columnIndex, std::string const & columnLabel)

        Parameters
        ----------
        columnIndex: size_t const
        columnLabel: std::string const &

        """
        return _common.AbstractDataTable_setColumnLabel(self, columnIndex, columnLabel)

    def getColumnIndex(self, columnLabel):
        r"""
        getColumnIndex(AbstractDataTable self, std::string const & columnLabel) -> size_t

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.AbstractDataTable_getColumnIndex(self, columnLabel)

    def hasColumn(self, *args):
        r"""
        hasColumn(AbstractDataTable self, std::string const & columnLabel) -> bool

        Parameters
        ----------
        columnLabel: std::string const &

        hasColumn(AbstractDataTable self, size_t const columnIndex) -> bool

        Parameters
        ----------
        columnIndex: size_t const

        """
        return _common.AbstractDataTable_hasColumn(self, *args)

    def setColumnLabels(self, columnLabels):
        r"""
        setColumnLabels(AbstractDataTable self, StdVectorString columnLabels)

        Parameters
        ----------
        columnLabels: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.AbstractDataTable_setColumnLabels(self, columnLabels)

    def addTableMetaDataString(self, key, value):
        r"""
        addTableMetaDataString(AbstractDataTable self, std::string const & key, std::string const & value)

        Parameters
        ----------
        key: std::string const &
        value: std::string const &

        """
        return _common.AbstractDataTable_addTableMetaDataString(self, key, value)

    def getTableMetaDataVectorMatrix(self, key):
        r"""
        getTableMetaDataVectorMatrix(AbstractDataTable self, std::string const & key) -> StdVectorMatrix

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getTableMetaDataVectorMatrix(self, key)

    def getTableMetaDataVectorUnsigned(self, key):
        r"""
        getTableMetaDataVectorUnsigned(AbstractDataTable self, std::string const & key) -> StdVectorUnsigned

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getTableMetaDataVectorUnsigned(self, key)

    def getTableMetaDataString(self, key):
        r"""
        getTableMetaDataString(AbstractDataTable self, std::string const & key) -> std::string

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getTableMetaDataString(self, key)

    def getDependentsMetaDataString(self, key):
        r"""
        getDependentsMetaDataString(AbstractDataTable self, std::string const & key) -> StdVectorString

        Parameters
        ----------
        key: std::string const &

        """
        return _common.AbstractDataTable_getDependentsMetaDataString(self, key)

# Register AbstractDataTable in _common:
_common.AbstractDataTable_swigregister(AbstractDataTable)
class InvalidTable(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidTable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InvalidTable self) -> InvalidTable"""
        _common.InvalidTable_swiginit(self, _common.new_InvalidTable())
    __swig_destroy__ = _common.delete_InvalidTable

# Register InvalidTable in _common:
_common.InvalidTable_swigregister(InvalidTable)
class TimeColumnNotIncreasing(InvalidTable):
    r"""Proxy of C++ OpenSim::TimeColumnNotIncreasing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        r"""
        __init__(TimeColumnNotIncreasing self, std::string const & file, size_t line, std::string const & func) -> TimeColumnNotIncreasing

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        _common.TimeColumnNotIncreasing_swiginit(self, _common.new_TimeColumnNotIncreasing(file, line, func))
    __swig_destroy__ = _common.delete_TimeColumnNotIncreasing

# Register TimeColumnNotIncreasing in _common:
_common.TimeColumnNotIncreasing_swigregister(TimeColumnNotIncreasing)
class InvalidTimestamp(InvalidRow):
    r"""Proxy of C++ OpenSim::InvalidTimestamp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(InvalidTimestamp self) -> InvalidTimestamp"""
        _common.InvalidTimestamp_swiginit(self, _common.new_InvalidTimestamp())
    __swig_destroy__ = _common.delete_InvalidTimestamp

# Register InvalidTimestamp in _common:
_common.InvalidTimestamp_swigregister(InvalidTimestamp)
class TimestampLessThanEqualToPrevious(InvalidTimestamp):
    r"""Proxy of C++ OpenSim::TimestampLessThanEqualToPrevious class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, rowIndex, new_timestamp, prev_timestamp):
        r"""
        __init__(TimestampLessThanEqualToPrevious self, std::string const & file, size_t line, std::string const & func, size_t rowIndex, double new_timestamp, double prev_timestamp) -> TimestampLessThanEqualToPrevious

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        rowIndex: size_t
        new_timestamp: double
        prev_timestamp: double

        """
        _common.TimestampLessThanEqualToPrevious_swiginit(self, _common.new_TimestampLessThanEqualToPrevious(file, line, func, rowIndex, new_timestamp, prev_timestamp))
    __swig_destroy__ = _common.delete_TimestampLessThanEqualToPrevious

# Register TimestampLessThanEqualToPrevious in _common:
_common.TimestampLessThanEqualToPrevious_swigregister(TimestampLessThanEqualToPrevious)
class TimestampGreaterThanEqualToNext(InvalidTimestamp):
    r"""Proxy of C++ OpenSim::TimestampGreaterThanEqualToNext class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, rowIndex, new_timestamp, next_timestamp):
        r"""
        __init__(TimestampGreaterThanEqualToNext self, std::string const & file, size_t line, std::string const & func, size_t rowIndex, double new_timestamp, double next_timestamp) -> TimestampGreaterThanEqualToNext

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        rowIndex: size_t
        new_timestamp: double
        next_timestamp: double

        """
        _common.TimestampGreaterThanEqualToNext_swiginit(self, _common.new_TimestampGreaterThanEqualToNext(file, line, func, rowIndex, new_timestamp, next_timestamp))
    __swig_destroy__ = _common.delete_TimestampGreaterThanEqualToNext

# Register TimestampGreaterThanEqualToNext in _common:
_common.TimestampGreaterThanEqualToNext_swigregister(TimestampGreaterThanEqualToNext)
class TimeOutOfRange(OpenSimException):
    r"""Proxy of C++ OpenSim::TimeOutOfRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, time, min, max):
        r"""
        __init__(TimeOutOfRange self, std::string const & file, size_t line, std::string const & func, double const time, double const min, double const max) -> TimeOutOfRange

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        time: double const
        min: double const
        max: double const

        """
        _common.TimeOutOfRange_swiginit(self, _common.new_TimeOutOfRange(file, line, func, time, min, max))
    __swig_destroy__ = _common.delete_TimeOutOfRange

# Register TimeOutOfRange in _common:
_common.TimeOutOfRange_swigregister(TimeOutOfRange)
class InvalidTimeRange(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidTimeRange class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, begTime, endTime):
        r"""
        __init__(InvalidTimeRange self, std::string const & file, size_t line, std::string const & func, double const begTime, double const endTime) -> InvalidTimeRange

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        begTime: double const
        endTime: double const

        """
        _common.InvalidTimeRange_swiginit(self, _common.new_InvalidTimeRange(file, line, func, begTime, endTime))
    __swig_destroy__ = _common.delete_InvalidTimeRange

# Register InvalidTimeRange in _common:
_common.InvalidTimeRange_swigregister(InvalidTimeRange)
class InvalidIndices(OpenSimException):
    r"""Proxy of C++ OpenSim::InvalidIndices class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, index, min, max):
        r"""
        __init__(InvalidIndices self, std::string const & file, size_t line, std::string const & func, size_t const index, size_t const min, size_t const max) -> InvalidIndices

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        index: size_t const
        min: size_t const
        max: size_t const

        """
        _common.InvalidIndices_swiginit(self, _common.new_InvalidIndices(file, line, func, index, min, max))
    __swig_destroy__ = _common.delete_InvalidIndices

# Register InvalidIndices in _common:
_common.InvalidIndices_swigregister(InvalidIndices)
class TableUtilities(object):
    r"""Proxy of C++ OpenSim::TableUtilities class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def checkNonUniqueLabels(labels):
        r"""
        checkNonUniqueLabels(StdVectorString labels)

        Parameters
        ----------
        labels: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TableUtilities_checkNonUniqueLabels(labels)

    @staticmethod
    def isInDegrees(table):
        r"""
        isInDegrees(TimeSeriesTable table) -> bool

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &

        """
        return _common.TableUtilities_isInDegrees(table)

    @staticmethod
    def findStateLabelIndex(*args):
        r"""
        findStateLabelIndex(ArrayStr labels, std::string const & desired) -> int

        Parameters
        ----------
        labels: OpenSim::Array< std::string > const &
        desired: std::string const &

        findStateLabelIndex(StdVectorString labels, std::string const & desired) -> int

        Parameters
        ----------
        labels: std::vector< std::string,std::allocator< std::string > > const &
        desired: std::string const &

        """
        return _common.TableUtilities_findStateLabelIndex(*args)

    @staticmethod
    def filterLowpass(table, cutoffFreq, padData=False):
        r"""
        filterLowpass(TimeSeriesTable table, double cutoffFreq, bool padData=False)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable &
        cutoffFreq: double
        padData: bool

        """
        return _common.TableUtilities_filterLowpass(table, cutoffFreq, padData)

    @staticmethod
    def pad(table, numRowsToPrependAndAppend):
        r"""
        pad(TimeSeriesTable table, int numRowsToPrependAndAppend)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable &
        numRowsToPrependAndAppend: int

        """
        return _common.TableUtilities_pad(table, numRowsToPrependAndAppend)

    @staticmethod
    def convertRotationsToEulerAngles(rotTable):
        r"""
        convertRotationsToEulerAngles(OpenSim::TimeSeriesTable_< SimTK::Rotation > const & rotTable) -> TimeSeriesTableVec3

        Parameters
        ----------
        rotTable: OpenSim::TimeSeriesTable_< SimTK::Rotation > const &

        """
        return _common.TableUtilities_convertRotationsToEulerAngles(rotTable)

    def __init__(self):
        r"""__init__(TableUtilities self) -> TableUtilities"""
        _common.TableUtilities_swiginit(self, _common.new_TableUtilities())
    __swig_destroy__ = _common.delete_TableUtilities

# Register TableUtilities in _common:
_common.TableUtilities_swigregister(TableUtilities)
class DataTable(AbstractDataTable):
    r"""Proxy of C++ OpenSim::DataTable_< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTable

    def __init__(self, *args):
        r"""
        __init__(DataTable self) -> DataTable
        __init__(DataTable self, DataTable arg2) -> DataTable

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,double > const &

        __init__(DataTable self, std::string const & filename, std::string const & tablename) -> DataTable

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.DataTable_swiginit(self, _common.new_DataTable(*args))

    def numComponentsPerElement(self):
        r"""numComponentsPerElement(DataTable self) -> unsigned int"""
        return _common.DataTable_numComponentsPerElement(self)

    def appendRow(self, *args):
        r"""
        appendRow(DataTable self, double const & indRow, std::initializer_list< double > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< double > const &

        appendRow(DataTable self, double const & indRow, RowVector depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,double >::RowVector const &

        appendRow(DataTable self, double const & indRow, RowVectorView depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,double >::RowVectorView const &

        """
        return _common.DataTable_appendRow(self, *args)

    def getRowAtIndex(self, index):
        r"""
        getRowAtIndex(DataTable self, size_t index) -> RowVectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_getRowAtIndex(self, index)

    def getRow(self, ind):
        r"""
        getRow(DataTable self, double const & ind) -> RowVectorView

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTable_getRow(self, ind)

    def updRowAtIndex(self, index):
        r"""
        updRowAtIndex(DataTable self, size_t index) -> RowVectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_updRowAtIndex(self, index)

    def updRow(self, ind):
        r"""
        updRow(DataTable self, double const & ind) -> RowVectorView

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTable_updRow(self, ind)

    def setRowAtIndex(self, *args):
        r"""
        setRowAtIndex(DataTable self, size_t index, RowVectorView depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,double >::RowVectorView const &

        setRowAtIndex(DataTable self, size_t index, RowVector depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,double >::RowVector const &

        """
        return _common.DataTable_setRowAtIndex(self, *args)

    def setRow(self, *args):
        r"""
        setRow(DataTable self, double const & ind, RowVectorView depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,double >::RowVectorView const &

        setRow(DataTable self, double const & ind, RowVector depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,double >::RowVector const &

        """
        return _common.DataTable_setRow(self, *args)

    def removeRowAtIndex(self, index):
        r"""
        removeRowAtIndex(DataTable self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_removeRowAtIndex(self, index)

    def removeRow(self, ind):
        r"""
        removeRow(DataTable self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTable_removeRow(self, ind)

    def getIndependentColumn(self):
        r"""getIndependentColumn(DataTable self) -> StdVectorDouble"""
        return _common.DataTable_getIndependentColumn(self)

    def appendColumn(self, *args):
        r"""
        appendColumn(DataTable self, std::string const & columnLabel, std::initializer_list< double > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< double > const &

        appendColumn(DataTable self, std::string const & columnLabel, Vector depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,double >::Vector const &

        appendColumn(DataTable self, std::string const & columnLabel, VectorView depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,double >::VectorView const &

        """
        return _common.DataTable_appendColumn(self, *args)

    def removeColumnAtIndex(self, index):
        r"""
        removeColumnAtIndex(DataTable self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_removeColumnAtIndex(self, index)

    def removeColumn(self, columnLabel):
        r"""
        removeColumn(DataTable self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTable_removeColumn(self, columnLabel)

    def getDependentColumnAtIndex(self, index):
        r"""
        getDependentColumnAtIndex(DataTable self, size_t index) -> VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_getDependentColumnAtIndex(self, index)

    def getDependentColumn(self, columnLabel):
        r"""
        getDependentColumn(DataTable self, std::string const & columnLabel) -> VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTable_getDependentColumn(self, columnLabel)

    def updDependentColumnAtIndex(self, index):
        r"""
        updDependentColumnAtIndex(DataTable self, size_t index) -> VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTable_updDependentColumnAtIndex(self, index)

    def updDependentColumn(self, columnLabel):
        r"""
        updDependentColumn(DataTable self, std::string const & columnLabel) -> VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTable_updDependentColumn(self, columnLabel)

    def setIndependentValueAtIndex(self, rowIndex, value):
        r"""
        setIndependentValueAtIndex(DataTable self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTable_setIndependentValueAtIndex(self, rowIndex, value)

    def getMatrix(self):
        r"""getMatrix(DataTable self) -> MatrixView"""
        return _common.DataTable_getMatrix(self)

    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        getMatrixBlock(DataTable self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTable_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def updMatrix(self):
        r"""updMatrix(DataTable self) -> MatrixView"""
        return _common.DataTable_updMatrix(self)

    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        updMatrixBlock(DataTable self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTable_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def toString(self, *args):
        r"""
        toString(DataTable self, StdVectorInt rows={}, StdVectorString columnLabels={}, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        """
        return _common.DataTable_toString(self, *args)

    def __str__(self):
        r"""__str__(DataTable self) -> std::string"""
        return _common.DataTable___str__(self)

    def clone(self):
        r"""clone(DataTable self) -> DataTable"""
        return _common.DataTable_clone(self)

    def packVec3(self, *args):
        r"""
        packVec3(DataTable self) -> DataTableVec3
        packVec3(DataTable self, StdVectorString suffixes) -> DataTableVec3

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.DataTable_packVec3(self, *args)

    def packUnitVec3(self, *args):
        r"""
        packUnitVec3(DataTable self) -> DataTableUnitVec3
        packUnitVec3(DataTable self, StdVectorString suffixes) -> DataTableUnitVec3

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.DataTable_packUnitVec3(self, *args)

    def packQuaternion(self, *args):
        r"""
        packQuaternion(DataTable self) -> DataTableQuaternion
        packQuaternion(DataTable self, StdVectorString suffixes) -> DataTableQuaternion

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.DataTable_packQuaternion(self, *args)

    def packSpatialVec(self, *args):
        r"""
        packSpatialVec(DataTable self) -> DataTableSpatialVec
        packSpatialVec(DataTable self, StdVectorString suffixes) -> DataTableSpatialVec

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.DataTable_packSpatialVec(self, *args)

    def packRotation(self, *args):
        r"""
        packRotation(DataTable self) -> DataTableRotation
        packRotation(DataTable self, StdVectorString suffixes) -> DataTableRotation

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.DataTable_packRotation(self, *args)

# Register DataTable in _common:
_common.DataTable_swigregister(DataTable)
class DataTableVec3(AbstractDataTable):
    r"""Proxy of C++ OpenSim::DataTable_< double,SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableVec3

    def __init__(self, *args):
        r"""
        __init__(DataTableVec3 self) -> DataTableVec3
        __init__(DataTableVec3 self, DataTableVec3 arg2) -> DataTableVec3

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Vec3 > const &

        __init__(DataTableVec3 self, std::string const & filename, std::string const & tablename) -> DataTableVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.DataTableVec3_swiginit(self, _common.new_DataTableVec3(*args))

    def flatten(self, *args):
        r"""
        flatten(DataTableVec3 self) -> DataTable
        flatten(DataTableVec3 self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableVec3_flatten(self, *args)

    def numComponentsPerElement(self):
        r"""numComponentsPerElement(DataTableVec3 self) -> unsigned int"""
        return _common.DataTableVec3_numComponentsPerElement(self)

    def appendRow(self, *args):
        r"""
        appendRow(DataTableVec3 self, double const & indRow, std::initializer_list< SimTK::Vec< 3,double,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Vec< 3,double,1 > > const &

        appendRow(DataTableVec3 self, double const & indRow, RowVectorVec3 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVector const &

        appendRow(DataTableVec3 self, double const & indRow, RowVectorViewVec3 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVectorView const &

        """
        return _common.DataTableVec3_appendRow(self, *args)

    def getRowAtIndex(self, index):
        r"""
        getRowAtIndex(DataTableVec3 self, size_t index) -> RowVectorViewVec3

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_getRowAtIndex(self, index)

    def getRow(self, ind):
        r"""
        getRow(DataTableVec3 self, double const & ind) -> RowVectorViewVec3

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec3_getRow(self, ind)

    def updRowAtIndex(self, index):
        r"""
        updRowAtIndex(DataTableVec3 self, size_t index) -> RowVectorViewVec3

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_updRowAtIndex(self, index)

    def updRow(self, ind):
        r"""
        updRow(DataTableVec3 self, double const & ind) -> RowVectorViewVec3

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec3_updRow(self, ind)

    def setRowAtIndex(self, *args):
        r"""
        setRowAtIndex(DataTableVec3 self, size_t index, RowVectorViewVec3 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVectorView const &

        setRowAtIndex(DataTableVec3 self, size_t index, RowVectorVec3 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVector const &

        """
        return _common.DataTableVec3_setRowAtIndex(self, *args)

    def setRow(self, *args):
        r"""
        setRow(DataTableVec3 self, double const & ind, RowVectorViewVec3 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVectorView const &

        setRow(DataTableVec3 self, double const & ind, RowVectorVec3 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::RowVector const &

        """
        return _common.DataTableVec3_setRow(self, *args)

    def removeRowAtIndex(self, index):
        r"""
        removeRowAtIndex(DataTableVec3 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_removeRowAtIndex(self, index)

    def removeRow(self, ind):
        r"""
        removeRow(DataTableVec3 self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec3_removeRow(self, ind)

    def getIndependentColumn(self):
        r"""getIndependentColumn(DataTableVec3 self) -> StdVectorDouble"""
        return _common.DataTableVec3_getIndependentColumn(self)

    def appendColumn(self, *args):
        r"""
        appendColumn(DataTableVec3 self, std::string const & columnLabel, std::initializer_list< SimTK::Vec< 3,double,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Vec< 3,double,1 > > const &

        appendColumn(DataTableVec3 self, std::string const & columnLabel, VectorVec3 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::Vector const &

        appendColumn(DataTableVec3 self, std::string const & columnLabel, VectorViewVec3 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > >::VectorView const &

        """
        return _common.DataTableVec3_appendColumn(self, *args)

    def removeColumnAtIndex(self, index):
        r"""
        removeColumnAtIndex(DataTableVec3 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_removeColumnAtIndex(self, index)

    def removeColumn(self, columnLabel):
        r"""
        removeColumn(DataTableVec3 self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec3_removeColumn(self, columnLabel)

    def getDependentColumnAtIndex(self, index):
        r"""
        getDependentColumnAtIndex(DataTableVec3 self, size_t index) -> VectorViewVec3

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_getDependentColumnAtIndex(self, index)

    def getDependentColumn(self, columnLabel):
        r"""
        getDependentColumn(DataTableVec3 self, std::string const & columnLabel) -> VectorViewVec3

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec3_getDependentColumn(self, columnLabel)

    def updDependentColumnAtIndex(self, index):
        r"""
        updDependentColumnAtIndex(DataTableVec3 self, size_t index) -> VectorViewVec3

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec3_updDependentColumnAtIndex(self, index)

    def updDependentColumn(self, columnLabel):
        r"""
        updDependentColumn(DataTableVec3 self, std::string const & columnLabel) -> VectorViewVec3

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec3_updDependentColumn(self, columnLabel)

    def setIndependentValueAtIndex(self, rowIndex, value):
        r"""
        setIndependentValueAtIndex(DataTableVec3 self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableVec3_setIndependentValueAtIndex(self, rowIndex, value)

    def getMatrix(self):
        r"""getMatrix(DataTableVec3 self) -> MatrixViewVec3"""
        return _common.DataTableVec3_getMatrix(self)

    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        getMatrixBlock(DataTableVec3 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewVec3

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableVec3_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def updMatrix(self):
        r"""updMatrix(DataTableVec3 self) -> MatrixViewVec3"""
        return _common.DataTableVec3_updMatrix(self)

    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        updMatrixBlock(DataTableVec3 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewVec3

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableVec3_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def toString(self, *args):
        r"""
        toString(DataTableVec3 self, StdVectorInt rows={}, StdVectorString columnLabels={}, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        """
        return _common.DataTableVec3_toString(self, *args)

    def __str__(self):
        r"""__str__(DataTableVec3 self) -> std::string"""
        return _common.DataTableVec3___str__(self)

    def clone(self):
        r"""clone(DataTableVec3 self) -> DataTableVec3"""
        return _common.DataTableVec3_clone(self)

# Register DataTableVec3 in _common:
_common.DataTableVec3_swigregister(DataTableVec3)
class DataTableUnitVec3(AbstractDataTable):
    r"""Proxy of C++ OpenSim::DataTable_< double,SimTK::UnitVec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableUnitVec3

    def __init__(self, *args):
        r"""
        __init__(DataTableUnitVec3 self) -> DataTableUnitVec3
        __init__(DataTableUnitVec3 self, DataTableUnitVec3 arg2) -> DataTableUnitVec3

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::UnitVec3 > const &

        __init__(DataTableUnitVec3 self, std::string const & filename, std::string const & tablename) -> DataTableUnitVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.DataTableUnitVec3_swiginit(self, _common.new_DataTableUnitVec3(*args))

    def flatten(self, *args):
        r"""
        flatten(DataTableUnitVec3 self) -> DataTable
        flatten(DataTableUnitVec3 self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableUnitVec3_flatten(self, *args)

    def numComponentsPerElement(self):
        r"""numComponentsPerElement(DataTableUnitVec3 self) -> unsigned int"""
        return _common.DataTableUnitVec3_numComponentsPerElement(self)

    def appendRow(self, *args):
        r"""
        appendRow(DataTableUnitVec3 self, double const & indRow, std::initializer_list< SimTK::UnitVec< double,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::UnitVec< double,1 > > const &

        appendRow(DataTableUnitVec3 self, double const & indRow, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const & depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const &

        appendRow(DataTableUnitVec3 self, double const & indRow, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const &

        """
        return _common.DataTableUnitVec3_appendRow(self, *args)

    def getRowAtIndex(self, index):
        r"""
        getRowAtIndex(DataTableUnitVec3 self, size_t index) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_getRowAtIndex(self, index)

    def getRow(self, ind):
        r"""
        getRow(DataTableUnitVec3 self, double const & ind) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableUnitVec3_getRow(self, ind)

    def updRowAtIndex(self, index):
        r"""
        updRowAtIndex(DataTableUnitVec3 self, size_t index) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_updRowAtIndex(self, index)

    def updRow(self, ind):
        r"""
        updRow(DataTableUnitVec3 self, double const & ind) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableUnitVec3_updRow(self, ind)

    def setRowAtIndex(self, *args):
        r"""
        setRowAtIndex(DataTableUnitVec3 self, size_t index, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const &

        setRowAtIndex(DataTableUnitVec3 self, size_t index, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const & depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const &

        """
        return _common.DataTableUnitVec3_setRowAtIndex(self, *args)

    def setRow(self, *args):
        r"""
        setRow(DataTableUnitVec3 self, double const & ind, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVectorView const &

        setRow(DataTableUnitVec3 self, double const & ind, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const & depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::RowVector const &

        """
        return _common.DataTableUnitVec3_setRow(self, *args)

    def removeRowAtIndex(self, index):
        r"""
        removeRowAtIndex(DataTableUnitVec3 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_removeRowAtIndex(self, index)

    def removeRow(self, ind):
        r"""
        removeRow(DataTableUnitVec3 self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableUnitVec3_removeRow(self, ind)

    def getIndependentColumn(self):
        r"""getIndependentColumn(DataTableUnitVec3 self) -> StdVectorDouble"""
        return _common.DataTableUnitVec3_getIndependentColumn(self)

    def appendColumn(self, *args):
        r"""
        appendColumn(DataTableUnitVec3 self, std::string const & columnLabel, std::initializer_list< SimTK::UnitVec< double,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::UnitVec< double,1 > > const &

        appendColumn(DataTableUnitVec3 self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::Vector const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::Vector const &

        appendColumn(DataTableUnitVec3 self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView const &

        """
        return _common.DataTableUnitVec3_appendColumn(self, *args)

    def removeColumnAtIndex(self, index):
        r"""
        removeColumnAtIndex(DataTableUnitVec3 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_removeColumnAtIndex(self, index)

    def removeColumn(self, columnLabel):
        r"""
        removeColumn(DataTableUnitVec3 self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableUnitVec3_removeColumn(self, columnLabel)

    def getDependentColumnAtIndex(self, index):
        r"""
        getDependentColumnAtIndex(DataTableUnitVec3 self, size_t index) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_getDependentColumnAtIndex(self, index)

    def getDependentColumn(self, columnLabel):
        r"""
        getDependentColumn(DataTableUnitVec3 self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableUnitVec3_getDependentColumn(self, columnLabel)

    def updDependentColumnAtIndex(self, index):
        r"""
        updDependentColumnAtIndex(DataTableUnitVec3 self, size_t index) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableUnitVec3_updDependentColumnAtIndex(self, index)

    def updDependentColumn(self, columnLabel):
        r"""
        updDependentColumn(DataTableUnitVec3 self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableUnitVec3_updDependentColumn(self, columnLabel)

    def setIndependentValueAtIndex(self, rowIndex, value):
        r"""
        setIndependentValueAtIndex(DataTableUnitVec3 self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableUnitVec3_setIndependentValueAtIndex(self, rowIndex, value)

    def getMatrix(self):
        r"""getMatrix(DataTableUnitVec3 self) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::MatrixView const &"""
        return _common.DataTableUnitVec3_getMatrix(self)

    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        getMatrixBlock(DataTableUnitVec3 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableUnitVec3_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def updMatrix(self):
        r"""updMatrix(DataTableUnitVec3 self) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::MatrixView &"""
        return _common.DataTableUnitVec3_updMatrix(self)

    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        updMatrixBlock(DataTableUnitVec3 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableUnitVec3_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def toString(self, *args):
        r"""
        toString(DataTableUnitVec3 self, StdVectorInt rows={}, StdVectorString columnLabels={}, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        """
        return _common.DataTableUnitVec3_toString(self, *args)

    def __str__(self):
        r"""__str__(DataTableUnitVec3 self) -> std::string"""
        return _common.DataTableUnitVec3___str__(self)

    def clone(self):
        r"""clone(DataTableUnitVec3 self) -> DataTableUnitVec3"""
        return _common.DataTableUnitVec3_clone(self)

# Register DataTableUnitVec3 in _common:
_common.DataTableUnitVec3_swigregister(DataTableUnitVec3)
class DataTableQuaternion(AbstractDataTable):
    r"""Proxy of C++ OpenSim::DataTable_< double,SimTK::Quaternion_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableQuaternion

    def __init__(self, *args):
        r"""
        __init__(DataTableQuaternion self) -> DataTableQuaternion
        __init__(DataTableQuaternion self, DataTableQuaternion arg2) -> DataTableQuaternion

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const &

        __init__(DataTableQuaternion self, std::string const & filename, std::string const & tablename) -> DataTableQuaternion

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.DataTableQuaternion_swiginit(self, _common.new_DataTableQuaternion(*args))

    def flatten(self, *args):
        r"""
        flatten(DataTableQuaternion self) -> DataTable
        flatten(DataTableQuaternion self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableQuaternion_flatten(self, *args)

    def numComponentsPerElement(self):
        r"""numComponentsPerElement(DataTableQuaternion self) -> unsigned int"""
        return _common.DataTableQuaternion_numComponentsPerElement(self)

    def appendRow(self, *args):
        r"""
        appendRow(DataTableQuaternion self, double const & indRow, std::initializer_list< SimTK::Quaternion_< double > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Quaternion_< double > > const &

        appendRow(DataTableQuaternion self, double const & indRow, RowVectorQuaternion depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVector const &

        appendRow(DataTableQuaternion self, double const & indRow, RowVectorViewQuaternion depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVectorView const &

        """
        return _common.DataTableQuaternion_appendRow(self, *args)

    def getRowAtIndex(self, index):
        r"""
        getRowAtIndex(DataTableQuaternion self, size_t index) -> RowVectorViewQuaternion

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_getRowAtIndex(self, index)

    def getRow(self, ind):
        r"""
        getRow(DataTableQuaternion self, double const & ind) -> RowVectorViewQuaternion

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableQuaternion_getRow(self, ind)

    def updRowAtIndex(self, index):
        r"""
        updRowAtIndex(DataTableQuaternion self, size_t index) -> RowVectorViewQuaternion

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_updRowAtIndex(self, index)

    def updRow(self, ind):
        r"""
        updRow(DataTableQuaternion self, double const & ind) -> RowVectorViewQuaternion

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableQuaternion_updRow(self, ind)

    def setRowAtIndex(self, *args):
        r"""
        setRowAtIndex(DataTableQuaternion self, size_t index, RowVectorViewQuaternion depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVectorView const &

        setRowAtIndex(DataTableQuaternion self, size_t index, RowVectorQuaternion depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVector const &

        """
        return _common.DataTableQuaternion_setRowAtIndex(self, *args)

    def setRow(self, *args):
        r"""
        setRow(DataTableQuaternion self, double const & ind, RowVectorViewQuaternion depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVectorView const &

        setRow(DataTableQuaternion self, double const & ind, RowVectorQuaternion depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::RowVector const &

        """
        return _common.DataTableQuaternion_setRow(self, *args)

    def removeRowAtIndex(self, index):
        r"""
        removeRowAtIndex(DataTableQuaternion self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_removeRowAtIndex(self, index)

    def removeRow(self, ind):
        r"""
        removeRow(DataTableQuaternion self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableQuaternion_removeRow(self, ind)

    def getIndependentColumn(self):
        r"""getIndependentColumn(DataTableQuaternion self) -> StdVectorDouble"""
        return _common.DataTableQuaternion_getIndependentColumn(self)

    def appendColumn(self, *args):
        r"""
        appendColumn(DataTableQuaternion self, std::string const & columnLabel, std::initializer_list< SimTK::Quaternion_< double > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Quaternion_< double > > const &

        appendColumn(DataTableQuaternion self, std::string const & columnLabel, VectorQuaternion depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::Vector const &

        appendColumn(DataTableQuaternion self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView const &

        """
        return _common.DataTableQuaternion_appendColumn(self, *args)

    def removeColumnAtIndex(self, index):
        r"""
        removeColumnAtIndex(DataTableQuaternion self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_removeColumnAtIndex(self, index)

    def removeColumn(self, columnLabel):
        r"""
        removeColumn(DataTableQuaternion self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableQuaternion_removeColumn(self, columnLabel)

    def getDependentColumnAtIndex(self, index):
        r"""
        getDependentColumnAtIndex(DataTableQuaternion self, size_t index) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_getDependentColumnAtIndex(self, index)

    def getDependentColumn(self, columnLabel):
        r"""
        getDependentColumn(DataTableQuaternion self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableQuaternion_getDependentColumn(self, columnLabel)

    def updDependentColumnAtIndex(self, index):
        r"""
        updDependentColumnAtIndex(DataTableQuaternion self, size_t index) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableQuaternion_updDependentColumnAtIndex(self, index)

    def updDependentColumn(self, columnLabel):
        r"""
        updDependentColumn(DataTableQuaternion self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableQuaternion_updDependentColumn(self, columnLabel)

    def setIndependentValueAtIndex(self, rowIndex, value):
        r"""
        setIndependentValueAtIndex(DataTableQuaternion self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableQuaternion_setIndependentValueAtIndex(self, rowIndex, value)

    def getMatrix(self):
        r"""getMatrix(DataTableQuaternion self) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::MatrixView const &"""
        return _common.DataTableQuaternion_getMatrix(self)

    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        getMatrixBlock(DataTableQuaternion self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableQuaternion_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def updMatrix(self):
        r"""updMatrix(DataTableQuaternion self) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::MatrixView &"""
        return _common.DataTableQuaternion_updMatrix(self)

    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        updMatrixBlock(DataTableQuaternion self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Quaternion_< double > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableQuaternion_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def toString(self, *args):
        r"""
        toString(DataTableQuaternion self, StdVectorInt rows={}, StdVectorString columnLabels={}, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        """
        return _common.DataTableQuaternion_toString(self, *args)

    def __str__(self):
        r"""__str__(DataTableQuaternion self) -> std::string"""
        return _common.DataTableQuaternion___str__(self)

    def clone(self):
        r"""clone(DataTableQuaternion self) -> DataTableQuaternion"""
        return _common.DataTableQuaternion_clone(self)

# Register DataTableQuaternion in _common:
_common.DataTableQuaternion_swigregister(DataTableQuaternion)
class DataTableVec6(AbstractDataTable):
    r"""Proxy of C++ OpenSim::DataTable_< double,SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableVec6

    def __init__(self, *args):
        r"""
        __init__(DataTableVec6 self) -> DataTableVec6
        __init__(DataTableVec6 self, DataTableVec6 arg2) -> DataTableVec6

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Vec6 > const &

        __init__(DataTableVec6 self, std::string const & filename, std::string const & tablename) -> DataTableVec6

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.DataTableVec6_swiginit(self, _common.new_DataTableVec6(*args))

    def flatten(self, *args):
        r"""
        flatten(DataTableVec6 self) -> DataTable
        flatten(DataTableVec6 self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableVec6_flatten(self, *args)

    def numComponentsPerElement(self):
        r"""numComponentsPerElement(DataTableVec6 self) -> unsigned int"""
        return _common.DataTableVec6_numComponentsPerElement(self)

    def appendRow(self, *args):
        r"""
        appendRow(DataTableVec6 self, double const & indRow, std::initializer_list< SimTK::Vec< 6,double,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Vec< 6,double,1 > > const &

        appendRow(DataTableVec6 self, double const & indRow, RowVectorVec6 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVector const &

        appendRow(DataTableVec6 self, double const & indRow, RowVectorViewVec6 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVectorView const &

        """
        return _common.DataTableVec6_appendRow(self, *args)

    def getRowAtIndex(self, index):
        r"""
        getRowAtIndex(DataTableVec6 self, size_t index) -> RowVectorViewVec6

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_getRowAtIndex(self, index)

    def getRow(self, ind):
        r"""
        getRow(DataTableVec6 self, double const & ind) -> RowVectorViewVec6

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec6_getRow(self, ind)

    def updRowAtIndex(self, index):
        r"""
        updRowAtIndex(DataTableVec6 self, size_t index) -> RowVectorViewVec6

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_updRowAtIndex(self, index)

    def updRow(self, ind):
        r"""
        updRow(DataTableVec6 self, double const & ind) -> RowVectorViewVec6

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec6_updRow(self, ind)

    def setRowAtIndex(self, *args):
        r"""
        setRowAtIndex(DataTableVec6 self, size_t index, RowVectorViewVec6 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVectorView const &

        setRowAtIndex(DataTableVec6 self, size_t index, RowVectorVec6 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVector const &

        """
        return _common.DataTableVec6_setRowAtIndex(self, *args)

    def setRow(self, *args):
        r"""
        setRow(DataTableVec6 self, double const & ind, RowVectorViewVec6 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVectorView const &

        setRow(DataTableVec6 self, double const & ind, RowVectorVec6 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::RowVector const &

        """
        return _common.DataTableVec6_setRow(self, *args)

    def removeRowAtIndex(self, index):
        r"""
        removeRowAtIndex(DataTableVec6 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_removeRowAtIndex(self, index)

    def removeRow(self, ind):
        r"""
        removeRow(DataTableVec6 self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableVec6_removeRow(self, ind)

    def getIndependentColumn(self):
        r"""getIndependentColumn(DataTableVec6 self) -> StdVectorDouble"""
        return _common.DataTableVec6_getIndependentColumn(self)

    def appendColumn(self, *args):
        r"""
        appendColumn(DataTableVec6 self, std::string const & columnLabel, std::initializer_list< SimTK::Vec< 6,double,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Vec< 6,double,1 > > const &

        appendColumn(DataTableVec6 self, std::string const & columnLabel, VectorVec6 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::Vector const &

        appendColumn(DataTableVec6 self, std::string const & columnLabel, VectorViewVec6 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > >::VectorView const &

        """
        return _common.DataTableVec6_appendColumn(self, *args)

    def removeColumnAtIndex(self, index):
        r"""
        removeColumnAtIndex(DataTableVec6 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_removeColumnAtIndex(self, index)

    def removeColumn(self, columnLabel):
        r"""
        removeColumn(DataTableVec6 self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec6_removeColumn(self, columnLabel)

    def getDependentColumnAtIndex(self, index):
        r"""
        getDependentColumnAtIndex(DataTableVec6 self, size_t index) -> VectorViewVec6

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_getDependentColumnAtIndex(self, index)

    def getDependentColumn(self, columnLabel):
        r"""
        getDependentColumn(DataTableVec6 self, std::string const & columnLabel) -> VectorViewVec6

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec6_getDependentColumn(self, columnLabel)

    def updDependentColumnAtIndex(self, index):
        r"""
        updDependentColumnAtIndex(DataTableVec6 self, size_t index) -> VectorViewVec6

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableVec6_updDependentColumnAtIndex(self, index)

    def updDependentColumn(self, columnLabel):
        r"""
        updDependentColumn(DataTableVec6 self, std::string const & columnLabel) -> VectorViewVec6

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableVec6_updDependentColumn(self, columnLabel)

    def setIndependentValueAtIndex(self, rowIndex, value):
        r"""
        setIndependentValueAtIndex(DataTableVec6 self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableVec6_setIndependentValueAtIndex(self, rowIndex, value)

    def getMatrix(self):
        r"""getMatrix(DataTableVec6 self) -> MatrixViewVec6"""
        return _common.DataTableVec6_getMatrix(self)

    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        getMatrixBlock(DataTableVec6 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewVec6

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableVec6_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def updMatrix(self):
        r"""updMatrix(DataTableVec6 self) -> MatrixViewVec6"""
        return _common.DataTableVec6_updMatrix(self)

    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        updMatrixBlock(DataTableVec6 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewVec6

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableVec6_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def toString(self, *args):
        r"""
        toString(DataTableVec6 self, StdVectorInt rows={}, StdVectorString columnLabels={}, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        """
        return _common.DataTableVec6_toString(self, *args)

    def __str__(self):
        r"""__str__(DataTableVec6 self) -> std::string"""
        return _common.DataTableVec6___str__(self)

    def clone(self):
        r"""clone(DataTableVec6 self) -> DataTableVec6"""
        return _common.DataTableVec6_clone(self)

# Register DataTableVec6 in _common:
_common.DataTableVec6_swigregister(DataTableVec6)
class DataTableSpatialVec(AbstractDataTable):
    r"""Proxy of C++ OpenSim::DataTable_< double,SimTK::SpatialVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableSpatialVec

    def __init__(self, *args):
        r"""
        __init__(DataTableSpatialVec self) -> DataTableSpatialVec
        __init__(DataTableSpatialVec self, DataTableSpatialVec arg2) -> DataTableSpatialVec

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::SpatialVec > const &

        __init__(DataTableSpatialVec self, std::string const & filename, std::string const & tablename) -> DataTableSpatialVec

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.DataTableSpatialVec_swiginit(self, _common.new_DataTableSpatialVec(*args))

    def flatten(self, *args):
        r"""
        flatten(DataTableSpatialVec self) -> DataTable
        flatten(DataTableSpatialVec self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableSpatialVec_flatten(self, *args)

    def numComponentsPerElement(self):
        r"""numComponentsPerElement(DataTableSpatialVec self) -> unsigned int"""
        return _common.DataTableSpatialVec_numComponentsPerElement(self)

    def appendRow(self, *args):
        r"""
        appendRow(DataTableSpatialVec self, double const & indRow, std::initializer_list< SimTK::Vec< 2,SimTK::Vec3,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Vec< 2,SimTK::Vec3,1 > > const &

        appendRow(DataTableSpatialVec self, double const & indRow, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const & depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const &

        appendRow(DataTableSpatialVec self, double const & indRow, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const &

        """
        return _common.DataTableSpatialVec_appendRow(self, *args)

    def getRowAtIndex(self, index):
        r"""
        getRowAtIndex(DataTableSpatialVec self, size_t index) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_getRowAtIndex(self, index)

    def getRow(self, ind):
        r"""
        getRow(DataTableSpatialVec self, double const & ind) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableSpatialVec_getRow(self, ind)

    def updRowAtIndex(self, index):
        r"""
        updRowAtIndex(DataTableSpatialVec self, size_t index) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_updRowAtIndex(self, index)

    def updRow(self, ind):
        r"""
        updRow(DataTableSpatialVec self, double const & ind) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableSpatialVec_updRow(self, ind)

    def setRowAtIndex(self, *args):
        r"""
        setRowAtIndex(DataTableSpatialVec self, size_t index, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const &

        setRowAtIndex(DataTableSpatialVec self, size_t index, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const & depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const &

        """
        return _common.DataTableSpatialVec_setRowAtIndex(self, *args)

    def setRow(self, *args):
        r"""
        setRow(DataTableSpatialVec self, double const & ind, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const & depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView const &

        setRow(DataTableSpatialVec self, double const & ind, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const & depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector const &

        """
        return _common.DataTableSpatialVec_setRow(self, *args)

    def removeRowAtIndex(self, index):
        r"""
        removeRowAtIndex(DataTableSpatialVec self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_removeRowAtIndex(self, index)

    def removeRow(self, ind):
        r"""
        removeRow(DataTableSpatialVec self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableSpatialVec_removeRow(self, ind)

    def getIndependentColumn(self):
        r"""getIndependentColumn(DataTableSpatialVec self) -> StdVectorDouble"""
        return _common.DataTableSpatialVec_getIndependentColumn(self)

    def appendColumn(self, *args):
        r"""
        appendColumn(DataTableSpatialVec self, std::string const & columnLabel, std::initializer_list< SimTK::Vec< 2,SimTK::Vec3,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Vec< 2,SimTK::Vec3,1 > > const &

        appendColumn(DataTableSpatialVec self, std::string const & columnLabel, VectorOfSpatialVec depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::Vector const &

        appendColumn(DataTableSpatialVec self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView const &

        """
        return _common.DataTableSpatialVec_appendColumn(self, *args)

    def removeColumnAtIndex(self, index):
        r"""
        removeColumnAtIndex(DataTableSpatialVec self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_removeColumnAtIndex(self, index)

    def removeColumn(self, columnLabel):
        r"""
        removeColumn(DataTableSpatialVec self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableSpatialVec_removeColumn(self, columnLabel)

    def getDependentColumnAtIndex(self, index):
        r"""
        getDependentColumnAtIndex(DataTableSpatialVec self, size_t index) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_getDependentColumnAtIndex(self, index)

    def getDependentColumn(self, columnLabel):
        r"""
        getDependentColumn(DataTableSpatialVec self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableSpatialVec_getDependentColumn(self, columnLabel)

    def updDependentColumnAtIndex(self, index):
        r"""
        updDependentColumnAtIndex(DataTableSpatialVec self, size_t index) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableSpatialVec_updDependentColumnAtIndex(self, index)

    def updDependentColumn(self, columnLabel):
        r"""
        updDependentColumn(DataTableSpatialVec self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableSpatialVec_updDependentColumn(self, columnLabel)

    def setIndependentValueAtIndex(self, rowIndex, value):
        r"""
        setIndependentValueAtIndex(DataTableSpatialVec self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableSpatialVec_setIndependentValueAtIndex(self, rowIndex, value)

    def getMatrix(self):
        r"""getMatrix(DataTableSpatialVec self) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::MatrixView const &"""
        return _common.DataTableSpatialVec_getMatrix(self)

    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        getMatrixBlock(DataTableSpatialVec self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableSpatialVec_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def updMatrix(self):
        r"""updMatrix(DataTableSpatialVec self) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::MatrixView &"""
        return _common.DataTableSpatialVec_updMatrix(self)

    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        updMatrixBlock(DataTableSpatialVec self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableSpatialVec_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def toString(self, *args):
        r"""
        toString(DataTableSpatialVec self, StdVectorInt rows={}, StdVectorString columnLabels={}, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        """
        return _common.DataTableSpatialVec_toString(self, *args)

    def __str__(self):
        r"""__str__(DataTableSpatialVec self) -> std::string"""
        return _common.DataTableSpatialVec___str__(self)

    def clone(self):
        r"""clone(DataTableSpatialVec self) -> DataTableSpatialVec"""
        return _common.DataTableSpatialVec_clone(self)

# Register DataTableSpatialVec in _common:
_common.DataTableSpatialVec_swigregister(DataTableSpatialVec)
class DataTableMat33(AbstractDataTable):
    r"""Proxy of C++ OpenSim::DataTable_< double,SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableMat33

    def __init__(self, *args):
        r"""
        __init__(DataTableMat33 self) -> DataTableMat33
        __init__(DataTableMat33 self, DataTableMat33 arg2) -> DataTableMat33

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Mat33 > const &

        __init__(DataTableMat33 self, std::string const & filename, std::string const & tablename) -> DataTableMat33

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.DataTableMat33_swiginit(self, _common.new_DataTableMat33(*args))

    def flatten(self, *args):
        r"""
        flatten(DataTableMat33 self) -> DataTable
        flatten(DataTableMat33 self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableMat33_flatten(self, *args)

    def numComponentsPerElement(self):
        r"""numComponentsPerElement(DataTableMat33 self) -> unsigned int"""
        return _common.DataTableMat33_numComponentsPerElement(self)

    def appendRow(self, *args):
        r"""
        appendRow(DataTableMat33 self, double const & indRow, std::initializer_list< SimTK::Mat< 3,3,double,3,1 > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Mat< 3,3,double,3,1 > > const &

        appendRow(DataTableMat33 self, double const & indRow, RowVectorMat33 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVector const &

        appendRow(DataTableMat33 self, double const & indRow, RowVectorViewMat33 depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVectorView const &

        """
        return _common.DataTableMat33_appendRow(self, *args)

    def getRowAtIndex(self, index):
        r"""
        getRowAtIndex(DataTableMat33 self, size_t index) -> RowVectorViewMat33

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_getRowAtIndex(self, index)

    def getRow(self, ind):
        r"""
        getRow(DataTableMat33 self, double const & ind) -> RowVectorViewMat33

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableMat33_getRow(self, ind)

    def updRowAtIndex(self, index):
        r"""
        updRowAtIndex(DataTableMat33 self, size_t index) -> RowVectorViewMat33

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_updRowAtIndex(self, index)

    def updRow(self, ind):
        r"""
        updRow(DataTableMat33 self, double const & ind) -> RowVectorViewMat33

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableMat33_updRow(self, ind)

    def setRowAtIndex(self, *args):
        r"""
        setRowAtIndex(DataTableMat33 self, size_t index, RowVectorViewMat33 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVectorView const &

        setRowAtIndex(DataTableMat33 self, size_t index, RowVectorMat33 depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVector const &

        """
        return _common.DataTableMat33_setRowAtIndex(self, *args)

    def setRow(self, *args):
        r"""
        setRow(DataTableMat33 self, double const & ind, RowVectorViewMat33 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVectorView const &

        setRow(DataTableMat33 self, double const & ind, RowVectorMat33 depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::RowVector const &

        """
        return _common.DataTableMat33_setRow(self, *args)

    def removeRowAtIndex(self, index):
        r"""
        removeRowAtIndex(DataTableMat33 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_removeRowAtIndex(self, index)

    def removeRow(self, ind):
        r"""
        removeRow(DataTableMat33 self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableMat33_removeRow(self, ind)

    def getIndependentColumn(self):
        r"""getIndependentColumn(DataTableMat33 self) -> StdVectorDouble"""
        return _common.DataTableMat33_getIndependentColumn(self)

    def appendColumn(self, *args):
        r"""
        appendColumn(DataTableMat33 self, std::string const & columnLabel, std::initializer_list< SimTK::Mat< 3,3,double,3,1 > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Mat< 3,3,double,3,1 > > const &

        appendColumn(DataTableMat33 self, std::string const & columnLabel, VectorMat33 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::Vector const &

        appendColumn(DataTableMat33 self, std::string const & columnLabel, VectorViewMat33 depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > >::VectorView const &

        """
        return _common.DataTableMat33_appendColumn(self, *args)

    def removeColumnAtIndex(self, index):
        r"""
        removeColumnAtIndex(DataTableMat33 self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_removeColumnAtIndex(self, index)

    def removeColumn(self, columnLabel):
        r"""
        removeColumn(DataTableMat33 self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableMat33_removeColumn(self, columnLabel)

    def getDependentColumnAtIndex(self, index):
        r"""
        getDependentColumnAtIndex(DataTableMat33 self, size_t index) -> VectorViewMat33

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_getDependentColumnAtIndex(self, index)

    def getDependentColumn(self, columnLabel):
        r"""
        getDependentColumn(DataTableMat33 self, std::string const & columnLabel) -> VectorViewMat33

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableMat33_getDependentColumn(self, columnLabel)

    def updDependentColumnAtIndex(self, index):
        r"""
        updDependentColumnAtIndex(DataTableMat33 self, size_t index) -> VectorViewMat33

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableMat33_updDependentColumnAtIndex(self, index)

    def updDependentColumn(self, columnLabel):
        r"""
        updDependentColumn(DataTableMat33 self, std::string const & columnLabel) -> VectorViewMat33

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableMat33_updDependentColumn(self, columnLabel)

    def setIndependentValueAtIndex(self, rowIndex, value):
        r"""
        setIndependentValueAtIndex(DataTableMat33 self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableMat33_setIndependentValueAtIndex(self, rowIndex, value)

    def getMatrix(self):
        r"""getMatrix(DataTableMat33 self) -> MatrixViewMat33"""
        return _common.DataTableMat33_getMatrix(self)

    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        getMatrixBlock(DataTableMat33 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewMat33

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableMat33_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def updMatrix(self):
        r"""updMatrix(DataTableMat33 self) -> MatrixViewMat33"""
        return _common.DataTableMat33_updMatrix(self)

    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        updMatrixBlock(DataTableMat33 self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> MatrixViewMat33

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableMat33_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def toString(self, *args):
        r"""
        toString(DataTableMat33 self, StdVectorInt rows={}, StdVectorString columnLabels={}, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        """
        return _common.DataTableMat33_toString(self, *args)

    def __str__(self):
        r"""__str__(DataTableMat33 self) -> std::string"""
        return _common.DataTableMat33___str__(self)

# Register DataTableMat33 in _common:
_common.DataTableMat33_swigregister(DataTableMat33)
class DataTableRotation(AbstractDataTable):
    r"""Proxy of C++ OpenSim::DataTable_< double,SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_DataTableRotation

    def __init__(self, *args):
        r"""
        __init__(DataTableRotation self) -> DataTableRotation
        __init__(DataTableRotation self, DataTableRotation arg2) -> DataTableRotation

        Parameters
        ----------
        arg2: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const &

        __init__(DataTableRotation self, std::string const & filename, std::string const & tablename) -> DataTableRotation

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.DataTableRotation_swiginit(self, _common.new_DataTableRotation(*args))

    def flatten(self, *args):
        r"""
        flatten(DataTableRotation self) -> DataTable
        flatten(DataTableRotation self, StdVectorString suffixes) -> DataTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _common.DataTableRotation_flatten(self, *args)

    def numComponentsPerElement(self):
        r"""numComponentsPerElement(DataTableRotation self) -> unsigned int"""
        return _common.DataTableRotation_numComponentsPerElement(self)

    def appendRow(self, *args):
        r"""
        appendRow(DataTableRotation self, double const & indRow, std::initializer_list< SimTK::Rotation_< double > > const & container)

        Parameters
        ----------
        indRow: double const &
        container: std::initializer_list< SimTK::Rotation_< double > > const &

        appendRow(DataTableRotation self, double const & indRow, RowVectorRotation depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVector const &

        appendRow(DataTableRotation self, double const & indRow, RowVectorViewRotation depRow)

        Parameters
        ----------
        indRow: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVectorView const &

        """
        return _common.DataTableRotation_appendRow(self, *args)

    def getRowAtIndex(self, index):
        r"""
        getRowAtIndex(DataTableRotation self, size_t index) -> RowVectorViewRotation

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_getRowAtIndex(self, index)

    def getRow(self, ind):
        r"""
        getRow(DataTableRotation self, double const & ind) -> RowVectorViewRotation

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableRotation_getRow(self, ind)

    def updRowAtIndex(self, index):
        r"""
        updRowAtIndex(DataTableRotation self, size_t index) -> RowVectorViewRotation

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_updRowAtIndex(self, index)

    def updRow(self, ind):
        r"""
        updRow(DataTableRotation self, double const & ind) -> RowVectorViewRotation

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableRotation_updRow(self, ind)

    def setRowAtIndex(self, *args):
        r"""
        setRowAtIndex(DataTableRotation self, size_t index, RowVectorViewRotation depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVectorView const &

        setRowAtIndex(DataTableRotation self, size_t index, RowVectorRotation depRow)

        Parameters
        ----------
        index: size_t
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVector const &

        """
        return _common.DataTableRotation_setRowAtIndex(self, *args)

    def setRow(self, *args):
        r"""
        setRow(DataTableRotation self, double const & ind, RowVectorViewRotation depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVectorView const &

        setRow(DataTableRotation self, double const & ind, RowVectorRotation depRow)

        Parameters
        ----------
        ind: double const &
        depRow: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::RowVector const &

        """
        return _common.DataTableRotation_setRow(self, *args)

    def removeRowAtIndex(self, index):
        r"""
        removeRowAtIndex(DataTableRotation self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_removeRowAtIndex(self, index)

    def removeRow(self, ind):
        r"""
        removeRow(DataTableRotation self, double const & ind)

        Parameters
        ----------
        ind: double const &

        """
        return _common.DataTableRotation_removeRow(self, ind)

    def getIndependentColumn(self):
        r"""getIndependentColumn(DataTableRotation self) -> StdVectorDouble"""
        return _common.DataTableRotation_getIndependentColumn(self)

    def appendColumn(self, *args):
        r"""
        appendColumn(DataTableRotation self, std::string const & columnLabel, std::initializer_list< SimTK::Rotation_< double > > const & container)

        Parameters
        ----------
        columnLabel: std::string const &
        container: std::initializer_list< SimTK::Rotation_< double > > const &

        appendColumn(DataTableRotation self, std::string const & columnLabel, VectorRotation depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::Vector const &

        appendColumn(DataTableRotation self, std::string const & columnLabel, OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView const & depCol)

        Parameters
        ----------
        columnLabel: std::string const &
        depCol: OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView const &

        """
        return _common.DataTableRotation_appendColumn(self, *args)

    def removeColumnAtIndex(self, index):
        r"""
        removeColumnAtIndex(DataTableRotation self, size_t index)

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_removeColumnAtIndex(self, index)

    def removeColumn(self, columnLabel):
        r"""
        removeColumn(DataTableRotation self, std::string const & columnLabel)

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableRotation_removeColumn(self, columnLabel)

    def getDependentColumnAtIndex(self, index):
        r"""
        getDependentColumnAtIndex(DataTableRotation self, size_t index) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_getDependentColumnAtIndex(self, index)

    def getDependentColumn(self, columnLabel):
        r"""
        getDependentColumn(DataTableRotation self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableRotation_getDependentColumn(self, columnLabel)

    def updDependentColumnAtIndex(self, index):
        r"""
        updDependentColumnAtIndex(DataTableRotation self, size_t index) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView

        Parameters
        ----------
        index: size_t

        """
        return _common.DataTableRotation_updDependentColumnAtIndex(self, index)

    def updDependentColumn(self, columnLabel):
        r"""
        updDependentColumn(DataTableRotation self, std::string const & columnLabel) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::VectorView

        Parameters
        ----------
        columnLabel: std::string const &

        """
        return _common.DataTableRotation_updDependentColumn(self, columnLabel)

    def setIndependentValueAtIndex(self, rowIndex, value):
        r"""
        setIndependentValueAtIndex(DataTableRotation self, size_t rowIndex, double const & value)

        Parameters
        ----------
        rowIndex: size_t
        value: double const &

        """
        return _common.DataTableRotation_setIndependentValueAtIndex(self, rowIndex, value)

    def getMatrix(self):
        r"""getMatrix(DataTableRotation self) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::MatrixView const &"""
        return _common.DataTableRotation_getMatrix(self)

    def getMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        getMatrixBlock(DataTableRotation self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableRotation_getMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def updMatrix(self):
        r"""updMatrix(DataTableRotation self) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::MatrixView &"""
        return _common.DataTableRotation_updMatrix(self)

    def updMatrixBlock(self, rowStart, columnStart, numRows, numColumns):
        r"""
        updMatrixBlock(DataTableRotation self, size_t rowStart, size_t columnStart, size_t numRows, size_t numColumns) -> OpenSim::DataTable_< double,SimTK::Rotation_< double > >::MatrixView

        Parameters
        ----------
        rowStart: size_t
        columnStart: size_t
        numRows: size_t
        numColumns: size_t

        """
        return _common.DataTableRotation_updMatrixBlock(self, rowStart, columnStart, numRows, numColumns)

    def toString(self, *args):
        r"""
        toString(DataTableRotation self, StdVectorInt rows={}, StdVectorString columnLabels={}, bool const withMetaData=True, unsigned int splitSize=25, unsigned int maxWidth=80, unsigned int precision=4) -> std::string

        Parameters
        ----------
        rows: std::vector< int,std::allocator< int > >
        columnLabels: std::vector< std::string,std::allocator< std::string > >
        withMetaData: bool const
        splitSize: unsigned int
        maxWidth: unsigned int
        precision: unsigned int

        """
        return _common.DataTableRotation_toString(self, *args)

    def __str__(self):
        r"""__str__(DataTableRotation self) -> std::string"""
        return _common.DataTableRotation___str__(self)

    def clone(self):
        r"""clone(DataTableRotation self) -> DataTableRotation"""
        return _common.DataTableRotation_clone(self)

# Register DataTableRotation in _common:
_common.DataTableRotation_swigregister(DataTableRotation)
class TimeSeriesTable(DataTable):
    r"""Proxy of C++ OpenSim::TimeSeriesTable_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTable

    def __init__(self, *args):
        r"""
        __init__(TimeSeriesTable self) -> TimeSeriesTable
        __init__(TimeSeriesTable self, TimeSeriesTable arg2) -> TimeSeriesTable

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< double > const &

        __init__(TimeSeriesTable self, StdVectorDouble indVec, Matrix depData, StdVectorString labels) -> TimeSeriesTable

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< double > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(TimeSeriesTable self, StdVectorDouble indVec) -> TimeSeriesTable

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(TimeSeriesTable self, DataTable datatable) -> TimeSeriesTable

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,double > const &

        __init__(TimeSeriesTable self, std::string const & filename) -> TimeSeriesTable

        Parameters
        ----------
        filename: std::string const &

        __init__(TimeSeriesTable self, std::string const & filename, std::string const & tablename) -> TimeSeriesTable

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TimeSeriesTable_swiginit(self, _common.new_TimeSeriesTable(*args))

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        r"""
        getNearestRowIndexForTime(TimeSeriesTable self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTable_getNearestRowIndexForTime(self, time, restrictToTimeRange)

    def getRowIndexAfterTime(self, time):
        r"""
        getRowIndexAfterTime(TimeSeriesTable self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTable_getRowIndexAfterTime(self, time)

    def getRowIndexBeforeTime(self, time):
        r"""
        getRowIndexBeforeTime(TimeSeriesTable self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTable_getRowIndexBeforeTime(self, time)

    def getNearestRow(self, time, restrictToTimeRange=True):
        r"""
        getNearestRow(TimeSeriesTable self, double const & time, bool const restrictToTimeRange=True) -> RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTable_getNearestRow(self, time, restrictToTimeRange)

    def updNearestRow(self, time, restrictToTimeRange=True):
        r"""
        updNearestRow(TimeSeriesTable self, double const & time, bool const restrictToTimeRange=True) -> RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTable_updNearestRow(self, time, restrictToTimeRange)

    def averageRow(self, beginTime, endTime):
        r"""
        averageRow(TimeSeriesTable self, double const & beginTime, double const & endTime) -> RowVector

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTable_averageRow(self, beginTime, endTime)

    def trim(self, newStartTime, newFinalTime):
        r"""
        trim(TimeSeriesTable self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTable_trim(self, newStartTime, newFinalTime)

    def trimFrom(self, newStartTime):
        r"""
        trimFrom(TimeSeriesTable self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTable_trimFrom(self, newStartTime)

    def trimTo(self, newFinalTime):
        r"""
        trimTo(TimeSeriesTable self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTable_trimTo(self, newFinalTime)

    def trimToIndices(self, start_index, last_index):
        r"""
        trimToIndices(TimeSeriesTable self, size_t const & start_index, size_t const & last_index)

        Parameters
        ----------
        start_index: size_t const &
        last_index: size_t const &

        """
        return _common.TimeSeriesTable_trimToIndices(self, start_index, last_index)

    def clone(self):
        r"""clone(TimeSeriesTable self) -> TimeSeriesTable"""
        return _common.TimeSeriesTable_clone(self)

    def packVec3(self, *args):
        r"""
        packVec3(TimeSeriesTable self) -> TimeSeriesTableVec3
        packVec3(TimeSeriesTable self, StdVectorString suffixes) -> TimeSeriesTableVec3

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTable_packVec3(self, *args)

    def packUnitVec3(self, *args):
        r"""
        packUnitVec3(TimeSeriesTable self) -> TimeSeriesTableUnitVec3
        packUnitVec3(TimeSeriesTable self, StdVectorString suffixes) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTable_packUnitVec3(self, *args)

    def packQuaternion(self, *args):
        r"""
        packQuaternion(TimeSeriesTable self) -> TimeSeriesTableQuaternion
        packQuaternion(TimeSeriesTable self, StdVectorString suffixes) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTable_packQuaternion(self, *args)

    def packSpatialVec(self, *args):
        r"""
        packSpatialVec(TimeSeriesTable self) -> TimeSeriesTableSpatialVec
        packSpatialVec(TimeSeriesTable self, StdVectorString suffixes) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTable_packSpatialVec(self, *args)

    def packRotation(self, *args):
        r"""
        packRotation(TimeSeriesTable self) -> TimeSeriesTableRotation
        packRotation(TimeSeriesTable self, StdVectorString suffixes) -> TimeSeriesTableRotation

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTable_packRotation(self, *args)

# Register TimeSeriesTable in _common:
_common.TimeSeriesTable_swigregister(TimeSeriesTable)
class TimeSeriesTableVec3(DataTableVec3):
    r"""Proxy of C++ OpenSim::TimeSeriesTable_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableVec3

    def __init__(self, *args):
        r"""
        __init__(TimeSeriesTableVec3 self) -> TimeSeriesTableVec3
        __init__(TimeSeriesTableVec3 self, TimeSeriesTableVec3 arg2) -> TimeSeriesTableVec3

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Vec3 > const &

        __init__(TimeSeriesTableVec3 self, StdVectorDouble indVec, MatrixVec3 depData, StdVectorString labels) -> TimeSeriesTableVec3

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Vec< 3,double,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(TimeSeriesTableVec3 self, StdVectorDouble indVec) -> TimeSeriesTableVec3

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(TimeSeriesTableVec3 self, DataTableVec3 datatable) -> TimeSeriesTableVec3

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Vec< 3,double,1 > > const &

        __init__(TimeSeriesTableVec3 self, std::string const & filename) -> TimeSeriesTableVec3

        Parameters
        ----------
        filename: std::string const &

        __init__(TimeSeriesTableVec3 self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TimeSeriesTableVec3_swiginit(self, _common.new_TimeSeriesTableVec3(*args))

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        r"""
        getNearestRowIndexForTime(TimeSeriesTableVec3 self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableVec3_getNearestRowIndexForTime(self, time, restrictToTimeRange)

    def getRowIndexAfterTime(self, time):
        r"""
        getRowIndexAfterTime(TimeSeriesTableVec3 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec3_getRowIndexAfterTime(self, time)

    def getRowIndexBeforeTime(self, time):
        r"""
        getRowIndexBeforeTime(TimeSeriesTableVec3 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec3_getRowIndexBeforeTime(self, time)

    def getNearestRow(self, time, restrictToTimeRange=True):
        r"""
        getNearestRow(TimeSeriesTableVec3 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewVec3

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableVec3_getNearestRow(self, time, restrictToTimeRange)

    def updNearestRow(self, time, restrictToTimeRange=True):
        r"""
        updNearestRow(TimeSeriesTableVec3 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewVec3

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableVec3_updNearestRow(self, time, restrictToTimeRange)

    def averageRow(self, beginTime, endTime):
        r"""
        averageRow(TimeSeriesTableVec3 self, double const & beginTime, double const & endTime) -> RowVectorVec3

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableVec3_averageRow(self, beginTime, endTime)

    def trim(self, newStartTime, newFinalTime):
        r"""
        trim(TimeSeriesTableVec3 self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableVec3_trim(self, newStartTime, newFinalTime)

    def trimFrom(self, newStartTime):
        r"""
        trimFrom(TimeSeriesTableVec3 self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableVec3_trimFrom(self, newStartTime)

    def trimTo(self, newFinalTime):
        r"""
        trimTo(TimeSeriesTableVec3 self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableVec3_trimTo(self, newFinalTime)

    def trimToIndices(self, start_index, last_index):
        r"""
        trimToIndices(TimeSeriesTableVec3 self, size_t const & start_index, size_t const & last_index)

        Parameters
        ----------
        start_index: size_t const &
        last_index: size_t const &

        """
        return _common.TimeSeriesTableVec3_trimToIndices(self, start_index, last_index)

    def clone(self):
        r"""clone(TimeSeriesTableVec3 self) -> TimeSeriesTableVec3"""
        return _common.TimeSeriesTableVec3_clone(self)

    def flatten(self, *args):
        r"""
        flatten(TimeSeriesTableVec3 self) -> TimeSeriesTable
        flatten(TimeSeriesTableVec3 self, StdVectorString suffixes) -> TimeSeriesTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTableVec3_flatten(self, *args)

# Register TimeSeriesTableVec3 in _common:
_common.TimeSeriesTableVec3_swigregister(TimeSeriesTableVec3)
class TimeSeriesTableUnitVec3(DataTableUnitVec3):
    r"""Proxy of C++ OpenSim::TimeSeriesTable_< SimTK::UnitVec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableUnitVec3

    def __init__(self, *args):
        r"""
        __init__(TimeSeriesTableUnitVec3 self) -> TimeSeriesTableUnitVec3
        __init__(TimeSeriesTableUnitVec3 self, TimeSeriesTableUnitVec3 arg2) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::UnitVec3 > const &

        __init__(TimeSeriesTableUnitVec3 self, StdVectorDouble indVec, SimTK::Matrix_< SimTK::UnitVec< double,1 > > const & depData, StdVectorString labels) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::UnitVec< double,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(TimeSeriesTableUnitVec3 self, StdVectorDouble indVec) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(TimeSeriesTableUnitVec3 self, DataTableUnitVec3 datatable) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::UnitVec< double,1 > > const &

        __init__(TimeSeriesTableUnitVec3 self, std::string const & filename) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        filename: std::string const &

        __init__(TimeSeriesTableUnitVec3 self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableUnitVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TimeSeriesTableUnitVec3_swiginit(self, _common.new_TimeSeriesTableUnitVec3(*args))

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        r"""
        getNearestRowIndexForTime(TimeSeriesTableUnitVec3 self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableUnitVec3_getNearestRowIndexForTime(self, time, restrictToTimeRange)

    def getRowIndexAfterTime(self, time):
        r"""
        getRowIndexAfterTime(TimeSeriesTableUnitVec3 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableUnitVec3_getRowIndexAfterTime(self, time)

    def getRowIndexBeforeTime(self, time):
        r"""
        getRowIndexBeforeTime(TimeSeriesTableUnitVec3 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableUnitVec3_getRowIndexBeforeTime(self, time)

    def getNearestRow(self, time, restrictToTimeRange=True):
        r"""
        getNearestRow(TimeSeriesTableUnitVec3 self, double const & time, bool const restrictToTimeRange=True) -> OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableUnitVec3_getNearestRow(self, time, restrictToTimeRange)

    def updNearestRow(self, time, restrictToTimeRange=True):
        r"""
        updNearestRow(TimeSeriesTableUnitVec3 self, double const & time, bool const restrictToTimeRange=True) -> OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableUnitVec3_updNearestRow(self, time, restrictToTimeRange)

    def averageRow(self, beginTime, endTime):
        r"""
        averageRow(TimeSeriesTableUnitVec3 self, double const & beginTime, double const & endTime) -> OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > >::RowVector

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableUnitVec3_averageRow(self, beginTime, endTime)

    def trim(self, newStartTime, newFinalTime):
        r"""
        trim(TimeSeriesTableUnitVec3 self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableUnitVec3_trim(self, newStartTime, newFinalTime)

    def trimFrom(self, newStartTime):
        r"""
        trimFrom(TimeSeriesTableUnitVec3 self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableUnitVec3_trimFrom(self, newStartTime)

    def trimTo(self, newFinalTime):
        r"""
        trimTo(TimeSeriesTableUnitVec3 self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableUnitVec3_trimTo(self, newFinalTime)

    def trimToIndices(self, start_index, last_index):
        r"""
        trimToIndices(TimeSeriesTableUnitVec3 self, size_t const & start_index, size_t const & last_index)

        Parameters
        ----------
        start_index: size_t const &
        last_index: size_t const &

        """
        return _common.TimeSeriesTableUnitVec3_trimToIndices(self, start_index, last_index)

    def clone(self):
        r"""clone(TimeSeriesTableUnitVec3 self) -> TimeSeriesTableUnitVec3"""
        return _common.TimeSeriesTableUnitVec3_clone(self)

    def flatten(self, *args):
        r"""
        flatten(TimeSeriesTableUnitVec3 self) -> TimeSeriesTable
        flatten(TimeSeriesTableUnitVec3 self, StdVectorString suffixes) -> TimeSeriesTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTableUnitVec3_flatten(self, *args)

# Register TimeSeriesTableUnitVec3 in _common:
_common.TimeSeriesTableUnitVec3_swigregister(TimeSeriesTableUnitVec3)
class TimeSeriesTableQuaternion(DataTableQuaternion):
    r"""Proxy of C++ OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableQuaternion

    def __init__(self, *args):
        r"""
        __init__(TimeSeriesTableQuaternion self) -> TimeSeriesTableQuaternion
        __init__(TimeSeriesTableQuaternion self, TimeSeriesTableQuaternion arg2) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > const &

        __init__(TimeSeriesTableQuaternion self, StdVectorDouble indVec, MatrixQuaternion depData, StdVectorString labels) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Quaternion_< double > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(TimeSeriesTableQuaternion self, StdVectorDouble indVec) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(TimeSeriesTableQuaternion self, DataTableQuaternion datatable) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Quaternion_< double > > const &

        __init__(TimeSeriesTableQuaternion self, std::string const & filename) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        filename: std::string const &

        __init__(TimeSeriesTableQuaternion self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TimeSeriesTableQuaternion_swiginit(self, _common.new_TimeSeriesTableQuaternion(*args))

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        r"""
        getNearestRowIndexForTime(TimeSeriesTableQuaternion self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableQuaternion_getNearestRowIndexForTime(self, time, restrictToTimeRange)

    def getRowIndexAfterTime(self, time):
        r"""
        getRowIndexAfterTime(TimeSeriesTableQuaternion self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableQuaternion_getRowIndexAfterTime(self, time)

    def getRowIndexBeforeTime(self, time):
        r"""
        getRowIndexBeforeTime(TimeSeriesTableQuaternion self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableQuaternion_getRowIndexBeforeTime(self, time)

    def getNearestRow(self, time, restrictToTimeRange=True):
        r"""
        getNearestRow(TimeSeriesTableQuaternion self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewQuaternion

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableQuaternion_getNearestRow(self, time, restrictToTimeRange)

    def updNearestRow(self, time, restrictToTimeRange=True):
        r"""
        updNearestRow(TimeSeriesTableQuaternion self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewQuaternion

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableQuaternion_updNearestRow(self, time, restrictToTimeRange)

    def averageRow(self, beginTime, endTime):
        r"""
        averageRow(TimeSeriesTableQuaternion self, double const & beginTime, double const & endTime) -> RowVectorQuaternion

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableQuaternion_averageRow(self, beginTime, endTime)

    def trim(self, newStartTime, newFinalTime):
        r"""
        trim(TimeSeriesTableQuaternion self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableQuaternion_trim(self, newStartTime, newFinalTime)

    def trimFrom(self, newStartTime):
        r"""
        trimFrom(TimeSeriesTableQuaternion self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableQuaternion_trimFrom(self, newStartTime)

    def trimTo(self, newFinalTime):
        r"""
        trimTo(TimeSeriesTableQuaternion self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableQuaternion_trimTo(self, newFinalTime)

    def trimToIndices(self, start_index, last_index):
        r"""
        trimToIndices(TimeSeriesTableQuaternion self, size_t const & start_index, size_t const & last_index)

        Parameters
        ----------
        start_index: size_t const &
        last_index: size_t const &

        """
        return _common.TimeSeriesTableQuaternion_trimToIndices(self, start_index, last_index)

    def clone(self):
        r"""clone(TimeSeriesTableQuaternion self) -> TimeSeriesTableQuaternion"""
        return _common.TimeSeriesTableQuaternion_clone(self)

# Register TimeSeriesTableQuaternion in _common:
_common.TimeSeriesTableQuaternion_swigregister(TimeSeriesTableQuaternion)
class TimeSeriesTableVec6(DataTableVec6):
    r"""Proxy of C++ OpenSim::TimeSeriesTable_< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableVec6

    def __init__(self, *args):
        r"""
        __init__(TimeSeriesTableVec6 self) -> TimeSeriesTableVec6
        __init__(TimeSeriesTableVec6 self, TimeSeriesTableVec6 arg2) -> TimeSeriesTableVec6

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Vec6 > const &

        __init__(TimeSeriesTableVec6 self, StdVectorDouble indVec, MatrixVec6 depData, StdVectorString labels) -> TimeSeriesTableVec6

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Vec< 6,double,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(TimeSeriesTableVec6 self, StdVectorDouble indVec) -> TimeSeriesTableVec6

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(TimeSeriesTableVec6 self, DataTableVec6 datatable) -> TimeSeriesTableVec6

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Vec< 6,double,1 > > const &

        __init__(TimeSeriesTableVec6 self, std::string const & filename) -> TimeSeriesTableVec6

        Parameters
        ----------
        filename: std::string const &

        __init__(TimeSeriesTableVec6 self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableVec6

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TimeSeriesTableVec6_swiginit(self, _common.new_TimeSeriesTableVec6(*args))

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        r"""
        getNearestRowIndexForTime(TimeSeriesTableVec6 self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableVec6_getNearestRowIndexForTime(self, time, restrictToTimeRange)

    def getRowIndexAfterTime(self, time):
        r"""
        getRowIndexAfterTime(TimeSeriesTableVec6 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec6_getRowIndexAfterTime(self, time)

    def getRowIndexBeforeTime(self, time):
        r"""
        getRowIndexBeforeTime(TimeSeriesTableVec6 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableVec6_getRowIndexBeforeTime(self, time)

    def getNearestRow(self, time, restrictToTimeRange=True):
        r"""
        getNearestRow(TimeSeriesTableVec6 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewVec6

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableVec6_getNearestRow(self, time, restrictToTimeRange)

    def updNearestRow(self, time, restrictToTimeRange=True):
        r"""
        updNearestRow(TimeSeriesTableVec6 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewVec6

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableVec6_updNearestRow(self, time, restrictToTimeRange)

    def averageRow(self, beginTime, endTime):
        r"""
        averageRow(TimeSeriesTableVec6 self, double const & beginTime, double const & endTime) -> RowVectorVec6

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableVec6_averageRow(self, beginTime, endTime)

    def trim(self, newStartTime, newFinalTime):
        r"""
        trim(TimeSeriesTableVec6 self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableVec6_trim(self, newStartTime, newFinalTime)

    def trimFrom(self, newStartTime):
        r"""
        trimFrom(TimeSeriesTableVec6 self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableVec6_trimFrom(self, newStartTime)

    def trimTo(self, newFinalTime):
        r"""
        trimTo(TimeSeriesTableVec6 self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableVec6_trimTo(self, newFinalTime)

    def trimToIndices(self, start_index, last_index):
        r"""
        trimToIndices(TimeSeriesTableVec6 self, size_t const & start_index, size_t const & last_index)

        Parameters
        ----------
        start_index: size_t const &
        last_index: size_t const &

        """
        return _common.TimeSeriesTableVec6_trimToIndices(self, start_index, last_index)

    def clone(self):
        r"""clone(TimeSeriesTableVec6 self) -> TimeSeriesTableVec6"""
        return _common.TimeSeriesTableVec6_clone(self)

    def flatten(self, *args):
        r"""
        flatten(TimeSeriesTableVec6 self) -> TimeSeriesTable
        flatten(TimeSeriesTableVec6 self, StdVectorString suffixes) -> TimeSeriesTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTableVec6_flatten(self, *args)

# Register TimeSeriesTableVec6 in _common:
_common.TimeSeriesTableVec6_swigregister(TimeSeriesTableVec6)
class TimeSeriesTableSpatialVec(DataTableSpatialVec):
    r"""Proxy of C++ OpenSim::TimeSeriesTable_< SimTK::SpatialVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableSpatialVec

    def __init__(self, *args):
        r"""
        __init__(TimeSeriesTableSpatialVec self) -> TimeSeriesTableSpatialVec
        __init__(TimeSeriesTableSpatialVec self, TimeSeriesTableSpatialVec arg2) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::SpatialVec > const &

        __init__(TimeSeriesTableSpatialVec self, StdVectorDouble indVec, MatrixOfSpatialVec depData, StdVectorString labels) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Vec< 2,SimTK::Vec3,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(TimeSeriesTableSpatialVec self, StdVectorDouble indVec) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(TimeSeriesTableSpatialVec self, DataTableSpatialVec datatable) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Vec< 2,SimTK::Vec3,1 > > const &

        __init__(TimeSeriesTableSpatialVec self, std::string const & filename) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        filename: std::string const &

        __init__(TimeSeriesTableSpatialVec self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableSpatialVec

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TimeSeriesTableSpatialVec_swiginit(self, _common.new_TimeSeriesTableSpatialVec(*args))

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        r"""
        getNearestRowIndexForTime(TimeSeriesTableSpatialVec self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableSpatialVec_getNearestRowIndexForTime(self, time, restrictToTimeRange)

    def getRowIndexAfterTime(self, time):
        r"""
        getRowIndexAfterTime(TimeSeriesTableSpatialVec self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableSpatialVec_getRowIndexAfterTime(self, time)

    def getRowIndexBeforeTime(self, time):
        r"""
        getRowIndexBeforeTime(TimeSeriesTableSpatialVec self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableSpatialVec_getRowIndexBeforeTime(self, time)

    def getNearestRow(self, time, restrictToTimeRange=True):
        r"""
        getNearestRow(TimeSeriesTableSpatialVec self, double const & time, bool const restrictToTimeRange=True) -> OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableSpatialVec_getNearestRow(self, time, restrictToTimeRange)

    def updNearestRow(self, time, restrictToTimeRange=True):
        r"""
        updNearestRow(TimeSeriesTableSpatialVec self, double const & time, bool const restrictToTimeRange=True) -> OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVectorView

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableSpatialVec_updNearestRow(self, time, restrictToTimeRange)

    def averageRow(self, beginTime, endTime):
        r"""
        averageRow(TimeSeriesTableSpatialVec self, double const & beginTime, double const & endTime) -> OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > >::RowVector

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableSpatialVec_averageRow(self, beginTime, endTime)

    def trim(self, newStartTime, newFinalTime):
        r"""
        trim(TimeSeriesTableSpatialVec self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableSpatialVec_trim(self, newStartTime, newFinalTime)

    def trimFrom(self, newStartTime):
        r"""
        trimFrom(TimeSeriesTableSpatialVec self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableSpatialVec_trimFrom(self, newStartTime)

    def trimTo(self, newFinalTime):
        r"""
        trimTo(TimeSeriesTableSpatialVec self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableSpatialVec_trimTo(self, newFinalTime)

    def trimToIndices(self, start_index, last_index):
        r"""
        trimToIndices(TimeSeriesTableSpatialVec self, size_t const & start_index, size_t const & last_index)

        Parameters
        ----------
        start_index: size_t const &
        last_index: size_t const &

        """
        return _common.TimeSeriesTableSpatialVec_trimToIndices(self, start_index, last_index)

    def clone(self):
        r"""clone(TimeSeriesTableSpatialVec self) -> TimeSeriesTableSpatialVec"""
        return _common.TimeSeriesTableSpatialVec_clone(self)

    def flatten(self, *args):
        r"""
        flatten(TimeSeriesTableSpatialVec self) -> TimeSeriesTable
        flatten(TimeSeriesTableSpatialVec self, StdVectorString suffixes) -> TimeSeriesTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTableSpatialVec_flatten(self, *args)

# Register TimeSeriesTableSpatialVec in _common:
_common.TimeSeriesTableSpatialVec_swigregister(TimeSeriesTableSpatialVec)
class TimeSeriesTableMat33(DataTableMat33):
    r"""Proxy of C++ OpenSim::TimeSeriesTable_< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableMat33

    def __init__(self, *args):
        r"""
        __init__(TimeSeriesTableMat33 self) -> TimeSeriesTableMat33
        __init__(TimeSeriesTableMat33 self, TimeSeriesTableMat33 arg2) -> TimeSeriesTableMat33

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Mat33 > const &

        __init__(TimeSeriesTableMat33 self, StdVectorDouble indVec, MatrixMat33 depData, StdVectorString labels) -> TimeSeriesTableMat33

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Mat< 3,3,double,3,1 > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(TimeSeriesTableMat33 self, StdVectorDouble indVec) -> TimeSeriesTableMat33

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(TimeSeriesTableMat33 self, DataTableMat33 datatable) -> TimeSeriesTableMat33

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Mat< 3,3,double,3,1 > > const &

        __init__(TimeSeriesTableMat33 self, std::string const & filename) -> TimeSeriesTableMat33

        Parameters
        ----------
        filename: std::string const &

        __init__(TimeSeriesTableMat33 self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableMat33

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TimeSeriesTableMat33_swiginit(self, _common.new_TimeSeriesTableMat33(*args))

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        r"""
        getNearestRowIndexForTime(TimeSeriesTableMat33 self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableMat33_getNearestRowIndexForTime(self, time, restrictToTimeRange)

    def getRowIndexAfterTime(self, time):
        r"""
        getRowIndexAfterTime(TimeSeriesTableMat33 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableMat33_getRowIndexAfterTime(self, time)

    def getRowIndexBeforeTime(self, time):
        r"""
        getRowIndexBeforeTime(TimeSeriesTableMat33 self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableMat33_getRowIndexBeforeTime(self, time)

    def getNearestRow(self, time, restrictToTimeRange=True):
        r"""
        getNearestRow(TimeSeriesTableMat33 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewMat33

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableMat33_getNearestRow(self, time, restrictToTimeRange)

    def updNearestRow(self, time, restrictToTimeRange=True):
        r"""
        updNearestRow(TimeSeriesTableMat33 self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewMat33

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableMat33_updNearestRow(self, time, restrictToTimeRange)

    def averageRow(self, beginTime, endTime):
        r"""
        averageRow(TimeSeriesTableMat33 self, double const & beginTime, double const & endTime) -> RowVectorMat33

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableMat33_averageRow(self, beginTime, endTime)

    def trim(self, newStartTime, newFinalTime):
        r"""
        trim(TimeSeriesTableMat33 self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableMat33_trim(self, newStartTime, newFinalTime)

    def trimFrom(self, newStartTime):
        r"""
        trimFrom(TimeSeriesTableMat33 self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableMat33_trimFrom(self, newStartTime)

    def trimTo(self, newFinalTime):
        r"""
        trimTo(TimeSeriesTableMat33 self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableMat33_trimTo(self, newFinalTime)

    def trimToIndices(self, start_index, last_index):
        r"""
        trimToIndices(TimeSeriesTableMat33 self, size_t const & start_index, size_t const & last_index)

        Parameters
        ----------
        start_index: size_t const &
        last_index: size_t const &

        """
        return _common.TimeSeriesTableMat33_trimToIndices(self, start_index, last_index)

    def clone(self):
        r"""clone(TimeSeriesTableMat33 self) -> TimeSeriesTableMat33"""
        return _common.TimeSeriesTableMat33_clone(self)

# Register TimeSeriesTableMat33 in _common:
_common.TimeSeriesTableMat33_swigregister(TimeSeriesTableMat33)
class TimeSeriesTableRotation(DataTableRotation):
    r"""Proxy of C++ OpenSim::TimeSeriesTable_< SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_TimeSeriesTableRotation

    def __init__(self, *args):
        r"""
        __init__(TimeSeriesTableRotation self) -> TimeSeriesTableRotation
        __init__(TimeSeriesTableRotation self, TimeSeriesTableRotation arg2) -> TimeSeriesTableRotation

        Parameters
        ----------
        arg2: OpenSim::TimeSeriesTable_< SimTK::Rotation_< double > > const &

        __init__(TimeSeriesTableRotation self, StdVectorDouble indVec, MatrixRotation depData, StdVectorString labels) -> TimeSeriesTableRotation

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &
        depData: SimTK::Matrix_< SimTK::Rotation_< double > > const &
        labels: std::vector< std::string,std::allocator< std::string > > const &

        __init__(TimeSeriesTableRotation self, StdVectorDouble indVec) -> TimeSeriesTableRotation

        Parameters
        ----------
        indVec: std::vector< double,std::allocator< double > > const &

        __init__(TimeSeriesTableRotation self, DataTableRotation datatable) -> TimeSeriesTableRotation

        Parameters
        ----------
        datatable: OpenSim::DataTable_< double,SimTK::Rotation_< double > > const &

        __init__(TimeSeriesTableRotation self, std::string const & filename) -> TimeSeriesTableRotation

        Parameters
        ----------
        filename: std::string const &

        __init__(TimeSeriesTableRotation self, std::string const & filename, std::string const & tablename) -> TimeSeriesTableRotation

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TimeSeriesTableRotation_swiginit(self, _common.new_TimeSeriesTableRotation(*args))

    def getNearestRowIndexForTime(self, time, restrictToTimeRange=True):
        r"""
        getNearestRowIndexForTime(TimeSeriesTableRotation self, double const time, bool const restrictToTimeRange=True) -> size_t

        Parameters
        ----------
        time: double const
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableRotation_getNearestRowIndexForTime(self, time, restrictToTimeRange)

    def getRowIndexAfterTime(self, time):
        r"""
        getRowIndexAfterTime(TimeSeriesTableRotation self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableRotation_getRowIndexAfterTime(self, time)

    def getRowIndexBeforeTime(self, time):
        r"""
        getRowIndexBeforeTime(TimeSeriesTableRotation self, double const & time) -> size_t

        Parameters
        ----------
        time: double const &

        """
        return _common.TimeSeriesTableRotation_getRowIndexBeforeTime(self, time)

    def getNearestRow(self, time, restrictToTimeRange=True):
        r"""
        getNearestRow(TimeSeriesTableRotation self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewRotation

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableRotation_getNearestRow(self, time, restrictToTimeRange)

    def updNearestRow(self, time, restrictToTimeRange=True):
        r"""
        updNearestRow(TimeSeriesTableRotation self, double const & time, bool const restrictToTimeRange=True) -> RowVectorViewRotation

        Parameters
        ----------
        time: double const &
        restrictToTimeRange: bool const

        """
        return _common.TimeSeriesTableRotation_updNearestRow(self, time, restrictToTimeRange)

    def averageRow(self, beginTime, endTime):
        r"""
        averageRow(TimeSeriesTableRotation self, double const & beginTime, double const & endTime) -> RowVectorRotation

        Parameters
        ----------
        beginTime: double const &
        endTime: double const &

        """
        return _common.TimeSeriesTableRotation_averageRow(self, beginTime, endTime)

    def trim(self, newStartTime, newFinalTime):
        r"""
        trim(TimeSeriesTableRotation self, double const & newStartTime, double const & newFinalTime)

        Parameters
        ----------
        newStartTime: double const &
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableRotation_trim(self, newStartTime, newFinalTime)

    def trimFrom(self, newStartTime):
        r"""
        trimFrom(TimeSeriesTableRotation self, double const & newStartTime)

        Parameters
        ----------
        newStartTime: double const &

        """
        return _common.TimeSeriesTableRotation_trimFrom(self, newStartTime)

    def trimTo(self, newFinalTime):
        r"""
        trimTo(TimeSeriesTableRotation self, double const & newFinalTime)

        Parameters
        ----------
        newFinalTime: double const &

        """
        return _common.TimeSeriesTableRotation_trimTo(self, newFinalTime)

    def trimToIndices(self, start_index, last_index):
        r"""
        trimToIndices(TimeSeriesTableRotation self, size_t const & start_index, size_t const & last_index)

        Parameters
        ----------
        start_index: size_t const &
        last_index: size_t const &

        """
        return _common.TimeSeriesTableRotation_trimToIndices(self, start_index, last_index)

    def clone(self):
        r"""clone(TimeSeriesTableRotation self) -> TimeSeriesTableRotation"""
        return _common.TimeSeriesTableRotation_clone(self)

    def flatten(self, *args):
        r"""
        flatten(TimeSeriesTableRotation self) -> TimeSeriesTable
        flatten(TimeSeriesTableRotation self, StdVectorString suffixes) -> TimeSeriesTable

        Parameters
        ----------
        suffixes: std::vector< std::string,std::allocator< std::string > >

        """
        return _common.TimeSeriesTableRotation_flatten(self, *args)

# Register TimeSeriesTableRotation in _common:
_common.TimeSeriesTableRotation_swigregister(TimeSeriesTableRotation)
class Event(object):
    r"""Proxy of C++ OpenSim::Event class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    label = property(_common.Event_label_get, _common.Event_label_set, doc=r"""label : std::string""")
    time = property(_common.Event_time_get, _common.Event_time_set, doc=r"""time : double""")
    frame = property(_common.Event_frame_get, _common.Event_frame_set, doc=r"""frame : int""")
    description = property(_common.Event_description_get, _common.Event_description_set, doc=r"""description : std::string""")

    def __init__(self):
        r"""__init__(Event self) -> Event"""
        _common.Event_swiginit(self, _common.new_Event())
    __swig_destroy__ = _common.delete_Event

# Register Event in _common:
_common.Event_swigregister(Event)
class StdVectorEvent(object):
    r"""Proxy of C++ std::vector< OpenSim::Event > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdVectorEvent self) -> SwigPyIterator"""
        return _common.StdVectorEvent_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdVectorEvent self) -> bool"""
        return _common.StdVectorEvent___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdVectorEvent self) -> bool"""
        return _common.StdVectorEvent___bool__(self)

    def __len__(self):
        r"""__len__(StdVectorEvent self) -> std::vector< OpenSim::Event >::size_type"""
        return _common.StdVectorEvent___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, std::vector< OpenSim::Event >::difference_type j) -> StdVectorEvent

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        j: std::vector< OpenSim::Event >::difference_type

        """
        return _common.StdVectorEvent___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, std::vector< OpenSim::Event >::difference_type j)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        j: std::vector< OpenSim::Event >::difference_type

        __setslice__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, std::vector< OpenSim::Event >::difference_type j, StdVectorEvent v)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        j: std::vector< OpenSim::Event >::difference_type
        v: std::vector< OpenSim::Event,std::allocator< OpenSim::Event > > const &

        """
        return _common.StdVectorEvent___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, std::vector< OpenSim::Event >::difference_type j)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        j: std::vector< OpenSim::Event >::difference_type

        """
        return _common.StdVectorEvent___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type

        __delitem__(StdVectorEvent self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _common.StdVectorEvent___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StdVectorEvent self, SWIGPY_SLICEOBJECT * slice) -> StdVectorEvent

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i) -> Event

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type

        """
        return _common.StdVectorEvent___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdVectorEvent self, SWIGPY_SLICEOBJECT * slice, StdVectorEvent v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< OpenSim::Event,std::allocator< OpenSim::Event > > const &

        __setitem__(StdVectorEvent self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(StdVectorEvent self, std::vector< OpenSim::Event >::difference_type i, Event x)

        Parameters
        ----------
        i: std::vector< OpenSim::Event >::difference_type
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent___setitem__(self, *args)

    def pop(self):
        r"""pop(StdVectorEvent self) -> Event"""
        return _common.StdVectorEvent_pop(self)

    def append(self, x):
        r"""
        append(StdVectorEvent self, Event x)

        Parameters
        ----------
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_append(self, x)

    def empty(self):
        r"""empty(StdVectorEvent self) -> bool"""
        return _common.StdVectorEvent_empty(self)

    def size(self):
        r"""size(StdVectorEvent self) -> std::vector< OpenSim::Event >::size_type"""
        return _common.StdVectorEvent_size(self)

    def swap(self, v):
        r"""
        swap(StdVectorEvent self, StdVectorEvent v)

        Parameters
        ----------
        v: std::vector< OpenSim::Event > &

        """
        return _common.StdVectorEvent_swap(self, v)

    def begin(self):
        r"""begin(StdVectorEvent self) -> std::vector< OpenSim::Event >::iterator"""
        return _common.StdVectorEvent_begin(self)

    def end(self):
        r"""end(StdVectorEvent self) -> std::vector< OpenSim::Event >::iterator"""
        return _common.StdVectorEvent_end(self)

    def rbegin(self):
        r"""rbegin(StdVectorEvent self) -> std::vector< OpenSim::Event >::reverse_iterator"""
        return _common.StdVectorEvent_rbegin(self)

    def rend(self):
        r"""rend(StdVectorEvent self) -> std::vector< OpenSim::Event >::reverse_iterator"""
        return _common.StdVectorEvent_rend(self)

    def clear(self):
        r"""clear(StdVectorEvent self)"""
        return _common.StdVectorEvent_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdVectorEvent self) -> std::vector< OpenSim::Event >::allocator_type"""
        return _common.StdVectorEvent_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StdVectorEvent self)"""
        return _common.StdVectorEvent_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StdVectorEvent self, std::vector< OpenSim::Event >::iterator pos) -> std::vector< OpenSim::Event >::iterator

        Parameters
        ----------
        pos: std::vector< OpenSim::Event >::iterator

        erase(StdVectorEvent self, std::vector< OpenSim::Event >::iterator first, std::vector< OpenSim::Event >::iterator last) -> std::vector< OpenSim::Event >::iterator

        Parameters
        ----------
        first: std::vector< OpenSim::Event >::iterator
        last: std::vector< OpenSim::Event >::iterator

        """
        return _common.StdVectorEvent_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StdVectorEvent self) -> StdVectorEvent
        __init__(StdVectorEvent self, StdVectorEvent other) -> StdVectorEvent

        Parameters
        ----------
        other: std::vector< OpenSim::Event > const &

        __init__(StdVectorEvent self, std::vector< OpenSim::Event >::size_type size) -> StdVectorEvent

        Parameters
        ----------
        size: std::vector< OpenSim::Event >::size_type

        __init__(StdVectorEvent self, std::vector< OpenSim::Event >::size_type size, Event value) -> StdVectorEvent

        Parameters
        ----------
        size: std::vector< OpenSim::Event >::size_type
        value: std::vector< OpenSim::Event >::value_type const &

        """
        _common.StdVectorEvent_swiginit(self, _common.new_StdVectorEvent(*args))

    def push_back(self, x):
        r"""
        push_back(StdVectorEvent self, Event x)

        Parameters
        ----------
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_push_back(self, x)

    def front(self):
        r"""front(StdVectorEvent self) -> Event"""
        return _common.StdVectorEvent_front(self)

    def back(self):
        r"""back(StdVectorEvent self) -> Event"""
        return _common.StdVectorEvent_back(self)

    def assign(self, n, x):
        r"""
        assign(StdVectorEvent self, std::vector< OpenSim::Event >::size_type n, Event x)

        Parameters
        ----------
        n: std::vector< OpenSim::Event >::size_type
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StdVectorEvent self, std::vector< OpenSim::Event >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< OpenSim::Event >::size_type

        resize(StdVectorEvent self, std::vector< OpenSim::Event >::size_type new_size, Event x)

        Parameters
        ----------
        new_size: std::vector< OpenSim::Event >::size_type
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StdVectorEvent self, std::vector< OpenSim::Event >::iterator pos, Event x) -> std::vector< OpenSim::Event >::iterator

        Parameters
        ----------
        pos: std::vector< OpenSim::Event >::iterator
        x: std::vector< OpenSim::Event >::value_type const &

        insert(StdVectorEvent self, std::vector< OpenSim::Event >::iterator pos, std::vector< OpenSim::Event >::size_type n, Event x)

        Parameters
        ----------
        pos: std::vector< OpenSim::Event >::iterator
        n: std::vector< OpenSim::Event >::size_type
        x: std::vector< OpenSim::Event >::value_type const &

        """
        return _common.StdVectorEvent_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StdVectorEvent self, std::vector< OpenSim::Event >::size_type n)

        Parameters
        ----------
        n: std::vector< OpenSim::Event >::size_type

        """
        return _common.StdVectorEvent_reserve(self, n)

    def capacity(self):
        r"""capacity(StdVectorEvent self) -> std::vector< OpenSim::Event >::size_type"""
        return _common.StdVectorEvent_capacity(self)
    __swig_destroy__ = _common.delete_StdVectorEvent

# Register StdVectorEvent in _common:
_common.StdVectorEvent_swigregister(StdVectorEvent)
class StdMapStringDataAdapter(object):
    r"""Proxy of C++ std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdMapStringDataAdapter self) -> SwigPyIterator"""
        return _common.StdMapStringDataAdapter_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdMapStringDataAdapter self) -> bool"""
        return _common.StdMapStringDataAdapter___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdMapStringDataAdapter self) -> bool"""
        return _common.StdMapStringDataAdapter___bool__(self)

    def __len__(self):
        r"""__len__(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::size_type"""
        return _common.StdMapStringDataAdapter___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_has_key(self, key)

    def keys(self):
        r"""keys(StdMapStringDataAdapter self) -> PyObject *"""
        return _common.StdMapStringDataAdapter_keys(self)

    def values(self):
        r"""values(StdMapStringDataAdapter self) -> PyObject *"""
        return _common.StdMapStringDataAdapter_values(self)

    def items(self):
        r"""items(StdMapStringDataAdapter self) -> PyObject *"""
        return _common.StdMapStringDataAdapter_items(self)

    def __contains__(self, key):
        r"""
        __contains__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(StdMapStringDataAdapter self) -> SwigPyIterator"""
        return _common.StdMapStringDataAdapter_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(StdMapStringDataAdapter self) -> SwigPyIterator"""
        return _common.StdMapStringDataAdapter_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        __setitem__(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & key, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::mapped_type const &

        """
        return _common.StdMapStringDataAdapter___setitem__(self, *args)

    def asdict(self):
        r"""asdict(StdMapStringDataAdapter self) -> PyObject *"""
        return _common.StdMapStringDataAdapter_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(StdMapStringDataAdapter self, std::less< std::string > const & other) -> StdMapStringDataAdapter

        Parameters
        ----------
        other: std::less< std::string > const &

        __init__(StdMapStringDataAdapter self) -> StdMapStringDataAdapter
        __init__(StdMapStringDataAdapter self, StdMapStringDataAdapter other) -> StdMapStringDataAdapter

        Parameters
        ----------
        other: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > const &

        """
        _common.StdMapStringDataAdapter_swiginit(self, _common.new_StdMapStringDataAdapter(*args))

    def empty(self):
        r"""empty(StdMapStringDataAdapter self) -> bool"""
        return _common.StdMapStringDataAdapter_empty(self)

    def size(self):
        r"""size(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::size_type"""
        return _common.StdMapStringDataAdapter_size(self)

    def swap(self, v):
        r"""
        swap(StdMapStringDataAdapter self, StdMapStringDataAdapter v)

        Parameters
        ----------
        v: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > > &

        """
        return _common.StdMapStringDataAdapter_swap(self, v)

    def begin(self):
        r"""begin(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator"""
        return _common.StdMapStringDataAdapter_begin(self)

    def end(self):
        r"""end(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator"""
        return _common.StdMapStringDataAdapter_end(self)

    def rbegin(self):
        r"""rbegin(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::reverse_iterator"""
        return _common.StdMapStringDataAdapter_rbegin(self)

    def rend(self):
        r"""rend(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::reverse_iterator"""
        return _common.StdMapStringDataAdapter_rend(self)

    def clear(self):
        r"""clear(StdMapStringDataAdapter self)"""
        return _common.StdMapStringDataAdapter_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdMapStringDataAdapter self) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::allocator_type"""
        return _common.StdMapStringDataAdapter_get_allocator(self)

    def count(self, x):
        r"""
        count(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_count(self, x)

    def erase(self, *args):
        r"""
        erase(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        erase(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        erase(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator first, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator
        last: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        """
        return _common.StdMapStringDataAdapter_erase(self, *args)

    def find(self, x):
        r"""
        find(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(StdMapStringDataAdapter self, std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::DataAdapter > >::key_type const &

        """
        return _common.StdMapStringDataAdapter_upper_bound(self, x)
    __swig_destroy__ = _common.delete_StdMapStringDataAdapter

# Register StdMapStringDataAdapter in _common:
_common.StdMapStringDataAdapter_swigregister(StdMapStringDataAdapter)
class StdMapStringAbstractDataTable(object):
    r"""Proxy of C++ std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdMapStringAbstractDataTable self) -> SwigPyIterator"""
        return _common.StdMapStringAbstractDataTable_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdMapStringAbstractDataTable self) -> bool"""
        return _common.StdMapStringAbstractDataTable___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdMapStringAbstractDataTable self) -> bool"""
        return _common.StdMapStringAbstractDataTable___bool__(self)

    def __len__(self):
        r"""__len__(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::size_type"""
        return _common.StdMapStringAbstractDataTable___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_has_key(self, key)

    def keys(self):
        r"""keys(StdMapStringAbstractDataTable self) -> PyObject *"""
        return _common.StdMapStringAbstractDataTable_keys(self)

    def values(self):
        r"""values(StdMapStringAbstractDataTable self) -> PyObject *"""
        return _common.StdMapStringAbstractDataTable_values(self)

    def items(self):
        r"""items(StdMapStringAbstractDataTable self) -> PyObject *"""
        return _common.StdMapStringAbstractDataTable_items(self)

    def __contains__(self, key):
        r"""
        __contains__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(StdMapStringAbstractDataTable self) -> SwigPyIterator"""
        return _common.StdMapStringAbstractDataTable_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(StdMapStringAbstractDataTable self) -> SwigPyIterator"""
        return _common.StdMapStringAbstractDataTable_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        __setitem__(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & key, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::mapped_type const &

        """
        return _common.StdMapStringAbstractDataTable___setitem__(self, *args)

    def asdict(self):
        r"""asdict(StdMapStringAbstractDataTable self) -> PyObject *"""
        return _common.StdMapStringAbstractDataTable_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(StdMapStringAbstractDataTable self, std::less< std::string > const & other) -> StdMapStringAbstractDataTable

        Parameters
        ----------
        other: std::less< std::string > const &

        __init__(StdMapStringAbstractDataTable self) -> StdMapStringAbstractDataTable
        __init__(StdMapStringAbstractDataTable self, StdMapStringAbstractDataTable other) -> StdMapStringAbstractDataTable

        Parameters
        ----------
        other: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > const &

        """
        _common.StdMapStringAbstractDataTable_swiginit(self, _common.new_StdMapStringAbstractDataTable(*args))

    def empty(self):
        r"""empty(StdMapStringAbstractDataTable self) -> bool"""
        return _common.StdMapStringAbstractDataTable_empty(self)

    def size(self):
        r"""size(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::size_type"""
        return _common.StdMapStringAbstractDataTable_size(self)

    def swap(self, v):
        r"""
        swap(StdMapStringAbstractDataTable self, StdMapStringAbstractDataTable v)

        Parameters
        ----------
        v: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > > &

        """
        return _common.StdMapStringAbstractDataTable_swap(self, v)

    def begin(self):
        r"""begin(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator"""
        return _common.StdMapStringAbstractDataTable_begin(self)

    def end(self):
        r"""end(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator"""
        return _common.StdMapStringAbstractDataTable_end(self)

    def rbegin(self):
        r"""rbegin(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::reverse_iterator"""
        return _common.StdMapStringAbstractDataTable_rbegin(self)

    def rend(self):
        r"""rend(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::reverse_iterator"""
        return _common.StdMapStringAbstractDataTable_rend(self)

    def clear(self):
        r"""clear(StdMapStringAbstractDataTable self)"""
        return _common.StdMapStringAbstractDataTable_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdMapStringAbstractDataTable self) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::allocator_type"""
        return _common.StdMapStringAbstractDataTable_get_allocator(self)

    def count(self, x):
        r"""
        count(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_count(self, x)

    def erase(self, *args):
        r"""
        erase(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        erase(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        erase(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator first, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator
        last: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        """
        return _common.StdMapStringAbstractDataTable_erase(self, *args)

    def find(self, x):
        r"""
        find(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(StdMapStringAbstractDataTable self, std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const & x) -> std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::shared_ptr< OpenSim::AbstractDataTable > >::key_type const &

        """
        return _common.StdMapStringAbstractDataTable_upper_bound(self, x)
    __swig_destroy__ = _common.delete_StdMapStringAbstractDataTable

# Register StdMapStringAbstractDataTable in _common:
_common.StdMapStringAbstractDataTable_swigregister(StdMapStringAbstractDataTable)
class DataAdapterAlreadyRegistered(OpenSimException):
    r"""Proxy of C++ OpenSim::DataAdapterAlreadyRegistered class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        r"""
        __init__(DataAdapterAlreadyRegistered self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> DataAdapterAlreadyRegistered

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        _common.DataAdapterAlreadyRegistered_swiginit(self, _common.new_DataAdapterAlreadyRegistered(file, line, func, key))
    __swig_destroy__ = _common.delete_DataAdapterAlreadyRegistered

# Register DataAdapterAlreadyRegistered in _common:
_common.DataAdapterAlreadyRegistered_swigregister(DataAdapterAlreadyRegistered)
class NoRegisteredDataAdapter(OpenSimException):
    r"""Proxy of C++ OpenSim::NoRegisteredDataAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        r"""
        __init__(NoRegisteredDataAdapter self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> NoRegisteredDataAdapter

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        _common.NoRegisteredDataAdapter_swiginit(self, _common.new_NoRegisteredDataAdapter(file, line, func, key))
    __swig_destroy__ = _common.delete_NoRegisteredDataAdapter

# Register NoRegisteredDataAdapter in _common:
_common.NoRegisteredDataAdapter_swigregister(NoRegisteredDataAdapter)
class TableNotFoundException(OpenSimException):
    r"""Proxy of C++ OpenSim::TableNotFoundException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""
        __init__(TableNotFoundException self, std::string const & name) -> TableNotFoundException

        Parameters
        ----------
        name: std::string const &

        """
        _common.TableNotFoundException_swiginit(self, _common.new_TableNotFoundException(name))
    __swig_destroy__ = _common.delete_TableNotFoundException

# Register TableNotFoundException in _common:
_common.TableNotFoundException_swigregister(TableNotFoundException)
class DataAdapter(object):
    r"""Proxy of C++ OpenSim::DataAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def clone(self):
        r"""clone(DataAdapter self) -> DataAdapter"""
        return _common.DataAdapter_clone(self)
    __swig_destroy__ = _common.delete_DataAdapter

    @staticmethod
    def registerDataAdapter(identifier, adapter):
        r"""
        registerDataAdapter(std::string const & identifier, DataAdapter adapter) -> bool

        Parameters
        ----------
        identifier: std::string const &
        adapter: OpenSim::DataAdapter const &

        """
        return _common.DataAdapter_registerDataAdapter(identifier, adapter)

    def read(self, dataSourceSpecification):
        r"""
        read(DataAdapter self, std::string const & dataSourceSpecification) -> StdMapStringAbstractDataTable

        Parameters
        ----------
        dataSourceSpecification: std::string const &

        """
        return _common.DataAdapter_read(self, dataSourceSpecification)

    def getDataTable(self, tables, tableName):
        r"""
        getDataTable(DataAdapter self, StdMapStringAbstractDataTable tables, std::string const tableName) -> std::shared_ptr< OpenSim::AbstractDataTable > const

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &
        tableName: std::string const

        """
        return _common.DataAdapter_getDataTable(self, tables, tableName)

# Register DataAdapter in _common:
_common.DataAdapter_swigregister(DataAdapter)
class ExperimentalSensor(OpenSimObject):
    r"""Proxy of C++ OpenSim::ExperimentalSensor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ExperimentalSensor

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ExperimentalSensor_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ExperimentalSensor self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ExperimentalSensor_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ExperimentalSensor_getClassName()

    def clone(self):
        r"""clone(ExperimentalSensor self) -> ExperimentalSensor"""
        return _common.ExperimentalSensor_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ExperimentalSensor self) -> std::string const &"""
        return _common.ExperimentalSensor_getConcreteClassName(self)

    def copyProperty_name_in_model(self, source):
        r"""
        copyProperty_name_in_model(ExperimentalSensor self, ExperimentalSensor source)

        Parameters
        ----------
        source: OpenSim::ExperimentalSensor::Self const &

        """
        return _common.ExperimentalSensor_copyProperty_name_in_model(self, source)

    def append_name_in_model(self, value):
        r"""
        append_name_in_model(ExperimentalSensor self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.ExperimentalSensor_append_name_in_model(self, value)

    def constructProperty_name_in_model(self, initValue):
        r"""
        constructProperty_name_in_model(ExperimentalSensor self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.ExperimentalSensor_constructProperty_name_in_model(self, initValue)

    def get_name_in_model(self, *args):
        r"""
        get_name_in_model(ExperimentalSensor self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_name_in_model(ExperimentalSensor self) -> std::string const &
        """
        return _common.ExperimentalSensor_get_name_in_model(self, *args)

    def upd_name_in_model(self, *args):
        r"""
        upd_name_in_model(ExperimentalSensor self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_name_in_model(ExperimentalSensor self) -> std::string &
        """
        return _common.ExperimentalSensor_upd_name_in_model(self, *args)

    def set_name_in_model(self, *args):
        r"""
        set_name_in_model(ExperimentalSensor self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_name_in_model(ExperimentalSensor self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.ExperimentalSensor_set_name_in_model(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ExperimentalSensor self, std::string const & sensorName, std::string const & nameInModel) -> ExperimentalSensor

        Parameters
        ----------
        sensorName: std::string const &
        nameInModel: std::string const &

        __init__(ExperimentalSensor self) -> ExperimentalSensor
        """
        _common.ExperimentalSensor_swiginit(self, _common.new_ExperimentalSensor(*args))
    __swig_destroy__ = _common.delete_ExperimentalSensor

# Register ExperimentalSensor in _common:
_common.ExperimentalSensor_swigregister(ExperimentalSensor)
class IMUDataReader(DataAdapter):
    r"""Proxy of C++ OpenSim::IMUDataReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_IMUDataReader

    @staticmethod
    def getOrientationsTable(tables):
        r"""
        getOrientationsTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableQuaternion

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &

        """
        return _common.IMUDataReader_getOrientationsTable(tables)

    @staticmethod
    def getLinearAccelerationsTable(tables):
        r"""
        getLinearAccelerationsTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableVec3

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &

        """
        return _common.IMUDataReader_getLinearAccelerationsTable(tables)

    @staticmethod
    def getMagneticHeadingTable(tables):
        r"""
        getMagneticHeadingTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableVec3

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &

        """
        return _common.IMUDataReader_getMagneticHeadingTable(tables)

    @staticmethod
    def getAngularVelocityTable(tables):
        r"""
        getAngularVelocityTable(StdMapStringAbstractDataTable tables) -> TimeSeriesTableVec3

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables const &

        """
        return _common.IMUDataReader_getAngularVelocityTable(tables)

# Register IMUDataReader in _common:
_common.IMUDataReader_swigregister(IMUDataReader)
IMUDataReader.Orientations = _common.cvar.IMUDataReader_Orientations
IMUDataReader.LinearAccelerations = _common.cvar.IMUDataReader_LinearAccelerations
IMUDataReader.MagneticHeading = _common.cvar.IMUDataReader_MagneticHeading
IMUDataReader.AngularVelocity = _common.cvar.IMUDataReader_AngularVelocity

class XsensDataReaderSettings(OpenSimObject):
    r"""Proxy of C++ OpenSim::XsensDataReaderSettings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> XsensDataReaderSettings

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.XsensDataReaderSettings_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(XsensDataReaderSettings self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.XsensDataReaderSettings_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.XsensDataReaderSettings_getClassName()

    def clone(self):
        r"""clone(XsensDataReaderSettings self) -> XsensDataReaderSettings"""
        return _common.XsensDataReaderSettings_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(XsensDataReaderSettings self) -> std::string const &"""
        return _common.XsensDataReaderSettings_getConcreteClassName(self)

    def copyProperty_data_folder(self, source):
        r"""
        copyProperty_data_folder(XsensDataReaderSettings self, XsensDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::XsensDataReaderSettings::Self const &

        """
        return _common.XsensDataReaderSettings_copyProperty_data_folder(self, source)

    def append_data_folder(self, value):
        r"""
        append_data_folder(XsensDataReaderSettings self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_append_data_folder(self, value)

    def constructProperty_data_folder(self, initValue):
        r"""
        constructProperty_data_folder(XsensDataReaderSettings self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.XsensDataReaderSettings_constructProperty_data_folder(self, initValue)

    def get_data_folder(self, *args):
        r"""
        get_data_folder(XsensDataReaderSettings self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_data_folder(XsensDataReaderSettings self) -> std::string const &
        """
        return _common.XsensDataReaderSettings_get_data_folder(self, *args)

    def upd_data_folder(self, *args):
        r"""
        upd_data_folder(XsensDataReaderSettings self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_data_folder(XsensDataReaderSettings self) -> std::string &
        """
        return _common.XsensDataReaderSettings_upd_data_folder(self, *args)

    def set_data_folder(self, *args):
        r"""
        set_data_folder(XsensDataReaderSettings self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_data_folder(XsensDataReaderSettings self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_set_data_folder(self, *args)

    def copyProperty_trial_prefix(self, source):
        r"""
        copyProperty_trial_prefix(XsensDataReaderSettings self, XsensDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::XsensDataReaderSettings::Self const &

        """
        return _common.XsensDataReaderSettings_copyProperty_trial_prefix(self, source)

    def append_trial_prefix(self, value):
        r"""
        append_trial_prefix(XsensDataReaderSettings self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_append_trial_prefix(self, value)

    def constructProperty_trial_prefix(self, initValue):
        r"""
        constructProperty_trial_prefix(XsensDataReaderSettings self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.XsensDataReaderSettings_constructProperty_trial_prefix(self, initValue)

    def get_trial_prefix(self, *args):
        r"""
        get_trial_prefix(XsensDataReaderSettings self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_trial_prefix(XsensDataReaderSettings self) -> std::string const &
        """
        return _common.XsensDataReaderSettings_get_trial_prefix(self, *args)

    def upd_trial_prefix(self, *args):
        r"""
        upd_trial_prefix(XsensDataReaderSettings self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_trial_prefix(XsensDataReaderSettings self) -> std::string &
        """
        return _common.XsensDataReaderSettings_upd_trial_prefix(self, *args)

    def set_trial_prefix(self, *args):
        r"""
        set_trial_prefix(XsensDataReaderSettings self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_trial_prefix(XsensDataReaderSettings self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_set_trial_prefix(self, *args)

    def copyProperty_trial_extension(self, source):
        r"""
        copyProperty_trial_extension(XsensDataReaderSettings self, XsensDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::XsensDataReaderSettings::Self const &

        """
        return _common.XsensDataReaderSettings_copyProperty_trial_extension(self, source)

    def append_trial_extension(self, value):
        r"""
        append_trial_extension(XsensDataReaderSettings self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_append_trial_extension(self, value)

    def constructProperty_trial_extension(self, initValue):
        r"""
        constructProperty_trial_extension(XsensDataReaderSettings self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.XsensDataReaderSettings_constructProperty_trial_extension(self, initValue)

    def get_trial_extension(self, *args):
        r"""
        get_trial_extension(XsensDataReaderSettings self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_trial_extension(XsensDataReaderSettings self) -> std::string const &
        """
        return _common.XsensDataReaderSettings_get_trial_extension(self, *args)

    def upd_trial_extension(self, *args):
        r"""
        upd_trial_extension(XsensDataReaderSettings self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_trial_extension(XsensDataReaderSettings self) -> std::string &
        """
        return _common.XsensDataReaderSettings_upd_trial_extension(self, *args)

    def set_trial_extension(self, *args):
        r"""
        set_trial_extension(XsensDataReaderSettings self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_trial_extension(XsensDataReaderSettings self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.XsensDataReaderSettings_set_trial_extension(self, *args)

    def copyProperty_sampling_rate(self, source):
        r"""
        copyProperty_sampling_rate(XsensDataReaderSettings self, XsensDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::XsensDataReaderSettings::Self const &

        """
        return _common.XsensDataReaderSettings_copyProperty_sampling_rate(self, source)

    def append_sampling_rate(self, value):
        r"""
        append_sampling_rate(XsensDataReaderSettings self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _common.XsensDataReaderSettings_append_sampling_rate(self, value)

    def constructProperty_sampling_rate(self, initValue):
        r"""
        constructProperty_sampling_rate(XsensDataReaderSettings self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _common.XsensDataReaderSettings_constructProperty_sampling_rate(self, initValue)

    def get_sampling_rate(self, *args):
        r"""
        get_sampling_rate(XsensDataReaderSettings self, int i) -> double const

        Parameters
        ----------
        i: int

        get_sampling_rate(XsensDataReaderSettings self) -> double const &
        """
        return _common.XsensDataReaderSettings_get_sampling_rate(self, *args)

    def upd_sampling_rate(self, *args):
        r"""
        upd_sampling_rate(XsensDataReaderSettings self, int i) -> double

        Parameters
        ----------
        i: int

        upd_sampling_rate(XsensDataReaderSettings self) -> double &
        """
        return _common.XsensDataReaderSettings_upd_sampling_rate(self, *args)

    def set_sampling_rate(self, *args):
        r"""
        set_sampling_rate(XsensDataReaderSettings self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_sampling_rate(XsensDataReaderSettings self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _common.XsensDataReaderSettings_set_sampling_rate(self, *args)

    def copyProperty_ExperimentalSensors(self, source):
        r"""
        copyProperty_ExperimentalSensors(XsensDataReaderSettings self, XsensDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::XsensDataReaderSettings::Self const &

        """
        return _common.XsensDataReaderSettings_copyProperty_ExperimentalSensors(self, source)

    def get_ExperimentalSensors(self, i):
        r"""
        get_ExperimentalSensors(XsensDataReaderSettings self, int i) -> ExperimentalSensor

        Parameters
        ----------
        i: int

        """
        return _common.XsensDataReaderSettings_get_ExperimentalSensors(self, i)

    def upd_ExperimentalSensors(self, i):
        r"""
        upd_ExperimentalSensors(XsensDataReaderSettings self, int i) -> ExperimentalSensor

        Parameters
        ----------
        i: int

        """
        return _common.XsensDataReaderSettings_upd_ExperimentalSensors(self, i)

    def set_ExperimentalSensors(self, i, value):
        r"""
        set_ExperimentalSensors(XsensDataReaderSettings self, int i, ExperimentalSensor value)

        Parameters
        ----------
        i: int
        value: OpenSim::ExperimentalSensor const &

        """
        return _common.XsensDataReaderSettings_set_ExperimentalSensors(self, i, value)

    def append_ExperimentalSensors(self, value):
        r"""
        append_ExperimentalSensors(XsensDataReaderSettings self, ExperimentalSensor value) -> int

        Parameters
        ----------
        value: OpenSim::ExperimentalSensor const &

        """
        return _common.XsensDataReaderSettings_append_ExperimentalSensors(self, value)

    def constructProperty_ExperimentalSensors(self):
        r"""constructProperty_ExperimentalSensors(XsensDataReaderSettings self)"""
        return _common.XsensDataReaderSettings_constructProperty_ExperimentalSensors(self)

    def __init__(self, *args):
        r"""
        __init__(XsensDataReaderSettings self) -> XsensDataReaderSettings
        __init__(XsensDataReaderSettings self, std::string const & xmlFile) -> XsensDataReaderSettings

        Parameters
        ----------
        xmlFile: std::string const &

        """
        _common.XsensDataReaderSettings_swiginit(self, _common.new_XsensDataReaderSettings(*args))
    __swig_destroy__ = _common.delete_XsensDataReaderSettings

# Register XsensDataReaderSettings in _common:
_common.XsensDataReaderSettings_swigregister(XsensDataReaderSettings)
class XsensDataReader(IMUDataReader):
    r"""Proxy of C++ OpenSim::XsensDataReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(XsensDataReader self) -> XsensDataReader
        __init__(XsensDataReader self, XsensDataReaderSettings settings) -> XsensDataReader

        Parameters
        ----------
        settings: OpenSim::XsensDataReaderSettings const &

        """
        _common.XsensDataReader_swiginit(self, _common.new_XsensDataReader(*args))
    __swig_destroy__ = _common.delete_XsensDataReader

    def clone(self):
        r"""clone(XsensDataReader self) -> XsensDataReader"""
        return _common.XsensDataReader_clone(self)

    def getSettings(self):
        r"""getSettings(XsensDataReader self) -> XsensDataReaderSettings"""
        return _common.XsensDataReader_getSettings(self)

    def updSettings(self):
        r"""updSettings(XsensDataReader self) -> XsensDataReaderSettings"""
        return _common.XsensDataReader_updSettings(self)

# Register XsensDataReader in _common:
_common.XsensDataReader_swigregister(XsensDataReader)
class EmptyFileName(InvalidArgument):
    r"""Proxy of C++ OpenSim::EmptyFileName class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        r"""
        __init__(EmptyFileName self, std::string const & file, size_t line, std::string const & func) -> EmptyFileName

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        _common.EmptyFileName_swiginit(self, _common.new_EmptyFileName(file, line, func))
    __swig_destroy__ = _common.delete_EmptyFileName

# Register EmptyFileName in _common:
_common.EmptyFileName_swigregister(EmptyFileName)
class FileDoesNotExist(IOError):
    r"""Proxy of C++ OpenSim::FileDoesNotExist class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename):
        r"""
        __init__(FileDoesNotExist self, std::string const & file, size_t line, std::string const & func, std::string const filename) -> FileDoesNotExist

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const

        """
        _common.FileDoesNotExist_swiginit(self, _common.new_FileDoesNotExist(file, line, func, filename))
    __swig_destroy__ = _common.delete_FileDoesNotExist

# Register FileDoesNotExist in _common:
_common.FileDoesNotExist_swigregister(FileDoesNotExist)
class FileIsEmpty(IOError):
    r"""Proxy of C++ OpenSim::FileIsEmpty class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename):
        r"""
        __init__(FileIsEmpty self, std::string const & file, size_t line, std::string const & func, std::string const & filename) -> FileIsEmpty

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &

        """
        _common.FileIsEmpty_swiginit(self, _common.new_FileIsEmpty(file, line, func, filename))
    __swig_destroy__ = _common.delete_FileIsEmpty

# Register FileIsEmpty in _common:
_common.FileIsEmpty_swigregister(FileIsEmpty)
class FileExtensionNotFound(InvalidArgument):
    r"""Proxy of C++ OpenSim::FileExtensionNotFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename):
        r"""
        __init__(FileExtensionNotFound self, std::string const & file, size_t line, std::string const & func, std::string const & filename) -> FileExtensionNotFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &

        """
        _common.FileExtensionNotFound_swiginit(self, _common.new_FileExtensionNotFound(file, line, func, filename))
    __swig_destroy__ = _common.delete_FileExtensionNotFound

# Register FileExtensionNotFound in _common:
_common.FileExtensionNotFound_swigregister(FileExtensionNotFound)
class UnexpectedColumnLabel(IOError):
    r"""Proxy of C++ OpenSim::UnexpectedColumnLabel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, expected, received):
        r"""
        __init__(UnexpectedColumnLabel self, std::string const & file, size_t line, std::string const & func, std::string const & filename, std::string const & expected, std::string const & received) -> UnexpectedColumnLabel

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        expected: std::string const &
        received: std::string const &

        """
        _common.UnexpectedColumnLabel_swiginit(self, _common.new_UnexpectedColumnLabel(file, line, func, filename, expected, received))
    __swig_destroy__ = _common.delete_UnexpectedColumnLabel

# Register UnexpectedColumnLabel in _common:
_common.UnexpectedColumnLabel_swigregister(UnexpectedColumnLabel)
class RowLengthMismatch(IOError):
    r"""Proxy of C++ OpenSim::RowLengthMismatch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, line_num, expected, received):
        r"""
        __init__(RowLengthMismatch self, std::string const & file, size_t line, std::string const & func, std::string const & filename, size_t line_num, size_t expected, size_t received) -> RowLengthMismatch

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        line_num: size_t
        expected: size_t
        received: size_t

        """
        _common.RowLengthMismatch_swiginit(self, _common.new_RowLengthMismatch(file, line, func, filename, line_num, expected, received))
    __swig_destroy__ = _common.delete_RowLengthMismatch

# Register RowLengthMismatch in _common:
_common.RowLengthMismatch_swigregister(RowLengthMismatch)
class NoTableFound(InvalidArgument):
    r"""Proxy of C++ OpenSim::NoTableFound class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func):
        r"""
        __init__(NoTableFound self, std::string const & file, size_t line, std::string const & func) -> NoTableFound

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &

        """
        _common.NoTableFound_swiginit(self, _common.new_NoTableFound(file, line, func))
    __swig_destroy__ = _common.delete_NoTableFound

# Register NoTableFound in _common:
_common.NoTableFound_swigregister(NoTableFound)
class KeyMissing(InvalidArgument):
    r"""Proxy of C++ OpenSim::KeyMissing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, key):
        r"""
        __init__(KeyMissing self, std::string const & file, size_t line, std::string const & func, std::string const & key) -> KeyMissing

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        key: std::string const &

        """
        _common.KeyMissing_swiginit(self, _common.new_KeyMissing(file, line, func, key))
    __swig_destroy__ = _common.delete_KeyMissing

# Register KeyMissing in _common:
_common.KeyMissing_swigregister(KeyMissing)
class IncorrectTableType(InvalidArgument):
    r"""Proxy of C++ OpenSim::IncorrectTableType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IncorrectTableType self, std::string const & file, size_t line, std::string const & func, std::string const & message="") -> IncorrectTableType

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        message: std::string const &

        """
        _common.IncorrectTableType_swiginit(self, _common.new_IncorrectTableType(*args))
    __swig_destroy__ = _common.delete_IncorrectTableType

# Register IncorrectTableType in _common:
_common.IncorrectTableType_swigregister(IncorrectTableType)
class TableMissingHeader(OpenSimException):
    r"""Proxy of C++ OpenSim::TableMissingHeader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TableMissingHeader self, std::string const & file, size_t line, std::string const & func, std::string const & message="") -> TableMissingHeader

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        message: std::string const &

        """
        _common.TableMissingHeader_swiginit(self, _common.new_TableMissingHeader(*args))
    __swig_destroy__ = _common.delete_TableMissingHeader

# Register TableMissingHeader in _common:
_common.TableMissingHeader_swigregister(TableMissingHeader)
class FileAdapter(DataAdapter):
    r"""Proxy of C++ OpenSim::FileAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _common.delete_FileAdapter

    @staticmethod
    def writeFile(tables, fileName):
        r"""
        writeFile(OpenSim::DataAdapter::InputTables const & tables, std::string const & fileName)

        Parameters
        ----------
        tables: OpenSim::DataAdapter::InputTables const &
        fileName: std::string const &

        """
        return _common.FileAdapter_writeFile(tables, fileName)

    @staticmethod
    def findExtension(filename):
        r"""
        findExtension(std::string const & filename) -> std::string

        Parameters
        ----------
        filename: std::string const &

        """
        return _common.FileAdapter_findExtension(filename)

    @staticmethod
    def getNextLine(stream, delims):
        r"""
        getNextLine(std::istream & stream, std::string const & delims) -> StdVectorString

        Parameters
        ----------
        stream: std::istream &
        delims: std::string const &

        """
        return _common.FileAdapter_getNextLine(stream, delims)

    @staticmethod
    def tokenize(str, delims):
        r"""
        tokenize(std::string const & str, std::string const & delims) -> StdVectorString

        Parameters
        ----------
        str: std::string const &
        delims: std::string const &

        """
        return _common.FileAdapter_tokenize(str, delims)

    @staticmethod
    def createAdapterFromExtension(fileName):
        r"""
        createAdapterFromExtension(std::string const & fileName) -> std::shared_ptr< OpenSim::DataAdapter >

        Parameters
        ----------
        fileName: std::string const &

        """
        return _common.FileAdapter_createAdapterFromExtension(fileName)

# Register FileAdapter in _common:
_common.FileAdapter_swigregister(FileAdapter)
class MissingHeader(IOError):
    r"""Proxy of C++ OpenSim::MissingHeader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MissingHeader self) -> MissingHeader"""
        _common.MissingHeader_swiginit(self, _common.new_MissingHeader())
    __swig_destroy__ = _common.delete_MissingHeader

# Register MissingHeader in _common:
_common.MissingHeader_swigregister(MissingHeader)
class IncorrectNumMetaDataKeys(IOError):
    r"""Proxy of C++ OpenSim::IncorrectNumMetaDataKeys class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, expected, received):
        r"""
        __init__(IncorrectNumMetaDataKeys self, std::string const & file, size_t line, std::string const & func, std::string const & filename, size_t expected, size_t received) -> IncorrectNumMetaDataKeys

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        expected: size_t
        received: size_t

        """
        _common.IncorrectNumMetaDataKeys_swiginit(self, _common.new_IncorrectNumMetaDataKeys(file, line, func, filename, expected, received))
    __swig_destroy__ = _common.delete_IncorrectNumMetaDataKeys

# Register IncorrectNumMetaDataKeys in _common:
_common.IncorrectNumMetaDataKeys_swigregister(IncorrectNumMetaDataKeys)
class UnexpectedMetaDataKey(IOError):
    r"""Proxy of C++ OpenSim::UnexpectedMetaDataKey class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, expected, received):
        r"""
        __init__(UnexpectedMetaDataKey self, std::string const & file, size_t line, std::string const & func, std::string const & filename, std::string const & expected, std::string const & received) -> UnexpectedMetaDataKey

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        expected: std::string const &
        received: std::string const &

        """
        _common.UnexpectedMetaDataKey_swiginit(self, _common.new_UnexpectedMetaDataKey(file, line, func, filename, expected, received))
    __swig_destroy__ = _common.delete_UnexpectedMetaDataKey

# Register UnexpectedMetaDataKey in _common:
_common.UnexpectedMetaDataKey_swigregister(UnexpectedMetaDataKey)
class MetaDataLengthMismatch(IOError):
    r"""Proxy of C++ OpenSim::MetaDataLengthMismatch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, keys_len, values_len):
        r"""
        __init__(MetaDataLengthMismatch self, std::string const & file, size_t line, std::string const & func, std::string const & filename, size_t keys_len, size_t values_len) -> MetaDataLengthMismatch

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        keys_len: size_t
        values_len: size_t

        """
        _common.MetaDataLengthMismatch_swiginit(self, _common.new_MetaDataLengthMismatch(file, line, func, filename, keys_len, values_len))
    __swig_destroy__ = _common.delete_MetaDataLengthMismatch

# Register MetaDataLengthMismatch in _common:
_common.MetaDataLengthMismatch_swigregister(MetaDataLengthMismatch)
class IncorrectNumColumnLabels(IOError):
    r"""Proxy of C++ OpenSim::IncorrectNumColumnLabels class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, filename, expected, received):
        r"""
        __init__(IncorrectNumColumnLabels self, std::string const & file, size_t line, std::string const & func, std::string const & filename, size_t expected, size_t received) -> IncorrectNumColumnLabels

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        filename: std::string const &
        expected: size_t
        received: size_t

        """
        _common.IncorrectNumColumnLabels_swiginit(self, _common.new_IncorrectNumColumnLabels(file, line, func, filename, expected, received))
    __swig_destroy__ = _common.delete_IncorrectNumColumnLabels

# Register IncorrectNumColumnLabels in _common:
_common.IncorrectNumColumnLabels_swigregister(IncorrectNumColumnLabels)
class TRCFileAdapter(FileAdapter):
    r"""Proxy of C++ OpenSim::TRCFileAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TRCFileAdapter self) -> TRCFileAdapter
        __init__(TRCFileAdapter self, TRCFileAdapter arg2) -> TRCFileAdapter

        Parameters
        ----------
        arg2: OpenSim::TRCFileAdapter const &

        """
        _common.TRCFileAdapter_swiginit(self, _common.new_TRCFileAdapter(*args))
    __swig_destroy__ = _common.delete_TRCFileAdapter

    def clone(self):
        r"""clone(TRCFileAdapter self) -> TRCFileAdapter"""
        return _common.TRCFileAdapter_clone(self)

    @staticmethod
    def write(table, filename):
        r"""
        write(TimeSeriesTableVec3 table, std::string const & filename)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTableVec3 const &
        filename: std::string const &

        """
        return _common.TRCFileAdapter_write(table, filename)

# Register TRCFileAdapter in _common:
_common.TRCFileAdapter_swigregister(TRCFileAdapter)
TRCFileAdapter._markers = _common.cvar.TRCFileAdapter__markers

class IncorrectNumTokens(OpenSimException):
    r"""Proxy of C++ OpenSim::IncorrectNumTokens class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, msg):
        r"""
        __init__(IncorrectNumTokens self, std::string const & file, size_t line, std::string const & func, std::string const & msg) -> IncorrectNumTokens

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        msg: std::string const &

        """
        _common.IncorrectNumTokens_swiginit(self, _common.new_IncorrectNumTokens(file, line, func, msg))
    __swig_destroy__ = _common.delete_IncorrectNumTokens

# Register IncorrectNumTokens in _common:
_common.IncorrectNumTokens_swigregister(IncorrectNumTokens)
class DataTypeMismatch(OpenSimException):
    r"""Proxy of C++ OpenSim::DataTypeMismatch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, expected, received):
        r"""
        __init__(DataTypeMismatch self, std::string const & file, size_t line, std::string const & func, std::string const & expected, std::string const & received) -> DataTypeMismatch

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        expected: std::string const &
        received: std::string const &

        """
        _common.DataTypeMismatch_swiginit(self, _common.new_DataTypeMismatch(file, line, func, expected, received))
    __swig_destroy__ = _common.delete_DataTypeMismatch

# Register DataTypeMismatch in _common:
_common.DataTypeMismatch_swigregister(DataTypeMismatch)
class APDMDataReaderSettings(OpenSimObject):
    r"""Proxy of C++ OpenSim::APDMDataReaderSettings class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> APDMDataReaderSettings

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.APDMDataReaderSettings_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(APDMDataReaderSettings self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.APDMDataReaderSettings_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.APDMDataReaderSettings_getClassName()

    def clone(self):
        r"""clone(APDMDataReaderSettings self) -> APDMDataReaderSettings"""
        return _common.APDMDataReaderSettings_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(APDMDataReaderSettings self) -> std::string const &"""
        return _common.APDMDataReaderSettings_getConcreteClassName(self)

    def copyProperty_ExperimentalSensors(self, source):
        r"""
        copyProperty_ExperimentalSensors(APDMDataReaderSettings self, APDMDataReaderSettings source)

        Parameters
        ----------
        source: OpenSim::APDMDataReaderSettings::Self const &

        """
        return _common.APDMDataReaderSettings_copyProperty_ExperimentalSensors(self, source)

    def get_ExperimentalSensors(self, i):
        r"""
        get_ExperimentalSensors(APDMDataReaderSettings self, int i) -> ExperimentalSensor

        Parameters
        ----------
        i: int

        """
        return _common.APDMDataReaderSettings_get_ExperimentalSensors(self, i)

    def upd_ExperimentalSensors(self, i):
        r"""
        upd_ExperimentalSensors(APDMDataReaderSettings self, int i) -> ExperimentalSensor

        Parameters
        ----------
        i: int

        """
        return _common.APDMDataReaderSettings_upd_ExperimentalSensors(self, i)

    def set_ExperimentalSensors(self, i, value):
        r"""
        set_ExperimentalSensors(APDMDataReaderSettings self, int i, ExperimentalSensor value)

        Parameters
        ----------
        i: int
        value: OpenSim::ExperimentalSensor const &

        """
        return _common.APDMDataReaderSettings_set_ExperimentalSensors(self, i, value)

    def append_ExperimentalSensors(self, value):
        r"""
        append_ExperimentalSensors(APDMDataReaderSettings self, ExperimentalSensor value) -> int

        Parameters
        ----------
        value: OpenSim::ExperimentalSensor const &

        """
        return _common.APDMDataReaderSettings_append_ExperimentalSensors(self, value)

    def constructProperty_ExperimentalSensors(self):
        r"""constructProperty_ExperimentalSensors(APDMDataReaderSettings self)"""
        return _common.APDMDataReaderSettings_constructProperty_ExperimentalSensors(self)

    def __init__(self, *args):
        r"""
        __init__(APDMDataReaderSettings self) -> APDMDataReaderSettings
        __init__(APDMDataReaderSettings self, std::string const & xmlFile) -> APDMDataReaderSettings

        Parameters
        ----------
        xmlFile: std::string const &

        """
        _common.APDMDataReaderSettings_swiginit(self, _common.new_APDMDataReaderSettings(*args))
    __swig_destroy__ = _common.delete_APDMDataReaderSettings

# Register APDMDataReaderSettings in _common:
_common.APDMDataReaderSettings_swigregister(APDMDataReaderSettings)
class APDMDataReader(IMUDataReader):
    r"""Proxy of C++ OpenSim::APDMDataReader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(APDMDataReader self) -> APDMDataReader
        __init__(APDMDataReader self, APDMDataReaderSettings settings) -> APDMDataReader

        Parameters
        ----------
        settings: OpenSim::APDMDataReaderSettings const &

        """
        _common.APDMDataReader_swiginit(self, _common.new_APDMDataReader(*args))
    __swig_destroy__ = _common.delete_APDMDataReader

    def clone(self):
        r"""clone(APDMDataReader self) -> APDMDataReader"""
        return _common.APDMDataReader_clone(self)

# Register APDMDataReader in _common:
_common.APDMDataReader_swigregister(APDMDataReader)
APDMDataReader.acceleration_labels = _common.cvar.APDMDataReader_acceleration_labels
APDMDataReader.angular_velocity_labels = _common.cvar.APDMDataReader_angular_velocity_labels
APDMDataReader.magnetic_heading_labels = _common.cvar.APDMDataReader_magnetic_heading_labels
APDMDataReader.orientation_labels = _common.cvar.APDMDataReader_orientation_labels
APDMDataReader.TimeLabel = _common.cvar.APDMDataReader_TimeLabel

class STODataTypeNotSupported(OpenSimException):
    r"""Proxy of C++ OpenSim::STODataTypeNotSupported class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, file, line, func, datatype):
        r"""
        __init__(STODataTypeNotSupported self, std::string const & file, size_t line, std::string const & func, std::string const & datatype) -> STODataTypeNotSupported

        Parameters
        ----------
        file: std::string const &
        line: size_t
        func: std::string const &
        datatype: std::string const &

        """
        _common.STODataTypeNotSupported_swiginit(self, _common.new_STODataTypeNotSupported(file, line, func, datatype))
    __swig_destroy__ = _common.delete_STODataTypeNotSupported

# Register STODataTypeNotSupported in _common:
_common.STODataTypeNotSupported_swigregister(STODataTypeNotSupported)
class STOFileAdapter(object):
    r"""Proxy of C++ OpenSim::STOFileAdapter_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(STOFileAdapter self) -> STOFileAdapter
        __init__(STOFileAdapter self, STOFileAdapter arg2) -> STOFileAdapter

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< double > const &

        """
        _common.STOFileAdapter_swiginit(self, _common.new_STOFileAdapter(*args))
    __swig_destroy__ = _common.delete_STOFileAdapter

    def clone(self):
        r"""clone(STOFileAdapter self) -> STOFileAdapter"""
        return _common.STOFileAdapter_clone(self)

    @staticmethod
    def write(table, fileName):
        r"""
        write(TimeSeriesTable table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< double > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapter_write(table, fileName)

# Register STOFileAdapter in _common:
_common.STOFileAdapter_swigregister(STOFileAdapter)
class STOFileAdapterVec3(object):
    r"""Proxy of C++ OpenSim::STOFileAdapter_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(STOFileAdapterVec3 self) -> STOFileAdapterVec3
        __init__(STOFileAdapterVec3 self, STOFileAdapterVec3 arg2) -> STOFileAdapterVec3

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::Vec3 > const &

        """
        _common.STOFileAdapterVec3_swiginit(self, _common.new_STOFileAdapterVec3(*args))
    __swig_destroy__ = _common.delete_STOFileAdapterVec3

    def clone(self):
        r"""clone(STOFileAdapterVec3 self) -> STOFileAdapterVec3"""
        return _common.STOFileAdapterVec3_clone(self)

    @staticmethod
    def write(table, fileName):
        r"""
        write(TimeSeriesTableVec3 table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::Vec< 3,double,1 > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterVec3_write(table, fileName)

# Register STOFileAdapterVec3 in _common:
_common.STOFileAdapterVec3_swigregister(STOFileAdapterVec3)
class STOFileAdapterUnitVec3(object):
    r"""Proxy of C++ OpenSim::STOFileAdapter_< SimTK::UnitVec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(STOFileAdapterUnitVec3 self) -> STOFileAdapterUnitVec3
        __init__(STOFileAdapterUnitVec3 self, STOFileAdapterUnitVec3 arg2) -> STOFileAdapterUnitVec3

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::UnitVec3 > const &

        """
        _common.STOFileAdapterUnitVec3_swiginit(self, _common.new_STOFileAdapterUnitVec3(*args))
    __swig_destroy__ = _common.delete_STOFileAdapterUnitVec3

    def clone(self):
        r"""clone(STOFileAdapterUnitVec3 self) -> STOFileAdapterUnitVec3"""
        return _common.STOFileAdapterUnitVec3_clone(self)

    @staticmethod
    def write(table, fileName):
        r"""
        write(TimeSeriesTableUnitVec3 table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::UnitVec< double,1 > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterUnitVec3_write(table, fileName)

# Register STOFileAdapterUnitVec3 in _common:
_common.STOFileAdapterUnitVec3_swigregister(STOFileAdapterUnitVec3)
class STOFileAdapterQuaternion(object):
    r"""Proxy of C++ OpenSim::STOFileAdapter_< SimTK::Quaternion > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(STOFileAdapterQuaternion self) -> STOFileAdapterQuaternion
        __init__(STOFileAdapterQuaternion self, STOFileAdapterQuaternion arg2) -> STOFileAdapterQuaternion

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::Quaternion > const &

        """
        _common.STOFileAdapterQuaternion_swiginit(self, _common.new_STOFileAdapterQuaternion(*args))
    __swig_destroy__ = _common.delete_STOFileAdapterQuaternion

    def clone(self):
        r"""clone(STOFileAdapterQuaternion self) -> STOFileAdapterQuaternion"""
        return _common.STOFileAdapterQuaternion_clone(self)

    @staticmethod
    def write(table, fileName):
        r"""
        write(TimeSeriesTableQuaternion table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::Quaternion_< double > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterQuaternion_write(table, fileName)

# Register STOFileAdapterQuaternion in _common:
_common.STOFileAdapterQuaternion_swigregister(STOFileAdapterQuaternion)
class STOFileAdapterVec6(object):
    r"""Proxy of C++ OpenSim::STOFileAdapter_< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(STOFileAdapterVec6 self) -> STOFileAdapterVec6
        __init__(STOFileAdapterVec6 self, STOFileAdapterVec6 arg2) -> STOFileAdapterVec6

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::Vec6 > const &

        """
        _common.STOFileAdapterVec6_swiginit(self, _common.new_STOFileAdapterVec6(*args))
    __swig_destroy__ = _common.delete_STOFileAdapterVec6

    def clone(self):
        r"""clone(STOFileAdapterVec6 self) -> STOFileAdapterVec6"""
        return _common.STOFileAdapterVec6_clone(self)

    @staticmethod
    def write(table, fileName):
        r"""
        write(TimeSeriesTableVec6 table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::Vec< 6,double,1 > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterVec6_write(table, fileName)

# Register STOFileAdapterVec6 in _common:
_common.STOFileAdapterVec6_swigregister(STOFileAdapterVec6)
class STOFileAdapterSpatialVec(object):
    r"""Proxy of C++ OpenSim::STOFileAdapter_< SimTK::SpatialVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(STOFileAdapterSpatialVec self) -> STOFileAdapterSpatialVec
        __init__(STOFileAdapterSpatialVec self, STOFileAdapterSpatialVec arg2) -> STOFileAdapterSpatialVec

        Parameters
        ----------
        arg2: OpenSim::STOFileAdapter_< SimTK::SpatialVec > const &

        """
        _common.STOFileAdapterSpatialVec_swiginit(self, _common.new_STOFileAdapterSpatialVec(*args))
    __swig_destroy__ = _common.delete_STOFileAdapterSpatialVec

    def clone(self):
        r"""clone(STOFileAdapterSpatialVec self) -> STOFileAdapterSpatialVec"""
        return _common.STOFileAdapterSpatialVec_clone(self)

    @staticmethod
    def write(table, fileName):
        r"""
        write(TimeSeriesTableSpatialVec table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable_< SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > > const &
        fileName: std::string const &

        """
        return _common.STOFileAdapterSpatialVec_write(table, fileName)

# Register STOFileAdapterSpatialVec in _common:
_common.STOFileAdapterSpatialVec_swigregister(STOFileAdapterSpatialVec)
class CSVFileAdapter(object):
    r"""Proxy of C++ OpenSim::CSVFileAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CSVFileAdapter self) -> CSVFileAdapter
        __init__(CSVFileAdapter self, CSVFileAdapter arg2) -> CSVFileAdapter

        Parameters
        ----------
        arg2: OpenSim::CSVFileAdapter const &

        """
        _common.CSVFileAdapter_swiginit(self, _common.new_CSVFileAdapter(*args))
    __swig_destroy__ = _common.delete_CSVFileAdapter

    def clone(self):
        r"""clone(CSVFileAdapter self) -> CSVFileAdapter"""
        return _common.CSVFileAdapter_clone(self)

    @staticmethod
    def write(table, fileName):
        r"""
        write(TimeSeriesTable table, std::string const & fileName)

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &
        fileName: std::string const &

        """
        return _common.CSVFileAdapter_write(table, fileName)

# Register CSVFileAdapter in _common:
_common.CSVFileAdapter_swigregister(CSVFileAdapter)
class C3DFileAdapter(FileAdapter):
    r"""Proxy of C++ OpenSim::C3DFileAdapter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ForceLocation_OriginOfForcePlate = _common.C3DFileAdapter_ForceLocation_OriginOfForcePlate
    
    ForceLocation_CenterOfPressure = _common.C3DFileAdapter_ForceLocation_CenterOfPressure
    
    ForceLocation_PointOfWrenchApplication = _common.C3DFileAdapter_ForceLocation_PointOfWrenchApplication
    

    def clone(self):
        r"""clone(C3DFileAdapter self) -> C3DFileAdapter"""
        return _common.C3DFileAdapter_clone(self)

    def getLocationForForceExpression(self):
        r"""getLocationForForceExpression(C3DFileAdapter self) -> OpenSim::C3DFileAdapter::ForceLocation"""
        return _common.C3DFileAdapter_getLocationForForceExpression(self)

    def getMarkersTable(self, tables):
        r"""
        getMarkersTable(C3DFileAdapter self, StdMapStringAbstractDataTable tables) -> std::shared_ptr< OpenSim::TimeSeriesTableVec3 >

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables &

        """
        return _common.C3DFileAdapter_getMarkersTable(self, tables)

    def getForcesTable(self, tables):
        r"""
        getForcesTable(C3DFileAdapter self, StdMapStringAbstractDataTable tables) -> std::shared_ptr< OpenSim::TimeSeriesTableVec3 >

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables &

        """
        return _common.C3DFileAdapter_getForcesTable(self, tables)

    def getAnalogDataTable(self, tables):
        r"""
        getAnalogDataTable(C3DFileAdapter self, StdMapStringAbstractDataTable tables) -> std::shared_ptr< OpenSim::TimeSeriesTable >

        Parameters
        ----------
        tables: OpenSim::DataAdapter::OutputTables &

        """
        return _common.C3DFileAdapter_getAnalogDataTable(self, tables)

    def setLocationForForceExpression(self, *args):
        r"""
        setLocationForForceExpression(C3DFileAdapter self, OpenSim::C3DFileAdapter::ForceLocation const location)

        Parameters
        ----------
        location: enum OpenSim::C3DFileAdapter::ForceLocation const

        setLocationForForceExpression(C3DFileAdapter self, unsigned int wrt)

        Parameters
        ----------
        wrt: unsigned int

        """
        return _common.C3DFileAdapter_setLocationForForceExpression(self, *args)

    def __init__(self):
        r"""__init__(C3DFileAdapter self) -> C3DFileAdapter"""
        _common.C3DFileAdapter_swiginit(self, _common.new_C3DFileAdapter())
    __swig_destroy__ = _common.delete_C3DFileAdapter

# Register C3DFileAdapter in _common:
_common.C3DFileAdapter_swigregister(C3DFileAdapter)
C3DFileAdapter._markers = _common.cvar.C3DFileAdapter__markers
C3DFileAdapter._forces = _common.cvar.C3DFileAdapter__forces
C3DFileAdapter._analog = _common.cvar.C3DFileAdapter__analog

class TableSource(Component):
    r"""Proxy of C++ OpenSim::TableSource_< SimTK::Real > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> TableSource

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableSource_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(TableSource self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableSource_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.TableSource_getClassName()

    def clone(self):
        r"""clone(TableSource self) -> TableSource"""
        return _common.TableSource_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(TableSource self) -> std::string const &"""
        return _common.TableSource_getConcreteClassName(self)

    def copyProperty_filename(self, source):
        r"""
        copyProperty_filename(TableSource self, TableSource source)

        Parameters
        ----------
        source: OpenSim::TableSource_< double >::Self const &

        """
        return _common.TableSource_copyProperty_filename(self, source)

    def append_filename(self, value):
        r"""
        append_filename(TableSource self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSource_append_filename(self, value)

    def constructProperty_filename(self, initValue):
        r"""
        constructProperty_filename(TableSource self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.TableSource_constructProperty_filename(self, initValue)

    def get_filename(self, *args):
        r"""
        get_filename(TableSource self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_filename(TableSource self) -> std::string const &
        """
        return _common.TableSource_get_filename(self, *args)

    def upd_filename(self, *args):
        r"""
        upd_filename(TableSource self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_filename(TableSource self) -> std::string &
        """
        return _common.TableSource_upd_filename(self, *args)

    def set_filename(self, *args):
        r"""
        set_filename(TableSource self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_filename(TableSource self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSource_set_filename(self, *args)

    def copyProperty_tablename(self, source):
        r"""
        copyProperty_tablename(TableSource self, TableSource source)

        Parameters
        ----------
        source: OpenSim::TableSource_< double >::Self const &

        """
        return _common.TableSource_copyProperty_tablename(self, source)

    def append_tablename(self, value):
        r"""
        append_tablename(TableSource self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSource_append_tablename(self, value)

    def constructProperty_tablename(self, initValue):
        r"""
        constructProperty_tablename(TableSource self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.TableSource_constructProperty_tablename(self, initValue)

    def get_tablename(self, *args):
        r"""
        get_tablename(TableSource self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_tablename(TableSource self) -> std::string const &
        """
        return _common.TableSource_get_tablename(self, *args)

    def upd_tablename(self, *args):
        r"""
        upd_tablename(TableSource self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_tablename(TableSource self) -> std::string &
        """
        return _common.TableSource_upd_tablename(self, *args)

    def set_tablename(self, *args):
        r"""
        set_tablename(TableSource self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_tablename(TableSource self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSource_set_tablename(self, *args)
    _has_output_all_columns = property(_common.TableSource__has_output_all_columns_get, _common.TableSource__has_output_all_columns_set, doc=r"""_has_output_all_columns : bool""")
    _has_output_column = property(_common.TableSource__has_output_column_get, _common.TableSource__has_output_column_set, doc=r"""_has_output_column : bool""")

    def __init__(self, *args):
        r"""
        __init__(TableSource self) -> TableSource
        __init__(TableSource self, TableSource arg2) -> TableSource

        Parameters
        ----------
        arg2: OpenSim::TableSource_< SimTK::Real > const &

        __init__(TableSource self, TimeSeriesTable table) -> TableSource

        Parameters
        ----------
        table: OpenSim::TableSource_< double >::Table const &

        __init__(TableSource self, std::string const & filename) -> TableSource

        Parameters
        ----------
        filename: std::string const &

        __init__(TableSource self, std::string const & filename, std::string const & tablename) -> TableSource

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TableSource_swiginit(self, _common.new_TableSource(*args))

    def getTable(self):
        r"""getTable(TableSource self) -> TimeSeriesTable"""
        return _common.TableSource_getTable(self)

    def setTable(self, *args):
        r"""
        setTable(TableSource self, TimeSeriesTable table)

        Parameters
        ----------
        table: OpenSim::TableSource_< double >::Table const &

        setTable(TableSource self, std::string const & filename)

        Parameters
        ----------
        filename: std::string const &

        setTable(TableSource self, std::string const & filename, std::string const & tablename)

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        return _common.TableSource_setTable(self, *args)
    __swig_destroy__ = _common.delete_TableSource

# Register TableSource in _common:
_common.TableSource_swigregister(TableSource)
class TableSourceVec3(Component):
    r"""Proxy of C++ OpenSim::TableSource_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> TableSourceVec3

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableSourceVec3_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(TableSourceVec3 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableSourceVec3_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.TableSourceVec3_getClassName()

    def clone(self):
        r"""clone(TableSourceVec3 self) -> TableSourceVec3"""
        return _common.TableSourceVec3_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(TableSourceVec3 self) -> std::string const &"""
        return _common.TableSourceVec3_getConcreteClassName(self)

    def copyProperty_filename(self, source):
        r"""
        copyProperty_filename(TableSourceVec3 self, TableSourceVec3 source)

        Parameters
        ----------
        source: OpenSim::TableSource_< SimTK::Vec< 3,double,1 > >::Self const &

        """
        return _common.TableSourceVec3_copyProperty_filename(self, source)

    def append_filename(self, value):
        r"""
        append_filename(TableSourceVec3 self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSourceVec3_append_filename(self, value)

    def constructProperty_filename(self, initValue):
        r"""
        constructProperty_filename(TableSourceVec3 self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.TableSourceVec3_constructProperty_filename(self, initValue)

    def get_filename(self, *args):
        r"""
        get_filename(TableSourceVec3 self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_filename(TableSourceVec3 self) -> std::string const &
        """
        return _common.TableSourceVec3_get_filename(self, *args)

    def upd_filename(self, *args):
        r"""
        upd_filename(TableSourceVec3 self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_filename(TableSourceVec3 self) -> std::string &
        """
        return _common.TableSourceVec3_upd_filename(self, *args)

    def set_filename(self, *args):
        r"""
        set_filename(TableSourceVec3 self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_filename(TableSourceVec3 self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSourceVec3_set_filename(self, *args)

    def copyProperty_tablename(self, source):
        r"""
        copyProperty_tablename(TableSourceVec3 self, TableSourceVec3 source)

        Parameters
        ----------
        source: OpenSim::TableSource_< SimTK::Vec< 3,double,1 > >::Self const &

        """
        return _common.TableSourceVec3_copyProperty_tablename(self, source)

    def append_tablename(self, value):
        r"""
        append_tablename(TableSourceVec3 self, std::string const & value) -> int

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSourceVec3_append_tablename(self, value)

    def constructProperty_tablename(self, initValue):
        r"""
        constructProperty_tablename(TableSourceVec3 self, std::string const & initValue)

        Parameters
        ----------
        initValue: std::string const &

        """
        return _common.TableSourceVec3_constructProperty_tablename(self, initValue)

    def get_tablename(self, *args):
        r"""
        get_tablename(TableSourceVec3 self, int i) -> std::string const

        Parameters
        ----------
        i: int

        get_tablename(TableSourceVec3 self) -> std::string const &
        """
        return _common.TableSourceVec3_get_tablename(self, *args)

    def upd_tablename(self, *args):
        r"""
        upd_tablename(TableSourceVec3 self, int i) -> std::string

        Parameters
        ----------
        i: int

        upd_tablename(TableSourceVec3 self) -> std::string &
        """
        return _common.TableSourceVec3_upd_tablename(self, *args)

    def set_tablename(self, *args):
        r"""
        set_tablename(TableSourceVec3 self, int i, std::string const & value)

        Parameters
        ----------
        i: int
        value: std::string const &

        set_tablename(TableSourceVec3 self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        """
        return _common.TableSourceVec3_set_tablename(self, *args)
    _has_output_all_columns = property(_common.TableSourceVec3__has_output_all_columns_get, _common.TableSourceVec3__has_output_all_columns_set, doc=r"""_has_output_all_columns : bool""")
    _has_output_column = property(_common.TableSourceVec3__has_output_column_get, _common.TableSourceVec3__has_output_column_set, doc=r"""_has_output_column : bool""")

    def __init__(self, *args):
        r"""
        __init__(TableSourceVec3 self) -> TableSourceVec3
        __init__(TableSourceVec3 self, TableSourceVec3 arg2) -> TableSourceVec3

        Parameters
        ----------
        arg2: OpenSim::TableSource_< SimTK::Vec3 > const &

        __init__(TableSourceVec3 self, TimeSeriesTableVec3 table) -> TableSourceVec3

        Parameters
        ----------
        table: OpenSim::TableSource_< SimTK::Vec< 3,double,1 > >::Table const &

        __init__(TableSourceVec3 self, std::string const & filename) -> TableSourceVec3

        Parameters
        ----------
        filename: std::string const &

        __init__(TableSourceVec3 self, std::string const & filename, std::string const & tablename) -> TableSourceVec3

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        _common.TableSourceVec3_swiginit(self, _common.new_TableSourceVec3(*args))

    def getTable(self):
        r"""getTable(TableSourceVec3 self) -> TimeSeriesTableVec3"""
        return _common.TableSourceVec3_getTable(self)

    def setTable(self, *args):
        r"""
        setTable(TableSourceVec3 self, TimeSeriesTableVec3 table)

        Parameters
        ----------
        table: OpenSim::TableSource_< SimTK::Vec< 3,double,1 > >::Table const &

        setTable(TableSourceVec3 self, std::string const & filename)

        Parameters
        ----------
        filename: std::string const &

        setTable(TableSourceVec3 self, std::string const & filename, std::string const & tablename)

        Parameters
        ----------
        filename: std::string const &
        tablename: std::string const &

        """
        return _common.TableSourceVec3_setTable(self, *args)
    __swig_destroy__ = _common.delete_TableSourceVec3

# Register TableSourceVec3 in _common:
_common.TableSourceVec3_swigregister(TableSourceVec3)
class AbstractReporter(Component):
    r"""Proxy of C++ OpenSim::AbstractReporter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> AbstractReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.AbstractReporter_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(AbstractReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.AbstractReporter_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.AbstractReporter_getClassName()

    def clone(self):
        r"""clone(AbstractReporter self) -> AbstractReporter"""
        return _common.AbstractReporter_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(AbstractReporter self) -> std::string const &"""
        return _common.AbstractReporter_getConcreteClassName(self)

    def copyProperty_report_time_interval(self, source):
        r"""
        copyProperty_report_time_interval(AbstractReporter self, AbstractReporter source)

        Parameters
        ----------
        source: OpenSim::AbstractReporter::Self const &

        """
        return _common.AbstractReporter_copyProperty_report_time_interval(self, source)

    def append_report_time_interval(self, value):
        r"""
        append_report_time_interval(AbstractReporter self, double const & value) -> int

        Parameters
        ----------
        value: double const &

        """
        return _common.AbstractReporter_append_report_time_interval(self, value)

    def constructProperty_report_time_interval(self, initValue):
        r"""
        constructProperty_report_time_interval(AbstractReporter self, double const & initValue)

        Parameters
        ----------
        initValue: double const &

        """
        return _common.AbstractReporter_constructProperty_report_time_interval(self, initValue)

    def get_report_time_interval(self, *args):
        r"""
        get_report_time_interval(AbstractReporter self, int i) -> double const

        Parameters
        ----------
        i: int

        get_report_time_interval(AbstractReporter self) -> double const &
        """
        return _common.AbstractReporter_get_report_time_interval(self, *args)

    def upd_report_time_interval(self, *args):
        r"""
        upd_report_time_interval(AbstractReporter self, int i) -> double

        Parameters
        ----------
        i: int

        upd_report_time_interval(AbstractReporter self) -> double &
        """
        return _common.AbstractReporter_upd_report_time_interval(self, *args)

    def set_report_time_interval(self, *args):
        r"""
        set_report_time_interval(AbstractReporter self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        set_report_time_interval(AbstractReporter self, double const & value)

        Parameters
        ----------
        value: double const &

        """
        return _common.AbstractReporter_set_report_time_interval(self, *args)

    def report(self, s):
        r"""
        report(AbstractReporter self, State s)

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _common.AbstractReporter_report(self, s)

# Register AbstractReporter in _common:
_common.AbstractReporter_swigregister(AbstractReporter)
class ReporterDouble(AbstractReporter):
    r"""Proxy of C++ OpenSim::Reporter< SimTK::Real > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ReporterDouble

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ReporterDouble_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ReporterDouble self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ReporterDouble_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ReporterDouble_getClassName()

    def clone(self):
        r"""clone(ReporterDouble self) -> ReporterDouble"""
        return _common.ReporterDouble_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ReporterDouble self) -> std::string const &"""
        return _common.ReporterDouble_getConcreteClassName(self)
    PropertyIndex_input_inputs = property(_common.ReporterDouble_PropertyIndex_input_inputs_get, _common.ReporterDouble_PropertyIndex_input_inputs_set, doc=r"""PropertyIndex_input_inputs : OpenSim::PropertyIndex""")

    def connectInput_inputs(self, *args):
        r"""
        connectInput_inputs(ReporterDouble self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connectInput_inputs(ReporterDouble self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _common.ReporterDouble_connectInput_inputs(self, *args)

    def addToReport(self, *args):
        r"""
        addToReport(ReporterDouble self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        addToReport(ReporterDouble self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _common.ReporterDouble_addToReport(self, *args)

# Register ReporterDouble in _common:
_common.ReporterDouble_swigregister(ReporterDouble)
class ReporterVec3(AbstractReporter):
    r"""Proxy of C++ OpenSim::Reporter< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ReporterVec3

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ReporterVec3_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ReporterVec3 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ReporterVec3_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ReporterVec3_getClassName()

    def clone(self):
        r"""clone(ReporterVec3 self) -> ReporterVec3"""
        return _common.ReporterVec3_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ReporterVec3 self) -> std::string const &"""
        return _common.ReporterVec3_getConcreteClassName(self)
    PropertyIndex_input_inputs = property(_common.ReporterVec3_PropertyIndex_input_inputs_get, _common.ReporterVec3_PropertyIndex_input_inputs_set, doc=r"""PropertyIndex_input_inputs : OpenSim::PropertyIndex""")

    def connectInput_inputs(self, *args):
        r"""
        connectInput_inputs(ReporterVec3 self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connectInput_inputs(ReporterVec3 self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _common.ReporterVec3_connectInput_inputs(self, *args)

    def addToReport(self, *args):
        r"""
        addToReport(ReporterVec3 self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        addToReport(ReporterVec3 self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _common.ReporterVec3_addToReport(self, *args)

# Register ReporterVec3 in _common:
_common.ReporterVec3_swigregister(ReporterVec3)
class ReporterVector(AbstractReporter):
    r"""Proxy of C++ OpenSim::Reporter< SimTK::Vector > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ReporterVector

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ReporterVector_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ReporterVector self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ReporterVector_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ReporterVector_getClassName()

    def clone(self):
        r"""clone(ReporterVector self) -> ReporterVector"""
        return _common.ReporterVector_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ReporterVector self) -> std::string const &"""
        return _common.ReporterVector_getConcreteClassName(self)
    PropertyIndex_input_inputs = property(_common.ReporterVector_PropertyIndex_input_inputs_get, _common.ReporterVector_PropertyIndex_input_inputs_set, doc=r"""PropertyIndex_input_inputs : OpenSim::PropertyIndex""")

    def connectInput_inputs(self, *args):
        r"""
        connectInput_inputs(ReporterVector self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        connectInput_inputs(ReporterVector self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _common.ReporterVector_connectInput_inputs(self, *args)

    def addToReport(self, *args):
        r"""
        addToReport(ReporterVector self, AbstractOutput output, std::string const & alias="")

        Parameters
        ----------
        output: OpenSim::AbstractOutput const &
        alias: std::string const &

        addToReport(ReporterVector self, AbstractChannel channel, std::string const & alias="")

        Parameters
        ----------
        channel: OpenSim::AbstractChannel const &
        alias: std::string const &

        """
        return _common.ReporterVector_addToReport(self, *args)

# Register ReporterVector in _common:
_common.ReporterVector_swigregister(ReporterVector)
class TableReporter(ReporterDouble):
    r"""Proxy of C++ OpenSim::TableReporter_< SimTK::Real > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> TableReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableReporter_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(TableReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableReporter_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.TableReporter_getClassName()

    def clone(self):
        r"""clone(TableReporter self) -> TableReporter"""
        return _common.TableReporter_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(TableReporter self) -> std::string const &"""
        return _common.TableReporter_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(TableReporter self) -> TableReporter"""
        _common.TableReporter_swiginit(self, _common.new_TableReporter())
    __swig_destroy__ = _common.delete_TableReporter

    def getTable(self):
        r"""getTable(TableReporter self) -> TimeSeriesTable"""
        return _common.TableReporter_getTable(self)

    def clearTable(self):
        r"""clearTable(TableReporter self)"""
        return _common.TableReporter_clearTable(self)

# Register TableReporter in _common:
_common.TableReporter_swigregister(TableReporter)
class TableReporterVec3(ReporterVec3):
    r"""Proxy of C++ OpenSim::TableReporter_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> TableReporterVec3

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableReporterVec3_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(TableReporterVec3 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableReporterVec3_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.TableReporterVec3_getClassName()

    def clone(self):
        r"""clone(TableReporterVec3 self) -> TableReporterVec3"""
        return _common.TableReporterVec3_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(TableReporterVec3 self) -> std::string const &"""
        return _common.TableReporterVec3_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(TableReporterVec3 self) -> TableReporterVec3"""
        _common.TableReporterVec3_swiginit(self, _common.new_TableReporterVec3())
    __swig_destroy__ = _common.delete_TableReporterVec3

    def getTable(self):
        r"""getTable(TableReporterVec3 self) -> TimeSeriesTableVec3"""
        return _common.TableReporterVec3_getTable(self)

    def clearTable(self):
        r"""clearTable(TableReporterVec3 self)"""
        return _common.TableReporterVec3_clearTable(self)

# Register TableReporterVec3 in _common:
_common.TableReporterVec3_swigregister(TableReporterVec3)
class TableReporterSpatialVec(object):
    r"""Proxy of C++ OpenSim::TableReporter_< SimTK::SpatialVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> TableReporterSpatialVec

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableReporterSpatialVec_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(TableReporterSpatialVec self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableReporterSpatialVec_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.TableReporterSpatialVec_getClassName()

    def clone(self):
        r"""clone(TableReporterSpatialVec self) -> TableReporterSpatialVec"""
        return _common.TableReporterSpatialVec_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(TableReporterSpatialVec self) -> std::string const &"""
        return _common.TableReporterSpatialVec_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(TableReporterSpatialVec self) -> TableReporterSpatialVec"""
        _common.TableReporterSpatialVec_swiginit(self, _common.new_TableReporterSpatialVec())
    __swig_destroy__ = _common.delete_TableReporterSpatialVec

    def getTable(self):
        r"""getTable(TableReporterSpatialVec self) -> TimeSeriesTableSpatialVec"""
        return _common.TableReporterSpatialVec_getTable(self)

    def clearTable(self):
        r"""clearTable(TableReporterSpatialVec self)"""
        return _common.TableReporterSpatialVec_clearTable(self)

# Register TableReporterSpatialVec in _common:
_common.TableReporterSpatialVec_swigregister(TableReporterSpatialVec)
class TableReporterVector(ReporterVector):
    r"""Proxy of C++ OpenSim::TableReporter_< SimTK::Vector,SimTK::Real > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> TableReporterVector

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.TableReporterVector_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(TableReporterVector self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.TableReporterVector_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.TableReporterVector_getClassName()

    def clone(self):
        r"""clone(TableReporterVector self) -> TableReporterVector"""
        return _common.TableReporterVector_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(TableReporterVector self) -> std::string const &"""
        return _common.TableReporterVector_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(TableReporterVector self) -> TableReporterVector"""
        _common.TableReporterVector_swiginit(self, _common.new_TableReporterVector())
    __swig_destroy__ = _common.delete_TableReporterVector

    def getTable(self):
        r"""getTable(TableReporterVector self) -> TimeSeriesTable"""
        return _common.TableReporterVector_getTable(self)

    def clearTable(self):
        r"""clearTable(TableReporterVector self)"""
        return _common.TableReporterVector_clearTable(self)

# Register TableReporterVector in _common:
_common.TableReporterVector_swigregister(TableReporterVector)
class ConsoleReporter(ReporterDouble):
    r"""Proxy of C++ OpenSim::ConsoleReporter_< SimTK::Real > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ConsoleReporter

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ConsoleReporter_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ConsoleReporter self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ConsoleReporter_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ConsoleReporter_getClassName()

    def clone(self):
        r"""clone(ConsoleReporter self) -> ConsoleReporter"""
        return _common.ConsoleReporter_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ConsoleReporter self) -> std::string const &"""
        return _common.ConsoleReporter_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(ConsoleReporter self) -> ConsoleReporter"""
        _common.ConsoleReporter_swiginit(self, _common.new_ConsoleReporter())
    __swig_destroy__ = _common.delete_ConsoleReporter

# Register ConsoleReporter in _common:
_common.ConsoleReporter_swigregister(ConsoleReporter)
class ConsoleReporterVec3(ReporterVec3):
    r"""Proxy of C++ OpenSim::ConsoleReporter_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> ConsoleReporterVec3

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.ConsoleReporterVec3_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(ConsoleReporterVec3 self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.ConsoleReporterVec3_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.ConsoleReporterVec3_getClassName()

    def clone(self):
        r"""clone(ConsoleReporterVec3 self) -> ConsoleReporterVec3"""
        return _common.ConsoleReporterVec3_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(ConsoleReporterVec3 self) -> std::string const &"""
        return _common.ConsoleReporterVec3_getConcreteClassName(self)

    def __init__(self):
        r"""__init__(ConsoleReporterVec3 self) -> ConsoleReporterVec3"""
        _common.ConsoleReporterVec3_swiginit(self, _common.new_ConsoleReporterVec3())
    __swig_destroy__ = _common.delete_ConsoleReporterVec3

# Register ConsoleReporterVec3 in _common:
_common.ConsoleReporterVec3_swigregister(ConsoleReporterVec3)
class GCVSplineSet(FunctionSet):
    r"""Proxy of C++ OpenSim::GCVSplineSet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def safeDownCast(obj):
        r"""
        safeDownCast(OpenSimObject obj) -> GCVSplineSet

        Parameters
        ----------
        obj: OpenSim::Object *

        """
        return _common.GCVSplineSet_safeDownCast(obj)

    def assign(self, aObject):
        r"""
        assign(GCVSplineSet self, OpenSimObject aObject)

        Parameters
        ----------
        aObject: OpenSim::Object &

        """
        return _common.GCVSplineSet_assign(self, aObject)

    @staticmethod
    def getClassName():
        r"""getClassName() -> std::string const &"""
        return _common.GCVSplineSet_getClassName()

    def clone(self):
        r"""clone(GCVSplineSet self) -> GCVSplineSet"""
        return _common.GCVSplineSet_clone(self)

    def getConcreteClassName(self):
        r"""getConcreteClassName(GCVSplineSet self) -> std::string const &"""
        return _common.GCVSplineSet_getConcreteClassName(self)

    def __init__(self, *args):
        r"""
        __init__(GCVSplineSet self) -> GCVSplineSet
        __init__(GCVSplineSet self, char const * aFileName) -> GCVSplineSet

        Parameters
        ----------
        aFileName: char const *

        __init__(GCVSplineSet self, int aDegree, Storage aStore, double aErrorVariance=0.0) -> GCVSplineSet

        Parameters
        ----------
        aDegree: int
        aStore: OpenSim::Storage const *
        aErrorVariance: double

        __init__(GCVSplineSet self, TimeSeriesTable table, StdVectorString labels={}, int degree=5, double errorVariance=0.0) -> GCVSplineSet

        Parameters
        ----------
        table: OpenSim::TimeSeriesTable const &
        labels: std::vector< std::string,std::allocator< std::string > > const &
        degree: int
        errorVariance: double

        """
        _common.GCVSplineSet_swiginit(self, _common.new_GCVSplineSet(*args))
    __swig_destroy__ = _common.delete_GCVSplineSet

    def getGCVSpline(self, aIndex):
        r"""
        getGCVSpline(GCVSplineSet self, int aIndex) -> GCVSpline

        Parameters
        ----------
        aIndex: int

        """
        return _common.GCVSplineSet_getGCVSpline(self, aIndex)

    def getMinX(self):
        r"""getMinX(GCVSplineSet self) -> double"""
        return _common.GCVSplineSet_getMinX(self)

    def getMaxX(self):
        r"""getMaxX(GCVSplineSet self) -> double"""
        return _common.GCVSplineSet_getMaxX(self)

    def constructStorage(self, aDerivOrder, aDX=-1):
        r"""
        constructStorage(GCVSplineSet self, int aDerivOrder, double aDX=-1) -> Storage

        Parameters
        ----------
        aDerivOrder: int
        aDX: double

        """
        return _common.GCVSplineSet_constructStorage(self, aDerivOrder, aDX)

# Register GCVSplineSet in _common:
_common.GCVSplineSet_swigregister(GCVSplineSet)

