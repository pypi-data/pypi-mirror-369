# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _simbody
else:
    import _simbody

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simbody.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _simbody.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _simbody.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _simbody.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simbody.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simbody.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _simbody.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _simbody.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _simbody.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _simbody.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _simbody.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simbody.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simbody.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _simbody.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _simbody.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _simbody.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _simbody.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _simbody:
_simbody.SwigPyIterator_swigregister(SwigPyIterator)
class StdVectorUnsigned(object):
    r"""Proxy of C++ std::vector< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdVectorUnsigned self) -> SwigPyIterator"""
        return _simbody.StdVectorUnsigned_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdVectorUnsigned self) -> bool"""
        return _simbody.StdVectorUnsigned___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdVectorUnsigned self) -> bool"""
        return _simbody.StdVectorUnsigned___bool__(self)

    def __len__(self):
        r"""__len__(StdVectorUnsigned self) -> std::vector< unsigned int >::size_type"""
        return _simbody.StdVectorUnsigned___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StdVectorUnsigned self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j) -> StdVectorUnsigned

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        j: std::vector< unsigned int >::difference_type

        """
        return _simbody.StdVectorUnsigned___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StdVectorUnsigned self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        j: std::vector< unsigned int >::difference_type

        __setslice__(StdVectorUnsigned self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j, StdVectorUnsigned v)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        j: std::vector< unsigned int >::difference_type
        v: std::vector< unsigned int,std::allocator< unsigned int > > const &

        """
        return _simbody.StdVectorUnsigned___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StdVectorUnsigned self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::difference_type j)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        j: std::vector< unsigned int >::difference_type

        """
        return _simbody.StdVectorUnsigned___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StdVectorUnsigned self, std::vector< unsigned int >::difference_type i)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type

        __delitem__(StdVectorUnsigned self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _simbody.StdVectorUnsigned___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StdVectorUnsigned self, SWIGPY_SLICEOBJECT * slice) -> StdVectorUnsigned

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(StdVectorUnsigned self, std::vector< unsigned int >::difference_type i) -> std::vector< unsigned int >::value_type const &

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type

        """
        return _simbody.StdVectorUnsigned___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdVectorUnsigned self, SWIGPY_SLICEOBJECT * slice, StdVectorUnsigned v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< unsigned int,std::allocator< unsigned int > > const &

        __setitem__(StdVectorUnsigned self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(StdVectorUnsigned self, std::vector< unsigned int >::difference_type i, std::vector< unsigned int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< unsigned int >::difference_type
        x: std::vector< unsigned int >::value_type const &

        """
        return _simbody.StdVectorUnsigned___setitem__(self, *args)

    def pop(self):
        r"""pop(StdVectorUnsigned self) -> std::vector< unsigned int >::value_type"""
        return _simbody.StdVectorUnsigned_pop(self)

    def append(self, x):
        r"""
        append(StdVectorUnsigned self, std::vector< unsigned int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< unsigned int >::value_type const &

        """
        return _simbody.StdVectorUnsigned_append(self, x)

    def empty(self):
        r"""empty(StdVectorUnsigned self) -> bool"""
        return _simbody.StdVectorUnsigned_empty(self)

    def size(self):
        r"""size(StdVectorUnsigned self) -> std::vector< unsigned int >::size_type"""
        return _simbody.StdVectorUnsigned_size(self)

    def swap(self, v):
        r"""
        swap(StdVectorUnsigned self, StdVectorUnsigned v)

        Parameters
        ----------
        v: std::vector< unsigned int > &

        """
        return _simbody.StdVectorUnsigned_swap(self, v)

    def begin(self):
        r"""begin(StdVectorUnsigned self) -> std::vector< unsigned int >::iterator"""
        return _simbody.StdVectorUnsigned_begin(self)

    def end(self):
        r"""end(StdVectorUnsigned self) -> std::vector< unsigned int >::iterator"""
        return _simbody.StdVectorUnsigned_end(self)

    def rbegin(self):
        r"""rbegin(StdVectorUnsigned self) -> std::vector< unsigned int >::reverse_iterator"""
        return _simbody.StdVectorUnsigned_rbegin(self)

    def rend(self):
        r"""rend(StdVectorUnsigned self) -> std::vector< unsigned int >::reverse_iterator"""
        return _simbody.StdVectorUnsigned_rend(self)

    def clear(self):
        r"""clear(StdVectorUnsigned self)"""
        return _simbody.StdVectorUnsigned_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdVectorUnsigned self) -> std::vector< unsigned int >::allocator_type"""
        return _simbody.StdVectorUnsigned_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StdVectorUnsigned self)"""
        return _simbody.StdVectorUnsigned_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StdVectorUnsigned self, std::vector< unsigned int >::iterator pos) -> std::vector< unsigned int >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned int >::iterator

        erase(StdVectorUnsigned self, std::vector< unsigned int >::iterator first, std::vector< unsigned int >::iterator last) -> std::vector< unsigned int >::iterator

        Parameters
        ----------
        first: std::vector< unsigned int >::iterator
        last: std::vector< unsigned int >::iterator

        """
        return _simbody.StdVectorUnsigned_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StdVectorUnsigned self) -> StdVectorUnsigned
        __init__(StdVectorUnsigned self, StdVectorUnsigned other) -> StdVectorUnsigned

        Parameters
        ----------
        other: std::vector< unsigned int > const &

        __init__(StdVectorUnsigned self, std::vector< unsigned int >::size_type size) -> StdVectorUnsigned

        Parameters
        ----------
        size: std::vector< unsigned int >::size_type

        __init__(StdVectorUnsigned self, std::vector< unsigned int >::size_type size, std::vector< unsigned int >::value_type const & value) -> StdVectorUnsigned

        Parameters
        ----------
        size: std::vector< unsigned int >::size_type
        value: std::vector< unsigned int >::value_type const &

        """
        _simbody.StdVectorUnsigned_swiginit(self, _simbody.new_StdVectorUnsigned(*args))

    def push_back(self, x):
        r"""
        push_back(StdVectorUnsigned self, std::vector< unsigned int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< unsigned int >::value_type const &

        """
        return _simbody.StdVectorUnsigned_push_back(self, x)

    def front(self):
        r"""front(StdVectorUnsigned self) -> std::vector< unsigned int >::value_type const &"""
        return _simbody.StdVectorUnsigned_front(self)

    def back(self):
        r"""back(StdVectorUnsigned self) -> std::vector< unsigned int >::value_type const &"""
        return _simbody.StdVectorUnsigned_back(self)

    def assign(self, n, x):
        r"""
        assign(StdVectorUnsigned self, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< unsigned int >::size_type
        x: std::vector< unsigned int >::value_type const &

        """
        return _simbody.StdVectorUnsigned_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StdVectorUnsigned self, std::vector< unsigned int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< unsigned int >::size_type

        resize(StdVectorUnsigned self, std::vector< unsigned int >::size_type new_size, std::vector< unsigned int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< unsigned int >::size_type
        x: std::vector< unsigned int >::value_type const &

        """
        return _simbody.StdVectorUnsigned_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StdVectorUnsigned self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::value_type const & x) -> std::vector< unsigned int >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned int >::iterator
        x: std::vector< unsigned int >::value_type const &

        insert(StdVectorUnsigned self, std::vector< unsigned int >::iterator pos, std::vector< unsigned int >::size_type n, std::vector< unsigned int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< unsigned int >::iterator
        n: std::vector< unsigned int >::size_type
        x: std::vector< unsigned int >::value_type const &

        """
        return _simbody.StdVectorUnsigned_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StdVectorUnsigned self, std::vector< unsigned int >::size_type n)

        Parameters
        ----------
        n: std::vector< unsigned int >::size_type

        """
        return _simbody.StdVectorUnsigned_reserve(self, n)

    def capacity(self):
        r"""capacity(StdVectorUnsigned self) -> std::vector< unsigned int >::size_type"""
        return _simbody.StdVectorUnsigned_capacity(self)
    __swig_destroy__ = _simbody.delete_StdVectorUnsigned

# Register StdVectorUnsigned in _simbody:
_simbody.StdVectorUnsigned_swigregister(StdVectorUnsigned)
class StdVectorInt(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdVectorInt self) -> SwigPyIterator"""
        return _simbody.StdVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdVectorInt self) -> bool"""
        return _simbody.StdVectorInt___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdVectorInt self) -> bool"""
        return _simbody.StdVectorInt___bool__(self)

    def __len__(self):
        r"""__len__(StdVectorInt self) -> std::vector< int >::size_type"""
        return _simbody.StdVectorInt___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StdVectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> StdVectorInt

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _simbody.StdVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StdVectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        __setslice__(StdVectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, StdVectorInt v)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type
        v: std::vector< int,std::allocator< int > > const &

        """
        return _simbody.StdVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StdVectorInt self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        j: std::vector< int >::difference_type

        """
        return _simbody.StdVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StdVectorInt self, std::vector< int >::difference_type i)

        Parameters
        ----------
        i: std::vector< int >::difference_type

        __delitem__(StdVectorInt self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _simbody.StdVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StdVectorInt self, SWIGPY_SLICEOBJECT * slice) -> StdVectorInt

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(StdVectorInt self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &

        Parameters
        ----------
        i: std::vector< int >::difference_type

        """
        return _simbody.StdVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdVectorInt self, SWIGPY_SLICEOBJECT * slice, StdVectorInt v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< int,std::allocator< int > > const &

        __setitem__(StdVectorInt self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(StdVectorInt self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)

        Parameters
        ----------
        i: std::vector< int >::difference_type
        x: std::vector< int >::value_type const &

        """
        return _simbody.StdVectorInt___setitem__(self, *args)

    def pop(self):
        r"""pop(StdVectorInt self) -> std::vector< int >::value_type"""
        return _simbody.StdVectorInt_pop(self)

    def append(self, x):
        r"""
        append(StdVectorInt self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _simbody.StdVectorInt_append(self, x)

    def empty(self):
        r"""empty(StdVectorInt self) -> bool"""
        return _simbody.StdVectorInt_empty(self)

    def size(self):
        r"""size(StdVectorInt self) -> std::vector< int >::size_type"""
        return _simbody.StdVectorInt_size(self)

    def swap(self, v):
        r"""
        swap(StdVectorInt self, StdVectorInt v)

        Parameters
        ----------
        v: std::vector< int > &

        """
        return _simbody.StdVectorInt_swap(self, v)

    def begin(self):
        r"""begin(StdVectorInt self) -> std::vector< int >::iterator"""
        return _simbody.StdVectorInt_begin(self)

    def end(self):
        r"""end(StdVectorInt self) -> std::vector< int >::iterator"""
        return _simbody.StdVectorInt_end(self)

    def rbegin(self):
        r"""rbegin(StdVectorInt self) -> std::vector< int >::reverse_iterator"""
        return _simbody.StdVectorInt_rbegin(self)

    def rend(self):
        r"""rend(StdVectorInt self) -> std::vector< int >::reverse_iterator"""
        return _simbody.StdVectorInt_rend(self)

    def clear(self):
        r"""clear(StdVectorInt self)"""
        return _simbody.StdVectorInt_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdVectorInt self) -> std::vector< int >::allocator_type"""
        return _simbody.StdVectorInt_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StdVectorInt self)"""
        return _simbody.StdVectorInt_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StdVectorInt self, std::vector< int >::iterator pos) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator

        erase(StdVectorInt self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator

        Parameters
        ----------
        first: std::vector< int >::iterator
        last: std::vector< int >::iterator

        """
        return _simbody.StdVectorInt_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StdVectorInt self) -> StdVectorInt
        __init__(StdVectorInt self, StdVectorInt other) -> StdVectorInt

        Parameters
        ----------
        other: std::vector< int > const &

        __init__(StdVectorInt self, std::vector< int >::size_type size) -> StdVectorInt

        Parameters
        ----------
        size: std::vector< int >::size_type

        __init__(StdVectorInt self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> StdVectorInt

        Parameters
        ----------
        size: std::vector< int >::size_type
        value: std::vector< int >::value_type const &

        """
        _simbody.StdVectorInt_swiginit(self, _simbody.new_StdVectorInt(*args))

    def push_back(self, x):
        r"""
        push_back(StdVectorInt self, std::vector< int >::value_type const & x)

        Parameters
        ----------
        x: std::vector< int >::value_type const &

        """
        return _simbody.StdVectorInt_push_back(self, x)

    def front(self):
        r"""front(StdVectorInt self) -> std::vector< int >::value_type const &"""
        return _simbody.StdVectorInt_front(self)

    def back(self):
        r"""back(StdVectorInt self) -> std::vector< int >::value_type const &"""
        return _simbody.StdVectorInt_back(self)

    def assign(self, n, x):
        r"""
        assign(StdVectorInt self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _simbody.StdVectorInt_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StdVectorInt self, std::vector< int >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< int >::size_type

        resize(StdVectorInt self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _simbody.StdVectorInt_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StdVectorInt self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator

        Parameters
        ----------
        pos: std::vector< int >::iterator
        x: std::vector< int >::value_type const &

        insert(StdVectorInt self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< int >::iterator
        n: std::vector< int >::size_type
        x: std::vector< int >::value_type const &

        """
        return _simbody.StdVectorInt_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StdVectorInt self, std::vector< int >::size_type n)

        Parameters
        ----------
        n: std::vector< int >::size_type

        """
        return _simbody.StdVectorInt_reserve(self, n)

    def capacity(self):
        r"""capacity(StdVectorInt self) -> std::vector< int >::size_type"""
        return _simbody.StdVectorInt_capacity(self)
    __swig_destroy__ = _simbody.delete_StdVectorInt

# Register StdVectorInt in _simbody:
_simbody.StdVectorInt_swigregister(StdVectorInt)
class StdVectorDouble(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdVectorDouble self) -> SwigPyIterator"""
        return _simbody.StdVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdVectorDouble self) -> bool"""
        return _simbody.StdVectorDouble___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdVectorDouble self) -> bool"""
        return _simbody.StdVectorDouble___bool__(self)

    def __len__(self):
        r"""__len__(StdVectorDouble self) -> std::vector< double >::size_type"""
        return _simbody.StdVectorDouble___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> StdVectorDouble

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _simbody.StdVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, StdVectorDouble v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _simbody.StdVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _simbody.StdVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StdVectorDouble self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(StdVectorDouble self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _simbody.StdVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StdVectorDouble self, SWIGPY_SLICEOBJECT * slice) -> StdVectorDouble

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(StdVectorDouble self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _simbody.StdVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdVectorDouble self, SWIGPY_SLICEOBJECT * slice, StdVectorDouble v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(StdVectorDouble self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(StdVectorDouble self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _simbody.StdVectorDouble___setitem__(self, *args)

    def pop(self):
        r"""pop(StdVectorDouble self) -> std::vector< double >::value_type"""
        return _simbody.StdVectorDouble_pop(self)

    def append(self, x):
        r"""
        append(StdVectorDouble self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _simbody.StdVectorDouble_append(self, x)

    def empty(self):
        r"""empty(StdVectorDouble self) -> bool"""
        return _simbody.StdVectorDouble_empty(self)

    def size(self):
        r"""size(StdVectorDouble self) -> std::vector< double >::size_type"""
        return _simbody.StdVectorDouble_size(self)

    def swap(self, v):
        r"""
        swap(StdVectorDouble self, StdVectorDouble v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _simbody.StdVectorDouble_swap(self, v)

    def begin(self):
        r"""begin(StdVectorDouble self) -> std::vector< double >::iterator"""
        return _simbody.StdVectorDouble_begin(self)

    def end(self):
        r"""end(StdVectorDouble self) -> std::vector< double >::iterator"""
        return _simbody.StdVectorDouble_end(self)

    def rbegin(self):
        r"""rbegin(StdVectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _simbody.StdVectorDouble_rbegin(self)

    def rend(self):
        r"""rend(StdVectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _simbody.StdVectorDouble_rend(self)

    def clear(self):
        r"""clear(StdVectorDouble self)"""
        return _simbody.StdVectorDouble_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdVectorDouble self) -> std::vector< double >::allocator_type"""
        return _simbody.StdVectorDouble_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StdVectorDouble self)"""
        return _simbody.StdVectorDouble_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StdVectorDouble self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(StdVectorDouble self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _simbody.StdVectorDouble_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StdVectorDouble self) -> StdVectorDouble
        __init__(StdVectorDouble self, StdVectorDouble other) -> StdVectorDouble

        Parameters
        ----------
        other: std::vector< double > const &

        __init__(StdVectorDouble self, std::vector< double >::size_type size) -> StdVectorDouble

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(StdVectorDouble self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> StdVectorDouble

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        _simbody.StdVectorDouble_swiginit(self, _simbody.new_StdVectorDouble(*args))

    def push_back(self, x):
        r"""
        push_back(StdVectorDouble self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _simbody.StdVectorDouble_push_back(self, x)

    def front(self):
        r"""front(StdVectorDouble self) -> std::vector< double >::value_type const &"""
        return _simbody.StdVectorDouble_front(self)

    def back(self):
        r"""back(StdVectorDouble self) -> std::vector< double >::value_type const &"""
        return _simbody.StdVectorDouble_back(self)

    def assign(self, n, x):
        r"""
        assign(StdVectorDouble self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _simbody.StdVectorDouble_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StdVectorDouble self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(StdVectorDouble self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _simbody.StdVectorDouble_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StdVectorDouble self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(StdVectorDouble self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _simbody.StdVectorDouble_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StdVectorDouble self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _simbody.StdVectorDouble_reserve(self, n)

    def capacity(self):
        r"""capacity(StdVectorDouble self) -> std::vector< double >::size_type"""
        return _simbody.StdVectorDouble_capacity(self)
    __swig_destroy__ = _simbody.delete_StdVectorDouble

# Register StdVectorDouble in _simbody:
_simbody.StdVectorDouble_swigregister(StdVectorDouble)
class StdVectorString(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdVectorString self) -> SwigPyIterator"""
        return _simbody.StdVectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdVectorString self) -> bool"""
        return _simbody.StdVectorString___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdVectorString self) -> bool"""
        return _simbody.StdVectorString___bool__(self)

    def __len__(self):
        r"""__len__(StdVectorString self) -> std::vector< std::string >::size_type"""
        return _simbody.StdVectorString___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StdVectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StdVectorString

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _simbody.StdVectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StdVectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(StdVectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StdVectorString v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _simbody.StdVectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StdVectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _simbody.StdVectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StdVectorString self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(StdVectorString self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _simbody.StdVectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StdVectorString self, SWIGPY_SLICEOBJECT * slice) -> StdVectorString

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(StdVectorString self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _simbody.StdVectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdVectorString self, SWIGPY_SLICEOBJECT * slice, StdVectorString v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StdVectorString self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(StdVectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _simbody.StdVectorString___setitem__(self, *args)

    def pop(self):
        r"""pop(StdVectorString self) -> std::vector< std::string >::value_type"""
        return _simbody.StdVectorString_pop(self)

    def append(self, x):
        r"""
        append(StdVectorString self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _simbody.StdVectorString_append(self, x)

    def empty(self):
        r"""empty(StdVectorString self) -> bool"""
        return _simbody.StdVectorString_empty(self)

    def size(self):
        r"""size(StdVectorString self) -> std::vector< std::string >::size_type"""
        return _simbody.StdVectorString_size(self)

    def swap(self, v):
        r"""
        swap(StdVectorString self, StdVectorString v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _simbody.StdVectorString_swap(self, v)

    def begin(self):
        r"""begin(StdVectorString self) -> std::vector< std::string >::iterator"""
        return _simbody.StdVectorString_begin(self)

    def end(self):
        r"""end(StdVectorString self) -> std::vector< std::string >::iterator"""
        return _simbody.StdVectorString_end(self)

    def rbegin(self):
        r"""rbegin(StdVectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _simbody.StdVectorString_rbegin(self)

    def rend(self):
        r"""rend(StdVectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _simbody.StdVectorString_rend(self)

    def clear(self):
        r"""clear(StdVectorString self)"""
        return _simbody.StdVectorString_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdVectorString self) -> std::vector< std::string >::allocator_type"""
        return _simbody.StdVectorString_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StdVectorString self)"""
        return _simbody.StdVectorString_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StdVectorString self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(StdVectorString self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _simbody.StdVectorString_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StdVectorString self) -> StdVectorString
        __init__(StdVectorString self, StdVectorString other) -> StdVectorString

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(StdVectorString self, std::vector< std::string >::size_type size) -> StdVectorString

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(StdVectorString self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StdVectorString

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _simbody.StdVectorString_swiginit(self, _simbody.new_StdVectorString(*args))

    def push_back(self, x):
        r"""
        push_back(StdVectorString self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _simbody.StdVectorString_push_back(self, x)

    def front(self):
        r"""front(StdVectorString self) -> std::vector< std::string >::value_type const &"""
        return _simbody.StdVectorString_front(self)

    def back(self):
        r"""back(StdVectorString self) -> std::vector< std::string >::value_type const &"""
        return _simbody.StdVectorString_back(self)

    def assign(self, n, x):
        r"""
        assign(StdVectorString self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _simbody.StdVectorString_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StdVectorString self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(StdVectorString self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _simbody.StdVectorString_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StdVectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(StdVectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _simbody.StdVectorString_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StdVectorString self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _simbody.StdVectorString_reserve(self, n)

    def capacity(self):
        r"""capacity(StdVectorString self) -> std::vector< std::string >::size_type"""
        return _simbody.StdVectorString_capacity(self)
    __swig_destroy__ = _simbody.delete_StdVectorString

# Register StdVectorString in _simbody:
_simbody.StdVectorString_swigregister(StdVectorString)
SHARED_PTR_DISOWN = _simbody.SHARED_PTR_DISOWN

SimTK_PI = _simbody.SimTK_PI

SimTK_E = _simbody.SimTK_E

SimTK_LN2 = _simbody.SimTK_LN2

SimTK_LN10 = _simbody.SimTK_LN10

SimTK_LOG2E = _simbody.SimTK_LOG2E

SimTK_LOG10E = _simbody.SimTK_LOG10E

SimTK_SQRT2 = _simbody.SimTK_SQRT2

SimTK_OOSQRT2 = _simbody.SimTK_OOSQRT2

SimTK_CBRT2 = _simbody.SimTK_CBRT2

SimTK_OOCBRT2 = _simbody.SimTK_OOCBRT2

SimTK_SIXRT2 = _simbody.SimTK_SIXRT2

SimTK_OOSIXRT2 = _simbody.SimTK_OOSIXRT2

SimTK_SQRT3 = _simbody.SimTK_SQRT3

SimTK_CBRT3 = _simbody.SimTK_CBRT3

SimTK_AVOGADROS_NUMBER = _simbody.SimTK_AVOGADROS_NUMBER

SimTK_MASS_OF_PROTON_IN_MD = _simbody.SimTK_MASS_OF_PROTON_IN_MD

SimTK_MASS_OF_NEUTRON_IN_MD = _simbody.SimTK_MASS_OF_NEUTRON_IN_MD

SimTK_MASS_OF_ELECTRON_IN_MD = _simbody.SimTK_MASS_OF_ELECTRON_IN_MD

SimTK_CHARGE_OF_PROTON_IN_SI = _simbody.SimTK_CHARGE_OF_PROTON_IN_SI

SimTK_CHARGE_OF_PROTON_IN_MD = _simbody.SimTK_CHARGE_OF_PROTON_IN_MD

SimTK_MOLAR_CHARGE_IN_SI = _simbody.SimTK_MOLAR_CHARGE_IN_SI

SimTK_MOLAR_CHARGE_IN_MD = _simbody.SimTK_MOLAR_CHARGE_IN_MD

SimTK_LIGHTSPEED_IN_SI = _simbody.SimTK_LIGHTSPEED_IN_SI

SimTK_LIGHTSPEED_IN_MD = _simbody.SimTK_LIGHTSPEED_IN_MD

SimTK_GRAVITATIONAL_CONSTANT_IN_SI = _simbody.SimTK_GRAVITATIONAL_CONSTANT_IN_SI

SimTK_GRAVITATIONAL_CONSTANT_IN_MD = _simbody.SimTK_GRAVITATIONAL_CONSTANT_IN_MD

SimTK_MAGNETIC_PERMEABILITY_IN_SI = _simbody.SimTK_MAGNETIC_PERMEABILITY_IN_SI

SimTK_MAGNETIC_PERMEABILITY_IN_MD = _simbody.SimTK_MAGNETIC_PERMEABILITY_IN_MD

SimTK_ELECTRIC_PERMITTIVITY_IN_SI = _simbody.SimTK_ELECTRIC_PERMITTIVITY_IN_SI

SimTK_ELECTRIC_PERMITTIVITY_IN_MD = _simbody.SimTK_ELECTRIC_PERMITTIVITY_IN_MD

SimTK_COULOMB_CONSTANT_IN_SI = _simbody.SimTK_COULOMB_CONSTANT_IN_SI

SimTK_COULOMB_CONSTANT_IN_MD = _simbody.SimTK_COULOMB_CONSTANT_IN_MD

SimTK_COULOMB_CONSTANT_IN_KCAL_ANGSTROM = _simbody.SimTK_COULOMB_CONSTANT_IN_KCAL_ANGSTROM

SimTK_MOLAR_GAS_CONSTANT_SI = _simbody.SimTK_MOLAR_GAS_CONSTANT_SI

SimTK_MOLAR_GAS_CONSTANT_MD = _simbody.SimTK_MOLAR_GAS_CONSTANT_MD

SimTK_MOLAR_GAS_CONSTANT_KCAL_ANGSTROM = _simbody.SimTK_MOLAR_GAS_CONSTANT_KCAL_ANGSTROM

SimTK_BOLTZMANN_CONSTANT_SI = _simbody.SimTK_BOLTZMANN_CONSTANT_SI

SimTK_BOLTZMANN_CONSTANT_MD = _simbody.SimTK_BOLTZMANN_CONSTANT_MD

SimTK_BOLTZMANN_CONSTANT_KCAL_ANGSTROM = _simbody.SimTK_BOLTZMANN_CONSTANT_KCAL_ANGSTROM

SimTK_RADIAN_TO_DEGREE = _simbody.SimTK_RADIAN_TO_DEGREE

SimTK_DEGREE_TO_RADIAN = _simbody.SimTK_DEGREE_TO_RADIAN

SimTK_NS_TO_S = _simbody.SimTK_NS_TO_S

SimTK_S_TO_NS = _simbody.SimTK_S_TO_NS

SimTK_KCAL_TO_KJOULE = _simbody.SimTK_KCAL_TO_KJOULE

SimTK_KJOULE_TO_KCAL = _simbody.SimTK_KJOULE_TO_KCAL

SimTK_DALTON_TO_GRAM = _simbody.SimTK_DALTON_TO_GRAM

SimTK_E_TO_COULOMB = _simbody.SimTK_E_TO_COULOMB

SimTK_EV_TO_JOULE = _simbody.SimTK_EV_TO_JOULE

class Vec2(object):
    r"""Proxy of C++ SimTK::Vec< 2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        r"""size() -> int"""
        return _simbody.Vec2_size()

    @staticmethod
    def nrow():
        r"""nrow() -> int"""
        return _simbody.Vec2_nrow()

    @staticmethod
    def ncol():
        r"""ncol() -> int"""
        return _simbody.Vec2_ncol()

    def __init__(self, *args):
        r"""
        __init__(Vec2 self) -> Vec2
        __init__(Vec2 self, Vec2 src) -> Vec2

        Parameters
        ----------
        src: SimTK::Vec< 2 > const &

        __init__(Vec2 self, double const & e) -> Vec2

        Parameters
        ----------
        e: double const &

        __init__(Vec2 self, int i) -> Vec2

        Parameters
        ----------
        i: int

        __init__(Vec2 self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1) -> Vec2

        Parameters
        ----------
        e0: SimTK::Vec< 2 >::E const &
        e1: SimTK::Vec< 2 >::E const &

        __init__(Vec2 self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2) -> Vec2

        Parameters
        ----------
        e0: SimTK::Vec< 2 >::E const &
        e1: SimTK::Vec< 2 >::E const &
        e2: SimTK::Vec< 2 >::E const &

        __init__(Vec2 self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3) -> Vec2

        Parameters
        ----------
        e0: SimTK::Vec< 2 >::E const &
        e1: SimTK::Vec< 2 >::E const &
        e2: SimTK::Vec< 2 >::E const &
        e3: SimTK::Vec< 2 >::E const &

        __init__(Vec2 self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4) -> Vec2

        Parameters
        ----------
        e0: SimTK::Vec< 2 >::E const &
        e1: SimTK::Vec< 2 >::E const &
        e2: SimTK::Vec< 2 >::E const &
        e3: SimTK::Vec< 2 >::E const &
        e4: SimTK::Vec< 2 >::E const &

        __init__(Vec2 self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4, SimTK::Vec< 2 >::E const & e5) -> Vec2

        Parameters
        ----------
        e0: SimTK::Vec< 2 >::E const &
        e1: SimTK::Vec< 2 >::E const &
        e2: SimTK::Vec< 2 >::E const &
        e3: SimTK::Vec< 2 >::E const &
        e4: SimTK::Vec< 2 >::E const &
        e5: SimTK::Vec< 2 >::E const &

        __init__(Vec2 self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4, SimTK::Vec< 2 >::E const & e5, SimTK::Vec< 2 >::E const & e6) -> Vec2

        Parameters
        ----------
        e0: SimTK::Vec< 2 >::E const &
        e1: SimTK::Vec< 2 >::E const &
        e2: SimTK::Vec< 2 >::E const &
        e3: SimTK::Vec< 2 >::E const &
        e4: SimTK::Vec< 2 >::E const &
        e5: SimTK::Vec< 2 >::E const &
        e6: SimTK::Vec< 2 >::E const &

        __init__(Vec2 self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4, SimTK::Vec< 2 >::E const & e5, SimTK::Vec< 2 >::E const & e6, SimTK::Vec< 2 >::E const & e7) -> Vec2

        Parameters
        ----------
        e0: SimTK::Vec< 2 >::E const &
        e1: SimTK::Vec< 2 >::E const &
        e2: SimTK::Vec< 2 >::E const &
        e3: SimTK::Vec< 2 >::E const &
        e4: SimTK::Vec< 2 >::E const &
        e5: SimTK::Vec< 2 >::E const &
        e6: SimTK::Vec< 2 >::E const &
        e7: SimTK::Vec< 2 >::E const &

        __init__(Vec2 self, SimTK::Vec< 2 >::E const & e0, SimTK::Vec< 2 >::E const & e1, SimTK::Vec< 2 >::E const & e2, SimTK::Vec< 2 >::E const & e3, SimTK::Vec< 2 >::E const & e4, SimTK::Vec< 2 >::E const & e5, SimTK::Vec< 2 >::E const & e6, SimTK::Vec< 2 >::E const & e7, SimTK::Vec< 2 >::E const & e8) -> Vec2

        Parameters
        ----------
        e0: SimTK::Vec< 2 >::E const &
        e1: SimTK::Vec< 2 >::E const &
        e2: SimTK::Vec< 2 >::E const &
        e3: SimTK::Vec< 2 >::E const &
        e4: SimTK::Vec< 2 >::E const &
        e5: SimTK::Vec< 2 >::E const &
        e6: SimTK::Vec< 2 >::E const &
        e7: SimTK::Vec< 2 >::E const &
        e8: SimTK::Vec< 2 >::E const &

        """
        _simbody.Vec2_swiginit(self, _simbody.new_Vec2(*args))

    def setToNaN(self):
        r"""setToNaN(Vec2 self)"""
        return _simbody.Vec2_setToNaN(self)

    def setToZero(self):
        r"""setToZero(Vec2 self)"""
        return _simbody.Vec2_setToZero(self)

    def isNaN(self):
        r"""isNaN(Vec2 self) -> bool"""
        return _simbody.Vec2_isNaN(self)

    def isInf(self):
        r"""isInf(Vec2 self) -> bool"""
        return _simbody.Vec2_isInf(self)

    def isFinite(self):
        r"""isFinite(Vec2 self) -> bool"""
        return _simbody.Vec2_isFinite(self)

    @staticmethod
    def getDefaultTolerance():
        r"""getDefaultTolerance() -> double"""
        return _simbody.Vec2_getDefaultTolerance()

    def isNumericallyEqual(self, *args):
        r"""
        isNumericallyEqual(Vec2 self, double const & e, double tol=SimTK::Vec< 2 >::getDefaultTolerance()) -> bool

        Parameters
        ----------
        e: double const &
        tol: double

        """
        return _simbody.Vec2_isNumericallyEqual(self, *args)

    def toString(self):
        r"""toString(Vec2 self) -> std::string"""
        return _simbody.Vec2_toString(self)

    def set(self, i, value):
        r"""
        set(Vec2 self, int i, SimTK::Vec< 2 >::E const & value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec< 2 >::E const &

        """
        return _simbody.Vec2_set(self, i, value)

    def get(self, i):
        r"""
        get(Vec2 self, int i) -> SimTK::Vec< 2 >::E const &

        Parameters
        ----------
        i: int

        """
        return _simbody.Vec2_get(self, i)

    def __str__(self):
        r"""__str__(Vec2 self) -> std::string"""
        return _simbody.Vec2___str__(self)

    def __len__(self):
        r"""__len__(Vec2 self) -> int"""
        return _simbody.Vec2___len__(self)

    def scalarEq(self, ee):
        r"""
        scalarEq(Vec2 self, double const & ee) -> Vec2

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec2_scalarEq(self, ee)

    def scalarPlusEq(self, ee):
        r"""
        scalarPlusEq(Vec2 self, double const & ee) -> Vec2

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec2_scalarPlusEq(self, ee)

    def scalarMinusEq(self, ee):
        r"""
        scalarMinusEq(Vec2 self, double const & ee) -> Vec2

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec2_scalarMinusEq(self, ee)

    def scalarTimesEq(self, ee):
        r"""
        scalarTimesEq(Vec2 self, double const & ee) -> Vec2

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec2_scalarTimesEq(self, ee)

    def scalarDivideEq(self, ee):
        r"""
        scalarDivideEq(Vec2 self, double const & ee) -> Vec2

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec2_scalarDivideEq(self, ee)
    __swig_destroy__ = _simbody.delete_Vec2

# Register Vec2 in _simbody:
_simbody.Vec2_swigregister(Vec2)
class Vec3(object):
    r"""Proxy of C++ SimTK::Vec< 3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        r"""size() -> int"""
        return _simbody.Vec3_size()

    @staticmethod
    def nrow():
        r"""nrow() -> int"""
        return _simbody.Vec3_nrow()

    @staticmethod
    def ncol():
        r"""ncol() -> int"""
        return _simbody.Vec3_ncol()

    def setToNaN(self):
        r"""setToNaN(Vec3 self)"""
        return _simbody.Vec3_setToNaN(self)

    def setToZero(self):
        r"""setToZero(Vec3 self)"""
        return _simbody.Vec3_setToZero(self)

    def isNaN(self):
        r"""isNaN(Vec3 self) -> bool"""
        return _simbody.Vec3_isNaN(self)

    def isInf(self):
        r"""isInf(Vec3 self) -> bool"""
        return _simbody.Vec3_isInf(self)

    def isFinite(self):
        r"""isFinite(Vec3 self) -> bool"""
        return _simbody.Vec3_isFinite(self)

    @staticmethod
    def getDefaultTolerance():
        r"""getDefaultTolerance() -> double"""
        return _simbody.Vec3_getDefaultTolerance()

    def isNumericallyEqual(self, *args):
        r"""
        isNumericallyEqual(Vec3 self, double const & e, double tol=SimTK::Vec< 3 >::getDefaultTolerance()) -> bool

        Parameters
        ----------
        e: double const &
        tol: double

        """
        return _simbody.Vec3_isNumericallyEqual(self, *args)

    def toString(self):
        r"""toString(Vec3 self) -> std::string"""
        return _simbody.Vec3_toString(self)

    def set(self, i, value):
        r"""
        set(Vec3 self, int i, SimTK::Vec< 3 >::E const & value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec< 3 >::E const &

        """
        return _simbody.Vec3_set(self, i, value)

    def get(self, i):
        r"""
        get(Vec3 self, int i) -> SimTK::Vec< 3 >::E const &

        Parameters
        ----------
        i: int

        """
        return _simbody.Vec3_get(self, i)

    def __str__(self):
        r"""__str__(Vec3 self) -> std::string"""
        return _simbody.Vec3___str__(self)

    def __len__(self):
        r"""__len__(Vec3 self) -> int"""
        return _simbody.Vec3___len__(self)

    def scalarEq(self, ee):
        r"""
        scalarEq(Vec3 self, double const & ee) -> Vec3

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec3_scalarEq(self, ee)

    def scalarPlusEq(self, ee):
        r"""
        scalarPlusEq(Vec3 self, double const & ee) -> Vec3

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec3_scalarPlusEq(self, ee)

    def scalarMinusEq(self, ee):
        r"""
        scalarMinusEq(Vec3 self, double const & ee) -> Vec3

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec3_scalarMinusEq(self, ee)

    def scalarTimesEq(self, ee):
        r"""
        scalarTimesEq(Vec3 self, double const & ee) -> Vec3

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec3_scalarTimesEq(self, ee)

    def scalarDivideEq(self, ee):
        r"""
        scalarDivideEq(Vec3 self, double const & ee) -> Vec3

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec3_scalarDivideEq(self, ee)

    def __init__(self, *args):
        r"""
        __init__(Vec3 self) -> Vec3
        __init__(Vec3 self, Vec3 src) -> Vec3

        Parameters
        ----------
        src: SimTK::Vec< 3 > const &

        __init__(Vec3 self, double const & e) -> Vec3

        Parameters
        ----------
        e: double const &

        __init__(Vec3 self, int i) -> Vec3

        Parameters
        ----------
        i: int

        __init__(Vec3 self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1) -> Vec3

        Parameters
        ----------
        e0: SimTK::Vec< 3 >::E const &
        e1: SimTK::Vec< 3 >::E const &

        __init__(Vec3 self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2) -> Vec3

        Parameters
        ----------
        e0: SimTK::Vec< 3 >::E const &
        e1: SimTK::Vec< 3 >::E const &
        e2: SimTK::Vec< 3 >::E const &

        __init__(Vec3 self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3) -> Vec3

        Parameters
        ----------
        e0: SimTK::Vec< 3 >::E const &
        e1: SimTK::Vec< 3 >::E const &
        e2: SimTK::Vec< 3 >::E const &
        e3: SimTK::Vec< 3 >::E const &

        __init__(Vec3 self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4) -> Vec3

        Parameters
        ----------
        e0: SimTK::Vec< 3 >::E const &
        e1: SimTK::Vec< 3 >::E const &
        e2: SimTK::Vec< 3 >::E const &
        e3: SimTK::Vec< 3 >::E const &
        e4: SimTK::Vec< 3 >::E const &

        __init__(Vec3 self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4, SimTK::Vec< 3 >::E const & e5) -> Vec3

        Parameters
        ----------
        e0: SimTK::Vec< 3 >::E const &
        e1: SimTK::Vec< 3 >::E const &
        e2: SimTK::Vec< 3 >::E const &
        e3: SimTK::Vec< 3 >::E const &
        e4: SimTK::Vec< 3 >::E const &
        e5: SimTK::Vec< 3 >::E const &

        __init__(Vec3 self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4, SimTK::Vec< 3 >::E const & e5, SimTK::Vec< 3 >::E const & e6) -> Vec3

        Parameters
        ----------
        e0: SimTK::Vec< 3 >::E const &
        e1: SimTK::Vec< 3 >::E const &
        e2: SimTK::Vec< 3 >::E const &
        e3: SimTK::Vec< 3 >::E const &
        e4: SimTK::Vec< 3 >::E const &
        e5: SimTK::Vec< 3 >::E const &
        e6: SimTK::Vec< 3 >::E const &

        __init__(Vec3 self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4, SimTK::Vec< 3 >::E const & e5, SimTK::Vec< 3 >::E const & e6, SimTK::Vec< 3 >::E const & e7) -> Vec3

        Parameters
        ----------
        e0: SimTK::Vec< 3 >::E const &
        e1: SimTK::Vec< 3 >::E const &
        e2: SimTK::Vec< 3 >::E const &
        e3: SimTK::Vec< 3 >::E const &
        e4: SimTK::Vec< 3 >::E const &
        e5: SimTK::Vec< 3 >::E const &
        e6: SimTK::Vec< 3 >::E const &
        e7: SimTK::Vec< 3 >::E const &

        __init__(Vec3 self, SimTK::Vec< 3 >::E const & e0, SimTK::Vec< 3 >::E const & e1, SimTK::Vec< 3 >::E const & e2, SimTK::Vec< 3 >::E const & e3, SimTK::Vec< 3 >::E const & e4, SimTK::Vec< 3 >::E const & e5, SimTK::Vec< 3 >::E const & e6, SimTK::Vec< 3 >::E const & e7, SimTK::Vec< 3 >::E const & e8) -> Vec3

        Parameters
        ----------
        e0: SimTK::Vec< 3 >::E const &
        e1: SimTK::Vec< 3 >::E const &
        e2: SimTK::Vec< 3 >::E const &
        e3: SimTK::Vec< 3 >::E const &
        e4: SimTK::Vec< 3 >::E const &
        e5: SimTK::Vec< 3 >::E const &
        e6: SimTK::Vec< 3 >::E const &
        e7: SimTK::Vec< 3 >::E const &
        e8: SimTK::Vec< 3 >::E const &

        __init__(Vec3 self, int n) -> Vec3

        Parameters
        ----------
        n: int

        """
        _simbody.Vec3_swiginit(self, _simbody.new_Vec3(*args))

    @staticmethod
    def createFromMat(n):
        r"""
        createFromMat(int n) -> Vec3

        Parameters
        ----------
        n: int

        """
        return _simbody.Vec3_createFromMat(n)

    def __getitem__(self, i):
        r"""
        __getitem__(Vec3 self, int i) -> double

        Parameters
        ----------
        i: int

        """
        return _simbody.Vec3___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""
        __setitem__(Vec3 self, int i, double value)

        Parameters
        ----------
        i: int
        value: double

        """
        return _simbody.Vec3___setitem__(self, i, value)

    def _to_numpy(self, n):
        r"""
        _to_numpy(Vec3 self, int n)

        Parameters
        ----------
        n: int

        """
        return _simbody.Vec3__to_numpy(self, n)

    def to_numpy(self):
        return self._to_numpy(self.size())

    __swig_destroy__ = _simbody.delete_Vec3

# Register Vec3 in _simbody:
_simbody.Vec3_swigregister(Vec3)
class Vec4(object):
    r"""Proxy of C++ SimTK::Vec< 4 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        r"""size() -> int"""
        return _simbody.Vec4_size()

    @staticmethod
    def nrow():
        r"""nrow() -> int"""
        return _simbody.Vec4_nrow()

    @staticmethod
    def ncol():
        r"""ncol() -> int"""
        return _simbody.Vec4_ncol()

    def __init__(self, *args):
        r"""
        __init__(Vec4 self) -> Vec4
        __init__(Vec4 self, Vec4 src) -> Vec4

        Parameters
        ----------
        src: SimTK::Vec< 4 > const &

        __init__(Vec4 self, double const & e) -> Vec4

        Parameters
        ----------
        e: double const &

        __init__(Vec4 self, int i) -> Vec4

        Parameters
        ----------
        i: int

        __init__(Vec4 self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1) -> Vec4

        Parameters
        ----------
        e0: SimTK::Vec< 4 >::E const &
        e1: SimTK::Vec< 4 >::E const &

        __init__(Vec4 self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2) -> Vec4

        Parameters
        ----------
        e0: SimTK::Vec< 4 >::E const &
        e1: SimTK::Vec< 4 >::E const &
        e2: SimTK::Vec< 4 >::E const &

        __init__(Vec4 self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3) -> Vec4

        Parameters
        ----------
        e0: SimTK::Vec< 4 >::E const &
        e1: SimTK::Vec< 4 >::E const &
        e2: SimTK::Vec< 4 >::E const &
        e3: SimTK::Vec< 4 >::E const &

        __init__(Vec4 self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4) -> Vec4

        Parameters
        ----------
        e0: SimTK::Vec< 4 >::E const &
        e1: SimTK::Vec< 4 >::E const &
        e2: SimTK::Vec< 4 >::E const &
        e3: SimTK::Vec< 4 >::E const &
        e4: SimTK::Vec< 4 >::E const &

        __init__(Vec4 self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4, SimTK::Vec< 4 >::E const & e5) -> Vec4

        Parameters
        ----------
        e0: SimTK::Vec< 4 >::E const &
        e1: SimTK::Vec< 4 >::E const &
        e2: SimTK::Vec< 4 >::E const &
        e3: SimTK::Vec< 4 >::E const &
        e4: SimTK::Vec< 4 >::E const &
        e5: SimTK::Vec< 4 >::E const &

        __init__(Vec4 self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4, SimTK::Vec< 4 >::E const & e5, SimTK::Vec< 4 >::E const & e6) -> Vec4

        Parameters
        ----------
        e0: SimTK::Vec< 4 >::E const &
        e1: SimTK::Vec< 4 >::E const &
        e2: SimTK::Vec< 4 >::E const &
        e3: SimTK::Vec< 4 >::E const &
        e4: SimTK::Vec< 4 >::E const &
        e5: SimTK::Vec< 4 >::E const &
        e6: SimTK::Vec< 4 >::E const &

        __init__(Vec4 self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4, SimTK::Vec< 4 >::E const & e5, SimTK::Vec< 4 >::E const & e6, SimTK::Vec< 4 >::E const & e7) -> Vec4

        Parameters
        ----------
        e0: SimTK::Vec< 4 >::E const &
        e1: SimTK::Vec< 4 >::E const &
        e2: SimTK::Vec< 4 >::E const &
        e3: SimTK::Vec< 4 >::E const &
        e4: SimTK::Vec< 4 >::E const &
        e5: SimTK::Vec< 4 >::E const &
        e6: SimTK::Vec< 4 >::E const &
        e7: SimTK::Vec< 4 >::E const &

        __init__(Vec4 self, SimTK::Vec< 4 >::E const & e0, SimTK::Vec< 4 >::E const & e1, SimTK::Vec< 4 >::E const & e2, SimTK::Vec< 4 >::E const & e3, SimTK::Vec< 4 >::E const & e4, SimTK::Vec< 4 >::E const & e5, SimTK::Vec< 4 >::E const & e6, SimTK::Vec< 4 >::E const & e7, SimTK::Vec< 4 >::E const & e8) -> Vec4

        Parameters
        ----------
        e0: SimTK::Vec< 4 >::E const &
        e1: SimTK::Vec< 4 >::E const &
        e2: SimTK::Vec< 4 >::E const &
        e3: SimTK::Vec< 4 >::E const &
        e4: SimTK::Vec< 4 >::E const &
        e5: SimTK::Vec< 4 >::E const &
        e6: SimTK::Vec< 4 >::E const &
        e7: SimTK::Vec< 4 >::E const &
        e8: SimTK::Vec< 4 >::E const &

        """
        _simbody.Vec4_swiginit(self, _simbody.new_Vec4(*args))

    def setToNaN(self):
        r"""setToNaN(Vec4 self)"""
        return _simbody.Vec4_setToNaN(self)

    def setToZero(self):
        r"""setToZero(Vec4 self)"""
        return _simbody.Vec4_setToZero(self)

    def isNaN(self):
        r"""isNaN(Vec4 self) -> bool"""
        return _simbody.Vec4_isNaN(self)

    def isInf(self):
        r"""isInf(Vec4 self) -> bool"""
        return _simbody.Vec4_isInf(self)

    def isFinite(self):
        r"""isFinite(Vec4 self) -> bool"""
        return _simbody.Vec4_isFinite(self)

    @staticmethod
    def getDefaultTolerance():
        r"""getDefaultTolerance() -> double"""
        return _simbody.Vec4_getDefaultTolerance()

    def isNumericallyEqual(self, *args):
        r"""
        isNumericallyEqual(Vec4 self, double const & e, double tol=SimTK::Vec< 4 >::getDefaultTolerance()) -> bool

        Parameters
        ----------
        e: double const &
        tol: double

        """
        return _simbody.Vec4_isNumericallyEqual(self, *args)

    def toString(self):
        r"""toString(Vec4 self) -> std::string"""
        return _simbody.Vec4_toString(self)

    def set(self, i, value):
        r"""
        set(Vec4 self, int i, SimTK::Vec< 4 >::E const & value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec< 4 >::E const &

        """
        return _simbody.Vec4_set(self, i, value)

    def get(self, i):
        r"""
        get(Vec4 self, int i) -> SimTK::Vec< 4 >::E const &

        Parameters
        ----------
        i: int

        """
        return _simbody.Vec4_get(self, i)

    def __str__(self):
        r"""__str__(Vec4 self) -> std::string"""
        return _simbody.Vec4___str__(self)

    def __len__(self):
        r"""__len__(Vec4 self) -> int"""
        return _simbody.Vec4___len__(self)

    def scalarEq(self, ee):
        r"""
        scalarEq(Vec4 self, double const & ee) -> Vec4

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec4_scalarEq(self, ee)

    def scalarPlusEq(self, ee):
        r"""
        scalarPlusEq(Vec4 self, double const & ee) -> Vec4

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec4_scalarPlusEq(self, ee)

    def scalarMinusEq(self, ee):
        r"""
        scalarMinusEq(Vec4 self, double const & ee) -> Vec4

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec4_scalarMinusEq(self, ee)

    def scalarTimesEq(self, ee):
        r"""
        scalarTimesEq(Vec4 self, double const & ee) -> Vec4

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec4_scalarTimesEq(self, ee)

    def scalarDivideEq(self, ee):
        r"""
        scalarDivideEq(Vec4 self, double const & ee) -> Vec4

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec4_scalarDivideEq(self, ee)
    __swig_destroy__ = _simbody.delete_Vec4

# Register Vec4 in _simbody:
_simbody.Vec4_swigregister(Vec4)
class Vec6(object):
    r"""Proxy of C++ SimTK::Vec< 6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        r"""size() -> int"""
        return _simbody.Vec6_size()

    @staticmethod
    def nrow():
        r"""nrow() -> int"""
        return _simbody.Vec6_nrow()

    @staticmethod
    def ncol():
        r"""ncol() -> int"""
        return _simbody.Vec6_ncol()

    def __init__(self, *args):
        r"""
        __init__(Vec6 self) -> Vec6
        __init__(Vec6 self, Vec6 src) -> Vec6

        Parameters
        ----------
        src: SimTK::Vec< 6 > const &

        __init__(Vec6 self, double const & e) -> Vec6

        Parameters
        ----------
        e: double const &

        __init__(Vec6 self, int i) -> Vec6

        Parameters
        ----------
        i: int

        __init__(Vec6 self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1) -> Vec6

        Parameters
        ----------
        e0: SimTK::Vec< 6 >::E const &
        e1: SimTK::Vec< 6 >::E const &

        __init__(Vec6 self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2) -> Vec6

        Parameters
        ----------
        e0: SimTK::Vec< 6 >::E const &
        e1: SimTK::Vec< 6 >::E const &
        e2: SimTK::Vec< 6 >::E const &

        __init__(Vec6 self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3) -> Vec6

        Parameters
        ----------
        e0: SimTK::Vec< 6 >::E const &
        e1: SimTK::Vec< 6 >::E const &
        e2: SimTK::Vec< 6 >::E const &
        e3: SimTK::Vec< 6 >::E const &

        __init__(Vec6 self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4) -> Vec6

        Parameters
        ----------
        e0: SimTK::Vec< 6 >::E const &
        e1: SimTK::Vec< 6 >::E const &
        e2: SimTK::Vec< 6 >::E const &
        e3: SimTK::Vec< 6 >::E const &
        e4: SimTK::Vec< 6 >::E const &

        __init__(Vec6 self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4, SimTK::Vec< 6 >::E const & e5) -> Vec6

        Parameters
        ----------
        e0: SimTK::Vec< 6 >::E const &
        e1: SimTK::Vec< 6 >::E const &
        e2: SimTK::Vec< 6 >::E const &
        e3: SimTK::Vec< 6 >::E const &
        e4: SimTK::Vec< 6 >::E const &
        e5: SimTK::Vec< 6 >::E const &

        __init__(Vec6 self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4, SimTK::Vec< 6 >::E const & e5, SimTK::Vec< 6 >::E const & e6) -> Vec6

        Parameters
        ----------
        e0: SimTK::Vec< 6 >::E const &
        e1: SimTK::Vec< 6 >::E const &
        e2: SimTK::Vec< 6 >::E const &
        e3: SimTK::Vec< 6 >::E const &
        e4: SimTK::Vec< 6 >::E const &
        e5: SimTK::Vec< 6 >::E const &
        e6: SimTK::Vec< 6 >::E const &

        __init__(Vec6 self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4, SimTK::Vec< 6 >::E const & e5, SimTK::Vec< 6 >::E const & e6, SimTK::Vec< 6 >::E const & e7) -> Vec6

        Parameters
        ----------
        e0: SimTK::Vec< 6 >::E const &
        e1: SimTK::Vec< 6 >::E const &
        e2: SimTK::Vec< 6 >::E const &
        e3: SimTK::Vec< 6 >::E const &
        e4: SimTK::Vec< 6 >::E const &
        e5: SimTK::Vec< 6 >::E const &
        e6: SimTK::Vec< 6 >::E const &
        e7: SimTK::Vec< 6 >::E const &

        __init__(Vec6 self, SimTK::Vec< 6 >::E const & e0, SimTK::Vec< 6 >::E const & e1, SimTK::Vec< 6 >::E const & e2, SimTK::Vec< 6 >::E const & e3, SimTK::Vec< 6 >::E const & e4, SimTK::Vec< 6 >::E const & e5, SimTK::Vec< 6 >::E const & e6, SimTK::Vec< 6 >::E const & e7, SimTK::Vec< 6 >::E const & e8) -> Vec6

        Parameters
        ----------
        e0: SimTK::Vec< 6 >::E const &
        e1: SimTK::Vec< 6 >::E const &
        e2: SimTK::Vec< 6 >::E const &
        e3: SimTK::Vec< 6 >::E const &
        e4: SimTK::Vec< 6 >::E const &
        e5: SimTK::Vec< 6 >::E const &
        e6: SimTK::Vec< 6 >::E const &
        e7: SimTK::Vec< 6 >::E const &
        e8: SimTK::Vec< 6 >::E const &

        """
        _simbody.Vec6_swiginit(self, _simbody.new_Vec6(*args))

    def setToNaN(self):
        r"""setToNaN(Vec6 self)"""
        return _simbody.Vec6_setToNaN(self)

    def setToZero(self):
        r"""setToZero(Vec6 self)"""
        return _simbody.Vec6_setToZero(self)

    def isNaN(self):
        r"""isNaN(Vec6 self) -> bool"""
        return _simbody.Vec6_isNaN(self)

    def isInf(self):
        r"""isInf(Vec6 self) -> bool"""
        return _simbody.Vec6_isInf(self)

    def isFinite(self):
        r"""isFinite(Vec6 self) -> bool"""
        return _simbody.Vec6_isFinite(self)

    @staticmethod
    def getDefaultTolerance():
        r"""getDefaultTolerance() -> double"""
        return _simbody.Vec6_getDefaultTolerance()

    def isNumericallyEqual(self, *args):
        r"""
        isNumericallyEqual(Vec6 self, double const & e, double tol=SimTK::Vec< 6 >::getDefaultTolerance()) -> bool

        Parameters
        ----------
        e: double const &
        tol: double

        """
        return _simbody.Vec6_isNumericallyEqual(self, *args)

    def toString(self):
        r"""toString(Vec6 self) -> std::string"""
        return _simbody.Vec6_toString(self)

    def set(self, i, value):
        r"""
        set(Vec6 self, int i, SimTK::Vec< 6 >::E const & value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec< 6 >::E const &

        """
        return _simbody.Vec6_set(self, i, value)

    def get(self, i):
        r"""
        get(Vec6 self, int i) -> SimTK::Vec< 6 >::E const &

        Parameters
        ----------
        i: int

        """
        return _simbody.Vec6_get(self, i)

    def __str__(self):
        r"""__str__(Vec6 self) -> std::string"""
        return _simbody.Vec6___str__(self)

    def __len__(self):
        r"""__len__(Vec6 self) -> int"""
        return _simbody.Vec6___len__(self)

    def scalarEq(self, ee):
        r"""
        scalarEq(Vec6 self, double const & ee) -> Vec6

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec6_scalarEq(self, ee)

    def scalarPlusEq(self, ee):
        r"""
        scalarPlusEq(Vec6 self, double const & ee) -> Vec6

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec6_scalarPlusEq(self, ee)

    def scalarMinusEq(self, ee):
        r"""
        scalarMinusEq(Vec6 self, double const & ee) -> Vec6

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec6_scalarMinusEq(self, ee)

    def scalarTimesEq(self, ee):
        r"""
        scalarTimesEq(Vec6 self, double const & ee) -> Vec6

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec6_scalarTimesEq(self, ee)

    def scalarDivideEq(self, ee):
        r"""
        scalarDivideEq(Vec6 self, double const & ee) -> Vec6

        Parameters
        ----------
        ee: double const &

        """
        return _simbody.Vec6_scalarDivideEq(self, ee)
    __swig_destroy__ = _simbody.delete_Vec6

# Register Vec6 in _simbody:
_simbody.Vec6_swigregister(Vec6)
class Mat33(object):
    r"""Proxy of C++ SimTK::Mat< 3,3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        r"""size() -> int"""
        return _simbody.Mat33_size()

    @staticmethod
    def nrow():
        r"""nrow() -> int"""
        return _simbody.Mat33_nrow()

    @staticmethod
    def ncol():
        r"""ncol() -> int"""
        return _simbody.Mat33_ncol()

    def __init__(self, *args):
        r"""
        __init__(Mat33 self) -> Mat33
        __init__(Mat33 self, Mat33 src) -> Mat33

        Parameters
        ----------
        src: SimTK::Mat< 3,3 > const &

        __init__(Mat33 self, double const & e) -> Mat33

        Parameters
        ----------
        e: double const &

        __init__(Mat33 self, int i) -> Mat33

        Parameters
        ----------
        i: int

        __init__(Mat33 self, double const & e0, double const & e1) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &
        e7: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &
        e7: double const &
        e8: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &
        e7: double const &
        e8: double const &
        e9: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &
        e7: double const &
        e8: double const &
        e9: double const &
        e10: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &
        e7: double const &
        e8: double const &
        e9: double const &
        e10: double const &
        e11: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11, double const & e12) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &
        e7: double const &
        e8: double const &
        e9: double const &
        e10: double const &
        e11: double const &
        e12: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11, double const & e12, double const & e13) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &
        e7: double const &
        e8: double const &
        e9: double const &
        e10: double const &
        e11: double const &
        e12: double const &
        e13: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11, double const & e12, double const & e13, double const & e14) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &
        e7: double const &
        e8: double const &
        e9: double const &
        e10: double const &
        e11: double const &
        e12: double const &
        e13: double const &
        e14: double const &

        __init__(Mat33 self, double const & e0, double const & e1, double const & e2, double const & e3, double const & e4, double const & e5, double const & e6, double const & e7, double const & e8, double const & e9, double const & e10, double const & e11, double const & e12, double const & e13, double const & e14, double const & e15) -> Mat33

        Parameters
        ----------
        e0: double const &
        e1: double const &
        e2: double const &
        e3: double const &
        e4: double const &
        e5: double const &
        e6: double const &
        e7: double const &
        e8: double const &
        e9: double const &
        e10: double const &
        e11: double const &
        e12: double const &
        e13: double const &
        e14: double const &
        e15: double const &

        """
        _simbody.Mat33_swiginit(self, _simbody.new_Mat33(*args))

    def setToNaN(self):
        r"""setToNaN(Mat33 self)"""
        return _simbody.Mat33_setToNaN(self)

    def setToZero(self):
        r"""setToZero(Mat33 self)"""
        return _simbody.Mat33_setToZero(self)

    def isNaN(self):
        r"""isNaN(Mat33 self) -> bool"""
        return _simbody.Mat33_isNaN(self)

    def isInf(self):
        r"""isInf(Mat33 self) -> bool"""
        return _simbody.Mat33_isInf(self)

    def isFinite(self):
        r"""isFinite(Mat33 self) -> bool"""
        return _simbody.Mat33_isFinite(self)

    @staticmethod
    def getDefaultTolerance():
        r"""getDefaultTolerance() -> double"""
        return _simbody.Mat33_getDefaultTolerance()

    def isNumericallyEqual(self, *args):
        r"""
        isNumericallyEqual(Mat33 self, double const & e, double tol=SimTK::Mat< 3,3 >::getDefaultTolerance()) -> bool

        Parameters
        ----------
        e: double const &
        tol: double

        """
        return _simbody.Mat33_isNumericallyEqual(self, *args)

    def isNumericallySymmetric(self, *args):
        r"""
        isNumericallySymmetric(Mat33 self, double tol=SimTK::Mat< 3,3 >::getDefaultTolerance()) -> bool

        Parameters
        ----------
        tol: double

        """
        return _simbody.Mat33_isNumericallySymmetric(self, *args)

    def isExactlySymmetric(self):
        r"""isExactlySymmetric(Mat33 self) -> bool"""
        return _simbody.Mat33_isExactlySymmetric(self)

    def toString(self):
        r"""toString(Mat33 self) -> std::string"""
        return _simbody.Mat33_toString(self)

    def get(self, i, j):
        r"""
        get(Mat33 self, int i, int j) -> double const &

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.Mat33_get(self, i, j)

    def set(self, i, j, value):
        r"""
        set(Mat33 self, int i, int j, double const & value)

        Parameters
        ----------
        i: int
        j: int
        value: double const &

        """
        return _simbody.Mat33_set(self, i, j, value)
    __swig_destroy__ = _simbody.delete_Mat33

# Register Mat33 in _simbody:
_simbody.Mat33_swigregister(Mat33)
class CoordinateAxis(object):
    r"""Proxy of C++ SimTK::CoordinateAxis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, i):
        r"""
        __init__(CoordinateAxis self, int i) -> CoordinateAxis

        Parameters
        ----------
        i: int

        """
        _simbody.CoordinateAxis_swiginit(self, _simbody.new_CoordinateAxis(i))

    def getNextAxis(self):
        r"""getNextAxis(CoordinateAxis self) -> CoordinateAxis"""
        return _simbody.CoordinateAxis_getNextAxis(self)

    def getPreviousAxis(self):
        r"""getPreviousAxis(CoordinateAxis self) -> CoordinateAxis"""
        return _simbody.CoordinateAxis_getPreviousAxis(self)

    def getThirdAxis(self, axis2):
        r"""
        getThirdAxis(CoordinateAxis self, CoordinateAxis axis2) -> CoordinateAxis

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_getThirdAxis(self, axis2)

    def isXAxis(self):
        r"""isXAxis(CoordinateAxis self) -> bool"""
        return _simbody.CoordinateAxis_isXAxis(self)

    def isYAxis(self):
        r"""isYAxis(CoordinateAxis self) -> bool"""
        return _simbody.CoordinateAxis_isYAxis(self)

    def isZAxis(self):
        r"""isZAxis(CoordinateAxis self) -> bool"""
        return _simbody.CoordinateAxis_isZAxis(self)

    def isNextAxis(self, axis2):
        r"""
        isNextAxis(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_isNextAxis(self, axis2)

    def isPreviousAxis(self, axis2):
        r"""
        isPreviousAxis(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_isPreviousAxis(self, axis2)

    def isSameAxis(self, axis2):
        r"""
        isSameAxis(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_isSameAxis(self, axis2)

    def areAllSameAxes(self, axis2, axis3):
        r"""
        areAllSameAxes(CoordinateAxis self, CoordinateAxis axis2, CoordinateAxis axis3) -> bool

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &
        axis3: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_areAllSameAxes(self, axis2, axis3)

    def isDifferentAxis(self, axis2):
        r"""
        isDifferentAxis(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_isDifferentAxis(self, axis2)

    def areAllDifferentAxes(self, axis2, axis3):
        r"""
        areAllDifferentAxes(CoordinateAxis self, CoordinateAxis axis2, CoordinateAxis axis3) -> bool

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &
        axis3: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_areAllDifferentAxes(self, axis2, axis3)

    def isForwardCyclical(self, axis2):
        r"""
        isForwardCyclical(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_isForwardCyclical(self, axis2)

    def isReverseCyclical(self, axis2):
        r"""
        isReverseCyclical(CoordinateAxis self, CoordinateAxis axis2) -> bool

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_isReverseCyclical(self, axis2)

    def dotProduct(self, axis2):
        r"""
        dotProduct(CoordinateAxis self, CoordinateAxis axis2) -> int

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_dotProduct(self, axis2)

    def crossProductSign(self, axis2):
        r"""
        crossProductSign(CoordinateAxis self, CoordinateAxis axis2) -> int

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_crossProductSign(self, axis2)

    def crossProductAxis(self, axis2):
        r"""
        crossProductAxis(CoordinateAxis self, CoordinateAxis axis2) -> CoordinateAxis

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.CoordinateAxis_crossProductAxis(self, axis2)

    def crossProduct(self, axis2, sign):
        r"""
        crossProduct(CoordinateAxis self, CoordinateAxis axis2, int & sign) -> CoordinateAxis

        Parameters
        ----------
        axis2: SimTK::CoordinateAxis const &
        sign: int &

        """
        return _simbody.CoordinateAxis_crossProduct(self, axis2, sign)

    @staticmethod
    def getCoordinateAxis(i):
        r"""
        getCoordinateAxis(int i) -> CoordinateAxis

        Parameters
        ----------
        i: int

        """
        return _simbody.CoordinateAxis_getCoordinateAxis(i)

    @staticmethod
    def isIndexInRange(i):
        r"""
        isIndexInRange(int i) -> bool

        Parameters
        ----------
        i: int

        """
        return _simbody.CoordinateAxis_isIndexInRange(i)
    __swig_destroy__ = _simbody.delete_CoordinateAxis

# Register CoordinateAxis in _simbody:
_simbody.CoordinateAxis_swigregister(CoordinateAxis)

def __eq__(a1, a2):
    r"""
    __eq__(CoordinateAxis a1, CoordinateAxis a2) -> bool

    Parameters
    ----------
    a1: SimTK::CoordinateAxis const &
    a2: SimTK::CoordinateAxis const &

    """
    return _simbody.__eq__(a1, a2)

def __ne__(a1, a2):
    r"""
    __ne__(CoordinateAxis a1, CoordinateAxis a2) -> bool

    Parameters
    ----------
    a1: SimTK::CoordinateAxis const &
    a2: SimTK::CoordinateAxis const &

    """
    return _simbody.__ne__(a1, a2)
class CoordinateDirection(object):
    r"""Proxy of C++ SimTK::CoordinateDirection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CoordinateDirection self, CoordinateAxis axis) -> CoordinateDirection

        Parameters
        ----------
        axis: SimTK::CoordinateAxis const &

        __init__(CoordinateDirection self, CoordinateAxis axis, int direction) -> CoordinateDirection

        Parameters
        ----------
        axis: SimTK::CoordinateAxis const &
        direction: int

        """
        _simbody.CoordinateDirection_swiginit(self, _simbody.new_CoordinateDirection(*args))

    def getAxis(self):
        r"""getAxis(CoordinateDirection self) -> CoordinateAxis"""
        return _simbody.CoordinateDirection_getAxis(self)

    def getDirection(self):
        r"""getDirection(CoordinateDirection self) -> int"""
        return _simbody.CoordinateDirection_getDirection(self)

    def hasSameAxis(self, dir2):
        r"""
        hasSameAxis(CoordinateDirection self, CoordinateDirection dir2) -> bool

        Parameters
        ----------
        dir2: SimTK::CoordinateDirection const &

        """
        return _simbody.CoordinateDirection_hasSameAxis(self, dir2)

    def isSameAxisAndDirection(self, dir2):
        r"""
        isSameAxisAndDirection(CoordinateDirection self, CoordinateDirection dir2) -> bool

        Parameters
        ----------
        dir2: SimTK::CoordinateDirection const &

        """
        return _simbody.CoordinateDirection_isSameAxisAndDirection(self, dir2)

    def dotProduct(self, dir2):
        r"""
        dotProduct(CoordinateDirection self, CoordinateDirection dir2) -> int

        Parameters
        ----------
        dir2: SimTK::CoordinateDirection const &

        """
        return _simbody.CoordinateDirection_dotProduct(self, dir2)

    def crossProductSign(self, dir2):
        r"""
        crossProductSign(CoordinateDirection self, CoordinateDirection dir2) -> int

        Parameters
        ----------
        dir2: SimTK::CoordinateDirection const &

        """
        return _simbody.CoordinateDirection_crossProductSign(self, dir2)

    def crossProductAxis(self, dir2):
        r"""
        crossProductAxis(CoordinateDirection self, CoordinateDirection dir2) -> CoordinateAxis

        Parameters
        ----------
        dir2: SimTK::CoordinateDirection const &

        """
        return _simbody.CoordinateDirection_crossProductAxis(self, dir2)

    def crossProduct(self, dir2, sign):
        r"""
        crossProduct(CoordinateDirection self, CoordinateDirection dir2, int & sign) -> CoordinateAxis

        Parameters
        ----------
        dir2: SimTK::CoordinateDirection const &
        sign: int &

        """
        return _simbody.CoordinateDirection_crossProduct(self, dir2, sign)
    __swig_destroy__ = _simbody.delete_CoordinateDirection

# Register CoordinateDirection in _simbody:
_simbody.CoordinateDirection_swigregister(CoordinateDirection)
class UnitVec3(Vec3):
    r"""Proxy of C++ SimTK::UnitVec< double,1 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def asVec3(self):
        r"""asVec3(UnitVec3 self) -> Vec3"""
        return _simbody.UnitVec3_asVec3(self)

    def negate(self):
        r"""negate(UnitVec3 self) -> UnitVec3"""
        return _simbody.UnitVec3_negate(self)

    def __neg__(self):
        r"""__neg__(UnitVec3 self) -> UnitVec3"""
        return _simbody.UnitVec3___neg__(self)

    def __invert__(self, *args):
        r"""
        __invert__(UnitVec3 self) -> SimTK::UnitVec< double,1 >::TransposeType const
        __invert__(UnitVec3 self) -> SimTK::UnitVec< double,1 >::TransposeType &
        """
        return _simbody.UnitVec3___invert__(self, *args)

    def __call__(self, i):
        r"""
        __call__(UnitVec3 self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _simbody.UnitVec3___call__(self, i)

    def abs(self):
        r"""abs(UnitVec3 self) -> UnitVec3"""
        return _simbody.UnitVec3_abs(self)

    def perp(self):
        r"""perp(UnitVec3 self) -> UnitVec3"""
        return _simbody.UnitVec3_perp(self)

    def __init__(self, *args):
        r"""
        __init__(UnitVec3 self) -> UnitVec3
        __init__(UnitVec3 self, UnitVec3 u) -> UnitVec3

        Parameters
        ----------
        u: SimTK::UnitVec< double,1 > const &

        __init__(UnitVec3 self, Vec3 v) -> UnitVec3

        Parameters
        ----------
        v: SimTK::UnitVec< double,1 >::BaseVec const &

        __init__(UnitVec3 self, double const & x, double const & y, double const & z) -> UnitVec3

        Parameters
        ----------
        x: double const &
        y: double const &
        z: double const &

        __init__(UnitVec3 self, CoordinateAxis axis) -> UnitVec3

        Parameters
        ----------
        axis: SimTK::CoordinateAxis const &

        __init__(UnitVec3 self, CoordinateDirection dir) -> UnitVec3

        Parameters
        ----------
        dir: SimTK::CoordinateDirection const &

        __init__(UnitVec3 self, int axis) -> UnitVec3

        Parameters
        ----------
        axis: int

        __init__(UnitVec3 self, Vec3 v, bool arg3) -> UnitVec3

        Parameters
        ----------
        v: SimTK::UnitVec< double,1 >::BaseVec const &
        arg3: bool

        """
        _simbody.UnitVec3_swiginit(self, _simbody.new_UnitVec3(*args))

    @staticmethod
    def getAs(p):
        r"""
        getAs(double const * p) -> UnitVec3

        Parameters
        ----------
        p: double const *

        """
        return _simbody.UnitVec3_getAs(p)
    __swig_destroy__ = _simbody.delete_UnitVec3

# Register UnitVec3 in _simbody:
_simbody.UnitVec3_swigregister(UnitVec3)
class Quaternion(Vec4):
    r"""Proxy of C++ SimTK::Quaternion_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setQuaternionToZeroRotation(self):
        r"""setQuaternionToZeroRotation(Quaternion self)"""
        return _simbody.Quaternion_setQuaternionToZeroRotation(self)

    def setQuaternionToNaN(self):
        r"""setQuaternionToNaN(Quaternion self)"""
        return _simbody.Quaternion_setQuaternionToNaN(self)

    def normalizeThis(self):
        r"""normalizeThis(Quaternion self) -> Quaternion"""
        return _simbody.Quaternion_normalizeThis(self)

    def normalize(self):
        r"""normalize(Quaternion self) -> Quaternion"""
        return _simbody.Quaternion_normalize(self)

    def __init__(self, *args):
        r"""
        __init__(Quaternion self) -> Quaternion
        __init__(Quaternion self, Quaternion q) -> Quaternion

        Parameters
        ----------
        q: SimTK::Quaternion_< double > const &

        __init__(Quaternion self, double e0, double e1, double e2, double e3) -> Quaternion

        Parameters
        ----------
        e0: double
        e1: double
        e2: double
        e3: double

        __init__(Quaternion self, Vec4 q) -> Quaternion

        Parameters
        ----------
        q: SimTK::Vec< 4,double > const &

        __init__(Quaternion self, Vec4 v, bool arg3) -> Quaternion

        Parameters
        ----------
        v: SimTK::Vec< 4,double > const &
        arg3: bool

        """
        _simbody.Quaternion_swiginit(self, _simbody.new_Quaternion(*args))
    __swig_destroy__ = _simbody.delete_Quaternion

# Register Quaternion in _simbody:
_simbody.Quaternion_swigregister(Quaternion)
class StdVectorVec3(object):
    r"""Proxy of C++ std::vector< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdVectorVec3 self) -> SwigPyIterator"""
        return _simbody.StdVectorVec3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdVectorVec3 self) -> bool"""
        return _simbody.StdVectorVec3___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdVectorVec3 self) -> bool"""
        return _simbody.StdVectorVec3___bool__(self)

    def __len__(self):
        r"""__len__(StdVectorVec3 self) -> std::vector< SimTK::Vec< 3,double,1 > >::size_type"""
        return _simbody.StdVectorVec3___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::difference_type i, std::vector< SimTK::Vec< 3,double,1 > >::difference_type j) -> StdVectorVec3

        Parameters
        ----------
        i: std::vector< SimTK::Vec< 3,double,1 > >::difference_type
        j: std::vector< SimTK::Vec< 3,double,1 > >::difference_type

        """
        return _simbody.StdVectorVec3___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::difference_type i, std::vector< SimTK::Vec< 3,double,1 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::Vec< 3,double,1 > >::difference_type
        j: std::vector< SimTK::Vec< 3,double,1 > >::difference_type

        __setslice__(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::difference_type i, std::vector< SimTK::Vec< 3,double,1 > >::difference_type j, StdVectorVec3 v)

        Parameters
        ----------
        i: std::vector< SimTK::Vec< 3,double,1 > >::difference_type
        j: std::vector< SimTK::Vec< 3,double,1 > >::difference_type
        v: std::vector< SimTK::Vec< 3,double,1 >,std::allocator< SimTK::Vec< 3,double,1 > > > const &

        """
        return _simbody.StdVectorVec3___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::difference_type i, std::vector< SimTK::Vec< 3,double,1 > >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::Vec< 3,double,1 > >::difference_type
        j: std::vector< SimTK::Vec< 3,double,1 > >::difference_type

        """
        return _simbody.StdVectorVec3___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::difference_type i)

        Parameters
        ----------
        i: std::vector< SimTK::Vec< 3,double,1 > >::difference_type

        __delitem__(StdVectorVec3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _simbody.StdVectorVec3___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StdVectorVec3 self, SWIGPY_SLICEOBJECT * slice) -> StdVectorVec3

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::difference_type i) -> Vec3

        Parameters
        ----------
        i: std::vector< SimTK::Vec< 3,double,1 > >::difference_type

        """
        return _simbody.StdVectorVec3___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdVectorVec3 self, SWIGPY_SLICEOBJECT * slice, StdVectorVec3 v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< SimTK::Vec< 3,double,1 >,std::allocator< SimTK::Vec< 3,double,1 > > > const &

        __setitem__(StdVectorVec3 self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::difference_type i, Vec3 x)

        Parameters
        ----------
        i: std::vector< SimTK::Vec< 3,double,1 > >::difference_type
        x: std::vector< SimTK::Vec< 3,double,1 > >::value_type const &

        """
        return _simbody.StdVectorVec3___setitem__(self, *args)

    def pop(self):
        r"""pop(StdVectorVec3 self) -> Vec3"""
        return _simbody.StdVectorVec3_pop(self)

    def append(self, x):
        r"""
        append(StdVectorVec3 self, Vec3 x)

        Parameters
        ----------
        x: std::vector< SimTK::Vec< 3,double,1 > >::value_type const &

        """
        return _simbody.StdVectorVec3_append(self, x)

    def empty(self):
        r"""empty(StdVectorVec3 self) -> bool"""
        return _simbody.StdVectorVec3_empty(self)

    def size(self):
        r"""size(StdVectorVec3 self) -> std::vector< SimTK::Vec< 3,double,1 > >::size_type"""
        return _simbody.StdVectorVec3_size(self)

    def swap(self, v):
        r"""
        swap(StdVectorVec3 self, StdVectorVec3 v)

        Parameters
        ----------
        v: std::vector< SimTK::Vec3 > &

        """
        return _simbody.StdVectorVec3_swap(self, v)

    def begin(self):
        r"""begin(StdVectorVec3 self) -> std::vector< SimTK::Vec< 3,double,1 > >::iterator"""
        return _simbody.StdVectorVec3_begin(self)

    def end(self):
        r"""end(StdVectorVec3 self) -> std::vector< SimTK::Vec< 3,double,1 > >::iterator"""
        return _simbody.StdVectorVec3_end(self)

    def rbegin(self):
        r"""rbegin(StdVectorVec3 self) -> std::vector< SimTK::Vec< 3,double,1 > >::reverse_iterator"""
        return _simbody.StdVectorVec3_rbegin(self)

    def rend(self):
        r"""rend(StdVectorVec3 self) -> std::vector< SimTK::Vec< 3,double,1 > >::reverse_iterator"""
        return _simbody.StdVectorVec3_rend(self)

    def clear(self):
        r"""clear(StdVectorVec3 self)"""
        return _simbody.StdVectorVec3_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdVectorVec3 self) -> std::vector< SimTK::Vec< 3,double,1 > >::allocator_type"""
        return _simbody.StdVectorVec3_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StdVectorVec3 self)"""
        return _simbody.StdVectorVec3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::iterator pos) -> std::vector< SimTK::Vec< 3,double,1 > >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::Vec< 3,double,1 > >::iterator

        erase(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::iterator first, std::vector< SimTK::Vec< 3,double,1 > >::iterator last) -> std::vector< SimTK::Vec< 3,double,1 > >::iterator

        Parameters
        ----------
        first: std::vector< SimTK::Vec< 3,double,1 > >::iterator
        last: std::vector< SimTK::Vec< 3,double,1 > >::iterator

        """
        return _simbody.StdVectorVec3_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StdVectorVec3 self) -> StdVectorVec3
        __init__(StdVectorVec3 self, StdVectorVec3 other) -> StdVectorVec3

        Parameters
        ----------
        other: std::vector< SimTK::Vec3 > const &

        __init__(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::size_type size) -> StdVectorVec3

        Parameters
        ----------
        size: std::vector< SimTK::Vec< 3,double,1 > >::size_type

        __init__(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::size_type size, Vec3 value) -> StdVectorVec3

        Parameters
        ----------
        size: std::vector< SimTK::Vec< 3,double,1 > >::size_type
        value: std::vector< SimTK::Vec< 3,double,1 > >::value_type const &

        """
        _simbody.StdVectorVec3_swiginit(self, _simbody.new_StdVectorVec3(*args))

    def push_back(self, x):
        r"""
        push_back(StdVectorVec3 self, Vec3 x)

        Parameters
        ----------
        x: std::vector< SimTK::Vec< 3,double,1 > >::value_type const &

        """
        return _simbody.StdVectorVec3_push_back(self, x)

    def front(self):
        r"""front(StdVectorVec3 self) -> Vec3"""
        return _simbody.StdVectorVec3_front(self)

    def back(self):
        r"""back(StdVectorVec3 self) -> Vec3"""
        return _simbody.StdVectorVec3_back(self)

    def assign(self, n, x):
        r"""
        assign(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 x)

        Parameters
        ----------
        n: std::vector< SimTK::Vec< 3,double,1 > >::size_type
        x: std::vector< SimTK::Vec< 3,double,1 > >::value_type const &

        """
        return _simbody.StdVectorVec3_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< SimTK::Vec< 3,double,1 > >::size_type

        resize(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::size_type new_size, Vec3 x)

        Parameters
        ----------
        new_size: std::vector< SimTK::Vec< 3,double,1 > >::size_type
        x: std::vector< SimTK::Vec< 3,double,1 > >::value_type const &

        """
        return _simbody.StdVectorVec3_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::iterator pos, Vec3 x) -> std::vector< SimTK::Vec< 3,double,1 > >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::Vec< 3,double,1 > >::iterator
        x: std::vector< SimTK::Vec< 3,double,1 > >::value_type const &

        insert(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::iterator pos, std::vector< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 x)

        Parameters
        ----------
        pos: std::vector< SimTK::Vec< 3,double,1 > >::iterator
        n: std::vector< SimTK::Vec< 3,double,1 > >::size_type
        x: std::vector< SimTK::Vec< 3,double,1 > >::value_type const &

        """
        return _simbody.StdVectorVec3_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StdVectorVec3 self, std::vector< SimTK::Vec< 3,double,1 > >::size_type n)

        Parameters
        ----------
        n: std::vector< SimTK::Vec< 3,double,1 > >::size_type

        """
        return _simbody.StdVectorVec3_reserve(self, n)

    def capacity(self):
        r"""capacity(StdVectorVec3 self) -> std::vector< SimTK::Vec< 3,double,1 > >::size_type"""
        return _simbody.StdVectorVec3_capacity(self)
    __swig_destroy__ = _simbody.delete_StdVectorVec3

# Register StdVectorVec3 in _simbody:
_simbody.StdVectorVec3_swigregister(StdVectorVec3)
class MatrixBaseDouble(object):
    r"""Proxy of C++ SimTK::MatrixBase< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def nrow(self):
        r"""nrow(MatrixBaseDouble self) -> int"""
        return _simbody.MatrixBaseDouble_nrow(self)

    def ncol(self):
        r"""ncol(MatrixBaseDouble self) -> int"""
        return _simbody.MatrixBaseDouble_ncol(self)

    def isResizeable(self):
        r"""isResizeable(MatrixBaseDouble self) -> bool"""
        return _simbody.MatrixBaseDouble_isResizeable(self)
    NScalarsPerElement = _simbody.MatrixBaseDouble_NScalarsPerElement
    
    CppNScalarsPerElement = _simbody.MatrixBaseDouble_CppNScalarsPerElement
    

    def __init__(self, *args):
        r"""
        __init__(MatrixBaseDouble self) -> MatrixBaseDouble
        __init__(MatrixBaseDouble self, int m, int n) -> MatrixBaseDouble

        Parameters
        ----------
        m: int
        n: int

        """
        _simbody.MatrixBaseDouble_swiginit(self, _simbody.new_MatrixBaseDouble(*args))

    def clear(self):
        r"""clear(MatrixBaseDouble self)"""
        return _simbody.MatrixBaseDouble_clear(self)

    def setTo(self, t):
        r"""
        setTo(MatrixBaseDouble self, double const & t) -> MatrixBaseDouble

        Parameters
        ----------
        t: double const &

        """
        return _simbody.MatrixBaseDouble_setTo(self, t)

    def setToNaN(self):
        r"""setToNaN(MatrixBaseDouble self) -> MatrixBaseDouble"""
        return _simbody.MatrixBaseDouble_setToNaN(self)

    def setToZero(self):
        r"""setToZero(MatrixBaseDouble self) -> MatrixBaseDouble"""
        return _simbody.MatrixBaseDouble_setToZero(self)

    def row(self, i):
        r"""
        row(MatrixBaseDouble self, int i) -> RowVectorView

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseDouble_row(self, i)

    def updRow(self, i):
        r"""
        updRow(MatrixBaseDouble self, int i) -> RowVectorView

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseDouble_updRow(self, i)

    def col(self, j):
        r"""
        col(MatrixBaseDouble self, int j) -> VectorView

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseDouble_col(self, j)

    def updCol(self, j):
        r"""
        updCol(MatrixBaseDouble self, int j) -> VectorView

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseDouble_updCol(self, j)

    def __call__(self, *args):
        r"""
        __call__(MatrixBaseDouble self, int j) -> VectorView

        Parameters
        ----------
        j: int

        __call__(MatrixBaseDouble self, int j) -> VectorView

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseDouble___call__(self, *args)

    def getElt(self, i, j):
        r"""
        getElt(MatrixBaseDouble self, int i, int j) -> double const &

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseDouble_getElt(self, i, j)

    def updElt(self, i, j):
        r"""
        updElt(MatrixBaseDouble self, int i, int j) -> double &

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseDouble_updElt(self, i, j)

    def negateInPlace(self):
        r"""negateInPlace(MatrixBaseDouble self) -> MatrixBaseDouble"""
        return _simbody.MatrixBaseDouble_negateInPlace(self)

    def resize(self, m, n):
        r"""
        resize(MatrixBaseDouble self, int m, int n) -> MatrixBaseDouble

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseDouble_resize(self, m, n)

    def resizeKeep(self, m, n):
        r"""
        resizeKeep(MatrixBaseDouble self, int m, int n) -> MatrixBaseDouble

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseDouble_resizeKeep(self, m, n)

    def lockShape(self):
        r"""lockShape(MatrixBaseDouble self)"""
        return _simbody.MatrixBaseDouble_lockShape(self)

    def unlockShape(self):
        r"""unlockShape(MatrixBaseDouble self)"""
        return _simbody.MatrixBaseDouble_unlockShape(self)

    def _to_numpy(self, nrow):
        r"""
        _to_numpy(MatrixBaseDouble self, int nrow)

        Parameters
        ----------
        nrow: int

        """
        return _simbody.MatrixBaseDouble__to_numpy(self, nrow)

    def to_numpy(self):
        import numpy as np
        mat = np.empty([self.nrow(), self.ncol()])
        self._to_numpy(mat)
        return mat

    __swig_destroy__ = _simbody.delete_MatrixBaseDouble

# Register MatrixBaseDouble in _simbody:
_simbody.MatrixBaseDouble_swigregister(MatrixBaseDouble)
class MatrixView(MatrixBaseDouble):
    r"""Proxy of C++ SimTK::MatrixView_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, m):
        r"""
        __init__(MatrixView self, MatrixView m) -> MatrixView

        Parameters
        ----------
        m: SimTK::MatrixView_< double > const &

        """
        _simbody.MatrixView_swiginit(self, _simbody.new_MatrixView(m))

    def __iadd__(self, r):
        r"""
        __iadd__(MatrixView self, double const & r) -> MatrixView

        Parameters
        ----------
        r: double const &

        """
        return _simbody.MatrixView___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(MatrixView self, double const & r) -> MatrixView

        Parameters
        ----------
        r: double const &

        """
        return _simbody.MatrixView___isub__(self, r)
    __swig_destroy__ = _simbody.delete_MatrixView

# Register MatrixView in _simbody:
_simbody.MatrixView_swigregister(MatrixView)
class Matrix(MatrixBaseDouble):
    r"""Proxy of C++ SimTK::Matrix_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Matrix self) -> Matrix
        __init__(Matrix self, Matrix src) -> Matrix

        Parameters
        ----------
        src: SimTK::Matrix_< double > const &

        __init__(Matrix self, int m, int n) -> Matrix

        Parameters
        ----------
        m: int
        n: int

        __init__(Matrix self, int m, int n, double const & initialValue) -> Matrix

        Parameters
        ----------
        m: int
        n: int
        initialValue: double const &

        """
        _simbody.Matrix_swiginit(self, _simbody.new_Matrix(*args))

    def toString(self):
        r"""toString(Matrix self) -> std::string"""
        return _simbody.Matrix_toString(self)

    def get(self, i, j):
        r"""
        get(Matrix self, int i, int j) -> double const &

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.Matrix_get(self, i, j)

    def set(self, i, j, value):
        r"""
        set(Matrix self, int i, int j, double const & value)

        Parameters
        ----------
        i: int
        j: int
        value: double const &

        """
        return _simbody.Matrix_set(self, i, j, value)

    @staticmethod
    def createFromMat(nrow):
        r"""
        createFromMat(int nrow) -> Matrix

        Parameters
        ----------
        nrow: int

        """
        return _simbody.Matrix_createFromMat(nrow)
    __swig_destroy__ = _simbody.delete_Matrix

# Register Matrix in _simbody:
_simbody.Matrix_swigregister(Matrix)
class VectorBaseDouble(MatrixBaseDouble):
    r"""Proxy of C++ SimTK::VectorBase< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorBaseDouble self, int m=0) -> VectorBaseDouble

        Parameters
        ----------
        m: int

        __init__(VectorBaseDouble self, VectorBaseDouble source) -> VectorBaseDouble

        Parameters
        ----------
        source: SimTK::VectorBase< double > const &

        """
        _simbody.VectorBaseDouble_swiginit(self, _simbody.new_VectorBaseDouble(*args))

    def size(self):
        r"""size(VectorBaseDouble self) -> int"""
        return _simbody.VectorBaseDouble_size(self)

    def nrow(self):
        r"""nrow(VectorBaseDouble self) -> int"""
        return _simbody.VectorBaseDouble_nrow(self)

    def ncol(self):
        r"""ncol(VectorBaseDouble self) -> int"""
        return _simbody.VectorBaseDouble_ncol(self)

    def resize(self, m):
        r"""
        resize(VectorBaseDouble self, int m) -> VectorBaseDouble

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseDouble_resize(self, m)

    def resizeKeep(self, m):
        r"""
        resizeKeep(VectorBaseDouble self, int m) -> VectorBaseDouble

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseDouble_resizeKeep(self, m)

    def clear(self):
        r"""clear(VectorBaseDouble self)"""
        return _simbody.VectorBaseDouble_clear(self)

    def sum(self):
        r"""sum(VectorBaseDouble self) -> double"""
        return _simbody.VectorBaseDouble_sum(self)

    def __getitem__(self, i):
        r"""
        __getitem__(VectorBaseDouble self, int i) -> double

        Parameters
        ----------
        i: int

        """
        return _simbody.VectorBaseDouble___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""
        __setitem__(VectorBaseDouble self, int i, double value)

        Parameters
        ----------
        i: int
        value: double

        """
        return _simbody.VectorBaseDouble___setitem__(self, i, value)

    def _to_numpy(self, n):
        r"""
        _to_numpy(VectorBaseDouble self, int n)

        Parameters
        ----------
        n: int

        """
        return _simbody.VectorBaseDouble__to_numpy(self, n)

    def to_numpy(self):
        return self._to_numpy(self.size())

    __swig_destroy__ = _simbody.delete_VectorBaseDouble

# Register VectorBaseDouble in _simbody:
_simbody.VectorBaseDouble_swigregister(VectorBaseDouble)
class VectorView(VectorBaseDouble):
    r"""Proxy of C++ SimTK::VectorView_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v):
        r"""
        __init__(VectorView self, VectorView v) -> VectorView

        Parameters
        ----------
        v: SimTK::VectorView_< double > const &

        """
        _simbody.VectorView_swiginit(self, _simbody.new_VectorView(v))

    def multiplyAssign(self, t):
        r"""
        multiplyAssign(VectorView self, double t) -> VectorView

        Parameters
        ----------
        t: double

        """
        return _simbody.VectorView_multiplyAssign(self, t)
    __swig_destroy__ = _simbody.delete_VectorView

# Register VectorView in _simbody:
_simbody.VectorView_swigregister(VectorView)
class Vector(VectorBaseDouble):
    r"""Proxy of C++ SimTK::Vector_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def toString(self):
        r"""toString(Vector self) -> std::string"""
        return _simbody.Vector_toString(self)

    def get(self, i):
        r"""
        get(Vector self, int i) -> double const &

        Parameters
        ----------
        i: int

        """
        return _simbody.Vector_get(self, i)

    def set(self, i, value):
        r"""
        set(Vector self, int i, double const & value)

        Parameters
        ----------
        i: int
        value: double const &

        """
        return _simbody.Vector_set(self, i, value)

    def __str__(self):
        r"""__str__(Vector self) -> std::string"""
        return _simbody.Vector___str__(self)

    def __len__(self):
        r"""__len__(Vector self) -> int"""
        return _simbody.Vector___len__(self)

    def __init__(self, *args):
        r"""
        __init__(Vector self) -> Vector
        __init__(Vector self, Vector src) -> Vector

        Parameters
        ----------
        src: SimTK::Vector_< double > const &

        __init__(Vector self, int m, double const & initialValue) -> Vector

        Parameters
        ----------
        m: int
        initialValue: double const &

        __init__(Vector self, StdVectorDouble row) -> Vector

        Parameters
        ----------
        row: std::vector< double,std::allocator< double > > const &

        """
        _simbody.Vector_swiginit(self, _simbody.new_Vector(*args))

    def transpose(self):
        r"""transpose(Vector self) -> RowVector"""
        return _simbody.Vector_transpose(self)

    @staticmethod
    def createFromMat(n):
        r"""
        createFromMat(int n) -> Vector

        Parameters
        ----------
        n: int

        """
        return _simbody.Vector_createFromMat(n)

    def __getitem__(self, i):
        r"""
        __getitem__(Vector self, int i) -> double

        Parameters
        ----------
        i: int

        """
        return _simbody.Vector___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""
        __setitem__(Vector self, int i, double value)

        Parameters
        ----------
        i: int
        value: double

        """
        return _simbody.Vector___setitem__(self, i, value)
    __swig_destroy__ = _simbody.delete_Vector

# Register Vector in _simbody:
_simbody.Vector_swigregister(Vector)
class RowVectorBaseDouble(MatrixBaseDouble):
    r"""Proxy of C++ SimTK::RowVectorBase< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorBaseDouble self, int n=0) -> RowVectorBaseDouble

        Parameters
        ----------
        n: int

        __init__(RowVectorBaseDouble self, RowVectorBaseDouble source) -> RowVectorBaseDouble

        Parameters
        ----------
        source: SimTK::RowVectorBase< double > const &

        __init__(RowVectorBaseDouble self, int n, double const & initialValue) -> RowVectorBaseDouble

        Parameters
        ----------
        n: int
        initialValue: double const &

        __init__(RowVectorBaseDouble self, int n, double const * cppInitialValues) -> RowVectorBaseDouble

        Parameters
        ----------
        n: int
        cppInitialValues: double const *

        """
        _simbody.RowVectorBaseDouble_swiginit(self, _simbody.new_RowVectorBaseDouble(*args))

    def size(self):
        r"""size(RowVectorBaseDouble self) -> int"""
        return _simbody.RowVectorBaseDouble_size(self)

    def nrow(self):
        r"""nrow(RowVectorBaseDouble self) -> int"""
        return _simbody.RowVectorBaseDouble_nrow(self)

    def ncol(self):
        r"""ncol(RowVectorBaseDouble self) -> int"""
        return _simbody.RowVectorBaseDouble_ncol(self)

    def nelt(self):
        r"""nelt(RowVectorBaseDouble self) -> ptrdiff_t"""
        return _simbody.RowVectorBaseDouble_nelt(self)

    def index(self, indices):
        r"""
        index(RowVectorBaseDouble self, Array_< int > const & indices) -> RowVectorView

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseDouble_index(self, indices)

    def updIndex(self, indices):
        r"""
        updIndex(RowVectorBaseDouble self, Array_< int > const & indices) -> RowVectorView

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseDouble_updIndex(self, indices)

    def __call__(self, *args):
        r"""
        __call__(RowVectorBaseDouble self, int j) -> double const

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseDouble self, int j) -> double

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseDouble self, int j, int n) -> RowVectorView

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseDouble self, int j, int n) -> RowVectorView

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseDouble self, Array_< int > const & indices) -> RowVectorView

        Parameters
        ----------
        indices: Array_< int > const &

        __call__(RowVectorBaseDouble self, Array_< int > const & indices) -> RowVectorView

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseDouble___call__(self, *args)

    def __pos__(self):
        r"""__pos__(RowVectorBaseDouble self) -> RowVectorBaseDouble"""
        return _simbody.RowVectorBaseDouble___pos__(self)

    def resize(self, n):
        r"""
        resize(RowVectorBaseDouble self, int n) -> RowVectorBaseDouble

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseDouble_resize(self, n)

    def resizeKeep(self, n):
        r"""
        resizeKeep(RowVectorBaseDouble self, int n) -> RowVectorBaseDouble

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseDouble_resizeKeep(self, n)

    def clear(self):
        r"""clear(RowVectorBaseDouble self)"""
        return _simbody.RowVectorBaseDouble_clear(self)

    def sum(self):
        r"""sum(RowVectorBaseDouble self) -> double"""
        return _simbody.RowVectorBaseDouble_sum(self)

    def begin(self):
        r"""begin(RowVectorBaseDouble self) -> VectorIterator< double,SimTK::RowVectorBase< double > >"""
        return _simbody.RowVectorBaseDouble_begin(self)

    def end(self):
        r"""end(RowVectorBaseDouble self) -> VectorIterator< double,SimTK::RowVectorBase< double > >"""
        return _simbody.RowVectorBaseDouble_end(self)

    def __getitem__(self, i):
        r"""
        __getitem__(RowVectorBaseDouble self, int i) -> double

        Parameters
        ----------
        i: int

        """
        return _simbody.RowVectorBaseDouble___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""
        __setitem__(RowVectorBaseDouble self, int i, double value)

        Parameters
        ----------
        i: int
        value: double

        """
        return _simbody.RowVectorBaseDouble___setitem__(self, i, value)

    def _to_numpy(self, n):
        r"""
        _to_numpy(RowVectorBaseDouble self, int n)

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseDouble__to_numpy(self, n)

    def to_numpy(self):
        return self._to_numpy(self.size())

    __swig_destroy__ = _simbody.delete_RowVectorBaseDouble

# Register RowVectorBaseDouble in _simbody:
_simbody.RowVectorBaseDouble_swigregister(RowVectorBaseDouble)
class RowVectorView(RowVectorBaseDouble):
    r"""Proxy of C++ SimTK::RowVectorView_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r):
        r"""
        __init__(RowVectorView self, RowVectorView r) -> RowVectorView

        Parameters
        ----------
        r: SimTK::RowVectorView_< double > const &

        """
        _simbody.RowVectorView_swiginit(self, _simbody.new_RowVectorView(r))
    __swig_destroy__ = _simbody.delete_RowVectorView

# Register RowVectorView in _simbody:
_simbody.RowVectorView_swigregister(RowVectorView)
class RowVector(RowVectorBaseDouble):
    r"""Proxy of C++ SimTK::RowVector_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVector self) -> RowVector
        __init__(RowVector self, RowVector src) -> RowVector

        Parameters
        ----------
        src: SimTK::RowVector_< double > const &

        __init__(RowVector self, RowVectorBaseDouble src) -> RowVector

        Parameters
        ----------
        src: SimTK::RowVectorBase< double > const &

        __init__(RowVector self, int n) -> RowVector

        Parameters
        ----------
        n: int

        __init__(RowVector self, int n, double const * cppInitialValues) -> RowVector

        Parameters
        ----------
        n: int
        cppInitialValues: double const *

        __init__(RowVector self, int n, double const & initialValue) -> RowVector

        Parameters
        ----------
        n: int
        initialValue: double const &

        __init__(RowVector self, StdVectorDouble row) -> RowVector

        Parameters
        ----------
        row: std::vector< double,std::allocator< double > > const &

        """
        _simbody.RowVector_swiginit(self, _simbody.new_RowVector(*args))

    def transpose(self):
        r"""transpose(RowVector self) -> Vector"""
        return _simbody.RowVector_transpose(self)

    @staticmethod
    def createFromMat(n):
        r"""
        createFromMat(int n) -> RowVector

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVector_createFromMat(n)
    __swig_destroy__ = _simbody.delete_RowVector

# Register RowVector in _simbody:
_simbody.RowVector_swigregister(RowVector)
class MatrixBaseVec3(object):
    r"""Proxy of C++ SimTK::MatrixBase< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def nrow(self):
        r"""nrow(MatrixBaseVec3 self) -> int"""
        return _simbody.MatrixBaseVec3_nrow(self)

    def ncol(self):
        r"""ncol(MatrixBaseVec3 self) -> int"""
        return _simbody.MatrixBaseVec3_ncol(self)

    def isResizeable(self):
        r"""isResizeable(MatrixBaseVec3 self) -> bool"""
        return _simbody.MatrixBaseVec3_isResizeable(self)
    NScalarsPerElement = _simbody.MatrixBaseVec3_NScalarsPerElement
    
    CppNScalarsPerElement = _simbody.MatrixBaseVec3_CppNScalarsPerElement
    

    def __init__(self, *args):
        r"""
        __init__(MatrixBaseVec3 self) -> MatrixBaseVec3
        __init__(MatrixBaseVec3 self, int m, int n) -> MatrixBaseVec3

        Parameters
        ----------
        m: int
        n: int

        """
        _simbody.MatrixBaseVec3_swiginit(self, _simbody.new_MatrixBaseVec3(*args))

    def clear(self):
        r"""clear(MatrixBaseVec3 self)"""
        return _simbody.MatrixBaseVec3_clear(self)

    def setTo(self, t):
        r"""
        setTo(MatrixBaseVec3 self, Vec3 t) -> MatrixBaseVec3

        Parameters
        ----------
        t: SimTK::Vec< 3,double,1 > const &

        """
        return _simbody.MatrixBaseVec3_setTo(self, t)

    def setToNaN(self):
        r"""setToNaN(MatrixBaseVec3 self) -> MatrixBaseVec3"""
        return _simbody.MatrixBaseVec3_setToNaN(self)

    def setToZero(self):
        r"""setToZero(MatrixBaseVec3 self) -> MatrixBaseVec3"""
        return _simbody.MatrixBaseVec3_setToZero(self)

    def row(self, i):
        r"""
        row(MatrixBaseVec3 self, int i) -> RowVectorViewVec3

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseVec3_row(self, i)

    def updRow(self, i):
        r"""
        updRow(MatrixBaseVec3 self, int i) -> RowVectorViewVec3

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseVec3_updRow(self, i)

    def col(self, j):
        r"""
        col(MatrixBaseVec3 self, int j) -> VectorViewVec3

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseVec3_col(self, j)

    def updCol(self, j):
        r"""
        updCol(MatrixBaseVec3 self, int j) -> VectorViewVec3

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseVec3_updCol(self, j)

    def __call__(self, *args):
        r"""
        __call__(MatrixBaseVec3 self, int j) -> VectorViewVec3

        Parameters
        ----------
        j: int

        __call__(MatrixBaseVec3 self, int j) -> VectorViewVec3

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseVec3___call__(self, *args)

    def getElt(self, i, j):
        r"""
        getElt(MatrixBaseVec3 self, int i, int j) -> Vec3

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseVec3_getElt(self, i, j)

    def updElt(self, i, j):
        r"""
        updElt(MatrixBaseVec3 self, int i, int j) -> Vec3

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseVec3_updElt(self, i, j)

    def negateInPlace(self):
        r"""negateInPlace(MatrixBaseVec3 self) -> MatrixBaseVec3"""
        return _simbody.MatrixBaseVec3_negateInPlace(self)

    def resize(self, m, n):
        r"""
        resize(MatrixBaseVec3 self, int m, int n) -> MatrixBaseVec3

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseVec3_resize(self, m, n)

    def resizeKeep(self, m, n):
        r"""
        resizeKeep(MatrixBaseVec3 self, int m, int n) -> MatrixBaseVec3

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseVec3_resizeKeep(self, m, n)

    def lockShape(self):
        r"""lockShape(MatrixBaseVec3 self)"""
        return _simbody.MatrixBaseVec3_lockShape(self)

    def unlockShape(self):
        r"""unlockShape(MatrixBaseVec3 self)"""
        return _simbody.MatrixBaseVec3_unlockShape(self)
    __swig_destroy__ = _simbody.delete_MatrixBaseVec3

# Register MatrixBaseVec3 in _simbody:
_simbody.MatrixBaseVec3_swigregister(MatrixBaseVec3)
class MatrixViewVec3(MatrixBaseVec3):
    r"""Proxy of C++ SimTK::MatrixView_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, m):
        r"""
        __init__(MatrixViewVec3 self, MatrixViewVec3 m) -> MatrixViewVec3

        Parameters
        ----------
        m: SimTK::MatrixView_< SimTK::Vec3 > const &

        """
        _simbody.MatrixViewVec3_swiginit(self, _simbody.new_MatrixViewVec3(m))

    def __iadd__(self, r):
        r"""
        __iadd__(MatrixViewVec3 self, Vec3 r) -> MatrixViewVec3

        Parameters
        ----------
        r: SimTK::Vec< 3,double,1 > const &

        """
        return _simbody.MatrixViewVec3___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(MatrixViewVec3 self, Vec3 r) -> MatrixViewVec3

        Parameters
        ----------
        r: SimTK::Vec< 3,double,1 > const &

        """
        return _simbody.MatrixViewVec3___isub__(self, r)
    __swig_destroy__ = _simbody.delete_MatrixViewVec3

# Register MatrixViewVec3 in _simbody:
_simbody.MatrixViewVec3_swigregister(MatrixViewVec3)
class MatrixVec3(MatrixBaseVec3):
    r"""Proxy of C++ SimTK::Matrix_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixVec3 self) -> MatrixVec3
        __init__(MatrixVec3 self, MatrixVec3 src) -> MatrixVec3

        Parameters
        ----------
        src: SimTK::Matrix_< SimTK::Vec3 > const &

        __init__(MatrixVec3 self, int m, int n) -> MatrixVec3

        Parameters
        ----------
        m: int
        n: int

        __init__(MatrixVec3 self, int m, int n, Vec3 initialValue) -> MatrixVec3

        Parameters
        ----------
        m: int
        n: int
        initialValue: SimTK::Vec< 3,double,1 > const &

        """
        _simbody.MatrixVec3_swiginit(self, _simbody.new_MatrixVec3(*args))

    def toString(self):
        r"""toString(MatrixVec3 self) -> std::string"""
        return _simbody.MatrixVec3_toString(self)

    def get(self, i, j):
        r"""
        get(MatrixVec3 self, int i, int j) -> Vec3

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixVec3_get(self, i, j)

    def set(self, i, j, value):
        r"""
        set(MatrixVec3 self, int i, int j, Vec3 value)

        Parameters
        ----------
        i: int
        j: int
        value: SimTK::Vec< 3,double,1 > const &

        """
        return _simbody.MatrixVec3_set(self, i, j, value)
    __swig_destroy__ = _simbody.delete_MatrixVec3

# Register MatrixVec3 in _simbody:
_simbody.MatrixVec3_swigregister(MatrixVec3)
class VectorBaseVec3(MatrixBaseVec3):
    r"""Proxy of C++ SimTK::VectorBase< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorBaseVec3 self, int m=0) -> VectorBaseVec3

        Parameters
        ----------
        m: int

        __init__(VectorBaseVec3 self, VectorBaseVec3 source) -> VectorBaseVec3

        Parameters
        ----------
        source: SimTK::VectorBase< SimTK::Vec3 > const &

        """
        _simbody.VectorBaseVec3_swiginit(self, _simbody.new_VectorBaseVec3(*args))

    def size(self):
        r"""size(VectorBaseVec3 self) -> int"""
        return _simbody.VectorBaseVec3_size(self)

    def nrow(self):
        r"""nrow(VectorBaseVec3 self) -> int"""
        return _simbody.VectorBaseVec3_nrow(self)

    def ncol(self):
        r"""ncol(VectorBaseVec3 self) -> int"""
        return _simbody.VectorBaseVec3_ncol(self)

    def resize(self, m):
        r"""
        resize(VectorBaseVec3 self, int m) -> VectorBaseVec3

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseVec3_resize(self, m)

    def resizeKeep(self, m):
        r"""
        resizeKeep(VectorBaseVec3 self, int m) -> VectorBaseVec3

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseVec3_resizeKeep(self, m)

    def clear(self):
        r"""clear(VectorBaseVec3 self)"""
        return _simbody.VectorBaseVec3_clear(self)

    def sum(self):
        r"""sum(VectorBaseVec3 self) -> Vec3"""
        return _simbody.VectorBaseVec3_sum(self)

    def __getitem__(self, i):
        r"""
        __getitem__(VectorBaseVec3 self, int i) -> Vec3

        Parameters
        ----------
        i: int

        """
        return _simbody.VectorBaseVec3___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""
        __setitem__(VectorBaseVec3 self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3

        """
        return _simbody.VectorBaseVec3___setitem__(self, i, value)
    __swig_destroy__ = _simbody.delete_VectorBaseVec3

# Register VectorBaseVec3 in _simbody:
_simbody.VectorBaseVec3_swigregister(VectorBaseVec3)
class VectorViewVec3(VectorBaseVec3):
    r"""Proxy of C++ SimTK::VectorView_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v):
        r"""
        __init__(VectorViewVec3 self, VectorViewVec3 v) -> VectorViewVec3

        Parameters
        ----------
        v: SimTK::VectorView_< SimTK::Vec3 > const &

        """
        _simbody.VectorViewVec3_swiginit(self, _simbody.new_VectorViewVec3(v))

    def multiplyAssign(self, t):
        r"""
        multiplyAssign(VectorViewVec3 self, double t) -> VectorViewVec3

        Parameters
        ----------
        t: double

        """
        return _simbody.VectorViewVec3_multiplyAssign(self, t)
    __swig_destroy__ = _simbody.delete_VectorViewVec3

# Register VectorViewVec3 in _simbody:
_simbody.VectorViewVec3_swigregister(VectorViewVec3)
class VectorVec3(VectorBaseVec3):
    r"""Proxy of C++ SimTK::Vector_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def toString(self):
        r"""toString(VectorVec3 self) -> std::string"""
        return _simbody.VectorVec3_toString(self)

    def get(self, i):
        r"""
        get(VectorVec3 self, int i) -> Vec3

        Parameters
        ----------
        i: int

        """
        return _simbody.VectorVec3_get(self, i)

    def set(self, i, value):
        r"""
        set(VectorVec3 self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec< 3,double,1 > const &

        """
        return _simbody.VectorVec3_set(self, i, value)

    def __str__(self):
        r"""__str__(VectorVec3 self) -> std::string"""
        return _simbody.VectorVec3___str__(self)

    def __len__(self):
        r"""__len__(VectorVec3 self) -> int"""
        return _simbody.VectorVec3___len__(self)

    def __init__(self, *args):
        r"""
        __init__(VectorVec3 self) -> VectorVec3
        __init__(VectorVec3 self, VectorVec3 src) -> VectorVec3

        Parameters
        ----------
        src: SimTK::Vector_< SimTK::Vec3 > const &

        __init__(VectorVec3 self, int m, Vec3 initialValue) -> VectorVec3

        Parameters
        ----------
        m: int
        initialValue: SimTK::Vec< 3,double,1 > const &

        __init__(VectorVec3 self, StdVectorVec3 row) -> VectorVec3

        Parameters
        ----------
        row: std::vector< SimTK::Vec3,std::allocator< SimTK::Vec3 > > const &

        """
        _simbody.VectorVec3_swiginit(self, _simbody.new_VectorVec3(*args))

    def transpose(self):
        r"""transpose(VectorVec3 self) -> RowVectorVec3"""
        return _simbody.VectorVec3_transpose(self)
    __swig_destroy__ = _simbody.delete_VectorVec3

# Register VectorVec3 in _simbody:
_simbody.VectorVec3_swigregister(VectorVec3)
class RowVectorBaseVec3(MatrixBaseVec3):
    r"""Proxy of C++ SimTK::RowVectorBase< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorBaseVec3 self, int n=0) -> RowVectorBaseVec3

        Parameters
        ----------
        n: int

        __init__(RowVectorBaseVec3 self, RowVectorBaseVec3 source) -> RowVectorBaseVec3

        Parameters
        ----------
        source: SimTK::RowVectorBase< SimTK::Vec3 > const &

        __init__(RowVectorBaseVec3 self, int n, Vec3 initialValue) -> RowVectorBaseVec3

        Parameters
        ----------
        n: int
        initialValue: SimTK::Vec< 3,double,1 > const &

        __init__(RowVectorBaseVec3 self, int n, Vec3 cppInitialValues) -> RowVectorBaseVec3

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Vec< 3,double,1 > const *

        """
        _simbody.RowVectorBaseVec3_swiginit(self, _simbody.new_RowVectorBaseVec3(*args))

    def size(self):
        r"""size(RowVectorBaseVec3 self) -> int"""
        return _simbody.RowVectorBaseVec3_size(self)

    def nrow(self):
        r"""nrow(RowVectorBaseVec3 self) -> int"""
        return _simbody.RowVectorBaseVec3_nrow(self)

    def ncol(self):
        r"""ncol(RowVectorBaseVec3 self) -> int"""
        return _simbody.RowVectorBaseVec3_ncol(self)

    def nelt(self):
        r"""nelt(RowVectorBaseVec3 self) -> ptrdiff_t"""
        return _simbody.RowVectorBaseVec3_nelt(self)

    def index(self, indices):
        r"""
        index(RowVectorBaseVec3 self, Array_< int > const & indices) -> RowVectorViewVec3

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseVec3_index(self, indices)

    def updIndex(self, indices):
        r"""
        updIndex(RowVectorBaseVec3 self, Array_< int > const & indices) -> RowVectorViewVec3

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseVec3_updIndex(self, indices)

    def __call__(self, *args):
        r"""
        __call__(RowVectorBaseVec3 self, int j) -> Vec3

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseVec3 self, int j) -> Vec3

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseVec3 self, int j, int n) -> RowVectorViewVec3

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseVec3 self, int j, int n) -> RowVectorViewVec3

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseVec3 self, Array_< int > const & indices) -> RowVectorViewVec3

        Parameters
        ----------
        indices: Array_< int > const &

        __call__(RowVectorBaseVec3 self, Array_< int > const & indices) -> RowVectorViewVec3

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseVec3___call__(self, *args)

    def __pos__(self):
        r"""__pos__(RowVectorBaseVec3 self) -> RowVectorBaseVec3"""
        return _simbody.RowVectorBaseVec3___pos__(self)

    def resize(self, n):
        r"""
        resize(RowVectorBaseVec3 self, int n) -> RowVectorBaseVec3

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseVec3_resize(self, n)

    def resizeKeep(self, n):
        r"""
        resizeKeep(RowVectorBaseVec3 self, int n) -> RowVectorBaseVec3

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseVec3_resizeKeep(self, n)

    def clear(self):
        r"""clear(RowVectorBaseVec3 self)"""
        return _simbody.RowVectorBaseVec3_clear(self)

    def sum(self):
        r"""sum(RowVectorBaseVec3 self) -> Vec3"""
        return _simbody.RowVectorBaseVec3_sum(self)

    def begin(self):
        r"""begin(RowVectorBaseVec3 self) -> VectorIterator< SimTK::Vec< 3,double,1 >,SimTK::RowVectorBase< SimTK::Vec< 3,double,1 > > >"""
        return _simbody.RowVectorBaseVec3_begin(self)

    def end(self):
        r"""end(RowVectorBaseVec3 self) -> VectorIterator< SimTK::Vec< 3,double,1 >,SimTK::RowVectorBase< SimTK::Vec< 3,double,1 > > >"""
        return _simbody.RowVectorBaseVec3_end(self)

    def __getitem__(self, i):
        r"""
        __getitem__(RowVectorBaseVec3 self, int i) -> Vec3

        Parameters
        ----------
        i: int

        """
        return _simbody.RowVectorBaseVec3___getitem__(self, i)

    def __setitem__(self, i, value):
        r"""
        __setitem__(RowVectorBaseVec3 self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec3

        """
        return _simbody.RowVectorBaseVec3___setitem__(self, i, value)
    __swig_destroy__ = _simbody.delete_RowVectorBaseVec3

# Register RowVectorBaseVec3 in _simbody:
_simbody.RowVectorBaseVec3_swigregister(RowVectorBaseVec3)
class RowVectorViewVec3(RowVectorBaseVec3):
    r"""Proxy of C++ SimTK::RowVectorView_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r):
        r"""
        __init__(RowVectorViewVec3 self, RowVectorViewVec3 r) -> RowVectorViewVec3

        Parameters
        ----------
        r: SimTK::RowVectorView_< SimTK::Vec3 > const &

        """
        _simbody.RowVectorViewVec3_swiginit(self, _simbody.new_RowVectorViewVec3(r))
    __swig_destroy__ = _simbody.delete_RowVectorViewVec3

# Register RowVectorViewVec3 in _simbody:
_simbody.RowVectorViewVec3_swigregister(RowVectorViewVec3)
class RowVectorVec3(RowVectorBaseVec3):
    r"""Proxy of C++ SimTK::RowVector_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorVec3 self) -> RowVectorVec3
        __init__(RowVectorVec3 self, RowVectorVec3 src) -> RowVectorVec3

        Parameters
        ----------
        src: SimTK::RowVector_< SimTK::Vec3 > const &

        __init__(RowVectorVec3 self, RowVectorBaseVec3 src) -> RowVectorVec3

        Parameters
        ----------
        src: SimTK::RowVectorBase< SimTK::Vec< 3,double,1 > > const &

        __init__(RowVectorVec3 self, int n) -> RowVectorVec3

        Parameters
        ----------
        n: int

        __init__(RowVectorVec3 self, int n, Vec3 cppInitialValues) -> RowVectorVec3

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Vec< 3,double,1 > const *

        __init__(RowVectorVec3 self, int n, Vec3 initialValue) -> RowVectorVec3

        Parameters
        ----------
        n: int
        initialValue: SimTK::Vec< 3,double,1 > const &

        __init__(RowVectorVec3 self, StdVectorVec3 row) -> RowVectorVec3

        Parameters
        ----------
        row: std::vector< SimTK::Vec3,std::allocator< SimTK::Vec3 > > const &

        """
        _simbody.RowVectorVec3_swiginit(self, _simbody.new_RowVectorVec3(*args))

    def transpose(self):
        r"""transpose(RowVectorVec3 self) -> VectorVec3"""
        return _simbody.RowVectorVec3_transpose(self)
    __swig_destroy__ = _simbody.delete_RowVectorVec3

# Register RowVectorVec3 in _simbody:
_simbody.RowVectorVec3_swigregister(RowVectorVec3)
class MatrixBaseVec6(object):
    r"""Proxy of C++ SimTK::MatrixBase< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def nrow(self):
        r"""nrow(MatrixBaseVec6 self) -> int"""
        return _simbody.MatrixBaseVec6_nrow(self)

    def ncol(self):
        r"""ncol(MatrixBaseVec6 self) -> int"""
        return _simbody.MatrixBaseVec6_ncol(self)

    def isResizeable(self):
        r"""isResizeable(MatrixBaseVec6 self) -> bool"""
        return _simbody.MatrixBaseVec6_isResizeable(self)
    NScalarsPerElement = _simbody.MatrixBaseVec6_NScalarsPerElement
    
    CppNScalarsPerElement = _simbody.MatrixBaseVec6_CppNScalarsPerElement
    

    def __init__(self, *args):
        r"""
        __init__(MatrixBaseVec6 self) -> MatrixBaseVec6
        __init__(MatrixBaseVec6 self, int m, int n) -> MatrixBaseVec6

        Parameters
        ----------
        m: int
        n: int

        """
        _simbody.MatrixBaseVec6_swiginit(self, _simbody.new_MatrixBaseVec6(*args))

    def clear(self):
        r"""clear(MatrixBaseVec6 self)"""
        return _simbody.MatrixBaseVec6_clear(self)

    def setTo(self, t):
        r"""
        setTo(MatrixBaseVec6 self, Vec6 t) -> MatrixBaseVec6

        Parameters
        ----------
        t: SimTK::Vec< 6,double,1 > const &

        """
        return _simbody.MatrixBaseVec6_setTo(self, t)

    def setToNaN(self):
        r"""setToNaN(MatrixBaseVec6 self) -> MatrixBaseVec6"""
        return _simbody.MatrixBaseVec6_setToNaN(self)

    def setToZero(self):
        r"""setToZero(MatrixBaseVec6 self) -> MatrixBaseVec6"""
        return _simbody.MatrixBaseVec6_setToZero(self)

    def row(self, i):
        r"""
        row(MatrixBaseVec6 self, int i) -> RowVectorViewVec6

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseVec6_row(self, i)

    def updRow(self, i):
        r"""
        updRow(MatrixBaseVec6 self, int i) -> RowVectorViewVec6

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseVec6_updRow(self, i)

    def col(self, j):
        r"""
        col(MatrixBaseVec6 self, int j) -> VectorViewVec6

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseVec6_col(self, j)

    def updCol(self, j):
        r"""
        updCol(MatrixBaseVec6 self, int j) -> VectorViewVec6

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseVec6_updCol(self, j)

    def __call__(self, *args):
        r"""
        __call__(MatrixBaseVec6 self, int j) -> VectorViewVec6

        Parameters
        ----------
        j: int

        __call__(MatrixBaseVec6 self, int j) -> VectorViewVec6

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseVec6___call__(self, *args)

    def getElt(self, i, j):
        r"""
        getElt(MatrixBaseVec6 self, int i, int j) -> Vec6

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseVec6_getElt(self, i, j)

    def updElt(self, i, j):
        r"""
        updElt(MatrixBaseVec6 self, int i, int j) -> Vec6

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseVec6_updElt(self, i, j)

    def negateInPlace(self):
        r"""negateInPlace(MatrixBaseVec6 self) -> MatrixBaseVec6"""
        return _simbody.MatrixBaseVec6_negateInPlace(self)

    def resize(self, m, n):
        r"""
        resize(MatrixBaseVec6 self, int m, int n) -> MatrixBaseVec6

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseVec6_resize(self, m, n)

    def resizeKeep(self, m, n):
        r"""
        resizeKeep(MatrixBaseVec6 self, int m, int n) -> MatrixBaseVec6

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseVec6_resizeKeep(self, m, n)

    def lockShape(self):
        r"""lockShape(MatrixBaseVec6 self)"""
        return _simbody.MatrixBaseVec6_lockShape(self)

    def unlockShape(self):
        r"""unlockShape(MatrixBaseVec6 self)"""
        return _simbody.MatrixBaseVec6_unlockShape(self)
    __swig_destroy__ = _simbody.delete_MatrixBaseVec6

# Register MatrixBaseVec6 in _simbody:
_simbody.MatrixBaseVec6_swigregister(MatrixBaseVec6)
class MatrixViewVec6(MatrixBaseVec6):
    r"""Proxy of C++ SimTK::MatrixView_< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, m):
        r"""
        __init__(MatrixViewVec6 self, MatrixViewVec6 m) -> MatrixViewVec6

        Parameters
        ----------
        m: SimTK::MatrixView_< SimTK::Vec6 > const &

        """
        _simbody.MatrixViewVec6_swiginit(self, _simbody.new_MatrixViewVec6(m))

    def __iadd__(self, r):
        r"""
        __iadd__(MatrixViewVec6 self, Vec6 r) -> MatrixViewVec6

        Parameters
        ----------
        r: SimTK::Vec< 6,double,1 > const &

        """
        return _simbody.MatrixViewVec6___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(MatrixViewVec6 self, Vec6 r) -> MatrixViewVec6

        Parameters
        ----------
        r: SimTK::Vec< 6,double,1 > const &

        """
        return _simbody.MatrixViewVec6___isub__(self, r)
    __swig_destroy__ = _simbody.delete_MatrixViewVec6

# Register MatrixViewVec6 in _simbody:
_simbody.MatrixViewVec6_swigregister(MatrixViewVec6)
class MatrixVec6(MatrixBaseVec6):
    r"""Proxy of C++ SimTK::Matrix_< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixVec6 self) -> MatrixVec6
        __init__(MatrixVec6 self, MatrixVec6 src) -> MatrixVec6

        Parameters
        ----------
        src: SimTK::Matrix_< SimTK::Vec6 > const &

        __init__(MatrixVec6 self, int m, int n) -> MatrixVec6

        Parameters
        ----------
        m: int
        n: int

        __init__(MatrixVec6 self, int m, int n, Vec6 initialValue) -> MatrixVec6

        Parameters
        ----------
        m: int
        n: int
        initialValue: SimTK::Vec< 6,double,1 > const &

        """
        _simbody.MatrixVec6_swiginit(self, _simbody.new_MatrixVec6(*args))

    def toString(self):
        r"""toString(MatrixVec6 self) -> std::string"""
        return _simbody.MatrixVec6_toString(self)

    def get(self, i, j):
        r"""
        get(MatrixVec6 self, int i, int j) -> Vec6

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixVec6_get(self, i, j)

    def set(self, i, j, value):
        r"""
        set(MatrixVec6 self, int i, int j, Vec6 value)

        Parameters
        ----------
        i: int
        j: int
        value: SimTK::Vec< 6,double,1 > const &

        """
        return _simbody.MatrixVec6_set(self, i, j, value)
    __swig_destroy__ = _simbody.delete_MatrixVec6

# Register MatrixVec6 in _simbody:
_simbody.MatrixVec6_swigregister(MatrixVec6)
class VectorBaseVec6(MatrixBaseVec6):
    r"""Proxy of C++ SimTK::VectorBase< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorBaseVec6 self, int m=0) -> VectorBaseVec6

        Parameters
        ----------
        m: int

        __init__(VectorBaseVec6 self, VectorBaseVec6 source) -> VectorBaseVec6

        Parameters
        ----------
        source: SimTK::VectorBase< SimTK::Vec6 > const &

        """
        _simbody.VectorBaseVec6_swiginit(self, _simbody.new_VectorBaseVec6(*args))

    def size(self):
        r"""size(VectorBaseVec6 self) -> int"""
        return _simbody.VectorBaseVec6_size(self)

    def nrow(self):
        r"""nrow(VectorBaseVec6 self) -> int"""
        return _simbody.VectorBaseVec6_nrow(self)

    def ncol(self):
        r"""ncol(VectorBaseVec6 self) -> int"""
        return _simbody.VectorBaseVec6_ncol(self)

    def resize(self, m):
        r"""
        resize(VectorBaseVec6 self, int m) -> VectorBaseVec6

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseVec6_resize(self, m)

    def resizeKeep(self, m):
        r"""
        resizeKeep(VectorBaseVec6 self, int m) -> VectorBaseVec6

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseVec6_resizeKeep(self, m)

    def clear(self):
        r"""clear(VectorBaseVec6 self)"""
        return _simbody.VectorBaseVec6_clear(self)

    def sum(self):
        r"""sum(VectorBaseVec6 self) -> Vec6"""
        return _simbody.VectorBaseVec6_sum(self)
    __swig_destroy__ = _simbody.delete_VectorBaseVec6

# Register VectorBaseVec6 in _simbody:
_simbody.VectorBaseVec6_swigregister(VectorBaseVec6)
class VectorViewVec6(VectorBaseVec6):
    r"""Proxy of C++ SimTK::VectorView_< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v):
        r"""
        __init__(VectorViewVec6 self, VectorViewVec6 v) -> VectorViewVec6

        Parameters
        ----------
        v: SimTK::VectorView_< SimTK::Vec6 > const &

        """
        _simbody.VectorViewVec6_swiginit(self, _simbody.new_VectorViewVec6(v))
    __swig_destroy__ = _simbody.delete_VectorViewVec6

# Register VectorViewVec6 in _simbody:
_simbody.VectorViewVec6_swigregister(VectorViewVec6)
class VectorVec6(VectorBaseVec6):
    r"""Proxy of C++ SimTK::Vector_< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorVec6 self) -> VectorVec6
        __init__(VectorVec6 self, VectorVec6 src) -> VectorVec6

        Parameters
        ----------
        src: SimTK::Vector_< SimTK::Vec6 > const &

        __init__(VectorVec6 self, int m, Vec6 initialValue) -> VectorVec6

        Parameters
        ----------
        m: int
        initialValue: SimTK::Vec< 6,double,1 > const &

        """
        _simbody.VectorVec6_swiginit(self, _simbody.new_VectorVec6(*args))

    def toString(self):
        r"""toString(VectorVec6 self) -> std::string"""
        return _simbody.VectorVec6_toString(self)

    def get(self, i):
        r"""
        get(VectorVec6 self, int i) -> Vec6

        Parameters
        ----------
        i: int

        """
        return _simbody.VectorVec6_get(self, i)

    def set(self, i, value):
        r"""
        set(VectorVec6 self, int i, Vec6 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec< 6,double,1 > const &

        """
        return _simbody.VectorVec6_set(self, i, value)

    def __str__(self):
        r"""__str__(VectorVec6 self) -> std::string"""
        return _simbody.VectorVec6___str__(self)

    def __len__(self):
        r"""__len__(VectorVec6 self) -> int"""
        return _simbody.VectorVec6___len__(self)
    __swig_destroy__ = _simbody.delete_VectorVec6

# Register VectorVec6 in _simbody:
_simbody.VectorVec6_swigregister(VectorVec6)
class RowVectorBaseVec6(MatrixBaseVec6):
    r"""Proxy of C++ SimTK::RowVectorBase< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorBaseVec6 self, int n=0) -> RowVectorBaseVec6

        Parameters
        ----------
        n: int

        __init__(RowVectorBaseVec6 self, RowVectorBaseVec6 source) -> RowVectorBaseVec6

        Parameters
        ----------
        source: SimTK::RowVectorBase< SimTK::Vec6 > const &

        __init__(RowVectorBaseVec6 self, int n, Vec6 initialValue) -> RowVectorBaseVec6

        Parameters
        ----------
        n: int
        initialValue: SimTK::Vec< 6,double,1 > const &

        __init__(RowVectorBaseVec6 self, int n, Vec6 cppInitialValues) -> RowVectorBaseVec6

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Vec< 6,double,1 > const *

        """
        _simbody.RowVectorBaseVec6_swiginit(self, _simbody.new_RowVectorBaseVec6(*args))

    def size(self):
        r"""size(RowVectorBaseVec6 self) -> int"""
        return _simbody.RowVectorBaseVec6_size(self)

    def nrow(self):
        r"""nrow(RowVectorBaseVec6 self) -> int"""
        return _simbody.RowVectorBaseVec6_nrow(self)

    def ncol(self):
        r"""ncol(RowVectorBaseVec6 self) -> int"""
        return _simbody.RowVectorBaseVec6_ncol(self)

    def nelt(self):
        r"""nelt(RowVectorBaseVec6 self) -> ptrdiff_t"""
        return _simbody.RowVectorBaseVec6_nelt(self)

    def index(self, indices):
        r"""
        index(RowVectorBaseVec6 self, Array_< int > const & indices) -> RowVectorViewVec6

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseVec6_index(self, indices)

    def updIndex(self, indices):
        r"""
        updIndex(RowVectorBaseVec6 self, Array_< int > const & indices) -> RowVectorViewVec6

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseVec6_updIndex(self, indices)

    def __call__(self, *args):
        r"""
        __call__(RowVectorBaseVec6 self, int j) -> Vec6

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseVec6 self, int j) -> Vec6

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseVec6 self, int j, int n) -> RowVectorViewVec6

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseVec6 self, int j, int n) -> RowVectorViewVec6

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseVec6 self, Array_< int > const & indices) -> RowVectorViewVec6

        Parameters
        ----------
        indices: Array_< int > const &

        __call__(RowVectorBaseVec6 self, Array_< int > const & indices) -> RowVectorViewVec6

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseVec6___call__(self, *args)

    def __pos__(self):
        r"""__pos__(RowVectorBaseVec6 self) -> RowVectorBaseVec6"""
        return _simbody.RowVectorBaseVec6___pos__(self)

    def resize(self, n):
        r"""
        resize(RowVectorBaseVec6 self, int n) -> RowVectorBaseVec6

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseVec6_resize(self, n)

    def resizeKeep(self, n):
        r"""
        resizeKeep(RowVectorBaseVec6 self, int n) -> RowVectorBaseVec6

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseVec6_resizeKeep(self, n)

    def clear(self):
        r"""clear(RowVectorBaseVec6 self)"""
        return _simbody.RowVectorBaseVec6_clear(self)

    def sum(self):
        r"""sum(RowVectorBaseVec6 self) -> Vec6"""
        return _simbody.RowVectorBaseVec6_sum(self)

    def begin(self):
        r"""begin(RowVectorBaseVec6 self) -> VectorIterator< SimTK::Vec< 6,double,1 >,SimTK::RowVectorBase< SimTK::Vec< 6,double,1 > > >"""
        return _simbody.RowVectorBaseVec6_begin(self)

    def end(self):
        r"""end(RowVectorBaseVec6 self) -> VectorIterator< SimTK::Vec< 6,double,1 >,SimTK::RowVectorBase< SimTK::Vec< 6,double,1 > > >"""
        return _simbody.RowVectorBaseVec6_end(self)
    __swig_destroy__ = _simbody.delete_RowVectorBaseVec6

# Register RowVectorBaseVec6 in _simbody:
_simbody.RowVectorBaseVec6_swigregister(RowVectorBaseVec6)
class RowVectorViewVec6(RowVectorBaseVec6):
    r"""Proxy of C++ SimTK::RowVectorView_< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r):
        r"""
        __init__(RowVectorViewVec6 self, RowVectorViewVec6 r) -> RowVectorViewVec6

        Parameters
        ----------
        r: SimTK::RowVectorView_< SimTK::Vec6 > const &

        """
        _simbody.RowVectorViewVec6_swiginit(self, _simbody.new_RowVectorViewVec6(r))
    __swig_destroy__ = _simbody.delete_RowVectorViewVec6

# Register RowVectorViewVec6 in _simbody:
_simbody.RowVectorViewVec6_swigregister(RowVectorViewVec6)
class RowVectorVec6(RowVectorBaseVec6):
    r"""Proxy of C++ SimTK::RowVector_< SimTK::Vec6 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorVec6 self) -> RowVectorVec6
        __init__(RowVectorVec6 self, RowVectorVec6 src) -> RowVectorVec6

        Parameters
        ----------
        src: SimTK::RowVector_< SimTK::Vec6 > const &

        __init__(RowVectorVec6 self, RowVectorBaseVec6 src) -> RowVectorVec6

        Parameters
        ----------
        src: SimTK::RowVectorBase< SimTK::Vec< 6,double,1 > > const &

        __init__(RowVectorVec6 self, int n) -> RowVectorVec6

        Parameters
        ----------
        n: int

        __init__(RowVectorVec6 self, int n, Vec6 cppInitialValues) -> RowVectorVec6

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Vec< 6,double,1 > const *

        __init__(RowVectorVec6 self, int n, Vec6 initialValue) -> RowVectorVec6

        Parameters
        ----------
        n: int
        initialValue: SimTK::Vec< 6,double,1 > const &

        """
        _simbody.RowVectorVec6_swiginit(self, _simbody.new_RowVectorVec6(*args))
    __swig_destroy__ = _simbody.delete_RowVectorVec6

# Register RowVectorVec6 in _simbody:
_simbody.RowVectorVec6_swigregister(RowVectorVec6)
class MatrixBaseQuaternion(object):
    r"""Proxy of C++ SimTK::MatrixBase< SimTK::Quaternion_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def nrow(self):
        r"""nrow(MatrixBaseQuaternion self) -> int"""
        return _simbody.MatrixBaseQuaternion_nrow(self)

    def ncol(self):
        r"""ncol(MatrixBaseQuaternion self) -> int"""
        return _simbody.MatrixBaseQuaternion_ncol(self)

    def isResizeable(self):
        r"""isResizeable(MatrixBaseQuaternion self) -> bool"""
        return _simbody.MatrixBaseQuaternion_isResizeable(self)
    NScalarsPerElement = _simbody.MatrixBaseQuaternion_NScalarsPerElement
    
    CppNScalarsPerElement = _simbody.MatrixBaseQuaternion_CppNScalarsPerElement
    

    def __init__(self, *args):
        r"""
        __init__(MatrixBaseQuaternion self) -> MatrixBaseQuaternion
        __init__(MatrixBaseQuaternion self, int m, int n) -> MatrixBaseQuaternion

        Parameters
        ----------
        m: int
        n: int

        """
        _simbody.MatrixBaseQuaternion_swiginit(self, _simbody.new_MatrixBaseQuaternion(*args))

    def clear(self):
        r"""clear(MatrixBaseQuaternion self)"""
        return _simbody.MatrixBaseQuaternion_clear(self)

    def setTo(self, t):
        r"""
        setTo(MatrixBaseQuaternion self, Quaternion t) -> MatrixBaseQuaternion

        Parameters
        ----------
        t: SimTK::Quaternion_< double > const &

        """
        return _simbody.MatrixBaseQuaternion_setTo(self, t)

    def setToNaN(self):
        r"""setToNaN(MatrixBaseQuaternion self) -> MatrixBaseQuaternion"""
        return _simbody.MatrixBaseQuaternion_setToNaN(self)

    def setToZero(self):
        r"""setToZero(MatrixBaseQuaternion self) -> MatrixBaseQuaternion"""
        return _simbody.MatrixBaseQuaternion_setToZero(self)

    def row(self, i):
        r"""
        row(MatrixBaseQuaternion self, int i) -> RowVectorViewQuaternion

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseQuaternion_row(self, i)

    def updRow(self, i):
        r"""
        updRow(MatrixBaseQuaternion self, int i) -> RowVectorViewQuaternion

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseQuaternion_updRow(self, i)

    def col(self, j):
        r"""
        col(MatrixBaseQuaternion self, int j) -> SimTK::VectorView_< SimTK::Quaternion_< double > >

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseQuaternion_col(self, j)

    def updCol(self, j):
        r"""
        updCol(MatrixBaseQuaternion self, int j) -> SimTK::VectorView_< SimTK::Quaternion_< double > >

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseQuaternion_updCol(self, j)

    def __call__(self, *args):
        r"""
        __call__(MatrixBaseQuaternion self, int j) -> SimTK::VectorView_< SimTK::Quaternion_< double > >

        Parameters
        ----------
        j: int

        __call__(MatrixBaseQuaternion self, int j) -> SimTK::VectorView_< SimTK::Quaternion_< double > >

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseQuaternion___call__(self, *args)

    def getElt(self, i, j):
        r"""
        getElt(MatrixBaseQuaternion self, int i, int j) -> Quaternion

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseQuaternion_getElt(self, i, j)

    def updElt(self, i, j):
        r"""
        updElt(MatrixBaseQuaternion self, int i, int j) -> Quaternion

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseQuaternion_updElt(self, i, j)

    def negateInPlace(self):
        r"""negateInPlace(MatrixBaseQuaternion self) -> MatrixBaseQuaternion"""
        return _simbody.MatrixBaseQuaternion_negateInPlace(self)

    def resize(self, m, n):
        r"""
        resize(MatrixBaseQuaternion self, int m, int n) -> MatrixBaseQuaternion

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseQuaternion_resize(self, m, n)

    def resizeKeep(self, m, n):
        r"""
        resizeKeep(MatrixBaseQuaternion self, int m, int n) -> MatrixBaseQuaternion

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseQuaternion_resizeKeep(self, m, n)

    def lockShape(self):
        r"""lockShape(MatrixBaseQuaternion self)"""
        return _simbody.MatrixBaseQuaternion_lockShape(self)

    def unlockShape(self):
        r"""unlockShape(MatrixBaseQuaternion self)"""
        return _simbody.MatrixBaseQuaternion_unlockShape(self)
    __swig_destroy__ = _simbody.delete_MatrixBaseQuaternion

# Register MatrixBaseQuaternion in _simbody:
_simbody.MatrixBaseQuaternion_swigregister(MatrixBaseQuaternion)
class MatrixQuaternion(MatrixBaseQuaternion):
    r"""Proxy of C++ SimTK::Matrix_< SimTK::Quaternion_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixQuaternion self) -> MatrixQuaternion
        __init__(MatrixQuaternion self, MatrixQuaternion src) -> MatrixQuaternion

        Parameters
        ----------
        src: SimTK::Matrix_< SimTK::Quaternion_< double > > const &

        __init__(MatrixQuaternion self, int m, int n) -> MatrixQuaternion

        Parameters
        ----------
        m: int
        n: int

        __init__(MatrixQuaternion self, int m, int n, Quaternion initialValue) -> MatrixQuaternion

        Parameters
        ----------
        m: int
        n: int
        initialValue: SimTK::Quaternion_< double > const &

        """
        _simbody.MatrixQuaternion_swiginit(self, _simbody.new_MatrixQuaternion(*args))

    def toString(self):
        r"""toString(MatrixQuaternion self) -> std::string"""
        return _simbody.MatrixQuaternion_toString(self)

    def get(self, i, j):
        r"""
        get(MatrixQuaternion self, int i, int j) -> Quaternion

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixQuaternion_get(self, i, j)

    def set(self, i, j, value):
        r"""
        set(MatrixQuaternion self, int i, int j, Quaternion value)

        Parameters
        ----------
        i: int
        j: int
        value: SimTK::Quaternion_< double > const &

        """
        return _simbody.MatrixQuaternion_set(self, i, j, value)
    __swig_destroy__ = _simbody.delete_MatrixQuaternion

# Register MatrixQuaternion in _simbody:
_simbody.MatrixQuaternion_swigregister(MatrixQuaternion)
class VectorBaseQuaternion(MatrixBaseQuaternion):
    r"""Proxy of C++ SimTK::VectorBase< SimTK::Quaternion_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorBaseQuaternion self, int m=0) -> VectorBaseQuaternion

        Parameters
        ----------
        m: int

        __init__(VectorBaseQuaternion self, VectorBaseQuaternion source) -> VectorBaseQuaternion

        Parameters
        ----------
        source: SimTK::VectorBase< SimTK::Quaternion_< double > > const &

        """
        _simbody.VectorBaseQuaternion_swiginit(self, _simbody.new_VectorBaseQuaternion(*args))

    def size(self):
        r"""size(VectorBaseQuaternion self) -> int"""
        return _simbody.VectorBaseQuaternion_size(self)

    def nrow(self):
        r"""nrow(VectorBaseQuaternion self) -> int"""
        return _simbody.VectorBaseQuaternion_nrow(self)

    def ncol(self):
        r"""ncol(VectorBaseQuaternion self) -> int"""
        return _simbody.VectorBaseQuaternion_ncol(self)

    def resize(self, m):
        r"""
        resize(VectorBaseQuaternion self, int m) -> VectorBaseQuaternion

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseQuaternion_resize(self, m)

    def resizeKeep(self, m):
        r"""
        resizeKeep(VectorBaseQuaternion self, int m) -> VectorBaseQuaternion

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseQuaternion_resizeKeep(self, m)

    def clear(self):
        r"""clear(VectorBaseQuaternion self)"""
        return _simbody.VectorBaseQuaternion_clear(self)

    def sum(self):
        r"""sum(VectorBaseQuaternion self) -> Quaternion"""
        return _simbody.VectorBaseQuaternion_sum(self)
    __swig_destroy__ = _simbody.delete_VectorBaseQuaternion

# Register VectorBaseQuaternion in _simbody:
_simbody.VectorBaseQuaternion_swigregister(VectorBaseQuaternion)
class VectorQuaternion(VectorBaseQuaternion):
    r"""Proxy of C++ SimTK::Vector_< SimTK::Quaternion_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorQuaternion self) -> VectorQuaternion
        __init__(VectorQuaternion self, VectorQuaternion src) -> VectorQuaternion

        Parameters
        ----------
        src: SimTK::Vector_< SimTK::Quaternion_< double > > const &

        __init__(VectorQuaternion self, int m, Quaternion initialValue) -> VectorQuaternion

        Parameters
        ----------
        m: int
        initialValue: SimTK::Quaternion_< double > const &

        """
        _simbody.VectorQuaternion_swiginit(self, _simbody.new_VectorQuaternion(*args))

    def toString(self):
        r"""toString(VectorQuaternion self) -> std::string"""
        return _simbody.VectorQuaternion_toString(self)

    def get(self, i):
        r"""
        get(VectorQuaternion self, int i) -> Quaternion

        Parameters
        ----------
        i: int

        """
        return _simbody.VectorQuaternion_get(self, i)

    def set(self, i, value):
        r"""
        set(VectorQuaternion self, int i, Quaternion value)

        Parameters
        ----------
        i: int
        value: SimTK::Quaternion_< double > const &

        """
        return _simbody.VectorQuaternion_set(self, i, value)

    def __str__(self):
        r"""__str__(VectorQuaternion self) -> std::string"""
        return _simbody.VectorQuaternion___str__(self)

    def __len__(self):
        r"""__len__(VectorQuaternion self) -> int"""
        return _simbody.VectorQuaternion___len__(self)
    __swig_destroy__ = _simbody.delete_VectorQuaternion

# Register VectorQuaternion in _simbody:
_simbody.VectorQuaternion_swigregister(VectorQuaternion)
class RowVectorBaseQuaternion(MatrixBaseQuaternion):
    r"""Proxy of C++ SimTK::RowVectorBase< SimTK::Quaternion_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorBaseQuaternion self, int n=0) -> RowVectorBaseQuaternion

        Parameters
        ----------
        n: int

        __init__(RowVectorBaseQuaternion self, RowVectorBaseQuaternion source) -> RowVectorBaseQuaternion

        Parameters
        ----------
        source: SimTK::RowVectorBase< SimTK::Quaternion_< double > > const &

        __init__(RowVectorBaseQuaternion self, int n, Quaternion initialValue) -> RowVectorBaseQuaternion

        Parameters
        ----------
        n: int
        initialValue: SimTK::Quaternion_< double > const &

        __init__(RowVectorBaseQuaternion self, int n, Quaternion cppInitialValues) -> RowVectorBaseQuaternion

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Quaternion_< double > const *

        """
        _simbody.RowVectorBaseQuaternion_swiginit(self, _simbody.new_RowVectorBaseQuaternion(*args))

    def size(self):
        r"""size(RowVectorBaseQuaternion self) -> int"""
        return _simbody.RowVectorBaseQuaternion_size(self)

    def nrow(self):
        r"""nrow(RowVectorBaseQuaternion self) -> int"""
        return _simbody.RowVectorBaseQuaternion_nrow(self)

    def ncol(self):
        r"""ncol(RowVectorBaseQuaternion self) -> int"""
        return _simbody.RowVectorBaseQuaternion_ncol(self)

    def nelt(self):
        r"""nelt(RowVectorBaseQuaternion self) -> ptrdiff_t"""
        return _simbody.RowVectorBaseQuaternion_nelt(self)

    def index(self, indices):
        r"""
        index(RowVectorBaseQuaternion self, Array_< int > const & indices) -> RowVectorViewQuaternion

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseQuaternion_index(self, indices)

    def updIndex(self, indices):
        r"""
        updIndex(RowVectorBaseQuaternion self, Array_< int > const & indices) -> RowVectorViewQuaternion

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseQuaternion_updIndex(self, indices)

    def __call__(self, *args):
        r"""
        __call__(RowVectorBaseQuaternion self, int j) -> Quaternion

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseQuaternion self, int j) -> Quaternion

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseQuaternion self, int j, int n) -> RowVectorViewQuaternion

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseQuaternion self, int j, int n) -> RowVectorViewQuaternion

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseQuaternion self, Array_< int > const & indices) -> RowVectorViewQuaternion

        Parameters
        ----------
        indices: Array_< int > const &

        __call__(RowVectorBaseQuaternion self, Array_< int > const & indices) -> RowVectorViewQuaternion

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseQuaternion___call__(self, *args)

    def __pos__(self):
        r"""__pos__(RowVectorBaseQuaternion self) -> RowVectorBaseQuaternion"""
        return _simbody.RowVectorBaseQuaternion___pos__(self)

    def resize(self, n):
        r"""
        resize(RowVectorBaseQuaternion self, int n) -> RowVectorBaseQuaternion

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseQuaternion_resize(self, n)

    def resizeKeep(self, n):
        r"""
        resizeKeep(RowVectorBaseQuaternion self, int n) -> RowVectorBaseQuaternion

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseQuaternion_resizeKeep(self, n)

    def clear(self):
        r"""clear(RowVectorBaseQuaternion self)"""
        return _simbody.RowVectorBaseQuaternion_clear(self)

    def sum(self):
        r"""sum(RowVectorBaseQuaternion self) -> Quaternion"""
        return _simbody.RowVectorBaseQuaternion_sum(self)

    def begin(self):
        r"""begin(RowVectorBaseQuaternion self) -> VectorIterator< SimTK::Quaternion_< double >,SimTK::RowVectorBase< SimTK::Quaternion_< double > > >"""
        return _simbody.RowVectorBaseQuaternion_begin(self)

    def end(self):
        r"""end(RowVectorBaseQuaternion self) -> VectorIterator< SimTK::Quaternion_< double >,SimTK::RowVectorBase< SimTK::Quaternion_< double > > >"""
        return _simbody.RowVectorBaseQuaternion_end(self)
    __swig_destroy__ = _simbody.delete_RowVectorBaseQuaternion

# Register RowVectorBaseQuaternion in _simbody:
_simbody.RowVectorBaseQuaternion_swigregister(RowVectorBaseQuaternion)
class RowVectorViewQuaternion(RowVectorBaseQuaternion):
    r"""Proxy of C++ SimTK::RowVectorView_< SimTK::Quaternion_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r):
        r"""
        __init__(RowVectorViewQuaternion self, RowVectorViewQuaternion r) -> RowVectorViewQuaternion

        Parameters
        ----------
        r: SimTK::RowVectorView_< SimTK::Quaternion_< double > > const &

        """
        _simbody.RowVectorViewQuaternion_swiginit(self, _simbody.new_RowVectorViewQuaternion(r))
    __swig_destroy__ = _simbody.delete_RowVectorViewQuaternion

# Register RowVectorViewQuaternion in _simbody:
_simbody.RowVectorViewQuaternion_swigregister(RowVectorViewQuaternion)
class RowVectorQuaternion(RowVectorBaseQuaternion):
    r"""Proxy of C++ SimTK::RowVector_< SimTK::Quaternion_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorQuaternion self) -> RowVectorQuaternion
        __init__(RowVectorQuaternion self, RowVectorQuaternion src) -> RowVectorQuaternion

        Parameters
        ----------
        src: SimTK::RowVector_< SimTK::Quaternion_< double > > const &

        __init__(RowVectorQuaternion self, RowVectorBaseQuaternion src) -> RowVectorQuaternion

        Parameters
        ----------
        src: SimTK::RowVectorBase< SimTK::Quaternion_< double > > const &

        __init__(RowVectorQuaternion self, int n) -> RowVectorQuaternion

        Parameters
        ----------
        n: int

        __init__(RowVectorQuaternion self, int n, Quaternion cppInitialValues) -> RowVectorQuaternion

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Quaternion_< double > const *

        __init__(RowVectorQuaternion self, int n, Quaternion initialValue) -> RowVectorQuaternion

        Parameters
        ----------
        n: int
        initialValue: SimTK::Quaternion_< double > const &

        """
        _simbody.RowVectorQuaternion_swiginit(self, _simbody.new_RowVectorQuaternion(*args))
    __swig_destroy__ = _simbody.delete_RowVectorQuaternion

# Register RowVectorQuaternion in _simbody:
_simbody.RowVectorQuaternion_swigregister(RowVectorQuaternion)

def findRelativeVelocity(X_FA, V_FA, X_FB, V_FB):
    r"""
    findRelativeVelocity(Transform const & X_FA, SpatialVec V_FA, Transform const & X_FB, SpatialVec V_FB) -> SpatialVec

    Parameters
    ----------
    X_FA: Transform const &
    V_FA: SimTK::SpatialVec const &
    X_FB: Transform const &
    V_FB: SimTK::SpatialVec const &

    """
    return _simbody.findRelativeVelocity(X_FA, V_FA, X_FB, V_FB)

def findRelativeVelocityInF(p_AB_F, V_FA, V_FB):
    r"""
    findRelativeVelocityInF(Vec3 p_AB_F, SpatialVec V_FA, SpatialVec V_FB) -> SpatialVec

    Parameters
    ----------
    p_AB_F: SimTK::Vec3 const &
    V_FA: SimTK::SpatialVec const &
    V_FB: SimTK::SpatialVec const &

    """
    return _simbody.findRelativeVelocityInF(p_AB_F, V_FA, V_FB)

def findRelativeAcceleration(X_FA, V_FA, A_FA, X_FB, V_FB, A_FB):
    r"""
    findRelativeAcceleration(Transform const & X_FA, SpatialVec V_FA, SpatialVec A_FA, Transform const & X_FB, SpatialVec V_FB, SpatialVec A_FB) -> SpatialVec

    Parameters
    ----------
    X_FA: Transform const &
    V_FA: SimTK::SpatialVec const &
    A_FA: SimTK::SpatialVec const &
    X_FB: Transform const &
    V_FB: SimTK::SpatialVec const &
    A_FB: SimTK::SpatialVec const &

    """
    return _simbody.findRelativeAcceleration(X_FA, V_FA, A_FA, X_FB, V_FB, A_FB)

def findRelativeAccelerationInF(p_AB_F, V_FA, A_FA, V_FB, A_FB):
    r"""
    findRelativeAccelerationInF(Vec3 p_AB_F, SpatialVec V_FA, SpatialVec A_FA, SpatialVec V_FB, SpatialVec A_FB) -> SpatialVec

    Parameters
    ----------
    p_AB_F: SimTK::Vec3 const &
    V_FA: SimTK::SpatialVec const &
    A_FA: SimTK::SpatialVec const &
    V_FB: SimTK::SpatialVec const &
    A_FB: SimTK::SpatialVec const &

    """
    return _simbody.findRelativeAccelerationInF(p_AB_F, V_FA, A_FA, V_FB, A_FB)

def reverseRelativeVelocity(X_AB, V_AB):
    r"""
    reverseRelativeVelocity(Transform const & X_AB, SpatialVec V_AB) -> SpatialVec

    Parameters
    ----------
    X_AB: Transform const &
    V_AB: SimTK::SpatialVec const &

    """
    return _simbody.reverseRelativeVelocity(X_AB, V_AB)

def reverseRelativeVelocityInA(X_AB, V_AB):
    r"""
    reverseRelativeVelocityInA(Transform const & X_AB, SpatialVec V_AB) -> SpatialVec

    Parameters
    ----------
    X_AB: Transform const &
    V_AB: SimTK::SpatialVec const &

    """
    return _simbody.reverseRelativeVelocityInA(X_AB, V_AB)

def shiftVelocityBy(V_AB, r_A):
    r"""
    shiftVelocityBy(SpatialVec V_AB, Vec3 r_A) -> SpatialVec

    Parameters
    ----------
    V_AB: SimTK::SpatialVec const &
    r_A: SimTK::Vec3 const &

    """
    return _simbody.shiftVelocityBy(V_AB, r_A)

def shiftVelocityFromTo(V_A_BP, fromP_A, toQ_A):
    r"""
    shiftVelocityFromTo(SpatialVec V_A_BP, Vec3 fromP_A, Vec3 toQ_A) -> SpatialVec

    Parameters
    ----------
    V_A_BP: SimTK::SpatialVec const &
    fromP_A: SimTK::Vec3 const &
    toQ_A: SimTK::Vec3 const &

    """
    return _simbody.shiftVelocityFromTo(V_A_BP, fromP_A, toQ_A)

def shiftForceBy(F_AP, r_A):
    r"""
    shiftForceBy(SpatialVec F_AP, Vec3 r_A) -> SpatialVec

    Parameters
    ----------
    F_AP: SimTK::SpatialVec const &
    r_A: SimTK::Vec3 const &

    """
    return _simbody.shiftForceBy(F_AP, r_A)

def shiftForceFromTo(F_AP, fromP_A, toQ_A):
    r"""
    shiftForceFromTo(SpatialVec F_AP, Vec3 fromP_A, Vec3 toQ_A) -> SpatialVec

    Parameters
    ----------
    F_AP: SimTK::SpatialVec const &
    fromP_A: SimTK::Vec3 const &
    toQ_A: SimTK::Vec3 const &

    """
    return _simbody.shiftForceFromTo(F_AP, fromP_A, toQ_A)

def shiftAccelerationBy(A_AB, w_AB, r_A):
    r"""
    shiftAccelerationBy(SpatialVec A_AB, Vec3 w_AB, Vec3 r_A) -> SpatialVec

    Parameters
    ----------
    A_AB: SimTK::SpatialVec const &
    w_AB: SimTK::Vec3 const &
    r_A: SimTK::Vec3 const &

    """
    return _simbody.shiftAccelerationBy(A_AB, w_AB, r_A)

def shiftAccelerationFromTo(A_A_BP, w_AB, fromP_A, toQ_A):
    r"""
    shiftAccelerationFromTo(SpatialVec A_A_BP, Vec3 w_AB, Vec3 fromP_A, Vec3 toQ_A) -> SpatialVec

    Parameters
    ----------
    A_A_BP: SimTK::SpatialVec const &
    w_AB: SimTK::Vec3 const &
    fromP_A: SimTK::Vec3 const &
    toQ_A: SimTK::Vec3 const &

    """
    return _simbody.shiftAccelerationFromTo(A_A_BP, w_AB, fromP_A, toQ_A)
class SpatialVec(object):
    r"""Proxy of C++ SimTK::Vec< 2,SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def size():
        r"""size() -> int"""
        return _simbody.SpatialVec_size()

    @staticmethod
    def nrow():
        r"""nrow() -> int"""
        return _simbody.SpatialVec_nrow()

    @staticmethod
    def ncol():
        r"""ncol() -> int"""
        return _simbody.SpatialVec_ncol()

    def __init__(self, *args):
        r"""
        __init__(SpatialVec self) -> SpatialVec
        __init__(SpatialVec self, SpatialVec src) -> SpatialVec

        Parameters
        ----------
        src: SimTK::Vec< 2,SimTK::Vec3 > const &

        __init__(SpatialVec self, Vec3 e) -> SpatialVec

        Parameters
        ----------
        e: SimTK::Vec< 3,double,1 > const &

        __init__(SpatialVec self, int i) -> SpatialVec

        Parameters
        ----------
        i: int

        __init__(SpatialVec self, Vec3 e0, Vec3 e1) -> SpatialVec

        Parameters
        ----------
        e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SpatialVec self, Vec3 e0, Vec3 e1, Vec3 e2) -> SpatialVec

        Parameters
        ----------
        e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SpatialVec self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3) -> SpatialVec

        Parameters
        ----------
        e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SpatialVec self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4) -> SpatialVec

        Parameters
        ----------
        e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SpatialVec self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4, Vec3 e5) -> SpatialVec

        Parameters
        ----------
        e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e5: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SpatialVec self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4, Vec3 e5, Vec3 e6) -> SpatialVec

        Parameters
        ----------
        e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e5: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e6: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SpatialVec self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4, Vec3 e5, Vec3 e6, Vec3 e7) -> SpatialVec

        Parameters
        ----------
        e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e5: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e6: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e7: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        __init__(SpatialVec self, Vec3 e0, Vec3 e1, Vec3 e2, Vec3 e3, Vec3 e4, Vec3 e5, Vec3 e6, Vec3 e7, Vec3 e8) -> SpatialVec

        Parameters
        ----------
        e0: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e1: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e2: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e3: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e4: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e5: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e6: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e7: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &
        e8: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        """
        _simbody.SpatialVec_swiginit(self, _simbody.new_SpatialVec(*args))

    def setToNaN(self):
        r"""setToNaN(SpatialVec self)"""
        return _simbody.SpatialVec_setToNaN(self)

    def setToZero(self):
        r"""setToZero(SpatialVec self)"""
        return _simbody.SpatialVec_setToZero(self)

    def isNaN(self):
        r"""isNaN(SpatialVec self) -> bool"""
        return _simbody.SpatialVec_isNaN(self)

    def isInf(self):
        r"""isInf(SpatialVec self) -> bool"""
        return _simbody.SpatialVec_isInf(self)

    def isFinite(self):
        r"""isFinite(SpatialVec self) -> bool"""
        return _simbody.SpatialVec_isFinite(self)

    @staticmethod
    def getDefaultTolerance():
        r"""getDefaultTolerance() -> double"""
        return _simbody.SpatialVec_getDefaultTolerance()

    def isNumericallyEqual(self, *args):
        r"""
        isNumericallyEqual(SpatialVec self, Vec3 e, double tol=SimTK::Vec< 2,SimTK::Vec3 >::getDefaultTolerance()) -> bool

        Parameters
        ----------
        e: SimTK::Vec< 3,double,1 > const &
        tol: double

        """
        return _simbody.SpatialVec_isNumericallyEqual(self, *args)

    def toString(self):
        r"""toString(SpatialVec self) -> std::string"""
        return _simbody.SpatialVec_toString(self)

    def set(self, i, value):
        r"""
        set(SpatialVec self, int i, Vec3 value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec< 2,SimTK::Vec< 3,double,1 > >::E const &

        """
        return _simbody.SpatialVec_set(self, i, value)

    def get(self, i):
        r"""
        get(SpatialVec self, int i) -> Vec3

        Parameters
        ----------
        i: int

        """
        return _simbody.SpatialVec_get(self, i)

    def __str__(self):
        r"""__str__(SpatialVec self) -> std::string"""
        return _simbody.SpatialVec___str__(self)

    def __len__(self):
        r"""__len__(SpatialVec self) -> int"""
        return _simbody.SpatialVec___len__(self)
    __swig_destroy__ = _simbody.delete_SpatialVec

# Register SpatialVec in _simbody:
_simbody.SpatialVec_swigregister(SpatialVec)
class VectorOfSpatialVec(object):
    r"""Proxy of C++ SimTK::Vector_< SimTK::SpatialVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorOfSpatialVec self) -> VectorOfSpatialVec
        __init__(VectorOfSpatialVec self, VectorOfSpatialVec src) -> VectorOfSpatialVec

        Parameters
        ----------
        src: SimTK::Vector_< SimTK::SpatialVec > const &

        __init__(VectorOfSpatialVec self, int m, SpatialVec initialValue) -> VectorOfSpatialVec

        Parameters
        ----------
        m: int
        initialValue: SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > const &

        """
        _simbody.VectorOfSpatialVec_swiginit(self, _simbody.new_VectorOfSpatialVec(*args))

    def toString(self):
        r"""toString(VectorOfSpatialVec self) -> std::string"""
        return _simbody.VectorOfSpatialVec_toString(self)

    def get(self, i):
        r"""
        get(VectorOfSpatialVec self, int i) -> SpatialVec

        Parameters
        ----------
        i: int

        """
        return _simbody.VectorOfSpatialVec_get(self, i)

    def set(self, i, value):
        r"""
        set(VectorOfSpatialVec self, int i, SpatialVec value)

        Parameters
        ----------
        i: int
        value: SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > const &

        """
        return _simbody.VectorOfSpatialVec_set(self, i, value)

    def __str__(self):
        r"""__str__(VectorOfSpatialVec self) -> std::string"""
        return _simbody.VectorOfSpatialVec___str__(self)

    def __len__(self):
        r"""__len__(VectorOfSpatialVec self) -> int"""
        return _simbody.VectorOfSpatialVec___len__(self)
    __swig_destroy__ = _simbody.delete_VectorOfSpatialVec

# Register VectorOfSpatialVec in _simbody:
_simbody.VectorOfSpatialVec_swigregister(VectorOfSpatialVec)
class MatrixOfSpatialVec(object):
    r"""Proxy of C++ SimTK::Matrix_< SimTK::SpatialVec > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixOfSpatialVec self) -> MatrixOfSpatialVec
        __init__(MatrixOfSpatialVec self, MatrixOfSpatialVec src) -> MatrixOfSpatialVec

        Parameters
        ----------
        src: SimTK::Matrix_< SimTK::SpatialVec > const &

        __init__(MatrixOfSpatialVec self, int m, int n) -> MatrixOfSpatialVec

        Parameters
        ----------
        m: int
        n: int

        __init__(MatrixOfSpatialVec self, int m, int n, SpatialVec initialValue) -> MatrixOfSpatialVec

        Parameters
        ----------
        m: int
        n: int
        initialValue: SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > const &

        """
        _simbody.MatrixOfSpatialVec_swiginit(self, _simbody.new_MatrixOfSpatialVec(*args))

    def toString(self):
        r"""toString(MatrixOfSpatialVec self) -> std::string"""
        return _simbody.MatrixOfSpatialVec_toString(self)

    def get(self, i, j):
        r"""
        get(MatrixOfSpatialVec self, int i, int j) -> SpatialVec

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixOfSpatialVec_get(self, i, j)

    def set(self, i, j, value):
        r"""
        set(MatrixOfSpatialVec self, int i, int j, SpatialVec value)

        Parameters
        ----------
        i: int
        j: int
        value: SimTK::Vec< 2,SimTK::Vec< 3,double,1 >,1 > const &

        """
        return _simbody.MatrixOfSpatialVec_set(self, i, j, value)
    __swig_destroy__ = _simbody.delete_MatrixOfSpatialVec

# Register MatrixOfSpatialVec in _simbody:
_simbody.MatrixOfSpatialVec_swigregister(MatrixOfSpatialVec)
BodyRotationSequence = _simbody.BodyRotationSequence

SpaceRotationSequence = _simbody.SpaceRotationSequence

class Rotation(Mat33):
    r"""Proxy of C++ SimTK::Rotation_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def setRotationToIdentityMatrix(self):
        r"""setRotationToIdentityMatrix(Rotation self) -> Rotation"""
        return _simbody.Rotation_setRotationToIdentityMatrix(self)

    def setRotationToNaN(self):
        r"""setRotationToNaN(Rotation self) -> Rotation"""
        return _simbody.Rotation_setRotationToNaN(self)

    def setRotationFromAngleAboutAxis(self, angle, axis):
        r"""
        setRotationFromAngleAboutAxis(Rotation self, double angle, CoordinateAxis axis) -> Rotation

        Parameters
        ----------
        angle: double
        axis: SimTK::CoordinateAxis const &

        """
        return _simbody.Rotation_setRotationFromAngleAboutAxis(self, angle, axis)

    def setRotationFromAngleAboutX(self, *args):
        r"""
        setRotationFromAngleAboutX(Rotation self, double angle) -> Rotation

        Parameters
        ----------
        angle: double

        setRotationFromAngleAboutX(Rotation self, double cosAngle, double sinAngle) -> Rotation

        Parameters
        ----------
        cosAngle: double
        sinAngle: double

        """
        return _simbody.Rotation_setRotationFromAngleAboutX(self, *args)

    def setRotationFromAngleAboutY(self, *args):
        r"""
        setRotationFromAngleAboutY(Rotation self, double angle) -> Rotation

        Parameters
        ----------
        angle: double

        setRotationFromAngleAboutY(Rotation self, double cosAngle, double sinAngle) -> Rotation

        Parameters
        ----------
        cosAngle: double
        sinAngle: double

        """
        return _simbody.Rotation_setRotationFromAngleAboutY(self, *args)

    def setRotationFromAngleAboutZ(self, *args):
        r"""
        setRotationFromAngleAboutZ(Rotation self, double angle) -> Rotation

        Parameters
        ----------
        angle: double

        setRotationFromAngleAboutZ(Rotation self, double cosAngle, double sinAngle) -> Rotation

        Parameters
        ----------
        cosAngle: double
        sinAngle: double

        """
        return _simbody.Rotation_setRotationFromAngleAboutZ(self, *args)

    def setRotationFromAngleAboutNonUnitVector(self, angle, nonUnitVector):
        r"""
        setRotationFromAngleAboutNonUnitVector(Rotation self, double angle, Vec3 nonUnitVector) -> Rotation

        Parameters
        ----------
        angle: double
        nonUnitVector: SimTK::Vec3 const &

        """
        return _simbody.Rotation_setRotationFromAngleAboutNonUnitVector(self, angle, nonUnitVector)

    def setRotationFromTwoAnglesTwoAxes(self, bodyOrSpace, angle1, axis1, angle2, axis2):
        r"""
        setRotationFromTwoAnglesTwoAxes(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, double angle1, CoordinateAxis axis1, double angle2, CoordinateAxis axis2) -> Rotation

        Parameters
        ----------
        bodyOrSpace: enum SimTK::BodyOrSpaceType
        angle1: double
        axis1: SimTK::CoordinateAxis const &
        angle2: double
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.Rotation_setRotationFromTwoAnglesTwoAxes(self, bodyOrSpace, angle1, axis1, angle2, axis2)

    def setRotationFromThreeAnglesThreeAxes(self, bodyOrSpace, angle1, axis1, angle2, axis2, angle3, axis3):
        r"""
        setRotationFromThreeAnglesThreeAxes(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, double angle1, CoordinateAxis axis1, double angle2, CoordinateAxis axis2, double angle3, CoordinateAxis axis3) -> Rotation

        Parameters
        ----------
        bodyOrSpace: enum SimTK::BodyOrSpaceType
        angle1: double
        axis1: SimTK::CoordinateAxis const &
        angle2: double
        axis2: SimTK::CoordinateAxis const &
        angle3: double
        axis3: SimTK::CoordinateAxis const &

        """
        return _simbody.Rotation_setRotationFromThreeAnglesThreeAxes(self, bodyOrSpace, angle1, axis1, angle2, axis2, angle3, axis3)

    def setRotationToBodyFixedXY(self, v):
        r"""
        setRotationToBodyFixedXY(Rotation self, Vec2 v)

        Parameters
        ----------
        v: SimTK::Vec2 const &

        """
        return _simbody.Rotation_setRotationToBodyFixedXY(self, v)

    def setRotationFromQuaternion(self, q):
        r"""
        setRotationFromQuaternion(Rotation self, Quaternion q) -> Rotation

        Parameters
        ----------
        q: SimTK::Quaternion_< double > const &

        """
        return _simbody.Rotation_setRotationFromQuaternion(self, q)

    def setRotationFromApproximateMat33(self, m):
        r"""
        setRotationFromApproximateMat33(Rotation self, Mat33 m) -> Rotation

        Parameters
        ----------
        m: SimTK::Mat33 const &

        """
        return _simbody.Rotation_setRotationFromApproximateMat33(self, m)

    def setRotationFromOneAxis(self, uvec, axis):
        r"""
        setRotationFromOneAxis(Rotation self, UnitVec3 uvec, CoordinateAxis axis) -> Rotation

        Parameters
        ----------
        uvec: SimTK::UnitVec3 const &
        axis: SimTK::CoordinateAxis const

        """
        return _simbody.Rotation_setRotationFromOneAxis(self, uvec, axis)

    def setRotationFromTwoAxes(self, uveci, axisi, vecjApprox, axisjApprox):
        r"""
        setRotationFromTwoAxes(Rotation self, UnitVec3 uveci, CoordinateAxis axisi, Vec3 vecjApprox, CoordinateAxis axisjApprox) -> Rotation

        Parameters
        ----------
        uveci: SimTK::UnitVec3 const &
        axisi: SimTK::CoordinateAxis const &
        vecjApprox: SimTK::Vec3 const &
        axisjApprox: SimTK::CoordinateAxis const &

        """
        return _simbody.Rotation_setRotationFromTwoAxes(self, uveci, axisi, vecjApprox, axisjApprox)

    def convertOneAxisRotationToOneAngle(self, axis1):
        r"""
        convertOneAxisRotationToOneAngle(Rotation self, CoordinateAxis axis1) -> double

        Parameters
        ----------
        axis1: SimTK::CoordinateAxis const &

        """
        return _simbody.Rotation_convertOneAxisRotationToOneAngle(self, axis1)

    def convertTwoAxesRotationToTwoAngles(self, bodyOrSpace, axis1, axis2):
        r"""
        convertTwoAxesRotationToTwoAngles(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, CoordinateAxis axis1, CoordinateAxis axis2) -> Vec2

        Parameters
        ----------
        bodyOrSpace: enum SimTK::BodyOrSpaceType
        axis1: SimTK::CoordinateAxis const &
        axis2: SimTK::CoordinateAxis const &

        """
        return _simbody.Rotation_convertTwoAxesRotationToTwoAngles(self, bodyOrSpace, axis1, axis2)

    def convertThreeAxesRotationToThreeAngles(self, bodyOrSpace, axis1, axis2, axis3):
        r"""
        convertThreeAxesRotationToThreeAngles(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, CoordinateAxis axis1, CoordinateAxis axis2, CoordinateAxis axis3) -> Vec3

        Parameters
        ----------
        bodyOrSpace: enum SimTK::BodyOrSpaceType
        axis1: SimTK::CoordinateAxis const &
        axis2: SimTK::CoordinateAxis const &
        axis3: SimTK::CoordinateAxis const &

        """
        return _simbody.Rotation_convertThreeAxesRotationToThreeAngles(self, bodyOrSpace, axis1, axis2, axis3)

    def convertRotationToQuaternion(self):
        r"""convertRotationToQuaternion(Rotation self) -> Quaternion"""
        return _simbody.Rotation_convertRotationToQuaternion(self)

    def convertRotationToAngleAxis(self):
        r"""convertRotationToAngleAxis(Rotation self) -> Vec4"""
        return _simbody.Rotation_convertRotationToAngleAxis(self)

    def convertRotationToBodyFixedXY(self):
        r"""convertRotationToBodyFixedXY(Rotation self) -> Vec2"""
        return _simbody.Rotation_convertRotationToBodyFixedXY(self)

    def convertRotationToBodyFixedXYZ(self):
        r"""convertRotationToBodyFixedXYZ(Rotation self) -> Vec3"""
        return _simbody.Rotation_convertRotationToBodyFixedXYZ(self)

    def isSameRotationToWithinAngle(self, R, okPointingAngleErrorRads):
        r"""
        isSameRotationToWithinAngle(Rotation self, Rotation R, double okPointingAngleErrorRads) -> bool

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &
        okPointingAngleErrorRads: double

        """
        return _simbody.Rotation_isSameRotationToWithinAngle(self, R, okPointingAngleErrorRads)

    def isSameRotationToWithinAngleOfMachinePrecision(self, R):
        r"""
        isSameRotationToWithinAngleOfMachinePrecision(Rotation self, Rotation R) -> bool

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &

        """
        return _simbody.Rotation_isSameRotationToWithinAngleOfMachinePrecision(self, R)

    def getMaxAbsDifferenceInRotationElements(self, R):
        r"""
        getMaxAbsDifferenceInRotationElements(Rotation self, Rotation R) -> double

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &

        """
        return _simbody.Rotation_getMaxAbsDifferenceInRotationElements(self, R)

    def areAllRotationElementsSameToEpsilon(self, R, epsilon):
        r"""
        areAllRotationElementsSameToEpsilon(Rotation self, Rotation R, double epsilon) -> bool

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &
        epsilon: double

        """
        return _simbody.Rotation_areAllRotationElementsSameToEpsilon(self, R, epsilon)

    def areAllRotationElementsSameToMachinePrecision(self, R):
        r"""
        areAllRotationElementsSameToMachinePrecision(Rotation self, Rotation R) -> bool

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &

        """
        return _simbody.Rotation_areAllRotationElementsSameToMachinePrecision(self, R)

    def __init__(self, *args):
        r"""
        __init__(Rotation self) -> Rotation
        __init__(Rotation self, Rotation R) -> Rotation

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &

        __init__(Rotation self, double angle, CoordinateAxis axis) -> Rotation

        Parameters
        ----------
        angle: double
        axis: SimTK::CoordinateAxis const &

        __init__(Rotation self, double angle, Vec3 nonUnitVector) -> Rotation

        Parameters
        ----------
        angle: double
        nonUnitVector: SimTK::Vec3 const &

        __init__(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, double angle1, CoordinateAxis axis1, double angle2, CoordinateAxis axis2) -> Rotation

        Parameters
        ----------
        bodyOrSpace: enum SimTK::BodyOrSpaceType
        angle1: double
        axis1: SimTK::CoordinateAxis const &
        angle2: double
        axis2: SimTK::CoordinateAxis const &

        __init__(Rotation self, SimTK::BodyOrSpaceType bodyOrSpace, double angle1, CoordinateAxis axis1, double angle2, CoordinateAxis axis2, double angle3, CoordinateAxis axis3) -> Rotation

        Parameters
        ----------
        bodyOrSpace: enum SimTK::BodyOrSpaceType
        angle1: double
        axis1: SimTK::CoordinateAxis const &
        angle2: double
        axis2: SimTK::CoordinateAxis const &
        angle3: double
        axis3: SimTK::CoordinateAxis const &

        __init__(Rotation self, Quaternion q) -> Rotation

        Parameters
        ----------
        q: SimTK::Quaternion_< double > const &

        __init__(Rotation self, Mat33 m, bool arg3) -> Rotation

        Parameters
        ----------
        m: SimTK::Mat33 const &
        arg3: bool

        __init__(Rotation self, Mat33 m) -> Rotation

        Parameters
        ----------
        m: SimTK::Mat33 const &

        __init__(Rotation self, UnitVec3 uvec, CoordinateAxis axis) -> Rotation

        Parameters
        ----------
        uvec: SimTK::UnitVec3 const &
        axis: SimTK::CoordinateAxis const

        __init__(Rotation self, UnitVec3 uveci, CoordinateAxis axisi, Vec3 vecjApprox, CoordinateAxis axisjApprox) -> Rotation

        Parameters
        ----------
        uveci: SimTK::UnitVec3 const &
        axisi: SimTK::CoordinateAxis const &
        vecjApprox: SimTK::Vec3 const &
        axisjApprox: SimTK::CoordinateAxis const &

        __init__(Rotation self, InverseRotation arg2) -> Rotation

        Parameters
        ----------
        arg2: SimTK::InverseRotation_< double > const &

        """
        _simbody.Rotation_swiginit(self, _simbody.new_Rotation(*args))

    def invert(self):
        r"""invert(Rotation self) -> InverseRotation"""
        return _simbody.Rotation_invert(self)

    def transpose(self):
        r"""transpose(Rotation self) -> InverseRotation"""
        return _simbody.Rotation_transpose(self)

    def __invert__(self, *args):
        r"""
        __invert__(Rotation self) -> InverseRotation
        __invert__(Rotation self) -> InverseRotation
        """
        return _simbody.Rotation___invert__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(Rotation self, Rotation R) -> Rotation

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &

        __imul__(Rotation self, InverseRotation arg2) -> Rotation

        Parameters
        ----------
        arg2: SimTK::InverseRotation_< double > const &

        """
        return _simbody.Rotation___imul__(self, *args)

    def __itruediv__(self, *args):
        return _simbody.Rotation___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def asMat33(self):
        r"""asMat33(Rotation self) -> Mat33"""
        return _simbody.Rotation_asMat33(self)

    def toMat33(self):
        r"""toMat33(Rotation self) -> Mat33"""
        return _simbody.Rotation_toMat33(self)

    def setRotationToBodyFixedXYZ(self, *args):
        r"""
        setRotationToBodyFixedXYZ(Rotation self, Vec3 v)

        Parameters
        ----------
        v: SimTK::Vec3 const &

        setRotationToBodyFixedXYZ(Rotation self, Vec3 c, Vec3 s)

        Parameters
        ----------
        c: SimTK::Vec3 const &
        s: SimTK::Vec3 const &

        """
        return _simbody.Rotation_setRotationToBodyFixedXYZ(self, *args)

    @staticmethod
    def convertAngVelToBodyFixed321Dot(q, w_PB_B):
        r"""
        convertAngVelToBodyFixed321Dot(Vec3 q, Vec3 w_PB_B) -> Vec3

        Parameters
        ----------
        q: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertAngVelToBodyFixed321Dot(q, w_PB_B)

    @staticmethod
    def convertBodyFixed321DotToAngVel(q, qd):
        r"""
        convertBodyFixed321DotToAngVel(Vec3 q, Vec3 qd) -> Vec3

        Parameters
        ----------
        q: SimTK::Vec3 const &
        qd: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertBodyFixed321DotToAngVel(q, qd)

    @staticmethod
    def convertAngVelDotToBodyFixed321DotDot(q, w_PB_B, wdot_PB_B):
        r"""
        convertAngVelDotToBodyFixed321DotDot(Vec3 q, Vec3 w_PB_B, Vec3 wdot_PB_B) -> Vec3

        Parameters
        ----------
        q: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &
        wdot_PB_B: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertAngVelDotToBodyFixed321DotDot(q, w_PB_B, wdot_PB_B)

    @staticmethod
    def calcNForBodyXYZInBodyFrame(*args):
        r"""
        calcNForBodyXYZInBodyFrame(Vec3 q) -> Mat33

        Parameters
        ----------
        q: SimTK::Vec3 const &

        calcNForBodyXYZInBodyFrame(Vec3 cq, Vec3 sq) -> Mat33

        Parameters
        ----------
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &

        """
        return _simbody.Rotation_calcNForBodyXYZInBodyFrame(*args)

    @staticmethod
    def calcNForBodyXYZInParentFrame(*args):
        r"""
        calcNForBodyXYZInParentFrame(Vec3 q) -> Mat33

        Parameters
        ----------
        q: SimTK::Vec3 const &

        calcNForBodyXYZInParentFrame(Vec3 cq, Vec3 sq) -> Mat33

        Parameters
        ----------
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &

        """
        return _simbody.Rotation_calcNForBodyXYZInParentFrame(*args)

    @staticmethod
    def multiplyByBodyXYZ_N_P(cosxy, sinxy, oocosy, w_PB):
        r"""
        multiplyByBodyXYZ_N_P(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 w_PB) -> Vec3

        Parameters
        ----------
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        oocosy: double
        w_PB: SimTK::Vec3 const &

        """
        return _simbody.Rotation_multiplyByBodyXYZ_N_P(cosxy, sinxy, oocosy, w_PB)

    @staticmethod
    def multiplyByBodyXYZ_NT_P(cosxy, sinxy, oocosy, q):
        r"""
        multiplyByBodyXYZ_NT_P(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 q) -> Vec3

        Parameters
        ----------
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        oocosy: double
        q: SimTK::Vec3 const &

        """
        return _simbody.Rotation_multiplyByBodyXYZ_NT_P(cosxy, sinxy, oocosy, q)

    @staticmethod
    def convertAngVelInParentToBodyXYZDot(cosxy, sinxy, oocosy, w_PB):
        r"""
        convertAngVelInParentToBodyXYZDot(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 w_PB) -> Vec3

        Parameters
        ----------
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        oocosy: double
        w_PB: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertAngVelInParentToBodyXYZDot(cosxy, sinxy, oocosy, w_PB)

    @staticmethod
    def convertAngAccInParentToBodyXYZDotDot(cosxy, sinxy, oocosy, qdot, b_PB):
        r"""
        convertAngAccInParentToBodyXYZDotDot(Vec2 cosxy, Vec2 sinxy, double oocosy, Vec3 qdot, Vec3 b_PB) -> Vec3

        Parameters
        ----------
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        oocosy: double
        qdot: SimTK::Vec3 const &
        b_PB: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertAngAccInParentToBodyXYZDotDot(cosxy, sinxy, oocosy, qdot, b_PB)

    @staticmethod
    def multiplyByBodyXYZ_NInv_P(cosxy, sinxy, qdot):
        r"""
        multiplyByBodyXYZ_NInv_P(Vec2 cosxy, Vec2 sinxy, Vec3 qdot) -> Vec3

        Parameters
        ----------
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        qdot: SimTK::Vec3 const &

        """
        return _simbody.Rotation_multiplyByBodyXYZ_NInv_P(cosxy, sinxy, qdot)

    @staticmethod
    def multiplyByBodyXYZ_NInvT_P(cosxy, sinxy, v_P):
        r"""
        multiplyByBodyXYZ_NInvT_P(Vec2 cosxy, Vec2 sinxy, Vec3 v_P) -> Vec3

        Parameters
        ----------
        cosxy: SimTK::Vec2 const &
        sinxy: SimTK::Vec2 const &
        v_P: SimTK::Vec3 const &

        """
        return _simbody.Rotation_multiplyByBodyXYZ_NInvT_P(cosxy, sinxy, v_P)

    @staticmethod
    def calcNDotForBodyXYZInBodyFrame(*args):
        r"""
        calcNDotForBodyXYZInBodyFrame(Vec3 q, Vec3 qdot) -> Mat33

        Parameters
        ----------
        q: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

        calcNDotForBodyXYZInBodyFrame(Vec3 cq, Vec3 sq, Vec3 qdot) -> Mat33

        Parameters
        ----------
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

        """
        return _simbody.Rotation_calcNDotForBodyXYZInBodyFrame(*args)

    @staticmethod
    def calcNDotForBodyXYZInParentFrame(*args):
        r"""
        calcNDotForBodyXYZInParentFrame(Vec3 q, Vec3 qdot) -> Mat33

        Parameters
        ----------
        q: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

        calcNDotForBodyXYZInParentFrame(Vec2 cq, Vec2 sq, double ooc1, Vec3 qdot) -> Mat33

        Parameters
        ----------
        cq: SimTK::Vec2 const &
        sq: SimTK::Vec2 const &
        ooc1: double
        qdot: SimTK::Vec3 const &

        """
        return _simbody.Rotation_calcNDotForBodyXYZInParentFrame(*args)

    @staticmethod
    def calcNInvForBodyXYZInBodyFrame(*args):
        r"""
        calcNInvForBodyXYZInBodyFrame(Vec3 q) -> Mat33

        Parameters
        ----------
        q: SimTK::Vec3 const &

        calcNInvForBodyXYZInBodyFrame(Vec3 cq, Vec3 sq) -> Mat33

        Parameters
        ----------
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &

        """
        return _simbody.Rotation_calcNInvForBodyXYZInBodyFrame(*args)

    @staticmethod
    def calcNInvForBodyXYZInParentFrame(*args):
        r"""
        calcNInvForBodyXYZInParentFrame(Vec3 q) -> Mat33

        Parameters
        ----------
        q: SimTK::Vec3 const &

        calcNInvForBodyXYZInParentFrame(Vec3 cq, Vec3 sq) -> Mat33

        Parameters
        ----------
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &

        """
        return _simbody.Rotation_calcNInvForBodyXYZInParentFrame(*args)

    @staticmethod
    def convertAngVelInBodyFrameToBodyXYZDot(*args):
        r"""
        convertAngVelInBodyFrameToBodyXYZDot(Vec3 q, Vec3 w_PB_B) -> Vec3

        Parameters
        ----------
        q: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &

        convertAngVelInBodyFrameToBodyXYZDot(Vec3 cq, Vec3 sq, Vec3 w_PB_B) -> Vec3

        Parameters
        ----------
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertAngVelInBodyFrameToBodyXYZDot(*args)

    @staticmethod
    def convertBodyXYZDotToAngVelInBodyFrame(*args):
        r"""
        convertBodyXYZDotToAngVelInBodyFrame(Vec3 q, Vec3 qdot) -> Vec3

        Parameters
        ----------
        q: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

        convertBodyXYZDotToAngVelInBodyFrame(Vec3 cq, Vec3 sq, Vec3 qdot) -> Vec3

        Parameters
        ----------
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &
        qdot: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertBodyXYZDotToAngVelInBodyFrame(*args)

    @staticmethod
    def convertAngVelDotInBodyFrameToBodyXYZDotDot(*args):
        r"""
        convertAngVelDotInBodyFrameToBodyXYZDotDot(Vec3 q, Vec3 w_PB_B, Vec3 wdot_PB_B) -> Vec3

        Parameters
        ----------
        q: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &
        wdot_PB_B: SimTK::Vec3 const &

        convertAngVelDotInBodyFrameToBodyXYZDotDot(Vec3 cq, Vec3 sq, Vec3 w_PB_B, Vec3 wdot_PB_B) -> Vec3

        Parameters
        ----------
        cq: SimTK::Vec3 const &
        sq: SimTK::Vec3 const &
        w_PB_B: SimTK::Vec3 const &
        wdot_PB_B: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertAngVelDotInBodyFrameToBodyXYZDotDot(*args)

    @staticmethod
    def convertAngVelToQuaternionDot(q, w_PB_P):
        r"""
        convertAngVelToQuaternionDot(Vec4 q, Vec3 w_PB_P) -> Vec4

        Parameters
        ----------
        q: SimTK::Vec4 const &
        w_PB_P: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertAngVelToQuaternionDot(q, w_PB_P)

    @staticmethod
    def convertQuaternionDotToAngVel(q, qdot):
        r"""
        convertQuaternionDotToAngVel(Vec4 q, Vec4 qdot) -> Vec3

        Parameters
        ----------
        q: SimTK::Vec4 const &
        qdot: SimTK::Vec4 const &

        """
        return _simbody.Rotation_convertQuaternionDotToAngVel(q, qdot)

    @staticmethod
    def convertAngVelDotToQuaternionDotDot(q, w_PB, b_PB):
        r"""
        convertAngVelDotToQuaternionDotDot(Vec4 q, Vec3 w_PB, Vec3 b_PB) -> Vec4

        Parameters
        ----------
        q: SimTK::Vec4 const &
        w_PB: SimTK::Vec3 const &
        b_PB: SimTK::Vec3 const &

        """
        return _simbody.Rotation_convertAngVelDotToQuaternionDotDot(q, w_PB, b_PB)

    def multiply(self, *args):
        r"""
        multiply(Rotation self, Vec3 v) -> Vec3

        Parameters
        ----------
        v: SimTK::Vec3 const &

        multiply(Rotation self, Rotation r) -> Rotation

        Parameters
        ----------
        r: SimTK::Rotation_< double > const &

        multiply(Rotation self, InverseRotation r) -> Rotation

        Parameters
        ----------
        r: SimTK::InverseRotation_< double > const &

        multiply(Rotation self, RowVectorVec3 row) -> RowVectorVec3

        Parameters
        ----------
        row: SimTK::RowVector_< SimTK::Vec3 > const &

        multiply(Rotation self, RowVectorViewVec3 row) -> RowVectorVec3

        Parameters
        ----------
        row: SimTK::RowVectorView_< SimTK::Vec3 > const &

        """
        return _simbody.Rotation_multiply(self, *args)
    __swig_destroy__ = _simbody.delete_Rotation

# Register Rotation in _simbody:
_simbody.Rotation_swigregister(Rotation)
class InverseRotation(object):
    r"""Proxy of C++ SimTK::InverseRotation_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InverseRotation self) -> InverseRotation
        __init__(InverseRotation self, InverseRotation R) -> InverseRotation

        Parameters
        ----------
        R: SimTK::InverseRotation_< double > const &

        """
        _simbody.InverseRotation_swiginit(self, _simbody.new_InverseRotation(*args))

    def invert(self):
        r"""invert(InverseRotation self) -> Rotation"""
        return _simbody.InverseRotation_invert(self)

    def transpose(self):
        r"""transpose(InverseRotation self) -> Rotation"""
        return _simbody.InverseRotation_transpose(self)

    def __invert__(self, *args):
        r"""
        __invert__(InverseRotation self) -> Rotation
        __invert__(InverseRotation self) -> Rotation
        """
        return _simbody.InverseRotation___invert__(self, *args)
    __swig_destroy__ = _simbody.delete_InverseRotation

# Register InverseRotation in _simbody:
_simbody.InverseRotation_swigregister(InverseRotation)
class MatrixBaseMat33(object):
    r"""Proxy of C++ SimTK::MatrixBase< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def nrow(self):
        r"""nrow(MatrixBaseMat33 self) -> int"""
        return _simbody.MatrixBaseMat33_nrow(self)

    def ncol(self):
        r"""ncol(MatrixBaseMat33 self) -> int"""
        return _simbody.MatrixBaseMat33_ncol(self)

    def isResizeable(self):
        r"""isResizeable(MatrixBaseMat33 self) -> bool"""
        return _simbody.MatrixBaseMat33_isResizeable(self)
    NScalarsPerElement = _simbody.MatrixBaseMat33_NScalarsPerElement
    
    CppNScalarsPerElement = _simbody.MatrixBaseMat33_CppNScalarsPerElement
    

    def __init__(self, *args):
        r"""
        __init__(MatrixBaseMat33 self) -> MatrixBaseMat33
        __init__(MatrixBaseMat33 self, int m, int n) -> MatrixBaseMat33

        Parameters
        ----------
        m: int
        n: int

        """
        _simbody.MatrixBaseMat33_swiginit(self, _simbody.new_MatrixBaseMat33(*args))

    def clear(self):
        r"""clear(MatrixBaseMat33 self)"""
        return _simbody.MatrixBaseMat33_clear(self)

    def setTo(self, t):
        r"""
        setTo(MatrixBaseMat33 self, Mat33 t) -> MatrixBaseMat33

        Parameters
        ----------
        t: SimTK::Mat< 3,3,double,3,1 > const &

        """
        return _simbody.MatrixBaseMat33_setTo(self, t)

    def setToNaN(self):
        r"""setToNaN(MatrixBaseMat33 self) -> MatrixBaseMat33"""
        return _simbody.MatrixBaseMat33_setToNaN(self)

    def setToZero(self):
        r"""setToZero(MatrixBaseMat33 self) -> MatrixBaseMat33"""
        return _simbody.MatrixBaseMat33_setToZero(self)

    def row(self, i):
        r"""
        row(MatrixBaseMat33 self, int i) -> RowVectorViewMat33

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseMat33_row(self, i)

    def updRow(self, i):
        r"""
        updRow(MatrixBaseMat33 self, int i) -> RowVectorViewMat33

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseMat33_updRow(self, i)

    def col(self, j):
        r"""
        col(MatrixBaseMat33 self, int j) -> VectorViewMat33

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseMat33_col(self, j)

    def updCol(self, j):
        r"""
        updCol(MatrixBaseMat33 self, int j) -> VectorViewMat33

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseMat33_updCol(self, j)

    def __call__(self, *args):
        r"""
        __call__(MatrixBaseMat33 self, int j) -> VectorViewMat33

        Parameters
        ----------
        j: int

        __call__(MatrixBaseMat33 self, int j) -> VectorViewMat33

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseMat33___call__(self, *args)

    def getElt(self, i, j):
        r"""
        getElt(MatrixBaseMat33 self, int i, int j) -> Mat33

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseMat33_getElt(self, i, j)

    def updElt(self, i, j):
        r"""
        updElt(MatrixBaseMat33 self, int i, int j) -> Mat33

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseMat33_updElt(self, i, j)

    def negateInPlace(self):
        r"""negateInPlace(MatrixBaseMat33 self) -> MatrixBaseMat33"""
        return _simbody.MatrixBaseMat33_negateInPlace(self)

    def resize(self, m, n):
        r"""
        resize(MatrixBaseMat33 self, int m, int n) -> MatrixBaseMat33

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseMat33_resize(self, m, n)

    def resizeKeep(self, m, n):
        r"""
        resizeKeep(MatrixBaseMat33 self, int m, int n) -> MatrixBaseMat33

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseMat33_resizeKeep(self, m, n)

    def lockShape(self):
        r"""lockShape(MatrixBaseMat33 self)"""
        return _simbody.MatrixBaseMat33_lockShape(self)

    def unlockShape(self):
        r"""unlockShape(MatrixBaseMat33 self)"""
        return _simbody.MatrixBaseMat33_unlockShape(self)
    __swig_destroy__ = _simbody.delete_MatrixBaseMat33

# Register MatrixBaseMat33 in _simbody:
_simbody.MatrixBaseMat33_swigregister(MatrixBaseMat33)
class MatrixViewMat33(MatrixBaseMat33):
    r"""Proxy of C++ SimTK::MatrixView_< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, m):
        r"""
        __init__(MatrixViewMat33 self, MatrixViewMat33 m) -> MatrixViewMat33

        Parameters
        ----------
        m: SimTK::MatrixView_< SimTK::Mat33 > const &

        """
        _simbody.MatrixViewMat33_swiginit(self, _simbody.new_MatrixViewMat33(m))

    def __iadd__(self, r):
        r"""
        __iadd__(MatrixViewMat33 self, Mat33 r) -> MatrixViewMat33

        Parameters
        ----------
        r: SimTK::Mat< 3,3,double,3,1 > const &

        """
        return _simbody.MatrixViewMat33___iadd__(self, r)

    def __isub__(self, r):
        r"""
        __isub__(MatrixViewMat33 self, Mat33 r) -> MatrixViewMat33

        Parameters
        ----------
        r: SimTK::Mat< 3,3,double,3,1 > const &

        """
        return _simbody.MatrixViewMat33___isub__(self, r)
    __swig_destroy__ = _simbody.delete_MatrixViewMat33

# Register MatrixViewMat33 in _simbody:
_simbody.MatrixViewMat33_swigregister(MatrixViewMat33)
class MatrixMat33(MatrixBaseMat33):
    r"""Proxy of C++ SimTK::Matrix_< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixMat33 self) -> MatrixMat33
        __init__(MatrixMat33 self, MatrixMat33 src) -> MatrixMat33

        Parameters
        ----------
        src: SimTK::Matrix_< SimTK::Mat33 > const &

        __init__(MatrixMat33 self, int m, int n) -> MatrixMat33

        Parameters
        ----------
        m: int
        n: int

        __init__(MatrixMat33 self, int m, int n, Mat33 initialValue) -> MatrixMat33

        Parameters
        ----------
        m: int
        n: int
        initialValue: SimTK::Mat< 3,3,double,3,1 > const &

        """
        _simbody.MatrixMat33_swiginit(self, _simbody.new_MatrixMat33(*args))

    def toString(self):
        r"""toString(MatrixMat33 self) -> std::string"""
        return _simbody.MatrixMat33_toString(self)

    def get(self, i, j):
        r"""
        get(MatrixMat33 self, int i, int j) -> Mat33

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixMat33_get(self, i, j)

    def set(self, i, j, value):
        r"""
        set(MatrixMat33 self, int i, int j, Mat33 value)

        Parameters
        ----------
        i: int
        j: int
        value: SimTK::Mat< 3,3,double,3,1 > const &

        """
        return _simbody.MatrixMat33_set(self, i, j, value)
    __swig_destroy__ = _simbody.delete_MatrixMat33

# Register MatrixMat33 in _simbody:
_simbody.MatrixMat33_swigregister(MatrixMat33)
class VectorBaseMat33(MatrixBaseMat33):
    r"""Proxy of C++ SimTK::VectorBase< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorBaseMat33 self, int m=0) -> VectorBaseMat33

        Parameters
        ----------
        m: int

        __init__(VectorBaseMat33 self, VectorBaseMat33 source) -> VectorBaseMat33

        Parameters
        ----------
        source: SimTK::VectorBase< SimTK::Mat33 > const &

        """
        _simbody.VectorBaseMat33_swiginit(self, _simbody.new_VectorBaseMat33(*args))

    def size(self):
        r"""size(VectorBaseMat33 self) -> int"""
        return _simbody.VectorBaseMat33_size(self)

    def nrow(self):
        r"""nrow(VectorBaseMat33 self) -> int"""
        return _simbody.VectorBaseMat33_nrow(self)

    def ncol(self):
        r"""ncol(VectorBaseMat33 self) -> int"""
        return _simbody.VectorBaseMat33_ncol(self)

    def resize(self, m):
        r"""
        resize(VectorBaseMat33 self, int m) -> VectorBaseMat33

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseMat33_resize(self, m)

    def resizeKeep(self, m):
        r"""
        resizeKeep(VectorBaseMat33 self, int m) -> VectorBaseMat33

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseMat33_resizeKeep(self, m)

    def clear(self):
        r"""clear(VectorBaseMat33 self)"""
        return _simbody.VectorBaseMat33_clear(self)

    def sum(self):
        r"""sum(VectorBaseMat33 self) -> Mat33"""
        return _simbody.VectorBaseMat33_sum(self)
    __swig_destroy__ = _simbody.delete_VectorBaseMat33

# Register VectorBaseMat33 in _simbody:
_simbody.VectorBaseMat33_swigregister(VectorBaseMat33)
class VectorViewMat33(VectorBaseMat33):
    r"""Proxy of C++ SimTK::VectorView_< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, v):
        r"""
        __init__(VectorViewMat33 self, VectorViewMat33 v) -> VectorViewMat33

        Parameters
        ----------
        v: SimTK::VectorView_< SimTK::Mat33 > const &

        """
        _simbody.VectorViewMat33_swiginit(self, _simbody.new_VectorViewMat33(v))
    __swig_destroy__ = _simbody.delete_VectorViewMat33

# Register VectorViewMat33 in _simbody:
_simbody.VectorViewMat33_swigregister(VectorViewMat33)
class VectorMat33(VectorBaseMat33):
    r"""Proxy of C++ SimTK::Vector_< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorMat33 self) -> VectorMat33
        __init__(VectorMat33 self, VectorMat33 src) -> VectorMat33

        Parameters
        ----------
        src: SimTK::Vector_< SimTK::Mat33 > const &

        __init__(VectorMat33 self, int m, Mat33 initialValue) -> VectorMat33

        Parameters
        ----------
        m: int
        initialValue: SimTK::Mat< 3,3,double,3,1 > const &

        """
        _simbody.VectorMat33_swiginit(self, _simbody.new_VectorMat33(*args))

    def toString(self):
        r"""toString(VectorMat33 self) -> std::string"""
        return _simbody.VectorMat33_toString(self)

    def get(self, i):
        r"""
        get(VectorMat33 self, int i) -> Mat33

        Parameters
        ----------
        i: int

        """
        return _simbody.VectorMat33_get(self, i)

    def set(self, i, value):
        r"""
        set(VectorMat33 self, int i, Mat33 value)

        Parameters
        ----------
        i: int
        value: SimTK::Mat< 3,3,double,3,1 > const &

        """
        return _simbody.VectorMat33_set(self, i, value)

    def __str__(self):
        r"""__str__(VectorMat33 self) -> std::string"""
        return _simbody.VectorMat33___str__(self)

    def __len__(self):
        r"""__len__(VectorMat33 self) -> int"""
        return _simbody.VectorMat33___len__(self)
    __swig_destroy__ = _simbody.delete_VectorMat33

# Register VectorMat33 in _simbody:
_simbody.VectorMat33_swigregister(VectorMat33)
class RowVectorBaseMat33(MatrixBaseMat33):
    r"""Proxy of C++ SimTK::RowVectorBase< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorBaseMat33 self, int n=0) -> RowVectorBaseMat33

        Parameters
        ----------
        n: int

        __init__(RowVectorBaseMat33 self, RowVectorBaseMat33 source) -> RowVectorBaseMat33

        Parameters
        ----------
        source: SimTK::RowVectorBase< SimTK::Mat33 > const &

        __init__(RowVectorBaseMat33 self, int n, Mat33 initialValue) -> RowVectorBaseMat33

        Parameters
        ----------
        n: int
        initialValue: SimTK::Mat< 3,3,double,3,1 > const &

        __init__(RowVectorBaseMat33 self, int n, Mat33 cppInitialValues) -> RowVectorBaseMat33

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Mat< 3,3,double,3,1 > const *

        """
        _simbody.RowVectorBaseMat33_swiginit(self, _simbody.new_RowVectorBaseMat33(*args))

    def size(self):
        r"""size(RowVectorBaseMat33 self) -> int"""
        return _simbody.RowVectorBaseMat33_size(self)

    def nrow(self):
        r"""nrow(RowVectorBaseMat33 self) -> int"""
        return _simbody.RowVectorBaseMat33_nrow(self)

    def ncol(self):
        r"""ncol(RowVectorBaseMat33 self) -> int"""
        return _simbody.RowVectorBaseMat33_ncol(self)

    def nelt(self):
        r"""nelt(RowVectorBaseMat33 self) -> ptrdiff_t"""
        return _simbody.RowVectorBaseMat33_nelt(self)

    def index(self, indices):
        r"""
        index(RowVectorBaseMat33 self, Array_< int > const & indices) -> RowVectorViewMat33

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseMat33_index(self, indices)

    def updIndex(self, indices):
        r"""
        updIndex(RowVectorBaseMat33 self, Array_< int > const & indices) -> RowVectorViewMat33

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseMat33_updIndex(self, indices)

    def __call__(self, *args):
        r"""
        __call__(RowVectorBaseMat33 self, int j) -> Mat33

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseMat33 self, int j) -> Mat33

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseMat33 self, int j, int n) -> RowVectorViewMat33

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseMat33 self, int j, int n) -> RowVectorViewMat33

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseMat33 self, Array_< int > const & indices) -> RowVectorViewMat33

        Parameters
        ----------
        indices: Array_< int > const &

        __call__(RowVectorBaseMat33 self, Array_< int > const & indices) -> RowVectorViewMat33

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseMat33___call__(self, *args)

    def __pos__(self):
        r"""__pos__(RowVectorBaseMat33 self) -> RowVectorBaseMat33"""
        return _simbody.RowVectorBaseMat33___pos__(self)

    def resize(self, n):
        r"""
        resize(RowVectorBaseMat33 self, int n) -> RowVectorBaseMat33

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseMat33_resize(self, n)

    def resizeKeep(self, n):
        r"""
        resizeKeep(RowVectorBaseMat33 self, int n) -> RowVectorBaseMat33

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseMat33_resizeKeep(self, n)

    def clear(self):
        r"""clear(RowVectorBaseMat33 self)"""
        return _simbody.RowVectorBaseMat33_clear(self)

    def sum(self):
        r"""sum(RowVectorBaseMat33 self) -> Mat33"""
        return _simbody.RowVectorBaseMat33_sum(self)

    def begin(self):
        r"""begin(RowVectorBaseMat33 self) -> VectorIterator< SimTK::Mat< 3,3,double,3,1 >,SimTK::RowVectorBase< SimTK::Mat< 3,3,double,3,1 > > >"""
        return _simbody.RowVectorBaseMat33_begin(self)

    def end(self):
        r"""end(RowVectorBaseMat33 self) -> VectorIterator< SimTK::Mat< 3,3,double,3,1 >,SimTK::RowVectorBase< SimTK::Mat< 3,3,double,3,1 > > >"""
        return _simbody.RowVectorBaseMat33_end(self)
    __swig_destroy__ = _simbody.delete_RowVectorBaseMat33

# Register RowVectorBaseMat33 in _simbody:
_simbody.RowVectorBaseMat33_swigregister(RowVectorBaseMat33)
class RowVectorViewMat33(RowVectorBaseMat33):
    r"""Proxy of C++ SimTK::RowVectorView_< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r):
        r"""
        __init__(RowVectorViewMat33 self, RowVectorViewMat33 r) -> RowVectorViewMat33

        Parameters
        ----------
        r: SimTK::RowVectorView_< SimTK::Mat33 > const &

        """
        _simbody.RowVectorViewMat33_swiginit(self, _simbody.new_RowVectorViewMat33(r))
    __swig_destroy__ = _simbody.delete_RowVectorViewMat33

# Register RowVectorViewMat33 in _simbody:
_simbody.RowVectorViewMat33_swigregister(RowVectorViewMat33)
class RowVectorMat33(RowVectorBaseMat33):
    r"""Proxy of C++ SimTK::RowVector_< SimTK::Mat33 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorMat33 self) -> RowVectorMat33
        __init__(RowVectorMat33 self, RowVectorMat33 src) -> RowVectorMat33

        Parameters
        ----------
        src: SimTK::RowVector_< SimTK::Mat33 > const &

        __init__(RowVectorMat33 self, RowVectorBaseMat33 src) -> RowVectorMat33

        Parameters
        ----------
        src: SimTK::RowVectorBase< SimTK::Mat< 3,3,double,3,1 > > const &

        __init__(RowVectorMat33 self, int n) -> RowVectorMat33

        Parameters
        ----------
        n: int

        __init__(RowVectorMat33 self, int n, Mat33 cppInitialValues) -> RowVectorMat33

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Mat< 3,3,double,3,1 > const *

        __init__(RowVectorMat33 self, int n, Mat33 initialValue) -> RowVectorMat33

        Parameters
        ----------
        n: int
        initialValue: SimTK::Mat< 3,3,double,3,1 > const &

        """
        _simbody.RowVectorMat33_swiginit(self, _simbody.new_RowVectorMat33(*args))
    __swig_destroy__ = _simbody.delete_RowVectorMat33

# Register RowVectorMat33 in _simbody:
_simbody.RowVectorMat33_swigregister(RowVectorMat33)
class MatrixBaseRotation(object):
    r"""Proxy of C++ SimTK::MatrixBase< SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def nrow(self):
        r"""nrow(MatrixBaseRotation self) -> int"""
        return _simbody.MatrixBaseRotation_nrow(self)

    def ncol(self):
        r"""ncol(MatrixBaseRotation self) -> int"""
        return _simbody.MatrixBaseRotation_ncol(self)

    def isResizeable(self):
        r"""isResizeable(MatrixBaseRotation self) -> bool"""
        return _simbody.MatrixBaseRotation_isResizeable(self)
    NScalarsPerElement = _simbody.MatrixBaseRotation_NScalarsPerElement
    
    CppNScalarsPerElement = _simbody.MatrixBaseRotation_CppNScalarsPerElement
    

    def __init__(self, *args):
        r"""
        __init__(MatrixBaseRotation self) -> MatrixBaseRotation
        __init__(MatrixBaseRotation self, int m, int n) -> MatrixBaseRotation

        Parameters
        ----------
        m: int
        n: int

        """
        _simbody.MatrixBaseRotation_swiginit(self, _simbody.new_MatrixBaseRotation(*args))

    def clear(self):
        r"""clear(MatrixBaseRotation self)"""
        return _simbody.MatrixBaseRotation_clear(self)

    def setTo(self, t):
        r"""
        setTo(MatrixBaseRotation self, Rotation t) -> MatrixBaseRotation

        Parameters
        ----------
        t: SimTK::Rotation_< double > const &

        """
        return _simbody.MatrixBaseRotation_setTo(self, t)

    def setToNaN(self):
        r"""setToNaN(MatrixBaseRotation self) -> MatrixBaseRotation"""
        return _simbody.MatrixBaseRotation_setToNaN(self)

    def setToZero(self):
        r"""setToZero(MatrixBaseRotation self) -> MatrixBaseRotation"""
        return _simbody.MatrixBaseRotation_setToZero(self)

    def row(self, i):
        r"""
        row(MatrixBaseRotation self, int i) -> RowVectorViewRotation

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseRotation_row(self, i)

    def updRow(self, i):
        r"""
        updRow(MatrixBaseRotation self, int i) -> RowVectorViewRotation

        Parameters
        ----------
        i: int

        """
        return _simbody.MatrixBaseRotation_updRow(self, i)

    def col(self, j):
        r"""
        col(MatrixBaseRotation self, int j) -> SimTK::VectorView_< SimTK::Rotation_< double > >

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseRotation_col(self, j)

    def updCol(self, j):
        r"""
        updCol(MatrixBaseRotation self, int j) -> SimTK::VectorView_< SimTK::Rotation_< double > >

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseRotation_updCol(self, j)

    def __call__(self, *args):
        r"""
        __call__(MatrixBaseRotation self, int j) -> SimTK::VectorView_< SimTK::Rotation_< double > >

        Parameters
        ----------
        j: int

        __call__(MatrixBaseRotation self, int j) -> SimTK::VectorView_< SimTK::Rotation_< double > >

        Parameters
        ----------
        j: int

        """
        return _simbody.MatrixBaseRotation___call__(self, *args)

    def getElt(self, i, j):
        r"""
        getElt(MatrixBaseRotation self, int i, int j) -> Rotation

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseRotation_getElt(self, i, j)

    def updElt(self, i, j):
        r"""
        updElt(MatrixBaseRotation self, int i, int j) -> Rotation

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixBaseRotation_updElt(self, i, j)

    def negateInPlace(self):
        r"""negateInPlace(MatrixBaseRotation self) -> MatrixBaseRotation"""
        return _simbody.MatrixBaseRotation_negateInPlace(self)

    def resize(self, m, n):
        r"""
        resize(MatrixBaseRotation self, int m, int n) -> MatrixBaseRotation

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseRotation_resize(self, m, n)

    def resizeKeep(self, m, n):
        r"""
        resizeKeep(MatrixBaseRotation self, int m, int n) -> MatrixBaseRotation

        Parameters
        ----------
        m: int
        n: int

        """
        return _simbody.MatrixBaseRotation_resizeKeep(self, m, n)

    def lockShape(self):
        r"""lockShape(MatrixBaseRotation self)"""
        return _simbody.MatrixBaseRotation_lockShape(self)

    def unlockShape(self):
        r"""unlockShape(MatrixBaseRotation self)"""
        return _simbody.MatrixBaseRotation_unlockShape(self)
    __swig_destroy__ = _simbody.delete_MatrixBaseRotation

# Register MatrixBaseRotation in _simbody:
_simbody.MatrixBaseRotation_swigregister(MatrixBaseRotation)
class MatrixRotation(MatrixBaseRotation):
    r"""Proxy of C++ SimTK::Matrix_< SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixRotation self) -> MatrixRotation
        __init__(MatrixRotation self, MatrixRotation src) -> MatrixRotation

        Parameters
        ----------
        src: SimTK::Matrix_< SimTK::Rotation_< double > > const &

        __init__(MatrixRotation self, int m, int n) -> MatrixRotation

        Parameters
        ----------
        m: int
        n: int

        __init__(MatrixRotation self, int m, int n, Rotation initialValue) -> MatrixRotation

        Parameters
        ----------
        m: int
        n: int
        initialValue: SimTK::Rotation_< double > const &

        """
        _simbody.MatrixRotation_swiginit(self, _simbody.new_MatrixRotation(*args))

    def toString(self):
        r"""toString(MatrixRotation self) -> std::string"""
        return _simbody.MatrixRotation_toString(self)

    def get(self, i, j):
        r"""
        get(MatrixRotation self, int i, int j) -> Rotation

        Parameters
        ----------
        i: int
        j: int

        """
        return _simbody.MatrixRotation_get(self, i, j)

    def set(self, i, j, value):
        r"""
        set(MatrixRotation self, int i, int j, Rotation value)

        Parameters
        ----------
        i: int
        j: int
        value: SimTK::Rotation_< double > const &

        """
        return _simbody.MatrixRotation_set(self, i, j, value)
    __swig_destroy__ = _simbody.delete_MatrixRotation

# Register MatrixRotation in _simbody:
_simbody.MatrixRotation_swigregister(MatrixRotation)
class VectorBaseRotation(MatrixBaseRotation):
    r"""Proxy of C++ SimTK::VectorBase< SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorBaseRotation self, int m=0) -> VectorBaseRotation

        Parameters
        ----------
        m: int

        __init__(VectorBaseRotation self, VectorBaseRotation source) -> VectorBaseRotation

        Parameters
        ----------
        source: SimTK::VectorBase< SimTK::Rotation_< double > > const &

        """
        _simbody.VectorBaseRotation_swiginit(self, _simbody.new_VectorBaseRotation(*args))

    def size(self):
        r"""size(VectorBaseRotation self) -> int"""
        return _simbody.VectorBaseRotation_size(self)

    def nrow(self):
        r"""nrow(VectorBaseRotation self) -> int"""
        return _simbody.VectorBaseRotation_nrow(self)

    def ncol(self):
        r"""ncol(VectorBaseRotation self) -> int"""
        return _simbody.VectorBaseRotation_ncol(self)

    def resize(self, m):
        r"""
        resize(VectorBaseRotation self, int m) -> VectorBaseRotation

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseRotation_resize(self, m)

    def resizeKeep(self, m):
        r"""
        resizeKeep(VectorBaseRotation self, int m) -> VectorBaseRotation

        Parameters
        ----------
        m: int

        """
        return _simbody.VectorBaseRotation_resizeKeep(self, m)

    def clear(self):
        r"""clear(VectorBaseRotation self)"""
        return _simbody.VectorBaseRotation_clear(self)

    def sum(self):
        r"""sum(VectorBaseRotation self) -> Rotation"""
        return _simbody.VectorBaseRotation_sum(self)
    __swig_destroy__ = _simbody.delete_VectorBaseRotation

# Register VectorBaseRotation in _simbody:
_simbody.VectorBaseRotation_swigregister(VectorBaseRotation)
class VectorRotation(VectorBaseRotation):
    r"""Proxy of C++ SimTK::Vector_< SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(VectorRotation self) -> VectorRotation
        __init__(VectorRotation self, VectorRotation src) -> VectorRotation

        Parameters
        ----------
        src: SimTK::Vector_< SimTK::Rotation_< double > > const &

        __init__(VectorRotation self, int m, Rotation initialValue) -> VectorRotation

        Parameters
        ----------
        m: int
        initialValue: SimTK::Rotation_< double > const &

        """
        _simbody.VectorRotation_swiginit(self, _simbody.new_VectorRotation(*args))

    def toString(self):
        r"""toString(VectorRotation self) -> std::string"""
        return _simbody.VectorRotation_toString(self)

    def get(self, i):
        r"""
        get(VectorRotation self, int i) -> Rotation

        Parameters
        ----------
        i: int

        """
        return _simbody.VectorRotation_get(self, i)

    def set(self, i, value):
        r"""
        set(VectorRotation self, int i, Rotation value)

        Parameters
        ----------
        i: int
        value: SimTK::Rotation_< double > const &

        """
        return _simbody.VectorRotation_set(self, i, value)

    def __str__(self):
        r"""__str__(VectorRotation self) -> std::string"""
        return _simbody.VectorRotation___str__(self)

    def __len__(self):
        r"""__len__(VectorRotation self) -> int"""
        return _simbody.VectorRotation___len__(self)
    __swig_destroy__ = _simbody.delete_VectorRotation

# Register VectorRotation in _simbody:
_simbody.VectorRotation_swigregister(VectorRotation)
class RowVectorBaseRotation(MatrixBaseRotation):
    r"""Proxy of C++ SimTK::RowVectorBase< SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorBaseRotation self, int n=0) -> RowVectorBaseRotation

        Parameters
        ----------
        n: int

        __init__(RowVectorBaseRotation self, RowVectorBaseRotation source) -> RowVectorBaseRotation

        Parameters
        ----------
        source: SimTK::RowVectorBase< SimTK::Rotation_< double > > const &

        __init__(RowVectorBaseRotation self, int n, Rotation initialValue) -> RowVectorBaseRotation

        Parameters
        ----------
        n: int
        initialValue: SimTK::Rotation_< double > const &

        __init__(RowVectorBaseRotation self, int n, Rotation cppInitialValues) -> RowVectorBaseRotation

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Rotation_< double > const *

        """
        _simbody.RowVectorBaseRotation_swiginit(self, _simbody.new_RowVectorBaseRotation(*args))

    def size(self):
        r"""size(RowVectorBaseRotation self) -> int"""
        return _simbody.RowVectorBaseRotation_size(self)

    def nrow(self):
        r"""nrow(RowVectorBaseRotation self) -> int"""
        return _simbody.RowVectorBaseRotation_nrow(self)

    def ncol(self):
        r"""ncol(RowVectorBaseRotation self) -> int"""
        return _simbody.RowVectorBaseRotation_ncol(self)

    def nelt(self):
        r"""nelt(RowVectorBaseRotation self) -> ptrdiff_t"""
        return _simbody.RowVectorBaseRotation_nelt(self)

    def index(self, indices):
        r"""
        index(RowVectorBaseRotation self, Array_< int > const & indices) -> RowVectorViewRotation

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseRotation_index(self, indices)

    def updIndex(self, indices):
        r"""
        updIndex(RowVectorBaseRotation self, Array_< int > const & indices) -> RowVectorViewRotation

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseRotation_updIndex(self, indices)

    def __call__(self, *args):
        r"""
        __call__(RowVectorBaseRotation self, int j) -> Rotation

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseRotation self, int j) -> Rotation

        Parameters
        ----------
        j: int

        __call__(RowVectorBaseRotation self, int j, int n) -> RowVectorViewRotation

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseRotation self, int j, int n) -> RowVectorViewRotation

        Parameters
        ----------
        j: int
        n: int

        __call__(RowVectorBaseRotation self, Array_< int > const & indices) -> RowVectorViewRotation

        Parameters
        ----------
        indices: Array_< int > const &

        __call__(RowVectorBaseRotation self, Array_< int > const & indices) -> RowVectorViewRotation

        Parameters
        ----------
        indices: Array_< int > const &

        """
        return _simbody.RowVectorBaseRotation___call__(self, *args)

    def __pos__(self):
        r"""__pos__(RowVectorBaseRotation self) -> RowVectorBaseRotation"""
        return _simbody.RowVectorBaseRotation___pos__(self)

    def resize(self, n):
        r"""
        resize(RowVectorBaseRotation self, int n) -> RowVectorBaseRotation

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseRotation_resize(self, n)

    def resizeKeep(self, n):
        r"""
        resizeKeep(RowVectorBaseRotation self, int n) -> RowVectorBaseRotation

        Parameters
        ----------
        n: int

        """
        return _simbody.RowVectorBaseRotation_resizeKeep(self, n)

    def clear(self):
        r"""clear(RowVectorBaseRotation self)"""
        return _simbody.RowVectorBaseRotation_clear(self)

    def sum(self):
        r"""sum(RowVectorBaseRotation self) -> Rotation"""
        return _simbody.RowVectorBaseRotation_sum(self)

    def begin(self):
        r"""begin(RowVectorBaseRotation self) -> VectorIterator< SimTK::Rotation_< double >,SimTK::RowVectorBase< SimTK::Rotation_< double > > >"""
        return _simbody.RowVectorBaseRotation_begin(self)

    def end(self):
        r"""end(RowVectorBaseRotation self) -> VectorIterator< SimTK::Rotation_< double >,SimTK::RowVectorBase< SimTK::Rotation_< double > > >"""
        return _simbody.RowVectorBaseRotation_end(self)
    __swig_destroy__ = _simbody.delete_RowVectorBaseRotation

# Register RowVectorBaseRotation in _simbody:
_simbody.RowVectorBaseRotation_swigregister(RowVectorBaseRotation)
class RowVectorViewRotation(RowVectorBaseRotation):
    r"""Proxy of C++ SimTK::RowVectorView_< SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, r):
        r"""
        __init__(RowVectorViewRotation self, RowVectorViewRotation r) -> RowVectorViewRotation

        Parameters
        ----------
        r: SimTK::RowVectorView_< SimTK::Rotation_< double > > const &

        """
        _simbody.RowVectorViewRotation_swiginit(self, _simbody.new_RowVectorViewRotation(r))
    __swig_destroy__ = _simbody.delete_RowVectorViewRotation

# Register RowVectorViewRotation in _simbody:
_simbody.RowVectorViewRotation_swigregister(RowVectorViewRotation)
class RowVectorRotation(RowVectorBaseRotation):
    r"""Proxy of C++ SimTK::RowVector_< SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RowVectorRotation self) -> RowVectorRotation
        __init__(RowVectorRotation self, RowVectorRotation src) -> RowVectorRotation

        Parameters
        ----------
        src: SimTK::RowVector_< SimTK::Rotation_< double > > const &

        __init__(RowVectorRotation self, RowVectorBaseRotation src) -> RowVectorRotation

        Parameters
        ----------
        src: SimTK::RowVectorBase< SimTK::Rotation_< double > > const &

        __init__(RowVectorRotation self, int n) -> RowVectorRotation

        Parameters
        ----------
        n: int

        __init__(RowVectorRotation self, int n, Rotation cppInitialValues) -> RowVectorRotation

        Parameters
        ----------
        n: int
        cppInitialValues: SimTK::Rotation_< double > const *

        __init__(RowVectorRotation self, int n, Rotation initialValue) -> RowVectorRotation

        Parameters
        ----------
        n: int
        initialValue: SimTK::Rotation_< double > const &

        """
        _simbody.RowVectorRotation_swiginit(self, _simbody.new_RowVectorRotation(*args))
    __swig_destroy__ = _simbody.delete_RowVectorRotation

# Register RowVectorRotation in _simbody:
_simbody.RowVectorRotation_swigregister(RowVectorRotation)
class Transform(object):
    r"""Proxy of C++ SimTK::Transform_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Transform self) -> Transform
        __init__(Transform self, Rotation R, Vec3 p) -> Transform

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &
        p: SimTK::Vec< 3,double > const &

        __init__(Transform self, Rotation R) -> Transform

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &

        __init__(Transform self, Vec3 p) -> Transform

        Parameters
        ----------
        p: SimTK::Vec< 3,double > const &

        """
        _simbody.Transform_swiginit(self, _simbody.new_Transform(*args))

    def set(self, R, p):
        r"""
        set(Transform self, Rotation R, Vec3 p) -> Transform

        Parameters
        ----------
        R: SimTK::Rotation_< double > const &
        p: SimTK::Vec< 3,double > const &

        """
        return _simbody.Transform_set(self, R, p)

    def setToZero(self):
        r"""setToZero(Transform self) -> Transform"""
        return _simbody.Transform_setToZero(self)

    def setToNaN(self):
        r"""setToNaN(Transform self) -> Transform"""
        return _simbody.Transform_setToNaN(self)

    def invert(self):
        r"""invert(Transform self) -> SimTK::InverseTransform_< double > const &"""
        return _simbody.Transform_invert(self)

    def updInvert(self):
        r"""updInvert(Transform self) -> SimTK::InverseTransform_< double > &"""
        return _simbody.Transform_updInvert(self)

    def __invert__(self, *args):
        r"""
        __invert__(Transform self) -> SimTK::InverseTransform_< double > const
        __invert__(Transform self) -> SimTK::InverseTransform_< double > &
        """
        return _simbody.Transform___invert__(self, *args)

    def compose(self, *args):
        r"""
        compose(Transform self, Transform X_FY) -> Transform

        Parameters
        ----------
        X_FY: SimTK::Transform_< double > const &

        compose(Transform self, SimTK::InverseTransform_< double > const & X_FY) -> Transform

        Parameters
        ----------
        X_FY: SimTK::InverseTransform_< double > const &

        """
        return _simbody.Transform_compose(self, *args)

    def xformFrameVecToBase(self, vF):
        r"""
        xformFrameVecToBase(Transform self, Vec3 vF) -> Vec3

        Parameters
        ----------
        vF: SimTK::Vec< 3,double > const &

        """
        return _simbody.Transform_xformFrameVecToBase(self, vF)

    def xformBaseVecToFrame(self, vB):
        r"""
        xformBaseVecToFrame(Transform self, Vec3 vB) -> Vec3

        Parameters
        ----------
        vB: SimTK::Vec< 3,double > const &

        """
        return _simbody.Transform_xformBaseVecToFrame(self, vB)

    def shiftFrameStationToBase(self, sF):
        r"""
        shiftFrameStationToBase(Transform self, Vec3 sF) -> Vec3

        Parameters
        ----------
        sF: SimTK::Vec< 3,double > const &

        """
        return _simbody.Transform_shiftFrameStationToBase(self, sF)

    def shiftBaseStationToFrame(self, sB):
        r"""
        shiftBaseStationToFrame(Transform self, Vec3 sB) -> Vec3

        Parameters
        ----------
        sB: SimTK::Vec< 3,double > const &

        """
        return _simbody.Transform_shiftBaseStationToFrame(self, sB)

    def R(self):
        r"""R(Transform self) -> Rotation"""
        return _simbody.Transform_R(self)

    def RInv(self):
        r"""RInv(Transform self) -> InverseRotation"""
        return _simbody.Transform_RInv(self)

    def p(self):
        r"""p(Transform self) -> Vec3"""
        return _simbody.Transform_p(self)

    def setP(self, p):
        r"""
        setP(Transform self, Vec3 p) -> Transform

        Parameters
        ----------
        p: SimTK::Vec< 3,double > const &

        """
        return _simbody.Transform_setP(self, p)

    def pInv(self):
        r"""pInv(Transform self) -> Vec3"""
        return _simbody.Transform_pInv(self)

    def setPInv(self, p_FB):
        r"""
        setPInv(Transform self, Vec3 p_FB) -> Transform

        Parameters
        ----------
        p_FB: SimTK::Vec< 3,double > const &

        """
        return _simbody.Transform_setPInv(self, p_FB)

    def asMat34(self):
        r"""asMat34(Transform self) -> SimTK::Mat< 3,4,double > const &"""
        return _simbody.Transform_asMat34(self)

    def toMat34(self):
        r"""toMat34(Transform self) -> SimTK::Mat< 3,4,double >"""
        return _simbody.Transform_toMat34(self)

    def toMat44(self):
        r"""toMat44(Transform self) -> SimTK::Mat< 4,4,double >"""
        return _simbody.Transform_toMat44(self)

    def T(self):
        r"""T(Transform self) -> Vec3"""
        return _simbody.Transform_T(self)
    __swig_destroy__ = _simbody.delete_Transform

# Register Transform in _simbody:
_simbody.Transform_swigregister(Transform)
class Inertia(object):
    r"""Proxy of C++ SimTK::Inertia_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Inertia self) -> Inertia
        __init__(Inertia self, double const & moment) -> Inertia

        Parameters
        ----------
        moment: double const &

        __init__(Inertia self, Vec3 p, double const & mass) -> Inertia

        Parameters
        ----------
        p: SimTK::Vec3 const &
        mass: double const &

        __init__(Inertia self, Vec3 moments, Vec3 products=SimTK::Vec3(0)) -> Inertia

        Parameters
        ----------
        moments: SimTK::Vec3 const &
        products: SimTK::Vec3 const &

        __init__(Inertia self, double const & xx, double const & yy, double const & zz) -> Inertia

        Parameters
        ----------
        xx: double const &
        yy: double const &
        zz: double const &

        __init__(Inertia self, double const & xx, double const & yy, double const & zz, double const & xy, double const & xz, double const & yz) -> Inertia

        Parameters
        ----------
        xx: double const &
        yy: double const &
        zz: double const &
        xy: double const &
        xz: double const &
        yz: double const &

        """
        _simbody.Inertia_swiginit(self, _simbody.new_Inertia(*args))

    def getMoments(self):
        r"""getMoments(Inertia self) -> Vec3"""
        return _simbody.Inertia_getMoments(self)

    def getProducts(self):
        r"""getProducts(Inertia self) -> Vec3"""
        return _simbody.Inertia_getProducts(self)

    def isNaN(self):
        r"""isNaN(Inertia self) -> bool"""
        return _simbody.Inertia_isNaN(self)

    def isInf(self):
        r"""isInf(Inertia self) -> bool"""
        return _simbody.Inertia_isInf(self)

    def isFinite(self):
        r"""isFinite(Inertia self) -> bool"""
        return _simbody.Inertia_isFinite(self)
    __swig_destroy__ = _simbody.delete_Inertia

# Register Inertia in _simbody:
_simbody.Inertia_swigregister(Inertia)
class MassProperties(object):
    r"""Proxy of C++ SimTK::MassProperties_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(MassProperties self) -> MassProperties"""
        _simbody.MassProperties_swiginit(self, _simbody.new_MassProperties())

    def isExactlyMassless(self):
        r"""isExactlyMassless(MassProperties self) -> bool"""
        return _simbody.MassProperties_isExactlyMassless(self)

    def isNearlyMassless(self, *args):
        r"""
        isNearlyMassless(MassProperties self, double const & tol=SignificantReal) -> bool

        Parameters
        ----------
        tol: double const &

        """
        return _simbody.MassProperties_isNearlyMassless(self, *args)

    def isExactlyCentral(self):
        r"""isExactlyCentral(MassProperties self) -> bool"""
        return _simbody.MassProperties_isExactlyCentral(self)

    def isNearlyCentral(self, *args):
        r"""
        isNearlyCentral(MassProperties self, double const & tol=SignificantReal) -> bool

        Parameters
        ----------
        tol: double const &

        """
        return _simbody.MassProperties_isNearlyCentral(self, *args)

    def isNaN(self):
        r"""isNaN(MassProperties self) -> bool"""
        return _simbody.MassProperties_isNaN(self)

    def isInf(self):
        r"""isInf(MassProperties self) -> bool"""
        return _simbody.MassProperties_isInf(self)

    def isFinite(self):
        r"""isFinite(MassProperties self) -> bool"""
        return _simbody.MassProperties_isFinite(self)
    __swig_destroy__ = _simbody.delete_MassProperties

# Register MassProperties in _simbody:
_simbody.MassProperties_swigregister(MassProperties)
SimTK_DEFAULT_PRECISION = _simbody.SimTK_DEFAULT_PRECISION


def SimTK_version_SimTKcommon(major, minor, build):
    r"""
    SimTK_version_SimTKcommon(int * major, int * minor, int * build)

    Parameters
    ----------
    major: int *
    minor: int *
    build: int *

    """
    return _simbody.SimTK_version_SimTKcommon(major, minor, build)

def SimTK_about_SimTKcommon(key, maxlen, value):
    r"""
    SimTK_about_SimTKcommon(char const * key, int maxlen, char * value)

    Parameters
    ----------
    key: char const *
    maxlen: int
    value: char *

    """
    return _simbody.SimTK_about_SimTKcommon(key, maxlen, value)

def canStoreInNonnegativeInt(*args):
    r"""
    canStoreInNonnegativeInt(bool arg1) -> bool

    Parameters
    ----------
    arg1: bool

    canStoreInNonnegativeInt(char c) -> bool

    Parameters
    ----------
    c: char

    canStoreInNonnegativeInt(unsigned char arg1) -> bool

    Parameters
    ----------
    arg1: unsigned char

    canStoreInNonnegativeInt(signed char c) -> bool

    Parameters
    ----------
    c: signed char

    canStoreInNonnegativeInt(short s) -> bool

    Parameters
    ----------
    s: short

    canStoreInNonnegativeInt(unsigned short arg1) -> bool

    Parameters
    ----------
    arg1: unsigned short

    canStoreInNonnegativeInt(int i) -> bool

    Parameters
    ----------
    i: int

    canStoreInNonnegativeInt(long l) -> bool

    Parameters
    ----------
    l: long

    canStoreInNonnegativeInt(long long l) -> bool

    Parameters
    ----------
    l: long long

    canStoreInNonnegativeInt(unsigned int u) -> bool

    Parameters
    ----------
    u: unsigned int

    canStoreInNonnegativeInt(unsigned long u) -> bool

    Parameters
    ----------
    u: unsigned long

    canStoreInNonnegativeInt(unsigned long long u) -> bool

    Parameters
    ----------
    u: unsigned long long

    """
    return _simbody.canStoreInNonnegativeInt(*args)

def isSizeInRange(*args):
    r"""
    isSizeInRange(char sz, char mx) -> bool

    Parameters
    ----------
    sz: char
    mx: char

    isSizeInRange(signed char sz, signed char mx) -> bool

    Parameters
    ----------
    sz: signed char
    mx: signed char

    isSizeInRange(short sz, short mx) -> bool

    Parameters
    ----------
    sz: short
    mx: short

    isSizeInRange(int sz, int mx) -> bool

    Parameters
    ----------
    sz: int
    mx: int

    isSizeInRange(long sz, long mx) -> bool

    Parameters
    ----------
    sz: long
    mx: long

    isSizeInRange(long long sz, long long mx) -> bool

    Parameters
    ----------
    sz: long long
    mx: long long

    isSizeInRange(unsigned char sz, unsigned char mx) -> bool

    Parameters
    ----------
    sz: unsigned char
    mx: unsigned char

    isSizeInRange(unsigned short sz, unsigned short mx) -> bool

    Parameters
    ----------
    sz: unsigned short
    mx: unsigned short

    isSizeInRange(unsigned int sz, unsigned int mx) -> bool

    Parameters
    ----------
    sz: unsigned int
    mx: unsigned int

    isSizeInRange(unsigned long sz, unsigned long mx) -> bool

    Parameters
    ----------
    sz: unsigned long
    mx: unsigned long

    isSizeInRange(unsigned long long sz, unsigned long long mx) -> bool

    Parameters
    ----------
    sz: unsigned long long
    mx: unsigned long long

    """
    return _simbody.isSizeInRange(*args)

def isIndexInRange(*args):
    r"""
    isIndexInRange(char ix, char sz) -> bool

    Parameters
    ----------
    ix: char
    sz: char

    isIndexInRange(signed char ix, signed char sz) -> bool

    Parameters
    ----------
    ix: signed char
    sz: signed char

    isIndexInRange(short ix, short sz) -> bool

    Parameters
    ----------
    ix: short
    sz: short

    isIndexInRange(int ix, int sz) -> bool

    Parameters
    ----------
    ix: int
    sz: int

    isIndexInRange(long ix, long sz) -> bool

    Parameters
    ----------
    ix: long
    sz: long

    isIndexInRange(long long ix, long long sz) -> bool

    Parameters
    ----------
    ix: long long
    sz: long long

    isIndexInRange(unsigned char ix, unsigned char sz) -> bool

    Parameters
    ----------
    ix: unsigned char
    sz: unsigned char

    isIndexInRange(unsigned short ix, unsigned short sz) -> bool

    Parameters
    ----------
    ix: unsigned short
    sz: unsigned short

    isIndexInRange(unsigned int ix, unsigned int sz) -> bool

    Parameters
    ----------
    ix: unsigned int
    sz: unsigned int

    isIndexInRange(unsigned long ix, unsigned long sz) -> bool

    Parameters
    ----------
    ix: unsigned long
    sz: unsigned long

    isIndexInRange(unsigned long long ix, unsigned long long sz) -> bool

    Parameters
    ----------
    ix: unsigned long long
    sz: unsigned long long

    """
    return _simbody.isIndexInRange(*args)

def isNonnegative(*args):
    r"""
    isNonnegative(bool arg1) -> bool

    Parameters
    ----------
    arg1: bool

    isNonnegative(char n) -> bool

    Parameters
    ----------
    n: char

    isNonnegative(signed char n) -> bool

    Parameters
    ----------
    n: signed char

    isNonnegative(short n) -> bool

    Parameters
    ----------
    n: short

    isNonnegative(int n) -> bool

    Parameters
    ----------
    n: int

    isNonnegative(long n) -> bool

    Parameters
    ----------
    n: long

    isNonnegative(long long n) -> bool

    Parameters
    ----------
    n: long long

    isNonnegative(unsigned char arg1) -> bool

    Parameters
    ----------
    arg1: unsigned char

    isNonnegative(unsigned short arg1) -> bool

    Parameters
    ----------
    arg1: unsigned short

    isNonnegative(unsigned int arg1) -> bool

    Parameters
    ----------
    arg1: unsigned int

    isNonnegative(unsigned long arg1) -> bool

    Parameters
    ----------
    arg1: unsigned long

    isNonnegative(unsigned long long arg1) -> bool

    Parameters
    ----------
    arg1: unsigned long long

    """
    return _simbody.isNonnegative(*args)
class Segment(object):
    r"""Proxy of C++ SimTK::Segment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Segment self) -> Segment
        __init__(Segment self, int l, int ofs=0) -> Segment

        Parameters
        ----------
        l: int
        ofs: int

        """
        _simbody.Segment_swiginit(self, _simbody.new_Segment(*args))
    length = property(_simbody.Segment_length_get, _simbody.Segment_length_set, doc=r"""length : int""")
    offset = property(_simbody.Segment_offset_get, _simbody.Segment_offset_set, doc=r"""offset : int""")
    __swig_destroy__ = _simbody.delete_Segment

# Register Segment in _simbody:
_simbody.Segment_swigregister(Segment)
cvar = _simbody.cvar
InvalidIndex = cvar.InvalidIndex

class DontCopy(object):
    r"""Proxy of C++ SimTK::DontCopy class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(DontCopy self) -> DontCopy"""
        _simbody.DontCopy_swiginit(self, _simbody.new_DontCopy())
    __swig_destroy__ = _simbody.delete_DontCopy

# Register DontCopy in _simbody:
_simbody.DontCopy_swigregister(DontCopy)
class TrustMe(object):
    r"""Proxy of C++ SimTK::TrustMe class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TrustMe self) -> TrustMe"""
        _simbody.TrustMe_swiginit(self, _simbody.new_TrustMe())
    __swig_destroy__ = _simbody.delete_TrustMe

# Register TrustMe in _simbody:
_simbody.TrustMe_swigregister(TrustMe)
class FalseType(object):
    r"""Proxy of C++ SimTK::FalseType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(FalseType self) -> FalseType"""
        _simbody.FalseType_swiginit(self, _simbody.new_FalseType())
    __swig_destroy__ = _simbody.delete_FalseType

# Register FalseType in _simbody:
_simbody.FalseType_swigregister(FalseType)
class TrueType(object):
    r"""Proxy of C++ SimTK::TrueType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TrueType self) -> TrueType"""
        _simbody.TrueType_swiginit(self, _simbody.new_TrueType())
    __swig_destroy__ = _simbody.delete_TrueType

# Register TrueType in _simbody:
_simbody.TrueType_swigregister(TrueType)
class SimTKArrayString(object):
    r"""Proxy of C++ SimTK::Array_< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimTKArrayString self) -> SimTKArrayString
        __init__(SimTKArrayString self, SimTK::Array_< std::string >::size_type n) -> SimTKArrayString

        Parameters
        ----------
        n: SimTK::Array_< std::string >::size_type

        __init__(SimTKArrayString self, SimTK::Array_< std::string >::size_type n, std::string const & initVal) -> SimTKArrayString

        Parameters
        ----------
        n: SimTK::Array_< std::string >::size_type
        initVal: std::string const &

        __init__(SimTKArrayString self, SimTKArrayString src) -> SimTKArrayString

        Parameters
        ----------
        src: SimTK::Array_< std::string > const &

        __init__(SimTKArrayString self, std::string * first, std::string const * last1, DontCopy arg4) -> SimTKArrayString

        Parameters
        ----------
        first: std::string *
        last1: std::string const *
        arg4: SimTK::DontCopy const &

        """
        _simbody.SimTKArrayString_swiginit(self, _simbody.new_SimTKArrayString(*args))
    __swig_destroy__ = _simbody.delete_SimTKArrayString

    def deallocate(self):
        r"""deallocate(SimTKArrayString self) -> SimTKArrayString"""
        return _simbody.SimTKArrayString_deallocate(self)

    def assign(self, n, fillValue):
        r"""
        assign(SimTKArrayString self, SimTK::Array_< std::string >::size_type n, std::string const & fillValue)

        Parameters
        ----------
        n: SimTK::Array_< std::string >::size_type
        fillValue: std::string const &

        """
        return _simbody.SimTKArrayString_assign(self, n, fillValue)

    def fill(self, fillValue):
        r"""
        fill(SimTKArrayString self, std::string const & fillValue)

        Parameters
        ----------
        fillValue: std::string const &

        """
        return _simbody.SimTKArrayString_fill(self, fillValue)

    def swap(self, other):
        r"""
        swap(SimTKArrayString self, SimTKArrayString other)

        Parameters
        ----------
        other: SimTK::Array_< std::string > &

        """
        return _simbody.SimTKArrayString_swap(self, other)

    def adoptData(self, *args):
        r"""
        adoptData(SimTKArrayString self, std::string * newData, SimTK::Array_< std::string >::size_type dataSize, SimTK::Array_< std::string >::size_type dataCapacity) -> SimTKArrayString

        Parameters
        ----------
        newData: std::string *
        dataSize: SimTK::Array_< std::string >::size_type
        dataCapacity: SimTK::Array_< std::string >::size_type

        adoptData(SimTKArrayString self, std::string * newData, SimTK::Array_< std::string >::size_type dataSize) -> SimTKArrayString

        Parameters
        ----------
        newData: std::string *
        dataSize: SimTK::Array_< std::string >::size_type

        """
        return _simbody.SimTKArrayString_adoptData(self, *args)

    def shareData(self, *args):
        r"""
        shareData(SimTKArrayString self, std::string * newData, SimTK::Array_< std::string >::size_type dataSize) -> SimTKArrayString

        Parameters
        ----------
        newData: std::string *
        dataSize: SimTK::Array_< std::string >::size_type

        shareData(SimTKArrayString self, std::string * first, std::string const * last1) -> SimTKArrayString

        Parameters
        ----------
        first: std::string *
        last1: std::string const *

        """
        return _simbody.SimTKArrayString_shareData(self, *args)

    def size(self):
        r"""size(SimTKArrayString self) -> SimTK::Array_< std::string >::size_type"""
        return _simbody.SimTKArrayString_size(self)

    def max_size(self):
        r"""max_size(SimTKArrayString self) -> SimTK::Array_< std::string >::size_type"""
        return _simbody.SimTKArrayString_max_size(self)

    def empty(self):
        r"""empty(SimTKArrayString self) -> bool"""
        return _simbody.SimTKArrayString_empty(self)

    def capacity(self):
        r"""capacity(SimTKArrayString self) -> SimTK::Array_< std::string >::size_type"""
        return _simbody.SimTKArrayString_capacity(self)

    def resize(self, *args):
        r"""
        resize(SimTKArrayString self, SimTK::Array_< std::string >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< std::string >::size_type

        resize(SimTKArrayString self, SimTK::Array_< std::string >::size_type n, std::string const & initVal)

        Parameters
        ----------
        n: SimTK::Array_< std::string >::size_type
        initVal: std::string const &

        """
        return _simbody.SimTKArrayString_resize(self, *args)

    def reserve(self, n):
        r"""
        reserve(SimTKArrayString self, SimTK::Array_< std::string >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< std::string >::size_type

        """
        return _simbody.SimTKArrayString_reserve(self, n)

    def shrink_to_fit(self):
        r"""shrink_to_fit(SimTKArrayString self)"""
        return _simbody.SimTKArrayString_shrink_to_fit(self)

    def allocated(self):
        r"""allocated(SimTKArrayString self) -> SimTK::Array_< std::string >::size_type"""
        return _simbody.SimTKArrayString_allocated(self)

    def isOwner(self):
        r"""isOwner(SimTKArrayString self) -> bool"""
        return _simbody.SimTKArrayString_isOwner(self)

    def cbegin(self):
        r"""cbegin(SimTKArrayString self) -> std::string const *"""
        return _simbody.SimTKArrayString_cbegin(self)

    def begin(self, *args):
        r"""
        begin(SimTKArrayString self) -> std::string const
        begin(SimTKArrayString self) -> std::string *
        """
        return _simbody.SimTKArrayString_begin(self, *args)

    def cend(self):
        r"""cend(SimTKArrayString self) -> std::string const *"""
        return _simbody.SimTKArrayString_cend(self)

    def end(self, *args):
        r"""
        end(SimTKArrayString self) -> std::string const
        end(SimTKArrayString self) -> std::string *
        """
        return _simbody.SimTKArrayString_end(self, *args)

    def crbegin(self):
        r"""crbegin(SimTKArrayString self) -> SimTK::Array_< std::string >::const_reverse_iterator"""
        return _simbody.SimTKArrayString_crbegin(self)

    def rbegin(self, *args):
        r"""
        rbegin(SimTKArrayString self) -> SimTK::Array_< std::string >::const_reverse_iterator
        rbegin(SimTKArrayString self) -> SimTK::Array_< std::string >::reverse_iterator
        """
        return _simbody.SimTKArrayString_rbegin(self, *args)

    def crend(self):
        r"""crend(SimTKArrayString self) -> SimTK::Array_< std::string >::const_reverse_iterator"""
        return _simbody.SimTKArrayString_crend(self)

    def rend(self, *args):
        r"""
        rend(SimTKArrayString self) -> SimTK::Array_< std::string >::const_reverse_iterator
        rend(SimTKArrayString self) -> SimTK::Array_< std::string >::reverse_iterator
        """
        return _simbody.SimTKArrayString_rend(self, *args)

    def cdata(self):
        r"""cdata(SimTKArrayString self) -> std::string const *"""
        return _simbody.SimTKArrayString_cdata(self)

    def data(self, *args):
        r"""
        data(SimTKArrayString self) -> std::string const
        data(SimTKArrayString self) -> std::string *
        """
        return _simbody.SimTKArrayString_data(self, *args)

    def at(self, *args):
        r"""
        at(SimTKArrayString self, SimTK::Array_< std::string >::index_type i) -> std::string const

        Parameters
        ----------
        i: SimTK::Array_< std::string >::index_type

        at(SimTKArrayString self, SimTK::Array_< std::string >::index_type i) -> std::string &

        Parameters
        ----------
        i: SimTK::Array_< std::string >::index_type

        """
        return _simbody.SimTKArrayString_at(self, *args)

    def getElt(self, i):
        r"""
        getElt(SimTKArrayString self, SimTK::Array_< std::string >::index_type i) -> std::string const &

        Parameters
        ----------
        i: SimTK::Array_< std::string >::index_type

        """
        return _simbody.SimTKArrayString_getElt(self, i)

    def updElt(self, i):
        r"""
        updElt(SimTKArrayString self, SimTK::Array_< std::string >::index_type i) -> std::string &

        Parameters
        ----------
        i: SimTK::Array_< std::string >::index_type

        """
        return _simbody.SimTKArrayString_updElt(self, i)

    def front(self, *args):
        r"""
        front(SimTKArrayString self) -> std::string const
        front(SimTKArrayString self) -> std::string &
        """
        return _simbody.SimTKArrayString_front(self, *args)

    def back(self, *args):
        r"""
        back(SimTKArrayString self) -> std::string const
        back(SimTKArrayString self) -> std::string &
        """
        return _simbody.SimTKArrayString_back(self, *args)

    def push_back(self, *args):
        r"""
        push_back(SimTKArrayString self, std::string const & value)

        Parameters
        ----------
        value: std::string const &

        push_back(SimTKArrayString self)
        """
        return _simbody.SimTKArrayString_push_back(self, *args)

    def raw_push_back(self):
        r"""raw_push_back(SimTKArrayString self) -> std::string *"""
        return _simbody.SimTKArrayString_raw_push_back(self)

    def pop_back(self):
        r"""pop_back(SimTKArrayString self)"""
        return _simbody.SimTKArrayString_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SimTKArrayString self, std::string * first, std::string const * last1) -> std::string

        Parameters
        ----------
        first: std::string *
        last1: std::string const *

        erase(SimTKArrayString self, std::string * p) -> std::string *

        Parameters
        ----------
        p: std::string *

        """
        return _simbody.SimTKArrayString_erase(self, *args)

    def eraseFast(self, p):
        r"""
        eraseFast(SimTKArrayString self, std::string * p) -> std::string *

        Parameters
        ----------
        p: std::string *

        """
        return _simbody.SimTKArrayString_eraseFast(self, p)

    def clear(self):
        r"""clear(SimTKArrayString self)"""
        return _simbody.SimTKArrayString_clear(self)

    def insert(self, *args):
        r"""
        insert(SimTKArrayString self, std::string * p, SimTK::Array_< std::string >::size_type n, std::string const & value) -> std::string

        Parameters
        ----------
        p: std::string *
        n: SimTK::Array_< std::string >::size_type
        value: std::string const &

        insert(SimTKArrayString self, std::string * p, std::string const & value) -> std::string *

        Parameters
        ----------
        p: std::string *
        value: std::string const &

        """
        return _simbody.SimTKArrayString_insert(self, *args)

# Register SimTKArrayString in _simbody:
_simbody.SimTKArrayString_swigregister(SimTKArrayString)
class SimTKArrayDouble(object):
    r"""Proxy of C++ SimTK::Array_< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimTKArrayDouble self) -> SimTKArrayDouble
        __init__(SimTKArrayDouble self, SimTK::Array_< double >::size_type n) -> SimTKArrayDouble

        Parameters
        ----------
        n: SimTK::Array_< double >::size_type

        __init__(SimTKArrayDouble self, SimTK::Array_< double >::size_type n, double const & initVal) -> SimTKArrayDouble

        Parameters
        ----------
        n: SimTK::Array_< double >::size_type
        initVal: double const &

        __init__(SimTKArrayDouble self, SimTKArrayDouble src) -> SimTKArrayDouble

        Parameters
        ----------
        src: SimTK::Array_< double > const &

        __init__(SimTKArrayDouble self, double * first, double const * last1, DontCopy arg4) -> SimTKArrayDouble

        Parameters
        ----------
        first: double *
        last1: double const *
        arg4: SimTK::DontCopy const &

        """
        _simbody.SimTKArrayDouble_swiginit(self, _simbody.new_SimTKArrayDouble(*args))
    __swig_destroy__ = _simbody.delete_SimTKArrayDouble

    def deallocate(self):
        r"""deallocate(SimTKArrayDouble self) -> SimTKArrayDouble"""
        return _simbody.SimTKArrayDouble_deallocate(self)

    def assign(self, n, fillValue):
        r"""
        assign(SimTKArrayDouble self, SimTK::Array_< double >::size_type n, double const & fillValue)

        Parameters
        ----------
        n: SimTK::Array_< double >::size_type
        fillValue: double const &

        """
        return _simbody.SimTKArrayDouble_assign(self, n, fillValue)

    def fill(self, fillValue):
        r"""
        fill(SimTKArrayDouble self, double const & fillValue)

        Parameters
        ----------
        fillValue: double const &

        """
        return _simbody.SimTKArrayDouble_fill(self, fillValue)

    def swap(self, other):
        r"""
        swap(SimTKArrayDouble self, SimTKArrayDouble other)

        Parameters
        ----------
        other: SimTK::Array_< double > &

        """
        return _simbody.SimTKArrayDouble_swap(self, other)

    def adoptData(self, *args):
        r"""
        adoptData(SimTKArrayDouble self, double * newData, SimTK::Array_< double >::size_type dataSize, SimTK::Array_< double >::size_type dataCapacity) -> SimTKArrayDouble

        Parameters
        ----------
        newData: double *
        dataSize: SimTK::Array_< double >::size_type
        dataCapacity: SimTK::Array_< double >::size_type

        adoptData(SimTKArrayDouble self, double * newData, SimTK::Array_< double >::size_type dataSize) -> SimTKArrayDouble

        Parameters
        ----------
        newData: double *
        dataSize: SimTK::Array_< double >::size_type

        """
        return _simbody.SimTKArrayDouble_adoptData(self, *args)

    def shareData(self, *args):
        r"""
        shareData(SimTKArrayDouble self, double * newData, SimTK::Array_< double >::size_type dataSize) -> SimTKArrayDouble

        Parameters
        ----------
        newData: double *
        dataSize: SimTK::Array_< double >::size_type

        shareData(SimTKArrayDouble self, double * first, double const * last1) -> SimTKArrayDouble

        Parameters
        ----------
        first: double *
        last1: double const *

        """
        return _simbody.SimTKArrayDouble_shareData(self, *args)

    def size(self):
        r"""size(SimTKArrayDouble self) -> SimTK::Array_< double >::size_type"""
        return _simbody.SimTKArrayDouble_size(self)

    def max_size(self):
        r"""max_size(SimTKArrayDouble self) -> SimTK::Array_< double >::size_type"""
        return _simbody.SimTKArrayDouble_max_size(self)

    def empty(self):
        r"""empty(SimTKArrayDouble self) -> bool"""
        return _simbody.SimTKArrayDouble_empty(self)

    def capacity(self):
        r"""capacity(SimTKArrayDouble self) -> SimTK::Array_< double >::size_type"""
        return _simbody.SimTKArrayDouble_capacity(self)

    def resize(self, *args):
        r"""
        resize(SimTKArrayDouble self, SimTK::Array_< double >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< double >::size_type

        resize(SimTKArrayDouble self, SimTK::Array_< double >::size_type n, double const & initVal)

        Parameters
        ----------
        n: SimTK::Array_< double >::size_type
        initVal: double const &

        """
        return _simbody.SimTKArrayDouble_resize(self, *args)

    def reserve(self, n):
        r"""
        reserve(SimTKArrayDouble self, SimTK::Array_< double >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< double >::size_type

        """
        return _simbody.SimTKArrayDouble_reserve(self, n)

    def shrink_to_fit(self):
        r"""shrink_to_fit(SimTKArrayDouble self)"""
        return _simbody.SimTKArrayDouble_shrink_to_fit(self)

    def allocated(self):
        r"""allocated(SimTKArrayDouble self) -> SimTK::Array_< double >::size_type"""
        return _simbody.SimTKArrayDouble_allocated(self)

    def isOwner(self):
        r"""isOwner(SimTKArrayDouble self) -> bool"""
        return _simbody.SimTKArrayDouble_isOwner(self)

    def cbegin(self):
        r"""cbegin(SimTKArrayDouble self) -> double const *"""
        return _simbody.SimTKArrayDouble_cbegin(self)

    def begin(self, *args):
        r"""
        begin(SimTKArrayDouble self) -> double const
        begin(SimTKArrayDouble self) -> double *
        """
        return _simbody.SimTKArrayDouble_begin(self, *args)

    def cend(self):
        r"""cend(SimTKArrayDouble self) -> double const *"""
        return _simbody.SimTKArrayDouble_cend(self)

    def end(self, *args):
        r"""
        end(SimTKArrayDouble self) -> double const
        end(SimTKArrayDouble self) -> double *
        """
        return _simbody.SimTKArrayDouble_end(self, *args)

    def crbegin(self):
        r"""crbegin(SimTKArrayDouble self) -> SimTK::Array_< double >::const_reverse_iterator"""
        return _simbody.SimTKArrayDouble_crbegin(self)

    def rbegin(self, *args):
        r"""
        rbegin(SimTKArrayDouble self) -> SimTK::Array_< double >::const_reverse_iterator
        rbegin(SimTKArrayDouble self) -> SimTK::Array_< double >::reverse_iterator
        """
        return _simbody.SimTKArrayDouble_rbegin(self, *args)

    def crend(self):
        r"""crend(SimTKArrayDouble self) -> SimTK::Array_< double >::const_reverse_iterator"""
        return _simbody.SimTKArrayDouble_crend(self)

    def rend(self, *args):
        r"""
        rend(SimTKArrayDouble self) -> SimTK::Array_< double >::const_reverse_iterator
        rend(SimTKArrayDouble self) -> SimTK::Array_< double >::reverse_iterator
        """
        return _simbody.SimTKArrayDouble_rend(self, *args)

    def cdata(self):
        r"""cdata(SimTKArrayDouble self) -> double const *"""
        return _simbody.SimTKArrayDouble_cdata(self)

    def data(self, *args):
        r"""
        data(SimTKArrayDouble self) -> double const
        data(SimTKArrayDouble self) -> double *
        """
        return _simbody.SimTKArrayDouble_data(self, *args)

    def at(self, *args):
        r"""
        at(SimTKArrayDouble self, SimTK::Array_< double >::index_type i) -> double const

        Parameters
        ----------
        i: SimTK::Array_< double >::index_type

        at(SimTKArrayDouble self, SimTK::Array_< double >::index_type i) -> double &

        Parameters
        ----------
        i: SimTK::Array_< double >::index_type

        """
        return _simbody.SimTKArrayDouble_at(self, *args)

    def getElt(self, i):
        r"""
        getElt(SimTKArrayDouble self, SimTK::Array_< double >::index_type i) -> double const &

        Parameters
        ----------
        i: SimTK::Array_< double >::index_type

        """
        return _simbody.SimTKArrayDouble_getElt(self, i)

    def updElt(self, i):
        r"""
        updElt(SimTKArrayDouble self, SimTK::Array_< double >::index_type i) -> double &

        Parameters
        ----------
        i: SimTK::Array_< double >::index_type

        """
        return _simbody.SimTKArrayDouble_updElt(self, i)

    def front(self, *args):
        r"""
        front(SimTKArrayDouble self) -> double const
        front(SimTKArrayDouble self) -> double &
        """
        return _simbody.SimTKArrayDouble_front(self, *args)

    def back(self, *args):
        r"""
        back(SimTKArrayDouble self) -> double const
        back(SimTKArrayDouble self) -> double &
        """
        return _simbody.SimTKArrayDouble_back(self, *args)

    def push_back(self, *args):
        r"""
        push_back(SimTKArrayDouble self, double const & value)

        Parameters
        ----------
        value: double const &

        push_back(SimTKArrayDouble self)
        """
        return _simbody.SimTKArrayDouble_push_back(self, *args)

    def raw_push_back(self):
        r"""raw_push_back(SimTKArrayDouble self) -> double *"""
        return _simbody.SimTKArrayDouble_raw_push_back(self)

    def pop_back(self):
        r"""pop_back(SimTKArrayDouble self)"""
        return _simbody.SimTKArrayDouble_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SimTKArrayDouble self, double * first, double const * last1) -> double

        Parameters
        ----------
        first: double *
        last1: double const *

        erase(SimTKArrayDouble self, double * p) -> double *

        Parameters
        ----------
        p: double *

        """
        return _simbody.SimTKArrayDouble_erase(self, *args)

    def eraseFast(self, p):
        r"""
        eraseFast(SimTKArrayDouble self, double * p) -> double *

        Parameters
        ----------
        p: double *

        """
        return _simbody.SimTKArrayDouble_eraseFast(self, p)

    def clear(self):
        r"""clear(SimTKArrayDouble self)"""
        return _simbody.SimTKArrayDouble_clear(self)

    def insert(self, *args):
        r"""
        insert(SimTKArrayDouble self, double * p, SimTK::Array_< double >::size_type n, double const & value) -> double

        Parameters
        ----------
        p: double *
        n: SimTK::Array_< double >::size_type
        value: double const &

        insert(SimTKArrayDouble self, double * p, double const & value) -> double *

        Parameters
        ----------
        p: double *
        value: double const &

        """
        return _simbody.SimTKArrayDouble_insert(self, *args)

# Register SimTKArrayDouble in _simbody:
_simbody.SimTKArrayDouble_swigregister(SimTKArrayDouble)
class SimTKArrayVec3(object):
    r"""Proxy of C++ SimTK::Array_< SimTK::Vec3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimTKArrayVec3 self) -> SimTKArrayVec3
        __init__(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n) -> SimTKArrayVec3

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        __init__(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 initVal) -> SimTKArrayVec3

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
        initVal: SimTK::Vec< 3,double,1 > const &

        __init__(SimTKArrayVec3 self, SimTKArrayVec3 src) -> SimTKArrayVec3

        Parameters
        ----------
        src: SimTK::Array_< SimTK::Vec3 > const &

        __init__(SimTKArrayVec3 self, Vec3 first, Vec3 last1, DontCopy arg4) -> SimTKArrayVec3

        Parameters
        ----------
        first: SimTK::Vec< 3,double,1 > *
        last1: SimTK::Vec< 3,double,1 > const *
        arg4: SimTK::DontCopy const &

        """
        _simbody.SimTKArrayVec3_swiginit(self, _simbody.new_SimTKArrayVec3(*args))
    __swig_destroy__ = _simbody.delete_SimTKArrayVec3

    def deallocate(self):
        r"""deallocate(SimTKArrayVec3 self) -> SimTKArrayVec3"""
        return _simbody.SimTKArrayVec3_deallocate(self)

    def assign(self, n, fillValue):
        r"""
        assign(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 fillValue)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
        fillValue: SimTK::Vec< 3,double,1 > const &

        """
        return _simbody.SimTKArrayVec3_assign(self, n, fillValue)

    def fill(self, fillValue):
        r"""
        fill(SimTKArrayVec3 self, Vec3 fillValue)

        Parameters
        ----------
        fillValue: SimTK::Vec< 3,double,1 > const &

        """
        return _simbody.SimTKArrayVec3_fill(self, fillValue)

    def swap(self, other):
        r"""
        swap(SimTKArrayVec3 self, SimTKArrayVec3 other)

        Parameters
        ----------
        other: SimTK::Array_< SimTK::Vec3 > &

        """
        return _simbody.SimTKArrayVec3_swap(self, other)

    def adoptData(self, *args):
        r"""
        adoptData(SimTKArrayVec3 self, Vec3 newData, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type dataSize, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type dataCapacity) -> SimTKArrayVec3

        Parameters
        ----------
        newData: SimTK::Vec< 3,double,1 > *
        dataSize: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
        dataCapacity: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        adoptData(SimTKArrayVec3 self, Vec3 newData, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type dataSize) -> SimTKArrayVec3

        Parameters
        ----------
        newData: SimTK::Vec< 3,double,1 > *
        dataSize: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        """
        return _simbody.SimTKArrayVec3_adoptData(self, *args)

    def shareData(self, *args):
        r"""
        shareData(SimTKArrayVec3 self, Vec3 newData, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type dataSize) -> SimTKArrayVec3

        Parameters
        ----------
        newData: SimTK::Vec< 3,double,1 > *
        dataSize: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        shareData(SimTKArrayVec3 self, Vec3 first, Vec3 last1) -> SimTKArrayVec3

        Parameters
        ----------
        first: SimTK::Vec< 3,double,1 > *
        last1: SimTK::Vec< 3,double,1 > const *

        """
        return _simbody.SimTKArrayVec3_shareData(self, *args)

    def size(self):
        r"""size(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type"""
        return _simbody.SimTKArrayVec3_size(self)

    def max_size(self):
        r"""max_size(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type"""
        return _simbody.SimTKArrayVec3_max_size(self)

    def empty(self):
        r"""empty(SimTKArrayVec3 self) -> bool"""
        return _simbody.SimTKArrayVec3_empty(self)

    def capacity(self):
        r"""capacity(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type"""
        return _simbody.SimTKArrayVec3_capacity(self)

    def resize(self, *args):
        r"""
        resize(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        resize(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 initVal)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
        initVal: SimTK::Vec< 3,double,1 > const &

        """
        return _simbody.SimTKArrayVec3_resize(self, *args)

    def reserve(self, n):
        r"""
        reserve(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type

        """
        return _simbody.SimTKArrayVec3_reserve(self, n)

    def shrink_to_fit(self):
        r"""shrink_to_fit(SimTKArrayVec3 self)"""
        return _simbody.SimTKArrayVec3_shrink_to_fit(self)

    def allocated(self):
        r"""allocated(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type"""
        return _simbody.SimTKArrayVec3_allocated(self)

    def isOwner(self):
        r"""isOwner(SimTKArrayVec3 self) -> bool"""
        return _simbody.SimTKArrayVec3_isOwner(self)

    def cbegin(self):
        r"""cbegin(SimTKArrayVec3 self) -> Vec3"""
        return _simbody.SimTKArrayVec3_cbegin(self)

    def begin(self, *args):
        r"""
        begin(SimTKArrayVec3 self) -> Vec3
        begin(SimTKArrayVec3 self) -> Vec3
        """
        return _simbody.SimTKArrayVec3_begin(self, *args)

    def cend(self):
        r"""cend(SimTKArrayVec3 self) -> Vec3"""
        return _simbody.SimTKArrayVec3_cend(self)

    def end(self, *args):
        r"""
        end(SimTKArrayVec3 self) -> Vec3
        end(SimTKArrayVec3 self) -> Vec3
        """
        return _simbody.SimTKArrayVec3_end(self, *args)

    def crbegin(self):
        r"""crbegin(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::const_reverse_iterator"""
        return _simbody.SimTKArrayVec3_crbegin(self)

    def rbegin(self, *args):
        r"""
        rbegin(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::const_reverse_iterator
        rbegin(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::reverse_iterator
        """
        return _simbody.SimTKArrayVec3_rbegin(self, *args)

    def crend(self):
        r"""crend(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::const_reverse_iterator"""
        return _simbody.SimTKArrayVec3_crend(self)

    def rend(self, *args):
        r"""
        rend(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::const_reverse_iterator
        rend(SimTKArrayVec3 self) -> SimTK::Array_< SimTK::Vec< 3,double,1 > >::reverse_iterator
        """
        return _simbody.SimTKArrayVec3_rend(self, *args)

    def cdata(self):
        r"""cdata(SimTKArrayVec3 self) -> Vec3"""
        return _simbody.SimTKArrayVec3_cdata(self)

    def data(self, *args):
        r"""
        data(SimTKArrayVec3 self) -> Vec3
        data(SimTKArrayVec3 self) -> Vec3
        """
        return _simbody.SimTKArrayVec3_data(self, *args)

    def at(self, *args):
        r"""
        at(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type i) -> Vec3

        Parameters
        ----------
        i: SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type

        at(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type i) -> Vec3

        Parameters
        ----------
        i: SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type

        """
        return _simbody.SimTKArrayVec3_at(self, *args)

    def getElt(self, i):
        r"""
        getElt(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type i) -> Vec3

        Parameters
        ----------
        i: SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type

        """
        return _simbody.SimTKArrayVec3_getElt(self, i)

    def updElt(self, i):
        r"""
        updElt(SimTKArrayVec3 self, SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type i) -> Vec3

        Parameters
        ----------
        i: SimTK::Array_< SimTK::Vec< 3,double,1 > >::index_type

        """
        return _simbody.SimTKArrayVec3_updElt(self, i)

    def front(self, *args):
        r"""
        front(SimTKArrayVec3 self) -> Vec3
        front(SimTKArrayVec3 self) -> Vec3
        """
        return _simbody.SimTKArrayVec3_front(self, *args)

    def back(self, *args):
        r"""
        back(SimTKArrayVec3 self) -> Vec3
        back(SimTKArrayVec3 self) -> Vec3
        """
        return _simbody.SimTKArrayVec3_back(self, *args)

    def push_back(self, *args):
        r"""
        push_back(SimTKArrayVec3 self, Vec3 value)

        Parameters
        ----------
        value: SimTK::Vec< 3,double,1 > const &

        push_back(SimTKArrayVec3 self)
        """
        return _simbody.SimTKArrayVec3_push_back(self, *args)

    def raw_push_back(self):
        r"""raw_push_back(SimTKArrayVec3 self) -> Vec3"""
        return _simbody.SimTKArrayVec3_raw_push_back(self)

    def pop_back(self):
        r"""pop_back(SimTKArrayVec3 self)"""
        return _simbody.SimTKArrayVec3_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SimTKArrayVec3 self, Vec3 first, Vec3 last1) -> Vec3

        Parameters
        ----------
        first: SimTK::Vec< 3,double,1 > *
        last1: SimTK::Vec< 3,double,1 > const *

        erase(SimTKArrayVec3 self, Vec3 p) -> Vec3

        Parameters
        ----------
        p: SimTK::Vec< 3,double,1 > *

        """
        return _simbody.SimTKArrayVec3_erase(self, *args)

    def eraseFast(self, p):
        r"""
        eraseFast(SimTKArrayVec3 self, Vec3 p) -> Vec3

        Parameters
        ----------
        p: SimTK::Vec< 3,double,1 > *

        """
        return _simbody.SimTKArrayVec3_eraseFast(self, p)

    def clear(self):
        r"""clear(SimTKArrayVec3 self)"""
        return _simbody.SimTKArrayVec3_clear(self)

    def insert(self, *args):
        r"""
        insert(SimTKArrayVec3 self, Vec3 p, SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type n, Vec3 value) -> Vec3

        Parameters
        ----------
        p: SimTK::Vec< 3,double,1 > *
        n: SimTK::Array_< SimTK::Vec< 3,double,1 > >::size_type
        value: SimTK::Vec< 3,double,1 > const &

        insert(SimTKArrayVec3 self, Vec3 p, Vec3 value) -> Vec3

        Parameters
        ----------
        p: SimTK::Vec< 3,double,1 > *
        value: SimTK::Vec< 3,double,1 > const &

        """
        return _simbody.SimTKArrayVec3_insert(self, *args)

# Register SimTKArrayVec3 in _simbody:
_simbody.SimTKArrayVec3_swigregister(SimTKArrayVec3)
class SimTKArrayInt(object):
    r"""Proxy of C++ SimTK::Array_< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimTKArrayInt self) -> SimTKArrayInt
        __init__(SimTKArrayInt self, SimTK::Array_< int >::size_type n) -> SimTKArrayInt

        Parameters
        ----------
        n: SimTK::Array_< int >::size_type

        __init__(SimTKArrayInt self, SimTK::Array_< int >::size_type n, int const & initVal) -> SimTKArrayInt

        Parameters
        ----------
        n: SimTK::Array_< int >::size_type
        initVal: int const &

        __init__(SimTKArrayInt self, SimTKArrayInt src) -> SimTKArrayInt

        Parameters
        ----------
        src: SimTK::Array_< int > const &

        __init__(SimTKArrayInt self, int * first, int const * last1, DontCopy arg4) -> SimTKArrayInt

        Parameters
        ----------
        first: int *
        last1: int const *
        arg4: SimTK::DontCopy const &

        """
        _simbody.SimTKArrayInt_swiginit(self, _simbody.new_SimTKArrayInt(*args))
    __swig_destroy__ = _simbody.delete_SimTKArrayInt

    def deallocate(self):
        r"""deallocate(SimTKArrayInt self) -> SimTKArrayInt"""
        return _simbody.SimTKArrayInt_deallocate(self)

    def assign(self, n, fillValue):
        r"""
        assign(SimTKArrayInt self, SimTK::Array_< int >::size_type n, int const & fillValue)

        Parameters
        ----------
        n: SimTK::Array_< int >::size_type
        fillValue: int const &

        """
        return _simbody.SimTKArrayInt_assign(self, n, fillValue)

    def fill(self, fillValue):
        r"""
        fill(SimTKArrayInt self, int const & fillValue)

        Parameters
        ----------
        fillValue: int const &

        """
        return _simbody.SimTKArrayInt_fill(self, fillValue)

    def swap(self, other):
        r"""
        swap(SimTKArrayInt self, SimTKArrayInt other)

        Parameters
        ----------
        other: SimTK::Array_< int > &

        """
        return _simbody.SimTKArrayInt_swap(self, other)

    def adoptData(self, *args):
        r"""
        adoptData(SimTKArrayInt self, int * newData, SimTK::Array_< int >::size_type dataSize, SimTK::Array_< int >::size_type dataCapacity) -> SimTKArrayInt

        Parameters
        ----------
        newData: int *
        dataSize: SimTK::Array_< int >::size_type
        dataCapacity: SimTK::Array_< int >::size_type

        adoptData(SimTKArrayInt self, int * newData, SimTK::Array_< int >::size_type dataSize) -> SimTKArrayInt

        Parameters
        ----------
        newData: int *
        dataSize: SimTK::Array_< int >::size_type

        """
        return _simbody.SimTKArrayInt_adoptData(self, *args)

    def shareData(self, *args):
        r"""
        shareData(SimTKArrayInt self, int * newData, SimTK::Array_< int >::size_type dataSize) -> SimTKArrayInt

        Parameters
        ----------
        newData: int *
        dataSize: SimTK::Array_< int >::size_type

        shareData(SimTKArrayInt self, int * first, int const * last1) -> SimTKArrayInt

        Parameters
        ----------
        first: int *
        last1: int const *

        """
        return _simbody.SimTKArrayInt_shareData(self, *args)

    def size(self):
        r"""size(SimTKArrayInt self) -> SimTK::Array_< int >::size_type"""
        return _simbody.SimTKArrayInt_size(self)

    def max_size(self):
        r"""max_size(SimTKArrayInt self) -> SimTK::Array_< int >::size_type"""
        return _simbody.SimTKArrayInt_max_size(self)

    def empty(self):
        r"""empty(SimTKArrayInt self) -> bool"""
        return _simbody.SimTKArrayInt_empty(self)

    def capacity(self):
        r"""capacity(SimTKArrayInt self) -> SimTK::Array_< int >::size_type"""
        return _simbody.SimTKArrayInt_capacity(self)

    def resize(self, *args):
        r"""
        resize(SimTKArrayInt self, SimTK::Array_< int >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< int >::size_type

        resize(SimTKArrayInt self, SimTK::Array_< int >::size_type n, int const & initVal)

        Parameters
        ----------
        n: SimTK::Array_< int >::size_type
        initVal: int const &

        """
        return _simbody.SimTKArrayInt_resize(self, *args)

    def reserve(self, n):
        r"""
        reserve(SimTKArrayInt self, SimTK::Array_< int >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< int >::size_type

        """
        return _simbody.SimTKArrayInt_reserve(self, n)

    def shrink_to_fit(self):
        r"""shrink_to_fit(SimTKArrayInt self)"""
        return _simbody.SimTKArrayInt_shrink_to_fit(self)

    def allocated(self):
        r"""allocated(SimTKArrayInt self) -> SimTK::Array_< int >::size_type"""
        return _simbody.SimTKArrayInt_allocated(self)

    def isOwner(self):
        r"""isOwner(SimTKArrayInt self) -> bool"""
        return _simbody.SimTKArrayInt_isOwner(self)

    def cbegin(self):
        r"""cbegin(SimTKArrayInt self) -> int const *"""
        return _simbody.SimTKArrayInt_cbegin(self)

    def begin(self, *args):
        r"""
        begin(SimTKArrayInt self) -> int const
        begin(SimTKArrayInt self) -> int *
        """
        return _simbody.SimTKArrayInt_begin(self, *args)

    def cend(self):
        r"""cend(SimTKArrayInt self) -> int const *"""
        return _simbody.SimTKArrayInt_cend(self)

    def end(self, *args):
        r"""
        end(SimTKArrayInt self) -> int const
        end(SimTKArrayInt self) -> int *
        """
        return _simbody.SimTKArrayInt_end(self, *args)

    def crbegin(self):
        r"""crbegin(SimTKArrayInt self) -> SimTK::Array_< int >::const_reverse_iterator"""
        return _simbody.SimTKArrayInt_crbegin(self)

    def rbegin(self, *args):
        r"""
        rbegin(SimTKArrayInt self) -> SimTK::Array_< int >::const_reverse_iterator
        rbegin(SimTKArrayInt self) -> SimTK::Array_< int >::reverse_iterator
        """
        return _simbody.SimTKArrayInt_rbegin(self, *args)

    def crend(self):
        r"""crend(SimTKArrayInt self) -> SimTK::Array_< int >::const_reverse_iterator"""
        return _simbody.SimTKArrayInt_crend(self)

    def rend(self, *args):
        r"""
        rend(SimTKArrayInt self) -> SimTK::Array_< int >::const_reverse_iterator
        rend(SimTKArrayInt self) -> SimTK::Array_< int >::reverse_iterator
        """
        return _simbody.SimTKArrayInt_rend(self, *args)

    def cdata(self):
        r"""cdata(SimTKArrayInt self) -> int const *"""
        return _simbody.SimTKArrayInt_cdata(self)

    def data(self, *args):
        r"""
        data(SimTKArrayInt self) -> int const
        data(SimTKArrayInt self) -> int *
        """
        return _simbody.SimTKArrayInt_data(self, *args)

    def at(self, *args):
        r"""
        at(SimTKArrayInt self, SimTK::Array_< int >::index_type i) -> int const

        Parameters
        ----------
        i: SimTK::Array_< int >::index_type

        at(SimTKArrayInt self, SimTK::Array_< int >::index_type i) -> int &

        Parameters
        ----------
        i: SimTK::Array_< int >::index_type

        """
        return _simbody.SimTKArrayInt_at(self, *args)

    def getElt(self, i):
        r"""
        getElt(SimTKArrayInt self, SimTK::Array_< int >::index_type i) -> int const &

        Parameters
        ----------
        i: SimTK::Array_< int >::index_type

        """
        return _simbody.SimTKArrayInt_getElt(self, i)

    def updElt(self, i):
        r"""
        updElt(SimTKArrayInt self, SimTK::Array_< int >::index_type i) -> int &

        Parameters
        ----------
        i: SimTK::Array_< int >::index_type

        """
        return _simbody.SimTKArrayInt_updElt(self, i)

    def front(self, *args):
        r"""
        front(SimTKArrayInt self) -> int const
        front(SimTKArrayInt self) -> int &
        """
        return _simbody.SimTKArrayInt_front(self, *args)

    def back(self, *args):
        r"""
        back(SimTKArrayInt self) -> int const
        back(SimTKArrayInt self) -> int &
        """
        return _simbody.SimTKArrayInt_back(self, *args)

    def push_back(self, *args):
        r"""
        push_back(SimTKArrayInt self, int const & value)

        Parameters
        ----------
        value: int const &

        push_back(SimTKArrayInt self)
        """
        return _simbody.SimTKArrayInt_push_back(self, *args)

    def raw_push_back(self):
        r"""raw_push_back(SimTKArrayInt self) -> int *"""
        return _simbody.SimTKArrayInt_raw_push_back(self)

    def pop_back(self):
        r"""pop_back(SimTKArrayInt self)"""
        return _simbody.SimTKArrayInt_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SimTKArrayInt self, int * first, int const * last1) -> int

        Parameters
        ----------
        first: int *
        last1: int const *

        erase(SimTKArrayInt self, int * p) -> int *

        Parameters
        ----------
        p: int *

        """
        return _simbody.SimTKArrayInt_erase(self, *args)

    def eraseFast(self, p):
        r"""
        eraseFast(SimTKArrayInt self, int * p) -> int *

        Parameters
        ----------
        p: int *

        """
        return _simbody.SimTKArrayInt_eraseFast(self, p)

    def clear(self):
        r"""clear(SimTKArrayInt self)"""
        return _simbody.SimTKArrayInt_clear(self)

    def insert(self, *args):
        r"""
        insert(SimTKArrayInt self, int * p, SimTK::Array_< int >::size_type n, int const & value) -> int

        Parameters
        ----------
        p: int *
        n: SimTK::Array_< int >::size_type
        value: int const &

        insert(SimTKArrayInt self, int * p, int const & value) -> int *

        Parameters
        ----------
        p: int *
        value: int const &

        """
        return _simbody.SimTKArrayInt_insert(self, *args)

# Register SimTKArrayInt in _simbody:
_simbody.SimTKArrayInt_swigregister(SimTKArrayInt)
class SimTKArrayRotation(object):
    r"""Proxy of C++ SimTK::Array_< SimTK::Rotation_< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimTKArrayRotation self) -> SimTKArrayRotation
        __init__(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::size_type n) -> SimTKArrayRotation

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Rotation_< double > >::size_type

        __init__(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::size_type n, Rotation initVal) -> SimTKArrayRotation

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Rotation_< double > >::size_type
        initVal: SimTK::Rotation_< double > const &

        __init__(SimTKArrayRotation self, SimTKArrayRotation src) -> SimTKArrayRotation

        Parameters
        ----------
        src: SimTK::Array_< SimTK::Rotation_< double > > const &

        __init__(SimTKArrayRotation self, Rotation first, Rotation last1, DontCopy arg4) -> SimTKArrayRotation

        Parameters
        ----------
        first: SimTK::Rotation_< double > *
        last1: SimTK::Rotation_< double > const *
        arg4: SimTK::DontCopy const &

        """
        _simbody.SimTKArrayRotation_swiginit(self, _simbody.new_SimTKArrayRotation(*args))
    __swig_destroy__ = _simbody.delete_SimTKArrayRotation

    def deallocate(self):
        r"""deallocate(SimTKArrayRotation self) -> SimTKArrayRotation"""
        return _simbody.SimTKArrayRotation_deallocate(self)

    def assign(self, n, fillValue):
        r"""
        assign(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::size_type n, Rotation fillValue)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Rotation_< double > >::size_type
        fillValue: SimTK::Rotation_< double > const &

        """
        return _simbody.SimTKArrayRotation_assign(self, n, fillValue)

    def fill(self, fillValue):
        r"""
        fill(SimTKArrayRotation self, Rotation fillValue)

        Parameters
        ----------
        fillValue: SimTK::Rotation_< double > const &

        """
        return _simbody.SimTKArrayRotation_fill(self, fillValue)

    def swap(self, other):
        r"""
        swap(SimTKArrayRotation self, SimTKArrayRotation other)

        Parameters
        ----------
        other: SimTK::Array_< SimTK::Rotation_< double > > &

        """
        return _simbody.SimTKArrayRotation_swap(self, other)

    def adoptData(self, *args):
        r"""
        adoptData(SimTKArrayRotation self, Rotation newData, SimTK::Array_< SimTK::Rotation_< double > >::size_type dataSize, SimTK::Array_< SimTK::Rotation_< double > >::size_type dataCapacity) -> SimTKArrayRotation

        Parameters
        ----------
        newData: SimTK::Rotation_< double > *
        dataSize: SimTK::Array_< SimTK::Rotation_< double > >::size_type
        dataCapacity: SimTK::Array_< SimTK::Rotation_< double > >::size_type

        adoptData(SimTKArrayRotation self, Rotation newData, SimTK::Array_< SimTK::Rotation_< double > >::size_type dataSize) -> SimTKArrayRotation

        Parameters
        ----------
        newData: SimTK::Rotation_< double > *
        dataSize: SimTK::Array_< SimTK::Rotation_< double > >::size_type

        """
        return _simbody.SimTKArrayRotation_adoptData(self, *args)

    def shareData(self, *args):
        r"""
        shareData(SimTKArrayRotation self, Rotation newData, SimTK::Array_< SimTK::Rotation_< double > >::size_type dataSize) -> SimTKArrayRotation

        Parameters
        ----------
        newData: SimTK::Rotation_< double > *
        dataSize: SimTK::Array_< SimTK::Rotation_< double > >::size_type

        shareData(SimTKArrayRotation self, Rotation first, Rotation last1) -> SimTKArrayRotation

        Parameters
        ----------
        first: SimTK::Rotation_< double > *
        last1: SimTK::Rotation_< double > const *

        """
        return _simbody.SimTKArrayRotation_shareData(self, *args)

    def size(self):
        r"""size(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::size_type"""
        return _simbody.SimTKArrayRotation_size(self)

    def max_size(self):
        r"""max_size(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::size_type"""
        return _simbody.SimTKArrayRotation_max_size(self)

    def empty(self):
        r"""empty(SimTKArrayRotation self) -> bool"""
        return _simbody.SimTKArrayRotation_empty(self)

    def capacity(self):
        r"""capacity(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::size_type"""
        return _simbody.SimTKArrayRotation_capacity(self)

    def resize(self, *args):
        r"""
        resize(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Rotation_< double > >::size_type

        resize(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::size_type n, Rotation initVal)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Rotation_< double > >::size_type
        initVal: SimTK::Rotation_< double > const &

        """
        return _simbody.SimTKArrayRotation_resize(self, *args)

    def reserve(self, n):
        r"""
        reserve(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::Rotation_< double > >::size_type

        """
        return _simbody.SimTKArrayRotation_reserve(self, n)

    def shrink_to_fit(self):
        r"""shrink_to_fit(SimTKArrayRotation self)"""
        return _simbody.SimTKArrayRotation_shrink_to_fit(self)

    def allocated(self):
        r"""allocated(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::size_type"""
        return _simbody.SimTKArrayRotation_allocated(self)

    def isOwner(self):
        r"""isOwner(SimTKArrayRotation self) -> bool"""
        return _simbody.SimTKArrayRotation_isOwner(self)

    def cbegin(self):
        r"""cbegin(SimTKArrayRotation self) -> Rotation"""
        return _simbody.SimTKArrayRotation_cbegin(self)

    def begin(self, *args):
        r"""
        begin(SimTKArrayRotation self) -> Rotation
        begin(SimTKArrayRotation self) -> Rotation
        """
        return _simbody.SimTKArrayRotation_begin(self, *args)

    def cend(self):
        r"""cend(SimTKArrayRotation self) -> Rotation"""
        return _simbody.SimTKArrayRotation_cend(self)

    def end(self, *args):
        r"""
        end(SimTKArrayRotation self) -> Rotation
        end(SimTKArrayRotation self) -> Rotation
        """
        return _simbody.SimTKArrayRotation_end(self, *args)

    def crbegin(self):
        r"""crbegin(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::const_reverse_iterator"""
        return _simbody.SimTKArrayRotation_crbegin(self)

    def rbegin(self, *args):
        r"""
        rbegin(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::const_reverse_iterator
        rbegin(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::reverse_iterator
        """
        return _simbody.SimTKArrayRotation_rbegin(self, *args)

    def crend(self):
        r"""crend(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::const_reverse_iterator"""
        return _simbody.SimTKArrayRotation_crend(self)

    def rend(self, *args):
        r"""
        rend(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::const_reverse_iterator
        rend(SimTKArrayRotation self) -> SimTK::Array_< SimTK::Rotation_< double > >::reverse_iterator
        """
        return _simbody.SimTKArrayRotation_rend(self, *args)

    def cdata(self):
        r"""cdata(SimTKArrayRotation self) -> Rotation"""
        return _simbody.SimTKArrayRotation_cdata(self)

    def data(self, *args):
        r"""
        data(SimTKArrayRotation self) -> Rotation
        data(SimTKArrayRotation self) -> Rotation
        """
        return _simbody.SimTKArrayRotation_data(self, *args)

    def at(self, *args):
        r"""
        at(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::index_type i) -> Rotation

        Parameters
        ----------
        i: SimTK::Array_< SimTK::Rotation_< double > >::index_type

        at(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::index_type i) -> Rotation

        Parameters
        ----------
        i: SimTK::Array_< SimTK::Rotation_< double > >::index_type

        """
        return _simbody.SimTKArrayRotation_at(self, *args)

    def getElt(self, i):
        r"""
        getElt(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::index_type i) -> Rotation

        Parameters
        ----------
        i: SimTK::Array_< SimTK::Rotation_< double > >::index_type

        """
        return _simbody.SimTKArrayRotation_getElt(self, i)

    def updElt(self, i):
        r"""
        updElt(SimTKArrayRotation self, SimTK::Array_< SimTK::Rotation_< double > >::index_type i) -> Rotation

        Parameters
        ----------
        i: SimTK::Array_< SimTK::Rotation_< double > >::index_type

        """
        return _simbody.SimTKArrayRotation_updElt(self, i)

    def front(self, *args):
        r"""
        front(SimTKArrayRotation self) -> Rotation
        front(SimTKArrayRotation self) -> Rotation
        """
        return _simbody.SimTKArrayRotation_front(self, *args)

    def back(self, *args):
        r"""
        back(SimTKArrayRotation self) -> Rotation
        back(SimTKArrayRotation self) -> Rotation
        """
        return _simbody.SimTKArrayRotation_back(self, *args)

    def push_back(self, *args):
        r"""
        push_back(SimTKArrayRotation self, Rotation value)

        Parameters
        ----------
        value: SimTK::Rotation_< double > const &

        push_back(SimTKArrayRotation self)
        """
        return _simbody.SimTKArrayRotation_push_back(self, *args)

    def raw_push_back(self):
        r"""raw_push_back(SimTKArrayRotation self) -> Rotation"""
        return _simbody.SimTKArrayRotation_raw_push_back(self)

    def pop_back(self):
        r"""pop_back(SimTKArrayRotation self)"""
        return _simbody.SimTKArrayRotation_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SimTKArrayRotation self, Rotation first, Rotation last1) -> Rotation

        Parameters
        ----------
        first: SimTK::Rotation_< double > *
        last1: SimTK::Rotation_< double > const *

        erase(SimTKArrayRotation self, Rotation p) -> Rotation

        Parameters
        ----------
        p: SimTK::Rotation_< double > *

        """
        return _simbody.SimTKArrayRotation_erase(self, *args)

    def eraseFast(self, p):
        r"""
        eraseFast(SimTKArrayRotation self, Rotation p) -> Rotation

        Parameters
        ----------
        p: SimTK::Rotation_< double > *

        """
        return _simbody.SimTKArrayRotation_eraseFast(self, p)

    def clear(self):
        r"""clear(SimTKArrayRotation self)"""
        return _simbody.SimTKArrayRotation_clear(self)

    def insert(self, *args):
        r"""
        insert(SimTKArrayRotation self, Rotation p, SimTK::Array_< SimTK::Rotation_< double > >::size_type n, Rotation value) -> Rotation

        Parameters
        ----------
        p: SimTK::Rotation_< double > *
        n: SimTK::Array_< SimTK::Rotation_< double > >::size_type
        value: SimTK::Rotation_< double > const &

        insert(SimTKArrayRotation self, Rotation p, Rotation value) -> Rotation

        Parameters
        ----------
        p: SimTK::Rotation_< double > *
        value: SimTK::Rotation_< double > const &

        """
        return _simbody.SimTKArrayRotation_insert(self, *args)

# Register SimTKArrayRotation in _simbody:
_simbody.SimTKArrayRotation_swigregister(SimTKArrayRotation)
class SimTKArrayMobilizedBodyIndex(object):
    r"""Proxy of C++ SimTK::Array_< MobilizedBodyIndex > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimTKArrayMobilizedBodyIndex self) -> SimTKArrayMobilizedBodyIndex
        __init__(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::size_type n) -> SimTKArrayMobilizedBodyIndex

        Parameters
        ----------
        n: SimTK::Array_< MobilizedBodyIndex >::size_type

        __init__(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::size_type n, MobilizedBodyIndex const & initVal) -> SimTKArrayMobilizedBodyIndex

        Parameters
        ----------
        n: SimTK::Array_< MobilizedBodyIndex >::size_type
        initVal: MobilizedBodyIndex const &

        __init__(SimTKArrayMobilizedBodyIndex self, SimTKArrayMobilizedBodyIndex src) -> SimTKArrayMobilizedBodyIndex

        Parameters
        ----------
        src: SimTK::Array_< MobilizedBodyIndex > const &

        __init__(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * first, MobilizedBodyIndex const * last1, DontCopy arg4) -> SimTKArrayMobilizedBodyIndex

        Parameters
        ----------
        first: MobilizedBodyIndex *
        last1: MobilizedBodyIndex const *
        arg4: SimTK::DontCopy const &

        """
        _simbody.SimTKArrayMobilizedBodyIndex_swiginit(self, _simbody.new_SimTKArrayMobilizedBodyIndex(*args))
    __swig_destroy__ = _simbody.delete_SimTKArrayMobilizedBodyIndex

    def deallocate(self):
        r"""deallocate(SimTKArrayMobilizedBodyIndex self) -> SimTKArrayMobilizedBodyIndex"""
        return _simbody.SimTKArrayMobilizedBodyIndex_deallocate(self)

    def assign(self, n, fillValue):
        r"""
        assign(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::size_type n, MobilizedBodyIndex const & fillValue)

        Parameters
        ----------
        n: SimTK::Array_< MobilizedBodyIndex >::size_type
        fillValue: MobilizedBodyIndex const &

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_assign(self, n, fillValue)

    def fill(self, fillValue):
        r"""
        fill(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex const & fillValue)

        Parameters
        ----------
        fillValue: MobilizedBodyIndex const &

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_fill(self, fillValue)

    def swap(self, other):
        r"""
        swap(SimTKArrayMobilizedBodyIndex self, SimTKArrayMobilizedBodyIndex other)

        Parameters
        ----------
        other: SimTK::Array_< MobilizedBodyIndex > &

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_swap(self, other)

    def adoptData(self, *args):
        r"""
        adoptData(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * newData, SimTK::Array_< MobilizedBodyIndex >::size_type dataSize, SimTK::Array_< MobilizedBodyIndex >::size_type dataCapacity) -> SimTKArrayMobilizedBodyIndex

        Parameters
        ----------
        newData: MobilizedBodyIndex *
        dataSize: SimTK::Array_< MobilizedBodyIndex >::size_type
        dataCapacity: SimTK::Array_< MobilizedBodyIndex >::size_type

        adoptData(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * newData, SimTK::Array_< MobilizedBodyIndex >::size_type dataSize) -> SimTKArrayMobilizedBodyIndex

        Parameters
        ----------
        newData: MobilizedBodyIndex *
        dataSize: SimTK::Array_< MobilizedBodyIndex >::size_type

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_adoptData(self, *args)

    def shareData(self, *args):
        r"""
        shareData(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * newData, SimTK::Array_< MobilizedBodyIndex >::size_type dataSize) -> SimTKArrayMobilizedBodyIndex

        Parameters
        ----------
        newData: MobilizedBodyIndex *
        dataSize: SimTK::Array_< MobilizedBodyIndex >::size_type

        shareData(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * first, MobilizedBodyIndex const * last1) -> SimTKArrayMobilizedBodyIndex

        Parameters
        ----------
        first: MobilizedBodyIndex *
        last1: MobilizedBodyIndex const *

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_shareData(self, *args)

    def size(self):
        r"""size(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::size_type"""
        return _simbody.SimTKArrayMobilizedBodyIndex_size(self)

    def max_size(self):
        r"""max_size(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::size_type"""
        return _simbody.SimTKArrayMobilizedBodyIndex_max_size(self)

    def empty(self):
        r"""empty(SimTKArrayMobilizedBodyIndex self) -> bool"""
        return _simbody.SimTKArrayMobilizedBodyIndex_empty(self)

    def capacity(self):
        r"""capacity(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::size_type"""
        return _simbody.SimTKArrayMobilizedBodyIndex_capacity(self)

    def resize(self, *args):
        r"""
        resize(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< MobilizedBodyIndex >::size_type

        resize(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::size_type n, MobilizedBodyIndex const & initVal)

        Parameters
        ----------
        n: SimTK::Array_< MobilizedBodyIndex >::size_type
        initVal: MobilizedBodyIndex const &

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_resize(self, *args)

    def reserve(self, n):
        r"""
        reserve(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< MobilizedBodyIndex >::size_type

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_reserve(self, n)

    def shrink_to_fit(self):
        r"""shrink_to_fit(SimTKArrayMobilizedBodyIndex self)"""
        return _simbody.SimTKArrayMobilizedBodyIndex_shrink_to_fit(self)

    def allocated(self):
        r"""allocated(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::size_type"""
        return _simbody.SimTKArrayMobilizedBodyIndex_allocated(self)

    def isOwner(self):
        r"""isOwner(SimTKArrayMobilizedBodyIndex self) -> bool"""
        return _simbody.SimTKArrayMobilizedBodyIndex_isOwner(self)

    def cbegin(self):
        r"""cbegin(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex const *"""
        return _simbody.SimTKArrayMobilizedBodyIndex_cbegin(self)

    def begin(self, *args):
        r"""
        begin(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex const
        begin(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex *
        """
        return _simbody.SimTKArrayMobilizedBodyIndex_begin(self, *args)

    def cend(self):
        r"""cend(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex const *"""
        return _simbody.SimTKArrayMobilizedBodyIndex_cend(self)

    def end(self, *args):
        r"""
        end(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex const
        end(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex *
        """
        return _simbody.SimTKArrayMobilizedBodyIndex_end(self, *args)

    def crbegin(self):
        r"""crbegin(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::const_reverse_iterator"""
        return _simbody.SimTKArrayMobilizedBodyIndex_crbegin(self)

    def rbegin(self, *args):
        r"""
        rbegin(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::const_reverse_iterator
        rbegin(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::reverse_iterator
        """
        return _simbody.SimTKArrayMobilizedBodyIndex_rbegin(self, *args)

    def crend(self):
        r"""crend(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::const_reverse_iterator"""
        return _simbody.SimTKArrayMobilizedBodyIndex_crend(self)

    def rend(self, *args):
        r"""
        rend(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::const_reverse_iterator
        rend(SimTKArrayMobilizedBodyIndex self) -> SimTK::Array_< MobilizedBodyIndex >::reverse_iterator
        """
        return _simbody.SimTKArrayMobilizedBodyIndex_rend(self, *args)

    def cdata(self):
        r"""cdata(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex const *"""
        return _simbody.SimTKArrayMobilizedBodyIndex_cdata(self)

    def data(self, *args):
        r"""
        data(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex const
        data(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex *
        """
        return _simbody.SimTKArrayMobilizedBodyIndex_data(self, *args)

    def at(self, *args):
        r"""
        at(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::index_type i) -> MobilizedBodyIndex const

        Parameters
        ----------
        i: SimTK::Array_< MobilizedBodyIndex >::index_type

        at(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::index_type i) -> MobilizedBodyIndex &

        Parameters
        ----------
        i: SimTK::Array_< MobilizedBodyIndex >::index_type

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_at(self, *args)

    def getElt(self, i):
        r"""
        getElt(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::index_type i) -> MobilizedBodyIndex const &

        Parameters
        ----------
        i: SimTK::Array_< MobilizedBodyIndex >::index_type

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_getElt(self, i)

    def updElt(self, i):
        r"""
        updElt(SimTKArrayMobilizedBodyIndex self, SimTK::Array_< MobilizedBodyIndex >::index_type i) -> MobilizedBodyIndex &

        Parameters
        ----------
        i: SimTK::Array_< MobilizedBodyIndex >::index_type

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_updElt(self, i)

    def front(self, *args):
        r"""
        front(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex const
        front(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex &
        """
        return _simbody.SimTKArrayMobilizedBodyIndex_front(self, *args)

    def back(self, *args):
        r"""
        back(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex const
        back(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex &
        """
        return _simbody.SimTKArrayMobilizedBodyIndex_back(self, *args)

    def push_back(self, *args):
        r"""
        push_back(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex const & value)

        Parameters
        ----------
        value: MobilizedBodyIndex const &

        push_back(SimTKArrayMobilizedBodyIndex self)
        """
        return _simbody.SimTKArrayMobilizedBodyIndex_push_back(self, *args)

    def raw_push_back(self):
        r"""raw_push_back(SimTKArrayMobilizedBodyIndex self) -> MobilizedBodyIndex *"""
        return _simbody.SimTKArrayMobilizedBodyIndex_raw_push_back(self)

    def pop_back(self):
        r"""pop_back(SimTKArrayMobilizedBodyIndex self)"""
        return _simbody.SimTKArrayMobilizedBodyIndex_pop_back(self)

    def erase(self, *args):
        r"""
        erase(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * first, MobilizedBodyIndex const * last1) -> MobilizedBodyIndex

        Parameters
        ----------
        first: MobilizedBodyIndex *
        last1: MobilizedBodyIndex const *

        erase(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * p) -> MobilizedBodyIndex *

        Parameters
        ----------
        p: MobilizedBodyIndex *

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_erase(self, *args)

    def eraseFast(self, p):
        r"""
        eraseFast(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * p) -> MobilizedBodyIndex *

        Parameters
        ----------
        p: MobilizedBodyIndex *

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_eraseFast(self, p)

    def clear(self):
        r"""clear(SimTKArrayMobilizedBodyIndex self)"""
        return _simbody.SimTKArrayMobilizedBodyIndex_clear(self)

    def insert(self, *args):
        r"""
        insert(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * p, SimTK::Array_< MobilizedBodyIndex >::size_type n, MobilizedBodyIndex const & value) -> MobilizedBodyIndex

        Parameters
        ----------
        p: MobilizedBodyIndex *
        n: SimTK::Array_< MobilizedBodyIndex >::size_type
        value: MobilizedBodyIndex const &

        insert(SimTKArrayMobilizedBodyIndex self, MobilizedBodyIndex * p, MobilizedBodyIndex const & value) -> MobilizedBodyIndex *

        Parameters
        ----------
        p: MobilizedBodyIndex *
        value: MobilizedBodyIndex const &

        """
        return _simbody.SimTKArrayMobilizedBodyIndex_insert(self, *args)

# Register SimTKArrayMobilizedBodyIndex in _simbody:
_simbody.SimTKArrayMobilizedBodyIndex_swigregister(SimTKArrayMobilizedBodyIndex)
class ArrayIndexUnsigned(object):
    r"""Proxy of C++ SimTK::ArrayIndexTraits< unsigned int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def max_size():
        r"""max_size() -> SimTK::ArrayIndexTraits< unsigned int >::size_type"""
        return _simbody.ArrayIndexUnsigned_max_size()

    def __init__(self):
        r"""__init__(ArrayIndexUnsigned self) -> ArrayIndexUnsigned"""
        _simbody.ArrayIndexUnsigned_swiginit(self, _simbody.new_ArrayIndexUnsigned())
    __swig_destroy__ = _simbody.delete_ArrayIndexUnsigned

# Register ArrayIndexUnsigned in _simbody:
_simbody.ArrayIndexUnsigned_swigregister(ArrayIndexUnsigned)
class ArrayIndexInt(object):
    r"""Proxy of C++ SimTK::ArrayIndexTraits< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def max_size():
        r"""max_size() -> SimTK::ArrayIndexTraits< int >::size_type"""
        return _simbody.ArrayIndexInt_max_size()

    def __init__(self):
        r"""__init__(ArrayIndexInt self) -> ArrayIndexInt"""
        _simbody.ArrayIndexInt_swiginit(self, _simbody.new_ArrayIndexInt())
    __swig_destroy__ = _simbody.delete_ArrayIndexInt

# Register ArrayIndexInt in _simbody:
_simbody.ArrayIndexInt_swigregister(ArrayIndexInt)
class PolygonalMesh(object):
    r"""Proxy of C++ SimTK::PolygonalMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(PolygonalMesh self) -> PolygonalMesh"""
        _simbody.PolygonalMesh_swiginit(self, _simbody.new_PolygonalMesh())

    @staticmethod
    def createSphereMesh(radius, resolution=1):
        r"""
        createSphereMesh(SimTK::Real radius, int resolution=1) -> PolygonalMesh

        Parameters
        ----------
        radius: SimTK::Real
        resolution: int

        """
        return _simbody.PolygonalMesh_createSphereMesh(radius, resolution)

    @staticmethod
    def createBrickMesh(halfDims, resolution=1):
        r"""
        createBrickMesh(Vec3 halfDims, int resolution=1) -> PolygonalMesh

        Parameters
        ----------
        halfDims: SimTK::Vec3 const &
        resolution: int

        """
        return _simbody.PolygonalMesh_createBrickMesh(halfDims, resolution)

    @staticmethod
    def createCylinderMesh(axis, radius, halfLength, resolution=1):
        r"""
        createCylinderMesh(UnitVec3 axis, SimTK::Real radius, SimTK::Real halfLength, int resolution=1) -> PolygonalMesh

        Parameters
        ----------
        axis: SimTK::UnitVec3 const &
        radius: SimTK::Real
        halfLength: SimTK::Real
        resolution: int

        """
        return _simbody.PolygonalMesh_createCylinderMesh(axis, radius, halfLength, resolution)

    def clear(self):
        r"""clear(PolygonalMesh self)"""
        return _simbody.PolygonalMesh_clear(self)

    def getNumFaces(self):
        r"""getNumFaces(PolygonalMesh self) -> int"""
        return _simbody.PolygonalMesh_getNumFaces(self)

    def getNumVertices(self):
        r"""getNumVertices(PolygonalMesh self) -> int"""
        return _simbody.PolygonalMesh_getNumVertices(self)

    def hasNormals(self):
        r"""hasNormals(PolygonalMesh self) -> bool"""
        return _simbody.PolygonalMesh_hasNormals(self)

    def hasNormalsAtVertices(self):
        r"""hasNormalsAtVertices(PolygonalMesh self) -> bool"""
        return _simbody.PolygonalMesh_hasNormalsAtVertices(self)

    def hasNormalsAtFaces(self):
        r"""hasNormalsAtFaces(PolygonalMesh self) -> bool"""
        return _simbody.PolygonalMesh_hasNormalsAtFaces(self)

    def hasTextureCoordinates(self):
        r"""hasTextureCoordinates(PolygonalMesh self) -> bool"""
        return _simbody.PolygonalMesh_hasTextureCoordinates(self)

    def hasTextureCoordinatesAtFaces(self):
        r"""hasTextureCoordinatesAtFaces(PolygonalMesh self) -> bool"""
        return _simbody.PolygonalMesh_hasTextureCoordinatesAtFaces(self)

    def hasTextureCoordinatesAtVertices(self):
        r"""hasTextureCoordinatesAtVertices(PolygonalMesh self) -> bool"""
        return _simbody.PolygonalMesh_hasTextureCoordinatesAtVertices(self)

    def getVertexPosition(self, vertex):
        r"""
        getVertexPosition(PolygonalMesh self, int vertex) -> Vec3

        Parameters
        ----------
        vertex: int

        """
        return _simbody.PolygonalMesh_getVertexPosition(self, vertex)

    def getVertexNormal(self, *args):
        r"""
        getVertexNormal(PolygonalMesh self, int faceIndex, int vertexIndex) -> UnitVec3

        Parameters
        ----------
        faceIndex: int
        vertexIndex: int

        getVertexNormal(PolygonalMesh self, int vertex) -> UnitVec3

        Parameters
        ----------
        vertex: int

        """
        return _simbody.PolygonalMesh_getVertexNormal(self, *args)

    def getVertexTextureCoordinate(self, faceIndex, vertexIndex):
        r"""
        getVertexTextureCoordinate(PolygonalMesh self, int faceIndex, int vertexIndex) -> Vec2

        Parameters
        ----------
        faceIndex: int
        vertexIndex: int

        """
        return _simbody.PolygonalMesh_getVertexTextureCoordinate(self, faceIndex, vertexIndex)

    def getNumVerticesForFace(self, face):
        r"""
        getNumVerticesForFace(PolygonalMesh self, int face) -> int

        Parameters
        ----------
        face: int

        """
        return _simbody.PolygonalMesh_getNumVerticesForFace(self, face)

    def getFaceVertex(self, face, vertex):
        r"""
        getFaceVertex(PolygonalMesh self, int face, int vertex) -> int

        Parameters
        ----------
        face: int
        vertex: int

        """
        return _simbody.PolygonalMesh_getFaceVertex(self, face, vertex)

    def addVertex(self, position):
        r"""
        addVertex(PolygonalMesh self, Vec3 position) -> int

        Parameters
        ----------
        position: SimTK::Vec3 const &

        """
        return _simbody.PolygonalMesh_addVertex(self, position)

    def addNormal(self, normal):
        r"""
        addNormal(PolygonalMesh self, UnitVec3 normal) -> int

        Parameters
        ----------
        normal: SimTK::UnitVec3 const &

        """
        return _simbody.PolygonalMesh_addNormal(self, normal)

    def addTextureCoordinate(self, textureCoord):
        r"""
        addTextureCoordinate(PolygonalMesh self, Vec2 textureCoord) -> int

        Parameters
        ----------
        textureCoord: SimTK::Vec2 const &

        """
        return _simbody.PolygonalMesh_addTextureCoordinate(self, textureCoord)

    def addFace(self, vertices):
        r"""
        addFace(PolygonalMesh self, SimTKArrayInt vertices) -> int

        Parameters
        ----------
        vertices: SimTK::Array_< int > const &

        """
        return _simbody.PolygonalMesh_addFace(self, vertices)

    def addFaceWithNormals(self, vertices, normalIndices):
        r"""
        addFaceWithNormals(PolygonalMesh self, SimTKArrayInt vertices, SimTKArrayInt normalIndices) -> int

        Parameters
        ----------
        vertices: SimTK::Array_< int > const &
        normalIndices: SimTK::Array_< int > const &

        """
        return _simbody.PolygonalMesh_addFaceWithNormals(self, vertices, normalIndices)

    def addFaceTextureCoordinates(self, textureIndices):
        r"""
        addFaceTextureCoordinates(PolygonalMesh self, SimTKArrayInt textureIndices)

        Parameters
        ----------
        textureIndices: SimTK::Array_< int > const &

        """
        return _simbody.PolygonalMesh_addFaceTextureCoordinates(self, textureIndices)

    def scaleMesh(self, scale):
        r"""
        scaleMesh(PolygonalMesh self, SimTK::Real scale) -> PolygonalMesh

        Parameters
        ----------
        scale: SimTK::Real

        """
        return _simbody.PolygonalMesh_scaleMesh(self, scale)

    def transformMesh(self, X_AM):
        r"""
        transformMesh(PolygonalMesh self, Transform X_AM) -> PolygonalMesh

        Parameters
        ----------
        X_AM: SimTK::Transform const &

        """
        return _simbody.PolygonalMesh_transformMesh(self, X_AM)

    def loadObjFile(self, *args):
        r"""
        loadObjFile(PolygonalMesh self, String const & pathname)

        Parameters
        ----------
        pathname: String const &

        loadObjFile(PolygonalMesh self, std::istream & file)

        Parameters
        ----------
        file: std::istream &

        """
        return _simbody.PolygonalMesh_loadObjFile(self, *args)

    def loadVtpFile(self, pathname):
        r"""
        loadVtpFile(PolygonalMesh self, String const & pathname)

        Parameters
        ----------
        pathname: String const &

        """
        return _simbody.PolygonalMesh_loadVtpFile(self, pathname)

    def loadStlFile(self, pathname):
        r"""
        loadStlFile(PolygonalMesh self, String const & pathname)

        Parameters
        ----------
        pathname: String const &

        """
        return _simbody.PolygonalMesh_loadStlFile(self, pathname)

    def loadFile(self, *args):
        r"""
        loadFile(PolygonalMesh self, String const & pathname)

        Parameters
        ----------
        pathname: String const &

        loadFile(PolygonalMesh self, std::string const & pathname)

        Parameters
        ----------
        pathname: std::string const &

        """
        return _simbody.PolygonalMesh_loadFile(self, *args)
    __swig_destroy__ = _simbody.delete_PolygonalMesh

# Register PolygonalMesh in _simbody:
_simbody.PolygonalMesh_swigregister(PolygonalMesh)
class DecorativeGeometry(object):
    r"""Proxy of C++ SimTK::DecorativeGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _simbody.delete_DecorativeGeometry
    Hide = _simbody.DecorativeGeometry_Hide
    
    DrawPoints = _simbody.DecorativeGeometry_DrawPoints
    
    DrawWireframe = _simbody.DecorativeGeometry_DrawWireframe
    
    DrawSurface = _simbody.DecorativeGeometry_DrawSurface
    
    DrawDefault = _simbody.DecorativeGeometry_DrawDefault
    

    def setBodyId(self, bodyId):
        r"""
        setBodyId(DecorativeGeometry self, int bodyId) -> DecorativeGeometry

        Parameters
        ----------
        bodyId: int

        """
        return _simbody.DecorativeGeometry_setBodyId(self, bodyId)

    def setIndexOnBody(self, index):
        r"""
        setIndexOnBody(DecorativeGeometry self, int index) -> DecorativeGeometry

        Parameters
        ----------
        index: int

        """
        return _simbody.DecorativeGeometry_setIndexOnBody(self, index)

    def setUserRef(self, userRef):
        r"""
        setUserRef(DecorativeGeometry self, void * userRef) -> DecorativeGeometry

        Parameters
        ----------
        userRef: void *

        """
        return _simbody.DecorativeGeometry_setUserRef(self, userRef)

    def setTransform(self, X_BG):
        r"""
        setTransform(DecorativeGeometry self, Transform X_BG) -> DecorativeGeometry

        Parameters
        ----------
        X_BG: SimTK::Transform const &

        """
        return _simbody.DecorativeGeometry_setTransform(self, X_BG)

    def setResolution(self, arg2):
        r"""
        setResolution(DecorativeGeometry self, SimTK::Real arg2) -> DecorativeGeometry

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeGeometry_setResolution(self, arg2)

    def setScaleFactors(self, scale):
        r"""
        setScaleFactors(DecorativeGeometry self, Vec3 scale) -> DecorativeGeometry

        Parameters
        ----------
        scale: SimTK::Vec3 const &

        """
        return _simbody.DecorativeGeometry_setScaleFactors(self, scale)

    def setScale(self, scale):
        r"""
        setScale(DecorativeGeometry self, SimTK::Real scale) -> DecorativeGeometry

        Parameters
        ----------
        scale: SimTK::Real

        """
        return _simbody.DecorativeGeometry_setScale(self, scale)

    def getBodyId(self):
        r"""getBodyId(DecorativeGeometry self) -> int"""
        return _simbody.DecorativeGeometry_getBodyId(self)

    def getIndexOnBody(self):
        r"""getIndexOnBody(DecorativeGeometry self) -> int"""
        return _simbody.DecorativeGeometry_getIndexOnBody(self)

    def getUserRef(self):
        r"""getUserRef(DecorativeGeometry self) -> void *"""
        return _simbody.DecorativeGeometry_getUserRef(self)

    def getResolution(self):
        r"""getResolution(DecorativeGeometry self) -> SimTK::Real"""
        return _simbody.DecorativeGeometry_getResolution(self)

    def getTransform(self):
        r"""getTransform(DecorativeGeometry self) -> Transform"""
        return _simbody.DecorativeGeometry_getTransform(self)

    def getScaleFactors(self):
        r"""getScaleFactors(DecorativeGeometry self) -> Vec3"""
        return _simbody.DecorativeGeometry_getScaleFactors(self)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeGeometry self, Vec3 rgb) -> DecorativeGeometry

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeGeometry_setColor(self, rgb)

    def setOpacity(self, arg2):
        r"""
        setOpacity(DecorativeGeometry self, SimTK::Real arg2) -> DecorativeGeometry

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeGeometry_setOpacity(self, arg2)

    def setLineThickness(self, arg2):
        r"""
        setLineThickness(DecorativeGeometry self, SimTK::Real arg2) -> DecorativeGeometry

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeGeometry_setLineThickness(self, arg2)

    def getColor(self):
        r"""getColor(DecorativeGeometry self) -> Vec3"""
        return _simbody.DecorativeGeometry_getColor(self)

    def getOpacity(self):
        r"""getOpacity(DecorativeGeometry self) -> SimTK::Real"""
        return _simbody.DecorativeGeometry_getOpacity(self)

    def getLineThickness(self):
        r"""getLineThickness(DecorativeGeometry self) -> SimTK::Real"""
        return _simbody.DecorativeGeometry_getLineThickness(self)

    def setFaceCamera(self, shouldFace):
        r"""
        setFaceCamera(DecorativeGeometry self, int shouldFace) -> DecorativeGeometry

        Parameters
        ----------
        shouldFace: int

        """
        return _simbody.DecorativeGeometry_setFaceCamera(self, shouldFace)

    def getFaceCamera(self):
        r"""getFaceCamera(DecorativeGeometry self) -> int"""
        return _simbody.DecorativeGeometry_getFaceCamera(self)

    def setRepresentation(self, arg2):
        r"""
        setRepresentation(DecorativeGeometry self, SimTK::DecorativeGeometry::Representation const & arg2) -> DecorativeGeometry

        Parameters
        ----------
        arg2: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeGeometry_setRepresentation(self, arg2)

    def getRepresentation(self):
        r"""getRepresentation(DecorativeGeometry self) -> SimTK::DecorativeGeometry::Representation"""
        return _simbody.DecorativeGeometry_getRepresentation(self)

    def implementGeometry(self, arg2):
        r"""
        implementGeometry(DecorativeGeometry self, DecorativeGeometryImplementation arg2)

        Parameters
        ----------
        arg2: SimTK::DecorativeGeometryImplementation &

        """
        return _simbody.DecorativeGeometry_implementGeometry(self, arg2)

    def isOwnerHandle(self):
        r"""isOwnerHandle(DecorativeGeometry self) -> bool"""
        return _simbody.DecorativeGeometry_isOwnerHandle(self)

    def isEmptyHandle(self):
        r"""isEmptyHandle(DecorativeGeometry self) -> bool"""
        return _simbody.DecorativeGeometry_isEmptyHandle(self)

    def __init__(self, *args):
        r"""
        __init__(DecorativeGeometry self) -> DecorativeGeometry
        __init__(DecorativeGeometry self, DecorativeGeometry source) -> DecorativeGeometry

        Parameters
        ----------
        source: SimTK::DecorativeGeometry const &

        __init__(DecorativeGeometry self, DecorativeGeometryRep * r) -> DecorativeGeometry

        Parameters
        ----------
        r: DecorativeGeometryRep *

        """
        _simbody.DecorativeGeometry_swiginit(self, _simbody.new_DecorativeGeometry(*args))

    def hasRep(self):
        r"""hasRep(DecorativeGeometry self) -> bool"""
        return _simbody.DecorativeGeometry_hasRep(self)

    def getRep(self):
        r"""getRep(DecorativeGeometry self) -> DecorativeGeometryRep const &"""
        return _simbody.DecorativeGeometry_getRep(self)

    def updRep(self):
        r"""updRep(DecorativeGeometry self) -> DecorativeGeometryRep &"""
        return _simbody.DecorativeGeometry_updRep(self)

# Register DecorativeGeometry in _simbody:
_simbody.DecorativeGeometry_swigregister(DecorativeGeometry)
Black = cvar.Black
Gray = cvar.Gray
Red = cvar.Red
Green = cvar.Green
Blue = cvar.Blue
Yellow = cvar.Yellow
Orange = cvar.Orange
Magenta = cvar.Magenta
Purple = cvar.Purple
Cyan = cvar.Cyan
White = cvar.White

class DecorativePoint(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativePoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DecorativePoint self, Vec3 p=SimTK::Vec3(0)) -> DecorativePoint

        Parameters
        ----------
        p: SimTK::Vec3 const &

        """
        _simbody.DecorativePoint_swiginit(self, _simbody.new_DecorativePoint(*args))

    def setPoint(self, p):
        r"""
        setPoint(DecorativePoint self, Vec3 p) -> DecorativePoint

        Parameters
        ----------
        p: SimTK::Vec3 const &

        """
        return _simbody.DecorativePoint_setPoint(self, p)

    def getPoint(self):
        r"""getPoint(DecorativePoint self) -> Vec3"""
        return _simbody.DecorativePoint_getPoint(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativePoint self, int b) -> DecorativePoint

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativePoint_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativePoint self, int x) -> DecorativePoint

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativePoint_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativePoint self, void * p) -> DecorativePoint

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativePoint_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativePoint self, Transform X_BD) -> DecorativePoint

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativePoint_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativePoint self, SimTK::Real r) -> DecorativePoint

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativePoint_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativePoint self, Vec3 s) -> DecorativePoint

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativePoint_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativePoint self, Vec3 rgb) -> DecorativePoint

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativePoint_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativePoint self, SimTK::Real o) -> DecorativePoint

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativePoint_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativePoint self, SimTK::Real t) -> DecorativePoint

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativePoint_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativePoint self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativePoint

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativePoint_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativePoint

# Register DecorativePoint in _simbody:
_simbody.DecorativePoint_swigregister(DecorativePoint)
class DecorativeLine(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeLine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DecorativeLine self, Vec3 p1=SimTK::Vec3(0), Vec3 p2=SimTK::Vec3(1)) -> DecorativeLine

        Parameters
        ----------
        p1: SimTK::Vec3 const &
        p2: SimTK::Vec3 const &

        """
        _simbody.DecorativeLine_swiginit(self, _simbody.new_DecorativeLine(*args))

    def setPoint1(self, p1):
        r"""
        setPoint1(DecorativeLine self, Vec3 p1) -> DecorativeLine

        Parameters
        ----------
        p1: SimTK::Vec3 const &

        """
        return _simbody.DecorativeLine_setPoint1(self, p1)

    def setPoint2(self, p2):
        r"""
        setPoint2(DecorativeLine self, Vec3 p2) -> DecorativeLine

        Parameters
        ----------
        p2: SimTK::Vec3 const &

        """
        return _simbody.DecorativeLine_setPoint2(self, p2)

    def setEndpoints(self, p1, p2):
        r"""
        setEndpoints(DecorativeLine self, Vec3 p1, Vec3 p2) -> DecorativeLine

        Parameters
        ----------
        p1: SimTK::Vec3 const &
        p2: SimTK::Vec3 const &

        """
        return _simbody.DecorativeLine_setEndpoints(self, p1, p2)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeLine self, int b) -> DecorativeLine

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeLine_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeLine self, int x) -> DecorativeLine

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeLine_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeLine self, void * p) -> DecorativeLine

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeLine_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeLine self, Transform X_BD) -> DecorativeLine

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeLine_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeLine self, SimTK::Real r) -> DecorativeLine

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeLine_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeLine self, Vec3 s) -> DecorativeLine

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeLine_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeLine self, Vec3 rgb) -> DecorativeLine

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeLine_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeLine self, SimTK::Real o) -> DecorativeLine

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeLine_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeLine self, SimTK::Real t) -> DecorativeLine

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeLine_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeLine self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeLine

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeLine_setRepresentation(self, r)

    def getPoint1(self):
        r"""getPoint1(DecorativeLine self) -> Vec3"""
        return _simbody.DecorativeLine_getPoint1(self)

    def getPoint2(self):
        r"""getPoint2(DecorativeLine self) -> Vec3"""
        return _simbody.DecorativeLine_getPoint2(self)
    __swig_destroy__ = _simbody.delete_DecorativeLine

# Register DecorativeLine in _simbody:
_simbody.DecorativeLine_swigregister(DecorativeLine)
class DecorativeCircle(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeCircle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radius=0.5):
        r"""
        __init__(DecorativeCircle self, SimTK::Real radius=0.5) -> DecorativeCircle

        Parameters
        ----------
        radius: SimTK::Real

        """
        _simbody.DecorativeCircle_swiginit(self, _simbody.new_DecorativeCircle(radius))

    def setRadius(self, arg2):
        r"""
        setRadius(DecorativeCircle self, SimTK::Real arg2) -> DecorativeCircle

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeCircle_setRadius(self, arg2)

    def getRadius(self):
        r"""getRadius(DecorativeCircle self) -> SimTK::Real"""
        return _simbody.DecorativeCircle_getRadius(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeCircle self, int b) -> DecorativeCircle

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeCircle_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeCircle self, int x) -> DecorativeCircle

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeCircle_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeCircle self, void * p) -> DecorativeCircle

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeCircle_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeCircle self, Transform X_BD) -> DecorativeCircle

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeCircle_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeCircle self, SimTK::Real r) -> DecorativeCircle

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeCircle_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeCircle self, Vec3 s) -> DecorativeCircle

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeCircle_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeCircle self, Vec3 rgb) -> DecorativeCircle

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeCircle_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeCircle self, SimTK::Real o) -> DecorativeCircle

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeCircle_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeCircle self, SimTK::Real t) -> DecorativeCircle

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeCircle_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeCircle self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeCircle

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeCircle_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeCircle

# Register DecorativeCircle in _simbody:
_simbody.DecorativeCircle_swigregister(DecorativeCircle)
class DecorativeSphere(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeSphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radius=0.5):
        r"""
        __init__(DecorativeSphere self, SimTK::Real radius=0.5) -> DecorativeSphere

        Parameters
        ----------
        radius: SimTK::Real

        """
        _simbody.DecorativeSphere_swiginit(self, _simbody.new_DecorativeSphere(radius))

    def setRadius(self, arg2):
        r"""
        setRadius(DecorativeSphere self, SimTK::Real arg2) -> DecorativeSphere

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeSphere_setRadius(self, arg2)

    def getRadius(self):
        r"""getRadius(DecorativeSphere self) -> SimTK::Real"""
        return _simbody.DecorativeSphere_getRadius(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeSphere self, int b) -> DecorativeSphere

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeSphere_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeSphere self, int x) -> DecorativeSphere

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeSphere_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeSphere self, void * p) -> DecorativeSphere

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeSphere_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeSphere self, Transform X_BD) -> DecorativeSphere

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeSphere_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeSphere self, SimTK::Real r) -> DecorativeSphere

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeSphere_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeSphere self, Vec3 s) -> DecorativeSphere

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeSphere_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeSphere self, Vec3 rgb) -> DecorativeSphere

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeSphere_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeSphere self, SimTK::Real o) -> DecorativeSphere

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeSphere_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeSphere self, SimTK::Real t) -> DecorativeSphere

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeSphere_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeSphere self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeSphere

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeSphere_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeSphere

# Register DecorativeSphere in _simbody:
_simbody.DecorativeSphere_swigregister(DecorativeSphere)
class DecorativeEllipsoid(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeEllipsoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DecorativeEllipsoid self, Vec3 radii=SimTK::Vec3(Real(0.5),Real(1/3.),Real(0.25))) -> DecorativeEllipsoid

        Parameters
        ----------
        radii: SimTK::Vec3 const &

        """
        _simbody.DecorativeEllipsoid_swiginit(self, _simbody.new_DecorativeEllipsoid(*args))

    def setRadii(self, arg2):
        r"""
        setRadii(DecorativeEllipsoid self, Vec3 arg2) -> DecorativeEllipsoid

        Parameters
        ----------
        arg2: SimTK::Vec3 const &

        """
        return _simbody.DecorativeEllipsoid_setRadii(self, arg2)

    def getRadii(self):
        r"""getRadii(DecorativeEllipsoid self) -> Vec3"""
        return _simbody.DecorativeEllipsoid_getRadii(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeEllipsoid self, int b) -> DecorativeEllipsoid

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeEllipsoid_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeEllipsoid self, int x) -> DecorativeEllipsoid

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeEllipsoid_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeEllipsoid self, void * p) -> DecorativeEllipsoid

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeEllipsoid_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeEllipsoid self, Transform X_BD) -> DecorativeEllipsoid

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeEllipsoid_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeEllipsoid self, SimTK::Real r) -> DecorativeEllipsoid

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeEllipsoid_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeEllipsoid self, Vec3 s) -> DecorativeEllipsoid

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeEllipsoid_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeEllipsoid self, Vec3 rgb) -> DecorativeEllipsoid

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeEllipsoid_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeEllipsoid self, SimTK::Real o) -> DecorativeEllipsoid

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeEllipsoid_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeEllipsoid self, SimTK::Real t) -> DecorativeEllipsoid

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeEllipsoid_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeEllipsoid self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeEllipsoid

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeEllipsoid_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeEllipsoid

# Register DecorativeEllipsoid in _simbody:
_simbody.DecorativeEllipsoid_swigregister(DecorativeEllipsoid)
class DecorativeBrick(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeBrick class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DecorativeBrick self, Vec3 halfLengths=SimTK::Vec3(Real(0.5))) -> DecorativeBrick

        Parameters
        ----------
        halfLengths: SimTK::Vec3 const &

        """
        _simbody.DecorativeBrick_swiginit(self, _simbody.new_DecorativeBrick(*args))

    def setHalfLengths(self, arg2):
        r"""
        setHalfLengths(DecorativeBrick self, Vec3 arg2) -> DecorativeBrick

        Parameters
        ----------
        arg2: SimTK::Vec3 const &

        """
        return _simbody.DecorativeBrick_setHalfLengths(self, arg2)

    def getHalfLengths(self):
        r"""getHalfLengths(DecorativeBrick self) -> Vec3"""
        return _simbody.DecorativeBrick_getHalfLengths(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeBrick self, int b) -> DecorativeBrick

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeBrick_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeBrick self, int x) -> DecorativeBrick

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeBrick_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeBrick self, void * p) -> DecorativeBrick

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeBrick_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeBrick self, Transform X_BD) -> DecorativeBrick

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeBrick_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeBrick self, SimTK::Real r) -> DecorativeBrick

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeBrick_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeBrick self, Vec3 s) -> DecorativeBrick

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeBrick_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeBrick self, Vec3 rgb) -> DecorativeBrick

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeBrick_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeBrick self, SimTK::Real o) -> DecorativeBrick

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeBrick_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeBrick self, SimTK::Real t) -> DecorativeBrick

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeBrick_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeBrick self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeBrick

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeBrick_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeBrick

# Register DecorativeBrick in _simbody:
_simbody.DecorativeBrick_swigregister(DecorativeBrick)
class DecorativeCylinder(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeCylinder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, radius=0.5, halfHeight=0.5):
        r"""
        __init__(DecorativeCylinder self, SimTK::Real radius=0.5, SimTK::Real halfHeight=0.5) -> DecorativeCylinder

        Parameters
        ----------
        radius: SimTK::Real
        halfHeight: SimTK::Real

        """
        _simbody.DecorativeCylinder_swiginit(self, _simbody.new_DecorativeCylinder(radius, halfHeight))

    def setRadius(self, arg2):
        r"""
        setRadius(DecorativeCylinder self, SimTK::Real arg2) -> DecorativeCylinder

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeCylinder_setRadius(self, arg2)

    def setHalfHeight(self, arg2):
        r"""
        setHalfHeight(DecorativeCylinder self, SimTK::Real arg2) -> DecorativeCylinder

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeCylinder_setHalfHeight(self, arg2)

    def getRadius(self):
        r"""getRadius(DecorativeCylinder self) -> SimTK::Real"""
        return _simbody.DecorativeCylinder_getRadius(self)

    def getHalfHeight(self):
        r"""getHalfHeight(DecorativeCylinder self) -> SimTK::Real"""
        return _simbody.DecorativeCylinder_getHalfHeight(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeCylinder self, int b) -> DecorativeCylinder

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeCylinder_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeCylinder self, int x) -> DecorativeCylinder

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeCylinder_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeCylinder self, void * p) -> DecorativeCylinder

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeCylinder_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeCylinder self, Transform X_BD) -> DecorativeCylinder

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeCylinder_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeCylinder self, SimTK::Real r) -> DecorativeCylinder

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeCylinder_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeCylinder self, Vec3 s) -> DecorativeCylinder

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeCylinder_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeCylinder self, Vec3 rgb) -> DecorativeCylinder

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeCylinder_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeCylinder self, SimTK::Real o) -> DecorativeCylinder

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeCylinder_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeCylinder self, SimTK::Real t) -> DecorativeCylinder

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeCylinder_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeCylinder self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeCylinder

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeCylinder_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeCylinder

# Register DecorativeCylinder in _simbody:
_simbody.DecorativeCylinder_swigregister(DecorativeCylinder)
class DecorativeFrame(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, axisLength=1):
        r"""
        __init__(DecorativeFrame self, SimTK::Real axisLength=1) -> DecorativeFrame

        Parameters
        ----------
        axisLength: SimTK::Real

        """
        _simbody.DecorativeFrame_swiginit(self, _simbody.new_DecorativeFrame(axisLength))

    def setAxisLength(self, arg2):
        r"""
        setAxisLength(DecorativeFrame self, SimTK::Real arg2) -> DecorativeFrame

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeFrame_setAxisLength(self, arg2)

    def getAxisLength(self):
        r"""getAxisLength(DecorativeFrame self) -> SimTK::Real"""
        return _simbody.DecorativeFrame_getAxisLength(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeFrame self, int b) -> DecorativeFrame

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeFrame_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeFrame self, int x) -> DecorativeFrame

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeFrame_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeFrame self, void * p) -> DecorativeFrame

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeFrame_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeFrame self, Transform X_BD) -> DecorativeFrame

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeFrame_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeFrame self, SimTK::Real r) -> DecorativeFrame

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeFrame_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeFrame self, Vec3 s) -> DecorativeFrame

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeFrame_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeFrame self, Vec3 rgb) -> DecorativeFrame

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeFrame_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeFrame self, SimTK::Real o) -> DecorativeFrame

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeFrame_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeFrame self, SimTK::Real t) -> DecorativeFrame

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeFrame_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeFrame self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeFrame

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeFrame_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeFrame

# Register DecorativeFrame in _simbody:
_simbody.DecorativeFrame_swigregister(DecorativeFrame)
class DecorativeText(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeText class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DecorativeText self, std::string const & label="") -> DecorativeText

        Parameters
        ----------
        label: std::string const &

        """
        _simbody.DecorativeText_swiginit(self, _simbody.new_DecorativeText(*args))

    def setText(self, label):
        r"""
        setText(DecorativeText self, std::string const & label) -> DecorativeText

        Parameters
        ----------
        label: std::string const &

        """
        return _simbody.DecorativeText_setText(self, label)

    def getText(self):
        r"""getText(DecorativeText self) -> std::string const &"""
        return _simbody.DecorativeText_getText(self)

    def setIsScreenText(self, isScreen):
        r"""
        setIsScreenText(DecorativeText self, bool isScreen) -> DecorativeText

        Parameters
        ----------
        isScreen: bool

        """
        return _simbody.DecorativeText_setIsScreenText(self, isScreen)

    def getIsScreenText(self):
        r"""getIsScreenText(DecorativeText self) -> bool"""
        return _simbody.DecorativeText_getIsScreenText(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeText self, int b) -> DecorativeText

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeText_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeText self, int x) -> DecorativeText

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeText_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeText self, void * p) -> DecorativeText

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeText_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeText self, Transform X_BD) -> DecorativeText

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeText_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeText self, SimTK::Real r) -> DecorativeText

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeText_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeText self, Vec3 s) -> DecorativeText

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeText_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeText self, Vec3 rgb) -> DecorativeText

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeText_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeText self, SimTK::Real o) -> DecorativeText

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeText_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeText self, SimTK::Real t) -> DecorativeText

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeText_setLineThickness(self, t)

    def setFaceCamera(self, yn):
        r"""
        setFaceCamera(DecorativeText self, int yn) -> DecorativeText

        Parameters
        ----------
        yn: int

        """
        return _simbody.DecorativeText_setFaceCamera(self, yn)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeText self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeText

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeText_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeText

# Register DecorativeText in _simbody:
_simbody.DecorativeText_swigregister(DecorativeText)
class DecorativeMesh(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesh):
        r"""
        __init__(DecorativeMesh self, PolygonalMesh mesh) -> DecorativeMesh

        Parameters
        ----------
        mesh: SimTK::PolygonalMesh const &

        """
        _simbody.DecorativeMesh_swiginit(self, _simbody.new_DecorativeMesh(mesh))

    def getMesh(self):
        r"""getMesh(DecorativeMesh self) -> PolygonalMesh"""
        return _simbody.DecorativeMesh_getMesh(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeMesh self, int b) -> DecorativeMesh

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeMesh_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeMesh self, int x) -> DecorativeMesh

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeMesh_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeMesh self, void * p) -> DecorativeMesh

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeMesh_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeMesh self, Transform X_BD) -> DecorativeMesh

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeMesh_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeMesh self, SimTK::Real r) -> DecorativeMesh

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeMesh_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeMesh self, Vec3 s) -> DecorativeMesh

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeMesh_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeMesh self, Vec3 rgb) -> DecorativeMesh

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeMesh_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeMesh self, SimTK::Real o) -> DecorativeMesh

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeMesh_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeMesh self, SimTK::Real t) -> DecorativeMesh

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeMesh_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeMesh self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeMesh

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeMesh_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeMesh

# Register DecorativeMesh in _simbody:
_simbody.DecorativeMesh_swigregister(DecorativeMesh)
class DecorativeMeshFile(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeMeshFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, meshFileName):
        r"""
        __init__(DecorativeMeshFile self, std::string const & meshFileName) -> DecorativeMeshFile

        Parameters
        ----------
        meshFileName: std::string const &

        """
        _simbody.DecorativeMeshFile_swiginit(self, _simbody.new_DecorativeMeshFile(meshFileName))

    def getMeshFile(self):
        r"""getMeshFile(DecorativeMeshFile self) -> std::string const &"""
        return _simbody.DecorativeMeshFile_getMeshFile(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeMeshFile self, int b) -> DecorativeMeshFile

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeMeshFile_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeMeshFile self, int x) -> DecorativeMeshFile

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeMeshFile_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeMeshFile self, void * p) -> DecorativeMeshFile

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeMeshFile_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeMeshFile self, Transform X_BD) -> DecorativeMeshFile

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeMeshFile_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeMeshFile self, SimTK::Real r) -> DecorativeMeshFile

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeMeshFile_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeMeshFile self, Vec3 s) -> DecorativeMeshFile

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeMeshFile_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeMeshFile self, Vec3 rgb) -> DecorativeMeshFile

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeMeshFile_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeMeshFile self, SimTK::Real o) -> DecorativeMeshFile

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeMeshFile_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeMeshFile self, SimTK::Real t) -> DecorativeMeshFile

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeMeshFile_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeMeshFile self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeMeshFile

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeMeshFile_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeMeshFile

# Register DecorativeMeshFile in _simbody:
_simbody.DecorativeMeshFile_swigregister(DecorativeMeshFile)
class DecorativeTorus(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeTorus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, torusR=1, tubeR=0.1):
        r"""
        __init__(DecorativeTorus self, SimTK::Real torusR=1, SimTK::Real tubeR=0.1) -> DecorativeTorus

        Parameters
        ----------
        torusR: SimTK::Real
        tubeR: SimTK::Real

        """
        _simbody.DecorativeTorus_swiginit(self, _simbody.new_DecorativeTorus(torusR, tubeR))

    def setTorusRadius(self, arg2):
        r"""
        setTorusRadius(DecorativeTorus self, SimTK::Real arg2) -> DecorativeTorus

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeTorus_setTorusRadius(self, arg2)

    def setTubeRadius(self, arg2):
        r"""
        setTubeRadius(DecorativeTorus self, SimTK::Real arg2) -> DecorativeTorus

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeTorus_setTubeRadius(self, arg2)

    def getTorusRadius(self):
        r"""getTorusRadius(DecorativeTorus self) -> SimTK::Real"""
        return _simbody.DecorativeTorus_getTorusRadius(self)

    def getTubeRadius(self):
        r"""getTubeRadius(DecorativeTorus self) -> SimTK::Real"""
        return _simbody.DecorativeTorus_getTubeRadius(self)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeTorus self, int b) -> DecorativeTorus

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeTorus_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeTorus self, int x) -> DecorativeTorus

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeTorus_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeTorus self, void * p) -> DecorativeTorus

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeTorus_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeTorus self, Transform X_BD) -> DecorativeTorus

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeTorus_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeTorus self, SimTK::Real r) -> DecorativeTorus

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeTorus_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeTorus self, Vec3 s) -> DecorativeTorus

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeTorus_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeTorus self, Vec3 rgb) -> DecorativeTorus

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeTorus_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeTorus self, SimTK::Real o) -> DecorativeTorus

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeTorus_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeTorus self, SimTK::Real t) -> DecorativeTorus

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeTorus_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeTorus self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeTorus

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeTorus_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeTorus

# Register DecorativeTorus in _simbody:
_simbody.DecorativeTorus_swigregister(DecorativeTorus)
class DecorativeArrow(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeArrow class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DecorativeArrow self, Vec3 startPoint=SimTK::Vec3(0), Vec3 endPoint=SimTK::Vec3(1), SimTK::Real tipLength=0.35) -> DecorativeArrow

        Parameters
        ----------
        startPoint: SimTK::Vec3 const &
        endPoint: SimTK::Vec3 const &
        tipLength: SimTK::Real

        """
        _simbody.DecorativeArrow_swiginit(self, _simbody.new_DecorativeArrow(*args))

    def getStartPoint(self):
        r"""getStartPoint(DecorativeArrow self) -> Vec3"""
        return _simbody.DecorativeArrow_getStartPoint(self)

    def getEndPoint(self):
        r"""getEndPoint(DecorativeArrow self) -> Vec3"""
        return _simbody.DecorativeArrow_getEndPoint(self)

    def getTipLength(self):
        r"""getTipLength(DecorativeArrow self) -> SimTK::Real const &"""
        return _simbody.DecorativeArrow_getTipLength(self)

    def setStartPoint(self, start):
        r"""
        setStartPoint(DecorativeArrow self, Vec3 start) -> DecorativeArrow

        Parameters
        ----------
        start: SimTK::Vec3 const &

        """
        return _simbody.DecorativeArrow_setStartPoint(self, start)

    def setEndPoint(self, end):
        r"""
        setEndPoint(DecorativeArrow self, Vec3 end) -> DecorativeArrow

        Parameters
        ----------
        end: SimTK::Vec3 const &

        """
        return _simbody.DecorativeArrow_setEndPoint(self, end)

    def setTipLength(self, arg2):
        r"""
        setTipLength(DecorativeArrow self, SimTK::Real arg2) -> DecorativeArrow

        Parameters
        ----------
        arg2: SimTK::Real

        """
        return _simbody.DecorativeArrow_setTipLength(self, arg2)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeArrow self, int b) -> DecorativeArrow

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeArrow_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeArrow self, int x) -> DecorativeArrow

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeArrow_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeArrow self, void * p) -> DecorativeArrow

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeArrow_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeArrow self, Transform X_BD) -> DecorativeArrow

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeArrow_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeArrow self, SimTK::Real r) -> DecorativeArrow

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeArrow_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeArrow self, Vec3 s) -> DecorativeArrow

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeArrow_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeArrow self, Vec3 rgb) -> DecorativeArrow

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeArrow_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeArrow self, SimTK::Real o) -> DecorativeArrow

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeArrow_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeArrow self, SimTK::Real t) -> DecorativeArrow

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeArrow_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeArrow self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeArrow

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeArrow_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeArrow

# Register DecorativeArrow in _simbody:
_simbody.DecorativeArrow_swigregister(DecorativeArrow)
class DecorativeCone(DecorativeGeometry):
    r"""Proxy of C++ SimTK::DecorativeCone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DecorativeCone self, Vec3 p1=SimTK::Vec3(0), UnitVec3 dir=SimTK::UnitVec3(1,1,1), SimTK::Real height=1.0, SimTK::Real base=0.5) -> DecorativeCone

        Parameters
        ----------
        p1: SimTK::Vec3 const &
        dir: SimTK::UnitVec3 const &
        height: SimTK::Real
        base: SimTK::Real

        """
        _simbody.DecorativeCone_swiginit(self, _simbody.new_DecorativeCone(*args))

    def getOrigin(self):
        r"""getOrigin(DecorativeCone self) -> Vec3"""
        return _simbody.DecorativeCone_getOrigin(self)

    def getDirection(self):
        r"""getDirection(DecorativeCone self) -> UnitVec3"""
        return _simbody.DecorativeCone_getDirection(self)

    def getHeight(self):
        r"""getHeight(DecorativeCone self) -> SimTK::Real const &"""
        return _simbody.DecorativeCone_getHeight(self)

    def getBaseRadius(self):
        r"""getBaseRadius(DecorativeCone self) -> SimTK::Real const &"""
        return _simbody.DecorativeCone_getBaseRadius(self)

    def setOrigin(self, origin):
        r"""
        setOrigin(DecorativeCone self, Vec3 origin) -> DecorativeCone

        Parameters
        ----------
        origin: SimTK::Vec3 const &

        """
        return _simbody.DecorativeCone_setOrigin(self, origin)

    def setDirection(self, direction):
        r"""
        setDirection(DecorativeCone self, UnitVec3 direction) -> DecorativeCone

        Parameters
        ----------
        direction: SimTK::UnitVec3 const &

        """
        return _simbody.DecorativeCone_setDirection(self, direction)

    def setHeight(self, length):
        r"""
        setHeight(DecorativeCone self, SimTK::Real length) -> DecorativeCone

        Parameters
        ----------
        length: SimTK::Real

        """
        return _simbody.DecorativeCone_setHeight(self, length)

    def setBaseRadius(self, base):
        r"""
        setBaseRadius(DecorativeCone self, SimTK::Real base) -> DecorativeCone

        Parameters
        ----------
        base: SimTK::Real

        """
        return _simbody.DecorativeCone_setBaseRadius(self, base)

    def setBodyId(self, b):
        r"""
        setBodyId(DecorativeCone self, int b) -> DecorativeCone

        Parameters
        ----------
        b: int

        """
        return _simbody.DecorativeCone_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(DecorativeCone self, int x) -> DecorativeCone

        Parameters
        ----------
        x: int

        """
        return _simbody.DecorativeCone_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(DecorativeCone self, void * p) -> DecorativeCone

        Parameters
        ----------
        p: void *

        """
        return _simbody.DecorativeCone_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(DecorativeCone self, Transform X_BD) -> DecorativeCone

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.DecorativeCone_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(DecorativeCone self, SimTK::Real r) -> DecorativeCone

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.DecorativeCone_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(DecorativeCone self, Vec3 s) -> DecorativeCone

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.DecorativeCone_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(DecorativeCone self, Vec3 rgb) -> DecorativeCone

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.DecorativeCone_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(DecorativeCone self, SimTK::Real o) -> DecorativeCone

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.DecorativeCone_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(DecorativeCone self, SimTK::Real t) -> DecorativeCone

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.DecorativeCone_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(DecorativeCone self, SimTK::DecorativeGeometry::Representation const & r) -> DecorativeCone

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.DecorativeCone_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_DecorativeCone

# Register DecorativeCone in _simbody:
_simbody.DecorativeCone_swigregister(DecorativeCone)
class Decorations(DecorativeGeometry):
    r"""Proxy of C++ SimTK::Decorations class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Decorations self) -> Decorations
        __init__(Decorations self, DecorativeGeometry decoration) -> Decorations

        Parameters
        ----------
        decoration: SimTK::DecorativeGeometry const &

        """
        _simbody.Decorations_swiginit(self, _simbody.new_Decorations(*args))

    def addDecoration(self, *args):
        r"""
        addDecoration(Decorations self, DecorativeGeometry decoration) -> Decorations

        Parameters
        ----------
        decoration: SimTK::DecorativeGeometry const &

        addDecoration(Decorations self, Transform placement, DecorativeGeometry decoration) -> Decorations

        Parameters
        ----------
        placement: SimTK::Transform const &
        decoration: SimTK::DecorativeGeometry const &

        """
        return _simbody.Decorations_addDecoration(self, *args)

    def getNumDecorations(self):
        r"""getNumDecorations(Decorations self) -> int"""
        return _simbody.Decorations_getNumDecorations(self)

    def getDecoration(self, i):
        r"""
        getDecoration(Decorations self, int i) -> DecorativeGeometry

        Parameters
        ----------
        i: int

        """
        return _simbody.Decorations_getDecoration(self, i)

    def setBodyId(self, b):
        r"""
        setBodyId(Decorations self, int b) -> Decorations

        Parameters
        ----------
        b: int

        """
        return _simbody.Decorations_setBodyId(self, b)

    def setIndexOnBody(self, x):
        r"""
        setIndexOnBody(Decorations self, int x) -> Decorations

        Parameters
        ----------
        x: int

        """
        return _simbody.Decorations_setIndexOnBody(self, x)

    def setUserRef(self, p):
        r"""
        setUserRef(Decorations self, void * p) -> Decorations

        Parameters
        ----------
        p: void *

        """
        return _simbody.Decorations_setUserRef(self, p)

    def setTransform(self, X_BD):
        r"""
        setTransform(Decorations self, Transform X_BD) -> Decorations

        Parameters
        ----------
        X_BD: SimTK::Transform const &

        """
        return _simbody.Decorations_setTransform(self, X_BD)

    def setResolution(self, r):
        r"""
        setResolution(Decorations self, SimTK::Real r) -> Decorations

        Parameters
        ----------
        r: SimTK::Real

        """
        return _simbody.Decorations_setResolution(self, r)

    def setScaleFactors(self, s):
        r"""
        setScaleFactors(Decorations self, Vec3 s) -> Decorations

        Parameters
        ----------
        s: SimTK::Vec3 const &

        """
        return _simbody.Decorations_setScaleFactors(self, s)

    def setColor(self, rgb):
        r"""
        setColor(Decorations self, Vec3 rgb) -> Decorations

        Parameters
        ----------
        rgb: SimTK::Vec3 const &

        """
        return _simbody.Decorations_setColor(self, rgb)

    def setOpacity(self, o):
        r"""
        setOpacity(Decorations self, SimTK::Real o) -> Decorations

        Parameters
        ----------
        o: SimTK::Real

        """
        return _simbody.Decorations_setOpacity(self, o)

    def setLineThickness(self, t):
        r"""
        setLineThickness(Decorations self, SimTK::Real t) -> Decorations

        Parameters
        ----------
        t: SimTK::Real

        """
        return _simbody.Decorations_setLineThickness(self, t)

    def setRepresentation(self, r):
        r"""
        setRepresentation(Decorations self, SimTK::DecorativeGeometry::Representation const & r) -> Decorations

        Parameters
        ----------
        r: SimTK::DecorativeGeometry::Representation const &

        """
        return _simbody.Decorations_setRepresentation(self, r)
    __swig_destroy__ = _simbody.delete_Decorations

# Register Decorations in _simbody:
_simbody.Decorations_swigregister(Decorations)
class DecorativeGeometryImplementation(object):
    r"""Proxy of C++ SimTK::DecorativeGeometryImplementation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _simbody.delete_DecorativeGeometryImplementation

    def implementPointGeometry(self, arg0):
        r"""
        implementPointGeometry(DecorativeGeometryImplementation self, DecorativePoint arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativePoint const &

        """
        return _simbody.DecorativeGeometryImplementation_implementPointGeometry(self, arg0)

    def implementLineGeometry(self, arg0):
        r"""
        implementLineGeometry(DecorativeGeometryImplementation self, DecorativeLine arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeLine const &

        """
        return _simbody.DecorativeGeometryImplementation_implementLineGeometry(self, arg0)

    def implementBrickGeometry(self, arg0):
        r"""
        implementBrickGeometry(DecorativeGeometryImplementation self, DecorativeBrick arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeBrick const &

        """
        return _simbody.DecorativeGeometryImplementation_implementBrickGeometry(self, arg0)

    def implementCylinderGeometry(self, arg0):
        r"""
        implementCylinderGeometry(DecorativeGeometryImplementation self, DecorativeCylinder arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeCylinder const &

        """
        return _simbody.DecorativeGeometryImplementation_implementCylinderGeometry(self, arg0)

    def implementCircleGeometry(self, arg0):
        r"""
        implementCircleGeometry(DecorativeGeometryImplementation self, DecorativeCircle arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeCircle const &

        """
        return _simbody.DecorativeGeometryImplementation_implementCircleGeometry(self, arg0)

    def implementSphereGeometry(self, arg0):
        r"""
        implementSphereGeometry(DecorativeGeometryImplementation self, DecorativeSphere arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeSphere const &

        """
        return _simbody.DecorativeGeometryImplementation_implementSphereGeometry(self, arg0)

    def implementEllipsoidGeometry(self, arg0):
        r"""
        implementEllipsoidGeometry(DecorativeGeometryImplementation self, DecorativeEllipsoid arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeEllipsoid const &

        """
        return _simbody.DecorativeGeometryImplementation_implementEllipsoidGeometry(self, arg0)

    def implementFrameGeometry(self, arg0):
        r"""
        implementFrameGeometry(DecorativeGeometryImplementation self, DecorativeFrame arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeFrame const &

        """
        return _simbody.DecorativeGeometryImplementation_implementFrameGeometry(self, arg0)

    def implementTextGeometry(self, arg0):
        r"""
        implementTextGeometry(DecorativeGeometryImplementation self, DecorativeText arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeText const &

        """
        return _simbody.DecorativeGeometryImplementation_implementTextGeometry(self, arg0)

    def implementMeshGeometry(self, arg0):
        r"""
        implementMeshGeometry(DecorativeGeometryImplementation self, DecorativeMesh arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeMesh const &

        """
        return _simbody.DecorativeGeometryImplementation_implementMeshGeometry(self, arg0)

    def implementMeshFileGeometry(self, arg0):
        r"""
        implementMeshFileGeometry(DecorativeGeometryImplementation self, DecorativeMeshFile arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeMeshFile const &

        """
        return _simbody.DecorativeGeometryImplementation_implementMeshFileGeometry(self, arg0)

    def implementTorusGeometry(self, arg0):
        r"""
        implementTorusGeometry(DecorativeGeometryImplementation self, DecorativeTorus arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeTorus const &

        """
        return _simbody.DecorativeGeometryImplementation_implementTorusGeometry(self, arg0)

    def implementArrowGeometry(self, arg0):
        r"""
        implementArrowGeometry(DecorativeGeometryImplementation self, DecorativeArrow arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeArrow const &

        """
        return _simbody.DecorativeGeometryImplementation_implementArrowGeometry(self, arg0)

    def implementConeGeometry(self, arg0):
        r"""
        implementConeGeometry(DecorativeGeometryImplementation self, DecorativeCone arg0)

        Parameters
        ----------
        arg0: SimTK::DecorativeCone const &

        """
        return _simbody.DecorativeGeometryImplementation_implementConeGeometry(self, arg0)

    def __init__(self):
        r"""
        __init__(DecorativeGeometryImplementation self) -> DecorativeGeometryImplementation

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == DecorativeGeometryImplementation:
            _self = None
        else:
            _self = self
        _simbody.DecorativeGeometryImplementation_swiginit(self, _simbody.new_DecorativeGeometryImplementation(_self, ))
    def __disown__(self):
        self.this.disown()
        _simbody.disown_DecorativeGeometryImplementation(self)
        return weakref.proxy(self)

# Register DecorativeGeometryImplementation in _simbody:
_simbody.DecorativeGeometryImplementation_swigregister(DecorativeGeometryImplementation)
class ArrayDecorativeGeometry(object):
    r"""Proxy of C++ SimTK::Array_< SimTK::DecorativeGeometry > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ArrayDecorativeGeometry self) -> ArrayDecorativeGeometry
        __init__(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n) -> ArrayDecorativeGeometry

        Parameters
        ----------
        n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        __init__(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n, DecorativeGeometry initVal) -> ArrayDecorativeGeometry

        Parameters
        ----------
        n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
        initVal: SimTK::DecorativeGeometry const &

        __init__(ArrayDecorativeGeometry self, ArrayDecorativeGeometry src) -> ArrayDecorativeGeometry

        Parameters
        ----------
        src: SimTK::Array_< SimTK::DecorativeGeometry > const &

        __init__(ArrayDecorativeGeometry self, DecorativeGeometry first, DecorativeGeometry last1, DontCopy arg4) -> ArrayDecorativeGeometry

        Parameters
        ----------
        first: SimTK::DecorativeGeometry *
        last1: SimTK::DecorativeGeometry const *
        arg4: SimTK::DontCopy const &

        """
        _simbody.ArrayDecorativeGeometry_swiginit(self, _simbody.new_ArrayDecorativeGeometry(*args))
    __swig_destroy__ = _simbody.delete_ArrayDecorativeGeometry

    def deallocate(self):
        r"""deallocate(ArrayDecorativeGeometry self) -> ArrayDecorativeGeometry"""
        return _simbody.ArrayDecorativeGeometry_deallocate(self)

    def assign(self, n, fillValue):
        r"""
        assign(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n, DecorativeGeometry fillValue)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
        fillValue: SimTK::DecorativeGeometry const &

        """
        return _simbody.ArrayDecorativeGeometry_assign(self, n, fillValue)

    def fill(self, fillValue):
        r"""
        fill(ArrayDecorativeGeometry self, DecorativeGeometry fillValue)

        Parameters
        ----------
        fillValue: SimTK::DecorativeGeometry const &

        """
        return _simbody.ArrayDecorativeGeometry_fill(self, fillValue)

    def swap(self, other):
        r"""
        swap(ArrayDecorativeGeometry self, ArrayDecorativeGeometry other)

        Parameters
        ----------
        other: SimTK::Array_< SimTK::DecorativeGeometry > &

        """
        return _simbody.ArrayDecorativeGeometry_swap(self, other)

    def adoptData(self, *args):
        r"""
        adoptData(ArrayDecorativeGeometry self, DecorativeGeometry newData, SimTK::Array_< SimTK::DecorativeGeometry >::size_type dataSize, SimTK::Array_< SimTK::DecorativeGeometry >::size_type dataCapacity) -> ArrayDecorativeGeometry

        Parameters
        ----------
        newData: SimTK::DecorativeGeometry *
        dataSize: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
        dataCapacity: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        adoptData(ArrayDecorativeGeometry self, DecorativeGeometry newData, SimTK::Array_< SimTK::DecorativeGeometry >::size_type dataSize) -> ArrayDecorativeGeometry

        Parameters
        ----------
        newData: SimTK::DecorativeGeometry *
        dataSize: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        """
        return _simbody.ArrayDecorativeGeometry_adoptData(self, *args)

    def shareData(self, *args):
        r"""
        shareData(ArrayDecorativeGeometry self, DecorativeGeometry newData, SimTK::Array_< SimTK::DecorativeGeometry >::size_type dataSize) -> ArrayDecorativeGeometry

        Parameters
        ----------
        newData: SimTK::DecorativeGeometry *
        dataSize: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        shareData(ArrayDecorativeGeometry self, DecorativeGeometry first, DecorativeGeometry last1) -> ArrayDecorativeGeometry

        Parameters
        ----------
        first: SimTK::DecorativeGeometry *
        last1: SimTK::DecorativeGeometry const *

        """
        return _simbody.ArrayDecorativeGeometry_shareData(self, *args)

    def size(self):
        r"""size(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::size_type"""
        return _simbody.ArrayDecorativeGeometry_size(self)

    def max_size(self):
        r"""max_size(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::size_type"""
        return _simbody.ArrayDecorativeGeometry_max_size(self)

    def empty(self):
        r"""empty(ArrayDecorativeGeometry self) -> bool"""
        return _simbody.ArrayDecorativeGeometry_empty(self)

    def capacity(self):
        r"""capacity(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::size_type"""
        return _simbody.ArrayDecorativeGeometry_capacity(self)

    def resize(self, *args):
        r"""
        resize(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        resize(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n, DecorativeGeometry initVal)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
        initVal: SimTK::DecorativeGeometry const &

        """
        return _simbody.ArrayDecorativeGeometry_resize(self, *args)

    def reserve(self, n):
        r"""
        reserve(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n)

        Parameters
        ----------
        n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type

        """
        return _simbody.ArrayDecorativeGeometry_reserve(self, n)

    def shrink_to_fit(self):
        r"""shrink_to_fit(ArrayDecorativeGeometry self)"""
        return _simbody.ArrayDecorativeGeometry_shrink_to_fit(self)

    def allocated(self):
        r"""allocated(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::size_type"""
        return _simbody.ArrayDecorativeGeometry_allocated(self)

    def isOwner(self):
        r"""isOwner(ArrayDecorativeGeometry self) -> bool"""
        return _simbody.ArrayDecorativeGeometry_isOwner(self)

    def cbegin(self):
        r"""cbegin(ArrayDecorativeGeometry self) -> DecorativeGeometry"""
        return _simbody.ArrayDecorativeGeometry_cbegin(self)

    def begin(self, *args):
        r"""
        begin(ArrayDecorativeGeometry self) -> DecorativeGeometry
        begin(ArrayDecorativeGeometry self) -> DecorativeGeometry
        """
        return _simbody.ArrayDecorativeGeometry_begin(self, *args)

    def cend(self):
        r"""cend(ArrayDecorativeGeometry self) -> DecorativeGeometry"""
        return _simbody.ArrayDecorativeGeometry_cend(self)

    def end(self, *args):
        r"""
        end(ArrayDecorativeGeometry self) -> DecorativeGeometry
        end(ArrayDecorativeGeometry self) -> DecorativeGeometry
        """
        return _simbody.ArrayDecorativeGeometry_end(self, *args)

    def crbegin(self):
        r"""crbegin(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::const_reverse_iterator"""
        return _simbody.ArrayDecorativeGeometry_crbegin(self)

    def rbegin(self, *args):
        r"""
        rbegin(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::const_reverse_iterator
        rbegin(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::reverse_iterator
        """
        return _simbody.ArrayDecorativeGeometry_rbegin(self, *args)

    def crend(self):
        r"""crend(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::const_reverse_iterator"""
        return _simbody.ArrayDecorativeGeometry_crend(self)

    def rend(self, *args):
        r"""
        rend(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::const_reverse_iterator
        rend(ArrayDecorativeGeometry self) -> SimTK::Array_< SimTK::DecorativeGeometry >::reverse_iterator
        """
        return _simbody.ArrayDecorativeGeometry_rend(self, *args)

    def cdata(self):
        r"""cdata(ArrayDecorativeGeometry self) -> DecorativeGeometry"""
        return _simbody.ArrayDecorativeGeometry_cdata(self)

    def data(self, *args):
        r"""
        data(ArrayDecorativeGeometry self) -> DecorativeGeometry
        data(ArrayDecorativeGeometry self) -> DecorativeGeometry
        """
        return _simbody.ArrayDecorativeGeometry_data(self, *args)

    def at(self, *args):
        r"""
        at(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::index_type i) -> DecorativeGeometry

        Parameters
        ----------
        i: SimTK::Array_< SimTK::DecorativeGeometry >::index_type

        at(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::index_type i) -> DecorativeGeometry

        Parameters
        ----------
        i: SimTK::Array_< SimTK::DecorativeGeometry >::index_type

        """
        return _simbody.ArrayDecorativeGeometry_at(self, *args)

    def getElt(self, i):
        r"""
        getElt(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::index_type i) -> DecorativeGeometry

        Parameters
        ----------
        i: SimTK::Array_< SimTK::DecorativeGeometry >::index_type

        """
        return _simbody.ArrayDecorativeGeometry_getElt(self, i)

    def updElt(self, i):
        r"""
        updElt(ArrayDecorativeGeometry self, SimTK::Array_< SimTK::DecorativeGeometry >::index_type i) -> DecorativeGeometry

        Parameters
        ----------
        i: SimTK::Array_< SimTK::DecorativeGeometry >::index_type

        """
        return _simbody.ArrayDecorativeGeometry_updElt(self, i)

    def front(self, *args):
        r"""
        front(ArrayDecorativeGeometry self) -> DecorativeGeometry
        front(ArrayDecorativeGeometry self) -> DecorativeGeometry
        """
        return _simbody.ArrayDecorativeGeometry_front(self, *args)

    def back(self, *args):
        r"""
        back(ArrayDecorativeGeometry self) -> DecorativeGeometry
        back(ArrayDecorativeGeometry self) -> DecorativeGeometry
        """
        return _simbody.ArrayDecorativeGeometry_back(self, *args)

    def push_back(self, *args):
        r"""
        push_back(ArrayDecorativeGeometry self, DecorativeGeometry value)

        Parameters
        ----------
        value: SimTK::DecorativeGeometry const &

        push_back(ArrayDecorativeGeometry self)
        """
        return _simbody.ArrayDecorativeGeometry_push_back(self, *args)

    def raw_push_back(self):
        r"""raw_push_back(ArrayDecorativeGeometry self) -> DecorativeGeometry"""
        return _simbody.ArrayDecorativeGeometry_raw_push_back(self)

    def pop_back(self):
        r"""pop_back(ArrayDecorativeGeometry self)"""
        return _simbody.ArrayDecorativeGeometry_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ArrayDecorativeGeometry self, DecorativeGeometry first, DecorativeGeometry last1) -> DecorativeGeometry

        Parameters
        ----------
        first: SimTK::DecorativeGeometry *
        last1: SimTK::DecorativeGeometry const *

        erase(ArrayDecorativeGeometry self, DecorativeGeometry p) -> DecorativeGeometry

        Parameters
        ----------
        p: SimTK::DecorativeGeometry *

        """
        return _simbody.ArrayDecorativeGeometry_erase(self, *args)

    def eraseFast(self, p):
        r"""
        eraseFast(ArrayDecorativeGeometry self, DecorativeGeometry p) -> DecorativeGeometry

        Parameters
        ----------
        p: SimTK::DecorativeGeometry *

        """
        return _simbody.ArrayDecorativeGeometry_eraseFast(self, p)

    def clear(self):
        r"""clear(ArrayDecorativeGeometry self)"""
        return _simbody.ArrayDecorativeGeometry_clear(self)

    def insert(self, *args):
        r"""
        insert(ArrayDecorativeGeometry self, DecorativeGeometry p, SimTK::Array_< SimTK::DecorativeGeometry >::size_type n, DecorativeGeometry value) -> DecorativeGeometry

        Parameters
        ----------
        p: SimTK::DecorativeGeometry *
        n: SimTK::Array_< SimTK::DecorativeGeometry >::size_type
        value: SimTK::DecorativeGeometry const &

        insert(ArrayDecorativeGeometry self, DecorativeGeometry p, DecorativeGeometry value) -> DecorativeGeometry

        Parameters
        ----------
        p: SimTK::DecorativeGeometry *
        value: SimTK::DecorativeGeometry const &

        """
        return _simbody.ArrayDecorativeGeometry_insert(self, *args)

# Register ArrayDecorativeGeometry in _simbody:
_simbody.ArrayDecorativeGeometry_swigregister(ArrayDecorativeGeometry)
class Stage(object):
    r"""Proxy of C++ SimTK::Stage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Empty = _simbody.Stage_Empty
    
    Topology = _simbody.Stage_Topology
    
    Model = _simbody.Stage_Model
    
    Instance = _simbody.Stage_Instance
    
    Time = _simbody.Stage_Time
    
    Position = _simbody.Stage_Position
    
    Velocity = _simbody.Stage_Velocity
    
    Dynamics = _simbody.Stage_Dynamics
    
    Acceleration = _simbody.Stage_Acceleration
    
    Report = _simbody.Stage_Report
    
    Infinity = _simbody.Stage_Infinity
    
    LowestValid = _simbody.Stage_LowestValid
    
    HighestValid = _simbody.Stage_HighestValid
    
    LowestRuntime = _simbody.Stage_LowestRuntime
    
    HighestRuntime = _simbody.Stage_HighestRuntime
    
    NValid = _simbody.Stage_NValid
    
    NRuntime = _simbody.Stage_NRuntime
    

    def __init__(self, *args):
        r"""
        __init__(Stage self) -> Stage
        __init__(Stage self, int l) -> Stage

        Parameters
        ----------
        l: int

        """
        _simbody.Stage_swiginit(self, _simbody.new_Stage(*args))

    def next(self):
        r"""next(Stage self) -> Stage"""
        return _simbody.Stage_next(self)

    def prev(self):
        r"""prev(Stage self) -> Stage"""
        return _simbody.Stage_prev(self)

    def getName(self):
        r"""getName(Stage self) -> String"""
        return _simbody.Stage_getName(self)

    def invalidate(self, tooHigh):
        r"""
        invalidate(Stage self, Stage tooHigh)

        Parameters
        ----------
        tooHigh: SimTK::Stage

        """
        return _simbody.Stage_invalidate(self, tooHigh)

    def isInRuntimeRange(self):
        r"""isInRuntimeRange(Stage self) -> bool"""
        return _simbody.Stage_isInRuntimeRange(self)
    __swig_destroy__ = _simbody.delete_Stage

# Register Stage in _simbody:
_simbody.Stage_swigregister(Stage)
class State(object):
    r"""Proxy of C++ SimTK::State class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _simbody.delete_State

    def clear(self):
        r"""clear(State self)"""
        return _simbody.State_clear(self)

    def setNumSubsystems(self, i):
        r"""
        setNumSubsystems(State self, int i)

        Parameters
        ----------
        i: int

        """
        return _simbody.State_setNumSubsystems(self, i)

    def __init__(self, *args):
        r"""
        __init__(State self) -> State
        __init__(State self, State arg2) -> State

        Parameters
        ----------
        arg2: SimTK::State const &

        """
        _simbody.State_swiginit(self, _simbody.new_State(*args))

    def getNumSubsystems(self):
        r"""getNumSubsystems(State self) -> int"""
        return _simbody.State_getNumSubsystems(self)

    def getSystemStage(self):
        r"""getSystemStage(State self) -> Stage"""
        return _simbody.State_getSystemStage(self)

    def invalidateAll(self, arg2):
        r"""
        invalidateAll(State self, Stage arg2)

        Parameters
        ----------
        arg2: SimTK::Stage

        """
        return _simbody.State_invalidateAll(self, arg2)

    def invalidateAllCacheAtOrAbove(self, arg2):
        r"""
        invalidateAllCacheAtOrAbove(State self, Stage arg2)

        Parameters
        ----------
        arg2: SimTK::Stage

        """
        return _simbody.State_invalidateAllCacheAtOrAbove(self, arg2)

    def getNY(self):
        r"""getNY(State self) -> int"""
        return _simbody.State_getNY(self)

    def getNYErr(self):
        r"""getNYErr(State self) -> int"""
        return _simbody.State_getNYErr(self)

    def getNMultipliers(self):
        r"""getNMultipliers(State self) -> int"""
        return _simbody.State_getNMultipliers(self)

    def getNEventTriggers(self):
        r"""getNEventTriggers(State self) -> int"""
        return _simbody.State_getNEventTriggers(self)

    def getNEventTriggersByStage(self, arg2):
        r"""
        getNEventTriggersByStage(State self, Stage arg2) -> int

        Parameters
        ----------
        arg2: SimTK::Stage

        """
        return _simbody.State_getNEventTriggersByStage(self, arg2)

    def getEventTriggerStartByStage(self, arg2):
        r"""
        getEventTriggerStartByStage(State self, Stage arg2) -> SystemEventTriggerIndex

        Parameters
        ----------
        arg2: SimTK::Stage

        """
        return _simbody.State_getEventTriggerStartByStage(self, arg2)

    def getQStart(self, *args):
        r"""
        getQStart(State self) -> SystemYIndex
        getQStart(State self, SubsystemIndex arg2) -> SystemQIndex

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getQStart(self, *args)

    def getNQ(self, *args):
        r"""
        getNQ(State self) -> int
        getNQ(State self, SubsystemIndex arg2) -> int

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getNQ(self, *args)

    def getUStart(self, *args):
        r"""
        getUStart(State self) -> SystemYIndex
        getUStart(State self, SubsystemIndex arg2) -> SystemUIndex

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getUStart(self, *args)

    def getNU(self, *args):
        r"""
        getNU(State self) -> int
        getNU(State self, SubsystemIndex arg2) -> int

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getNU(self, *args)

    def getZStart(self, *args):
        r"""
        getZStart(State self) -> SystemYIndex
        getZStart(State self, SubsystemIndex arg2) -> SystemZIndex

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getZStart(self, *args)

    def getNZ(self, *args):
        r"""
        getNZ(State self) -> int
        getNZ(State self, SubsystemIndex arg2) -> int

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getNZ(self, *args)

    def getQErrStart(self, *args):
        r"""
        getQErrStart(State self) -> SystemYErrIndex
        getQErrStart(State self, SubsystemIndex arg2) -> SystemQErrIndex

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getQErrStart(self, *args)

    def getNQErr(self, *args):
        r"""
        getNQErr(State self) -> int
        getNQErr(State self, SubsystemIndex arg2) -> int

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getNQErr(self, *args)

    def getUErrStart(self, *args):
        r"""
        getUErrStart(State self) -> SystemYErrIndex
        getUErrStart(State self, SubsystemIndex arg2) -> SystemUErrIndex

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getUErrStart(self, *args)

    def getNUErr(self, *args):
        r"""
        getNUErr(State self) -> int
        getNUErr(State self, SubsystemIndex arg2) -> int

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getNUErr(self, *args)

    def getUDotErrStart(self, arg2):
        r"""
        getUDotErrStart(State self, SubsystemIndex arg2) -> SystemUDotErrIndex

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getUDotErrStart(self, arg2)

    def getNUDotErr(self, *args):
        r"""
        getNUDotErr(State self) -> int
        getNUDotErr(State self, SubsystemIndex arg2) -> int

        Parameters
        ----------
        arg2: SubsystemIndex

        """
        return _simbody.State_getNUDotErr(self, *args)

    def getEventTriggers(self):
        r"""getEventTriggers(State self) -> Vector"""
        return _simbody.State_getEventTriggers(self)

    def getEventTriggersByStage(self, *args):
        r"""
        getEventTriggersByStage(State self, Stage arg2) -> Vector

        Parameters
        ----------
        arg2: SimTK::Stage

        getEventTriggersByStage(State self, SubsystemIndex arg2, Stage arg3) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex
        arg3: SimTK::Stage

        """
        return _simbody.State_getEventTriggersByStage(self, *args)

    def updEventTriggers(self):
        r"""updEventTriggers(State self) -> Vector"""
        return _simbody.State_updEventTriggers(self)

    def updEventTriggersByStage(self, *args):
        r"""
        updEventTriggersByStage(State self, Stage arg2) -> Vector

        Parameters
        ----------
        arg2: SimTK::Stage

        updEventTriggersByStage(State self, SubsystemIndex arg2, Stage arg3) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex
        arg3: SimTK::Stage

        """
        return _simbody.State_updEventTriggersByStage(self, *args)

    def getTime(self):
        r"""getTime(State self) -> double const &"""
        return _simbody.State_getTime(self)

    def getY(self):
        r"""getY(State self) -> Vector"""
        return _simbody.State_getY(self)

    def getQ(self, *args):
        r"""
        getQ(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getQ(State self) -> Vector
        """
        return _simbody.State_getQ(self, *args)

    def getU(self, *args):
        r"""
        getU(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getU(State self) -> Vector
        """
        return _simbody.State_getU(self, *args)

    def getZ(self, *args):
        r"""
        getZ(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getZ(State self) -> Vector
        """
        return _simbody.State_getZ(self, *args)

    def getUWeights(self, *args):
        r"""
        getUWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getUWeights(State self) -> Vector
        """
        return _simbody.State_getUWeights(self, *args)

    def getZWeights(self, *args):
        r"""
        getZWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getZWeights(State self) -> Vector
        """
        return _simbody.State_getZWeights(self, *args)

    def updUWeights(self, *args):
        r"""
        updUWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updUWeights(State self) -> Vector
        """
        return _simbody.State_updUWeights(self, *args)

    def updZWeights(self, *args):
        r"""
        updZWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updZWeights(State self) -> Vector
        """
        return _simbody.State_updZWeights(self, *args)

    def updTime(self):
        r"""updTime(State self) -> double &"""
        return _simbody.State_updTime(self)

    def updY(self):
        r"""updY(State self) -> Vector"""
        return _simbody.State_updY(self)

    def setTime(self, t):
        r"""
        setTime(State self, double t)

        Parameters
        ----------
        t: double

        """
        return _simbody.State_setTime(self, t)

    def setY(self, y):
        r"""
        setY(State self, Vector y)

        Parameters
        ----------
        y: SimTK::Vector const &

        """
        return _simbody.State_setY(self, y)

    def updQ(self, *args):
        r"""
        updQ(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updQ(State self) -> Vector
        """
        return _simbody.State_updQ(self, *args)

    def updU(self, *args):
        r"""
        updU(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updU(State self) -> Vector
        """
        return _simbody.State_updU(self, *args)

    def updZ(self, *args):
        r"""
        updZ(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updZ(State self) -> Vector
        """
        return _simbody.State_updZ(self, *args)

    def setQ(self, q):
        r"""
        setQ(State self, Vector q)

        Parameters
        ----------
        q: SimTK::Vector const &

        """
        return _simbody.State_setQ(self, q)

    def setU(self, u):
        r"""
        setU(State self, Vector u)

        Parameters
        ----------
        u: SimTK::Vector const &

        """
        return _simbody.State_setU(self, u)

    def setZ(self, z):
        r"""
        setZ(State self, Vector z)

        Parameters
        ----------
        z: SimTK::Vector const &

        """
        return _simbody.State_setZ(self, z)

    def getYDot(self):
        r"""getYDot(State self) -> Vector"""
        return _simbody.State_getYDot(self)

    def getQDot(self, *args):
        r"""
        getQDot(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getQDot(State self) -> Vector
        """
        return _simbody.State_getQDot(self, *args)

    def getZDot(self, *args):
        r"""
        getZDot(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getZDot(State self) -> Vector
        """
        return _simbody.State_getZDot(self, *args)

    def getUDot(self, *args):
        r"""
        getUDot(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getUDot(State self) -> Vector
        """
        return _simbody.State_getUDot(self, *args)

    def getQDotDot(self, *args):
        r"""
        getQDotDot(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getQDotDot(State self) -> Vector
        """
        return _simbody.State_getQDotDot(self, *args)

    def updYDot(self):
        r"""updYDot(State self) -> Vector"""
        return _simbody.State_updYDot(self)

    def updQDot(self, *args):
        r"""
        updQDot(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updQDot(State self) -> Vector
        """
        return _simbody.State_updQDot(self, *args)

    def updZDot(self, *args):
        r"""
        updZDot(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updZDot(State self) -> Vector
        """
        return _simbody.State_updZDot(self, *args)

    def updUDot(self, *args):
        r"""
        updUDot(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updUDot(State self) -> Vector
        """
        return _simbody.State_updUDot(self, *args)

    def updQDotDot(self, *args):
        r"""
        updQDotDot(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updQDotDot(State self) -> Vector
        """
        return _simbody.State_updQDotDot(self, *args)

    def getYErr(self):
        r"""getYErr(State self) -> Vector"""
        return _simbody.State_getYErr(self)

    def getQErr(self, *args):
        r"""
        getQErr(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getQErr(State self) -> Vector
        """
        return _simbody.State_getQErr(self, *args)

    def getUErr(self, *args):
        r"""
        getUErr(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getUErr(State self) -> Vector
        """
        return _simbody.State_getUErr(self, *args)

    def getUDotErr(self, *args):
        r"""
        getUDotErr(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getUDotErr(State self) -> Vector
        """
        return _simbody.State_getUDotErr(self, *args)

    def getMultipliers(self, *args):
        r"""
        getMultipliers(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getMultipliers(State self) -> Vector
        """
        return _simbody.State_getMultipliers(self, *args)

    def getQErrWeights(self, *args):
        r"""
        getQErrWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getQErrWeights(State self) -> Vector
        """
        return _simbody.State_getQErrWeights(self, *args)

    def getUErrWeights(self, *args):
        r"""
        getUErrWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        getUErrWeights(State self) -> Vector
        """
        return _simbody.State_getUErrWeights(self, *args)

    def updQErrWeights(self, *args):
        r"""
        updQErrWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updQErrWeights(State self) -> Vector
        """
        return _simbody.State_updQErrWeights(self, *args)

    def updUErrWeights(self, *args):
        r"""
        updUErrWeights(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updUErrWeights(State self) -> Vector
        """
        return _simbody.State_updUErrWeights(self, *args)

    def updYErr(self):
        r"""updYErr(State self) -> Vector"""
        return _simbody.State_updYErr(self)

    def updQErr(self, *args):
        r"""
        updQErr(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updQErr(State self) -> Vector
        """
        return _simbody.State_updQErr(self, *args)

    def updUErr(self, *args):
        r"""
        updUErr(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updUErr(State self) -> Vector
        """
        return _simbody.State_updUErr(self, *args)

    def updUDotErr(self, *args):
        r"""
        updUDotErr(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updUDotErr(State self) -> Vector
        """
        return _simbody.State_updUDotErr(self, *args)

    def updMultipliers(self, *args):
        r"""
        updMultipliers(State self, SubsystemIndex arg2) -> Vector

        Parameters
        ----------
        arg2: SubsystemIndex

        updMultipliers(State self) -> Vector
        """
        return _simbody.State_updMultipliers(self, *args)

    def getSystemStageVersions(self, versions):
        r"""
        getSystemStageVersions(State self, SimTKArrayInt versions)

        Parameters
        ----------
        versions: SimTK::Array_< SimTK::StageVersion > &

        """
        return _simbody.State_getSystemStageVersions(self, versions)

    def getLowestSystemStageDifference(self, prevVersions):
        r"""
        getLowestSystemStageDifference(State self, SimTKArrayInt prevVersions) -> Stage

        Parameters
        ----------
        prevVersions: SimTK::Array_< SimTK::StageVersion > const &

        """
        return _simbody.State_getLowestSystemStageDifference(self, prevVersions)

    def setSystemTopologyStageVersion(self, topoVersion):
        r"""
        setSystemTopologyStageVersion(State self, SimTK::StageVersion topoVersion)

        Parameters
        ----------
        topoVersion: SimTK::StageVersion

        """
        return _simbody.State_setSystemTopologyStageVersion(self, topoVersion)

    def autoUpdateDiscreteVariables(self):
        r"""autoUpdateDiscreteVariables(State self)"""
        return _simbody.State_autoUpdateDiscreteVariables(self)

    def cacheToString(self):
        r"""cacheToString(State self) -> String"""
        return _simbody.State_cacheToString(self)

# Register State in _simbody:
_simbody.State_swigregister(State)

def __lshift__(*args):
    r"""
    __lshift__(std::ostream & o, Stage g) -> std::ostream

    Parameters
    ----------
    o: std::ostream &
    g: SimTK::Stage

    __lshift__(std::ostream & o, State s) -> std::ostream &

    Parameters
    ----------
    o: std::ostream &
    s: SimTK::State const &

    """
    return _simbody.__lshift__(*args)
class StdVectorState(object):
    r"""Proxy of C++ std::vector< SimTK::State > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(StdVectorState self) -> SwigPyIterator"""
        return _simbody.StdVectorState_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(StdVectorState self) -> bool"""
        return _simbody.StdVectorState___nonzero__(self)

    def __bool__(self):
        r"""__bool__(StdVectorState self) -> bool"""
        return _simbody.StdVectorState___bool__(self)

    def __len__(self):
        r"""__len__(StdVectorState self) -> std::vector< SimTK::State >::size_type"""
        return _simbody.StdVectorState___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(StdVectorState self, std::vector< SimTK::State >::difference_type i, std::vector< SimTK::State >::difference_type j) -> StdVectorState

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        j: std::vector< SimTK::State >::difference_type

        """
        return _simbody.StdVectorState___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(StdVectorState self, std::vector< SimTK::State >::difference_type i, std::vector< SimTK::State >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        j: std::vector< SimTK::State >::difference_type

        __setslice__(StdVectorState self, std::vector< SimTK::State >::difference_type i, std::vector< SimTK::State >::difference_type j, StdVectorState v)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        j: std::vector< SimTK::State >::difference_type
        v: std::vector< SimTK::State,std::allocator< SimTK::State > > const &

        """
        return _simbody.StdVectorState___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(StdVectorState self, std::vector< SimTK::State >::difference_type i, std::vector< SimTK::State >::difference_type j)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        j: std::vector< SimTK::State >::difference_type

        """
        return _simbody.StdVectorState___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(StdVectorState self, std::vector< SimTK::State >::difference_type i)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type

        __delitem__(StdVectorState self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        """
        return _simbody.StdVectorState___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(StdVectorState self, SWIGPY_SLICEOBJECT * slice) -> StdVectorState

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __getitem__(StdVectorState self, std::vector< SimTK::State >::difference_type i) -> State

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type

        """
        return _simbody.StdVectorState___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(StdVectorState self, SWIGPY_SLICEOBJECT * slice, StdVectorState v)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *
        v: std::vector< SimTK::State,std::allocator< SimTK::State > > const &

        __setitem__(StdVectorState self, SWIGPY_SLICEOBJECT * slice)

        Parameters
        ----------
        slice: SWIGPY_SLICEOBJECT *

        __setitem__(StdVectorState self, std::vector< SimTK::State >::difference_type i, State x)

        Parameters
        ----------
        i: std::vector< SimTK::State >::difference_type
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simbody.StdVectorState___setitem__(self, *args)

    def pop(self):
        r"""pop(StdVectorState self) -> State"""
        return _simbody.StdVectorState_pop(self)

    def append(self, x):
        r"""
        append(StdVectorState self, State x)

        Parameters
        ----------
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simbody.StdVectorState_append(self, x)

    def empty(self):
        r"""empty(StdVectorState self) -> bool"""
        return _simbody.StdVectorState_empty(self)

    def size(self):
        r"""size(StdVectorState self) -> std::vector< SimTK::State >::size_type"""
        return _simbody.StdVectorState_size(self)

    def swap(self, v):
        r"""
        swap(StdVectorState self, StdVectorState v)

        Parameters
        ----------
        v: std::vector< SimTK::State > &

        """
        return _simbody.StdVectorState_swap(self, v)

    def begin(self):
        r"""begin(StdVectorState self) -> std::vector< SimTK::State >::iterator"""
        return _simbody.StdVectorState_begin(self)

    def end(self):
        r"""end(StdVectorState self) -> std::vector< SimTK::State >::iterator"""
        return _simbody.StdVectorState_end(self)

    def rbegin(self):
        r"""rbegin(StdVectorState self) -> std::vector< SimTK::State >::reverse_iterator"""
        return _simbody.StdVectorState_rbegin(self)

    def rend(self):
        r"""rend(StdVectorState self) -> std::vector< SimTK::State >::reverse_iterator"""
        return _simbody.StdVectorState_rend(self)

    def clear(self):
        r"""clear(StdVectorState self)"""
        return _simbody.StdVectorState_clear(self)

    def get_allocator(self):
        r"""get_allocator(StdVectorState self) -> std::vector< SimTK::State >::allocator_type"""
        return _simbody.StdVectorState_get_allocator(self)

    def pop_back(self):
        r"""pop_back(StdVectorState self)"""
        return _simbody.StdVectorState_pop_back(self)

    def erase(self, *args):
        r"""
        erase(StdVectorState self, std::vector< SimTK::State >::iterator pos) -> std::vector< SimTK::State >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::State >::iterator

        erase(StdVectorState self, std::vector< SimTK::State >::iterator first, std::vector< SimTK::State >::iterator last) -> std::vector< SimTK::State >::iterator

        Parameters
        ----------
        first: std::vector< SimTK::State >::iterator
        last: std::vector< SimTK::State >::iterator

        """
        return _simbody.StdVectorState_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StdVectorState self) -> StdVectorState
        __init__(StdVectorState self, StdVectorState other) -> StdVectorState

        Parameters
        ----------
        other: std::vector< SimTK::State > const &

        __init__(StdVectorState self, std::vector< SimTK::State >::size_type size) -> StdVectorState

        Parameters
        ----------
        size: std::vector< SimTK::State >::size_type

        __init__(StdVectorState self, std::vector< SimTK::State >::size_type size, State value) -> StdVectorState

        Parameters
        ----------
        size: std::vector< SimTK::State >::size_type
        value: std::vector< SimTK::State >::value_type const &

        """
        _simbody.StdVectorState_swiginit(self, _simbody.new_StdVectorState(*args))

    def push_back(self, x):
        r"""
        push_back(StdVectorState self, State x)

        Parameters
        ----------
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simbody.StdVectorState_push_back(self, x)

    def front(self):
        r"""front(StdVectorState self) -> State"""
        return _simbody.StdVectorState_front(self)

    def back(self):
        r"""back(StdVectorState self) -> State"""
        return _simbody.StdVectorState_back(self)

    def assign(self, n, x):
        r"""
        assign(StdVectorState self, std::vector< SimTK::State >::size_type n, State x)

        Parameters
        ----------
        n: std::vector< SimTK::State >::size_type
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simbody.StdVectorState_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(StdVectorState self, std::vector< SimTK::State >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< SimTK::State >::size_type

        resize(StdVectorState self, std::vector< SimTK::State >::size_type new_size, State x)

        Parameters
        ----------
        new_size: std::vector< SimTK::State >::size_type
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simbody.StdVectorState_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(StdVectorState self, std::vector< SimTK::State >::iterator pos, State x) -> std::vector< SimTK::State >::iterator

        Parameters
        ----------
        pos: std::vector< SimTK::State >::iterator
        x: std::vector< SimTK::State >::value_type const &

        insert(StdVectorState self, std::vector< SimTK::State >::iterator pos, std::vector< SimTK::State >::size_type n, State x)

        Parameters
        ----------
        pos: std::vector< SimTK::State >::iterator
        n: std::vector< SimTK::State >::size_type
        x: std::vector< SimTK::State >::value_type const &

        """
        return _simbody.StdVectorState_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(StdVectorState self, std::vector< SimTK::State >::size_type n)

        Parameters
        ----------
        n: std::vector< SimTK::State >::size_type

        """
        return _simbody.StdVectorState_reserve(self, n)

    def capacity(self):
        r"""capacity(StdVectorState self) -> std::vector< SimTK::State >::size_type"""
        return _simbody.StdVectorState_capacity(self)
    __swig_destroy__ = _simbody.delete_StdVectorState

# Register StdVectorState in _simbody:
_simbody.StdVectorState_swigregister(StdVectorState)
class SimbodyMatterSubsystem(object):
    r"""Proxy of C++ SimTK::SimbodyMatterSubsystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SimbodyMatterSubsystem self) -> SimbodyMatterSubsystem"""
        _simbody.SimbodyMatterSubsystem_swiginit(self, _simbody.new_SimbodyMatterSubsystem())
    __swig_destroy__ = _simbody.delete_SimbodyMatterSubsystem

    def calcSystemMass(self, s):
        r"""
        calcSystemMass(SimbodyMatterSubsystem self, State s) -> SimTK::Real

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcSystemMass(self, s)

    def calcSystemMassCenterLocationInGround(self, s):
        r"""
        calcSystemMassCenterLocationInGround(SimbodyMatterSubsystem self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcSystemMassCenterLocationInGround(self, s)

    def calcSystemMassPropertiesInGround(self, s):
        r"""
        calcSystemMassPropertiesInGround(SimbodyMatterSubsystem self, State s) -> MassProperties

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcSystemMassPropertiesInGround(self, s)

    def calcSystemCentralInertiaInGround(self, s):
        r"""
        calcSystemCentralInertiaInGround(SimbodyMatterSubsystem self, State s) -> Inertia

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcSystemCentralInertiaInGround(self, s)

    def calcSystemMassCenterVelocityInGround(self, s):
        r"""
        calcSystemMassCenterVelocityInGround(SimbodyMatterSubsystem self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcSystemMassCenterVelocityInGround(self, s)

    def calcSystemMassCenterAccelerationInGround(self, s):
        r"""
        calcSystemMassCenterAccelerationInGround(SimbodyMatterSubsystem self, State s) -> Vec3

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcSystemMassCenterAccelerationInGround(self, s)

    def calcSystemMomentumAboutGroundOrigin(self, s):
        r"""
        calcSystemMomentumAboutGroundOrigin(SimbodyMatterSubsystem self, State s) -> SpatialVec

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcSystemMomentumAboutGroundOrigin(self, s)

    def calcSystemCentralMomentum(self, s):
        r"""
        calcSystemCentralMomentum(SimbodyMatterSubsystem self, State s) -> SpatialVec

        Parameters
        ----------
        s: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcSystemCentralMomentum(self, s)

    def calcKineticEnergy(self, state):
        r"""
        calcKineticEnergy(SimbodyMatterSubsystem self, State state) -> SimTK::Real

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcKineticEnergy(self, state)

    def multiplyBySystemJacobian(self, state, u, Ju):
        r"""
        multiplyBySystemJacobian(SimbodyMatterSubsystem self, State state, Vector u, VectorOfSpatialVec Ju)

        Parameters
        ----------
        state: SimTK::State const &
        u: SimTK::Vector const &
        Ju: SimTK::Vector_< SimTK::SpatialVec > &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyBySystemJacobian(self, state, u, Ju)

    def calcBiasForSystemJacobian(self, *args):
        r"""
        calcBiasForSystemJacobian(SimbodyMatterSubsystem self, State state, VectorOfSpatialVec JDotu)

        Parameters
        ----------
        state: SimTK::State const &
        JDotu: SimTK::Vector_< SimTK::SpatialVec > &

        calcBiasForSystemJacobian(SimbodyMatterSubsystem self, State state, Vector JDotu)

        Parameters
        ----------
        state: SimTK::State const &
        JDotu: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcBiasForSystemJacobian(self, *args)

    def multiplyBySystemJacobianTranspose(self, state, F_G, f):
        r"""
        multiplyBySystemJacobianTranspose(SimbodyMatterSubsystem self, State state, VectorOfSpatialVec F_G, Vector f)

        Parameters
        ----------
        state: SimTK::State const &
        F_G: SimTK::Vector_< SimTK::SpatialVec > const &
        f: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyBySystemJacobianTranspose(self, state, F_G, f)

    def calcSystemJacobian(self, *args):
        r"""
        calcSystemJacobian(SimbodyMatterSubsystem self, State state, MatrixOfSpatialVec J_G)

        Parameters
        ----------
        state: SimTK::State const &
        J_G: SimTK::Matrix_< SimTK::SpatialVec > &

        calcSystemJacobian(SimbodyMatterSubsystem self, State state, Matrix J_G)

        Parameters
        ----------
        state: SimTK::State const &
        J_G: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcSystemJacobian(self, *args)

    def multiplyByStationJacobian(self, *args):
        r"""
        multiplyByStationJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, Vector u, VectorVec3 JSu)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        stationPInB: SimTK::Array_< SimTK::Vec3 > const &
        u: SimTK::Vector const &
        JSu: SimTK::Vector_< SimTK::Vec3 > &

        multiplyByStationJacobian(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 stationPInB, Vector u) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        stationPInB: SimTK::Vec3 const &
        u: SimTK::Vector const &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByStationJacobian(self, *args)

    def multiplyByStationJacobianTranspose(self, *args):
        r"""
        multiplyByStationJacobianTranspose(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, VectorVec3 f_GP, Vector f)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        stationPInB: SimTK::Array_< SimTK::Vec3 > const &
        f_GP: SimTK::Vector_< SimTK::Vec3 > const &
        f: SimTK::Vector &

        multiplyByStationJacobianTranspose(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 stationPInB, Vec3 f_GP, Vector f)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        stationPInB: SimTK::Vec3 const &
        f_GP: SimTK::Vec3 const &
        f: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByStationJacobianTranspose(self, *args)

    def calcStationJacobian(self, *args):
        r"""
        calcStationJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, MatrixVec3 JS)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        stationPInB: SimTK::Array_< SimTK::Vec3 > const &
        JS: SimTK::Matrix_< SimTK::Vec3 > &

        calcStationJacobian(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 stationPInB, RowVectorVec3 JS)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        stationPInB: SimTK::Vec3 const &
        JS: SimTK::RowVector_< SimTK::Vec3 > &

        calcStationJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, Matrix JS)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        stationPInB: SimTK::Array_< SimTK::Vec3 > const &
        JS: SimTK::Matrix &

        calcStationJacobian(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 stationPInB, Matrix JS)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        stationPInB: SimTK::Vec3 const &
        JS: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcStationJacobian(self, *args)

    def calcBiasForStationJacobian(self, *args):
        r"""
        calcBiasForStationJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, VectorVec3 JSDotu)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        stationPInB: SimTK::Array_< SimTK::Vec3 > const &
        JSDotu: SimTK::Vector_< SimTK::Vec3 > &

        calcBiasForStationJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 stationPInB, Vector JSDotu)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        stationPInB: SimTK::Array_< SimTK::Vec3 > const &
        JSDotu: SimTK::Vector &

        calcBiasForStationJacobian(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 stationPInB) -> Vec3

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        stationPInB: SimTK::Vec3 const &

        """
        return _simbody.SimbodyMatterSubsystem_calcBiasForStationJacobian(self, *args)

    def multiplyByFrameJacobian(self, *args):
        r"""
        multiplyByFrameJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, Vector u, VectorOfSpatialVec JFu)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        originAoInB: SimTK::Array_< SimTK::Vec3 > const &
        u: SimTK::Vector const &
        JFu: SimTK::Vector_< SimTK::SpatialVec > &

        multiplyByFrameJacobian(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 originAoInB, Vector u) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        originAoInB: SimTK::Vec3 const &
        u: SimTK::Vector const &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByFrameJacobian(self, *args)

    def multiplyByFrameJacobianTranspose(self, *args):
        r"""
        multiplyByFrameJacobianTranspose(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, VectorOfSpatialVec F_GAo, Vector f)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        originAoInB: SimTK::Array_< SimTK::Vec3 > const &
        F_GAo: SimTK::Vector_< SimTK::SpatialVec > const &
        f: SimTK::Vector &

        multiplyByFrameJacobianTranspose(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 originAoInB, SpatialVec F_GAo, Vector f)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        originAoInB: SimTK::Vec3 const &
        F_GAo: SimTK::SpatialVec const &
        f: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByFrameJacobianTranspose(self, *args)

    def calcFrameJacobian(self, *args):
        r"""
        calcFrameJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, MatrixOfSpatialVec JF)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        originAoInB: SimTK::Array_< SimTK::Vec3 > const &
        JF: SimTK::Matrix_< SimTK::SpatialVec > &

        calcFrameJacobian(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 originAoInB, SimTK::RowVector_< SimTK::SpatialVec > & JF)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        originAoInB: SimTK::Vec3 const &
        JF: SimTK::RowVector_< SimTK::SpatialVec > &

        calcFrameJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, Matrix JF)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        originAoInB: SimTK::Array_< SimTK::Vec3 > const &
        JF: SimTK::Matrix &

        calcFrameJacobian(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 originAoInB, Matrix JF)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        originAoInB: SimTK::Vec3 const &
        JF: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcFrameJacobian(self, *args)

    def calcBiasForFrameJacobian(self, *args):
        r"""
        calcBiasForFrameJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, VectorOfSpatialVec JFDotu)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        originAoInB: SimTK::Array_< SimTK::Vec3 > const &
        JFDotu: SimTK::Vector_< SimTK::SpatialVec > &

        calcBiasForFrameJacobian(SimbodyMatterSubsystem self, State state, SimTKArrayMobilizedBodyIndex onBodyB, SimTKArrayVec3 originAoInB, Vector JFDotu)

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: SimTK::Array_< MobilizedBodyIndex > const &
        originAoInB: SimTK::Array_< SimTK::Vec3 > const &
        JFDotu: SimTK::Vector &

        calcBiasForFrameJacobian(SimbodyMatterSubsystem self, State state, MobilizedBodyIndex onBodyB, Vec3 originAoInB) -> SpatialVec

        Parameters
        ----------
        state: SimTK::State const &
        onBodyB: MobilizedBodyIndex
        originAoInB: SimTK::Vec3 const &

        """
        return _simbody.SimbodyMatterSubsystem_calcBiasForFrameJacobian(self, *args)

    def multiplyByM(self, state, a, Ma):
        r"""
        multiplyByM(SimbodyMatterSubsystem self, State state, Vector a, Vector Ma)

        Parameters
        ----------
        state: SimTK::State const &
        a: SimTK::Vector const &
        Ma: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByM(self, state, a, Ma)

    def multiplyByMInv(self, state, v, MinvV):
        r"""
        multiplyByMInv(SimbodyMatterSubsystem self, State state, Vector v, Vector MinvV)

        Parameters
        ----------
        state: SimTK::State const &
        v: SimTK::Vector const &
        MinvV: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByMInv(self, state, v, MinvV)

    def calcM(self, arg2, M):
        r"""
        calcM(SimbodyMatterSubsystem self, State arg2, Matrix M)

        Parameters
        ----------
        arg2: SimTK::State const &
        M: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcM(self, arg2, M)

    def calcMInv(self, arg2, MInv):
        r"""
        calcMInv(SimbodyMatterSubsystem self, State arg2, Matrix MInv)

        Parameters
        ----------
        arg2: SimTK::State const &
        MInv: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcMInv(self, arg2, MInv)

    def calcProjectedMInv(self, s, GMInvGt):
        r"""
        calcProjectedMInv(SimbodyMatterSubsystem self, State s, Matrix GMInvGt)

        Parameters
        ----------
        s: SimTK::State const &
        GMInvGt: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcProjectedMInv(self, s, GMInvGt)

    def solveForConstraintImpulses(self, state, deltaV, impulse):
        r"""
        solveForConstraintImpulses(SimbodyMatterSubsystem self, State state, Vector deltaV, Vector impulse)

        Parameters
        ----------
        state: SimTK::State const &
        deltaV: SimTK::Vector const &
        impulse: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_solveForConstraintImpulses(self, state, deltaV, impulse)

    def multiplyByG(self, *args):
        r"""
        multiplyByG(SimbodyMatterSubsystem self, State state, Vector ulike, Vector Gulike)

        Parameters
        ----------
        state: SimTK::State const &
        ulike: SimTK::Vector const &
        Gulike: SimTK::Vector &

        multiplyByG(SimbodyMatterSubsystem self, State state, Vector ulike, Vector bias, Vector Gulike)

        Parameters
        ----------
        state: SimTK::State const &
        ulike: SimTK::Vector const &
        bias: SimTK::Vector const &
        Gulike: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByG(self, *args)

    def calcBiasForMultiplyByG(self, state, bias):
        r"""
        calcBiasForMultiplyByG(SimbodyMatterSubsystem self, State state, Vector bias)

        Parameters
        ----------
        state: SimTK::State const &
        bias: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcBiasForMultiplyByG(self, state, bias)

    def calcG(self, state, G):
        r"""
        calcG(SimbodyMatterSubsystem self, State state, Matrix G)

        Parameters
        ----------
        state: SimTK::State const &
        G: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcG(self, state, G)

    def calcBiasForAccelerationConstraints(self, state, bias):
        r"""
        calcBiasForAccelerationConstraints(SimbodyMatterSubsystem self, State state, Vector bias)

        Parameters
        ----------
        state: SimTK::State const &
        bias: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcBiasForAccelerationConstraints(self, state, bias)

    def multiplyByGTranspose(self, state, _lambda, f):
        r"""
        multiplyByGTranspose(SimbodyMatterSubsystem self, State state, Vector _lambda, Vector f)

        Parameters
        ----------
        state: SimTK::State const &
        lambda: SimTK::Vector const &
        f: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByGTranspose(self, state, _lambda, f)

    def calcGTranspose(self, arg2, Gt):
        r"""
        calcGTranspose(SimbodyMatterSubsystem self, State arg2, Matrix Gt)

        Parameters
        ----------
        arg2: SimTK::State const &
        Gt: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcGTranspose(self, arg2, Gt)

    def multiplyByPq(self, *args):
        r"""
        multiplyByPq(SimbodyMatterSubsystem self, State state, Vector qlike, Vector PqXqlike)

        Parameters
        ----------
        state: SimTK::State const &
        qlike: SimTK::Vector const &
        PqXqlike: SimTK::Vector &

        multiplyByPq(SimbodyMatterSubsystem self, State state, Vector qlike, Vector biasp, Vector PqXqlike)

        Parameters
        ----------
        state: SimTK::State const &
        qlike: SimTK::Vector const &
        biasp: SimTK::Vector const &
        PqXqlike: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByPq(self, *args)

    def calcBiasForMultiplyByPq(self, state, biasp):
        r"""
        calcBiasForMultiplyByPq(SimbodyMatterSubsystem self, State state, Vector biasp)

        Parameters
        ----------
        state: SimTK::State const &
        biasp: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcBiasForMultiplyByPq(self, state, biasp)

    def calcPq(self, state, Pq):
        r"""
        calcPq(SimbodyMatterSubsystem self, State state, Matrix Pq)

        Parameters
        ----------
        state: SimTK::State const &
        Pq: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcPq(self, state, Pq)

    def multiplyByPqTranspose(self, state, lambdap, f):
        r"""
        multiplyByPqTranspose(SimbodyMatterSubsystem self, State state, Vector lambdap, Vector f)

        Parameters
        ----------
        state: SimTK::State const &
        lambdap: SimTK::Vector const &
        f: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByPqTranspose(self, state, lambdap, f)

    def calcPqTranspose(self, state, Pqt):
        r"""
        calcPqTranspose(SimbodyMatterSubsystem self, State state, Matrix Pqt)

        Parameters
        ----------
        state: SimTK::State const &
        Pqt: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcPqTranspose(self, state, Pqt)

    def calcP(self, state, P):
        r"""
        calcP(SimbodyMatterSubsystem self, State state, Matrix P)

        Parameters
        ----------
        state: SimTK::State const &
        P: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcP(self, state, P)

    def calcPt(self, state, Pt):
        r"""
        calcPt(SimbodyMatterSubsystem self, State state, Matrix Pt)

        Parameters
        ----------
        state: SimTK::State const &
        Pt: SimTK::Matrix &

        """
        return _simbody.SimbodyMatterSubsystem_calcPt(self, state, Pt)

    def multiplyByN(self, s, transpose, _in, out):
        r"""
        multiplyByN(SimbodyMatterSubsystem self, State s, bool transpose, Vector _in, Vector out)

        Parameters
        ----------
        s: SimTK::State const &
        transpose: bool
        in: SimTK::Vector const &
        out: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByN(self, s, transpose, _in, out)

    def multiplyByNInv(self, s, transpose, _in, out):
        r"""
        multiplyByNInv(SimbodyMatterSubsystem self, State s, bool transpose, Vector _in, Vector out)

        Parameters
        ----------
        s: SimTK::State const &
        transpose: bool
        in: SimTK::Vector const &
        out: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByNInv(self, s, transpose, _in, out)

    def multiplyByNDot(self, s, transpose, _in, out):
        r"""
        multiplyByNDot(SimbodyMatterSubsystem self, State s, bool transpose, Vector _in, Vector out)

        Parameters
        ----------
        s: SimTK::State const &
        transpose: bool
        in: SimTK::Vector const &
        out: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_multiplyByNDot(self, s, transpose, _in, out)

    def calcAcceleration(self, state, appliedMobilityForces, appliedBodyForces, udot, A_GB):
        r"""
        calcAcceleration(SimbodyMatterSubsystem self, State state, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces, Vector udot, VectorOfSpatialVec A_GB)

        Parameters
        ----------
        state: SimTK::State const &
        appliedMobilityForces: SimTK::Vector const &
        appliedBodyForces: SimTK::Vector_< SimTK::SpatialVec > const &
        udot: SimTK::Vector &
        A_GB: SimTK::Vector_< SimTK::SpatialVec > &

        """
        return _simbody.SimbodyMatterSubsystem_calcAcceleration(self, state, appliedMobilityForces, appliedBodyForces, udot, A_GB)

    def calcAccelerationIgnoringConstraints(self, state, appliedMobilityForces, appliedBodyForces, udot, A_GB):
        r"""
        calcAccelerationIgnoringConstraints(SimbodyMatterSubsystem self, State state, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces, Vector udot, VectorOfSpatialVec A_GB)

        Parameters
        ----------
        state: SimTK::State const &
        appliedMobilityForces: SimTK::Vector const &
        appliedBodyForces: SimTK::Vector_< SimTK::SpatialVec > const &
        udot: SimTK::Vector &
        A_GB: SimTK::Vector_< SimTK::SpatialVec > &

        """
        return _simbody.SimbodyMatterSubsystem_calcAccelerationIgnoringConstraints(self, state, appliedMobilityForces, appliedBodyForces, udot, A_GB)

    def calcResidualForceIgnoringConstraints(self, state, appliedMobilityForces, appliedBodyForces, knownUdot, residualMobilityForces):
        r"""
        calcResidualForceIgnoringConstraints(SimbodyMatterSubsystem self, State state, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces, Vector knownUdot, Vector residualMobilityForces)

        Parameters
        ----------
        state: SimTK::State const &
        appliedMobilityForces: SimTK::Vector const &
        appliedBodyForces: SimTK::Vector_< SimTK::SpatialVec > const &
        knownUdot: SimTK::Vector const &
        residualMobilityForces: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcResidualForceIgnoringConstraints(self, state, appliedMobilityForces, appliedBodyForces, knownUdot, residualMobilityForces)

    def calcResidualForce(self, state, appliedMobilityForces, appliedBodyForces, knownUdot, knownLambda, residualMobilityForces):
        r"""
        calcResidualForce(SimbodyMatterSubsystem self, State state, Vector appliedMobilityForces, VectorOfSpatialVec appliedBodyForces, Vector knownUdot, Vector knownLambda, Vector residualMobilityForces)

        Parameters
        ----------
        state: SimTK::State const &
        appliedMobilityForces: SimTK::Vector const &
        appliedBodyForces: SimTK::Vector_< SimTK::SpatialVec > const &
        knownUdot: SimTK::Vector const &
        knownLambda: SimTK::Vector const &
        residualMobilityForces: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcResidualForce(self, state, appliedMobilityForces, appliedBodyForces, knownUdot, knownLambda, residualMobilityForces)

    def calcBodyAccelerationFromUDot(self, state, knownUDot, A_GB):
        r"""
        calcBodyAccelerationFromUDot(SimbodyMatterSubsystem self, State state, Vector knownUDot, VectorOfSpatialVec A_GB)

        Parameters
        ----------
        state: SimTK::State const &
        knownUDot: SimTK::Vector const &
        A_GB: SimTK::Vector_< SimTK::SpatialVec > &

        """
        return _simbody.SimbodyMatterSubsystem_calcBodyAccelerationFromUDot(self, state, knownUDot, A_GB)

    def calcConstraintForcesFromMultipliers(self, state, multipliers, bodyForcesInG, mobilityForces):
        r"""
        calcConstraintForcesFromMultipliers(SimbodyMatterSubsystem self, State state, Vector multipliers, VectorOfSpatialVec bodyForcesInG, Vector mobilityForces)

        Parameters
        ----------
        state: SimTK::State const &
        multipliers: SimTK::Vector const &
        bodyForcesInG: SimTK::Vector_< SimTK::SpatialVec > &
        mobilityForces: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcConstraintForcesFromMultipliers(self, state, multipliers, bodyForcesInG, mobilityForces)

    def calcMobilizerReactionForces(self, state, forcesAtMInG):
        r"""
        calcMobilizerReactionForces(SimbodyMatterSubsystem self, State state, VectorOfSpatialVec forcesAtMInG)

        Parameters
        ----------
        state: SimTK::State const &
        forcesAtMInG: SimTK::Vector_< SimTK::SpatialVec > &

        """
        return _simbody.SimbodyMatterSubsystem_calcMobilizerReactionForces(self, state, forcesAtMInG)

    def getMotionMultipliers(self, state):
        r"""
        getMotionMultipliers(SimbodyMatterSubsystem self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_getMotionMultipliers(self, state)

    def calcMotionErrors(self, state, stage):
        r"""
        calcMotionErrors(SimbodyMatterSubsystem self, State state, Stage stage) -> Vector

        Parameters
        ----------
        state: SimTK::State const &
        stage: SimTK::Stage const &

        """
        return _simbody.SimbodyMatterSubsystem_calcMotionErrors(self, state, stage)

    def findMotionForces(self, state, mobilityForces):
        r"""
        findMotionForces(SimbodyMatterSubsystem self, State state, Vector mobilityForces)

        Parameters
        ----------
        state: SimTK::State const &
        mobilityForces: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_findMotionForces(self, state, mobilityForces)

    def getConstraintMultipliers(self, state):
        r"""
        getConstraintMultipliers(SimbodyMatterSubsystem self, State state) -> Vector

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_getConstraintMultipliers(self, state)

    def findConstraintForces(self, state, bodyForcesInG, mobilityForces):
        r"""
        findConstraintForces(SimbodyMatterSubsystem self, State state, VectorOfSpatialVec bodyForcesInG, Vector mobilityForces)

        Parameters
        ----------
        state: SimTK::State const &
        bodyForcesInG: SimTK::Vector_< SimTK::SpatialVec > &
        mobilityForces: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_findConstraintForces(self, state, bodyForcesInG, mobilityForces)

    def calcMotionPower(self, state):
        r"""
        calcMotionPower(SimbodyMatterSubsystem self, State state) -> SimTK::Real

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcMotionPower(self, state)

    def calcConstraintPower(self, state):
        r"""
        calcConstraintPower(SimbodyMatterSubsystem self, State state) -> SimTK::Real

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simbody.SimbodyMatterSubsystem_calcConstraintPower(self, state)

    def calcTreeEquivalentMobilityForces(self, arg2, bodyForces, mobilityForces):
        r"""
        calcTreeEquivalentMobilityForces(SimbodyMatterSubsystem self, State arg2, VectorOfSpatialVec bodyForces, Vector mobilityForces)

        Parameters
        ----------
        arg2: SimTK::State const &
        bodyForces: SimTK::Vector_< SimTK::SpatialVec > const &
        mobilityForces: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcTreeEquivalentMobilityForces(self, arg2, bodyForces, mobilityForces)

    def calcQDot(self, s, u, qdot):
        r"""
        calcQDot(SimbodyMatterSubsystem self, State s, Vector u, Vector qdot)

        Parameters
        ----------
        s: SimTK::State const &
        u: SimTK::Vector const &
        qdot: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcQDot(self, s, u, qdot)

    def calcQDotDot(self, s, udot, qdotdot):
        r"""
        calcQDotDot(SimbodyMatterSubsystem self, State s, Vector udot, Vector qdotdot)

        Parameters
        ----------
        s: SimTK::State const &
        udot: SimTK::Vector const &
        qdotdot: SimTK::Vector &

        """
        return _simbody.SimbodyMatterSubsystem_calcQDotDot(self, s, udot, qdotdot)

    @staticmethod
    def isInstanceOf(arg1):
        r"""
        isInstanceOf(Subsystem const & arg1) -> bool

        Parameters
        ----------
        arg1: Subsystem const &

        """
        return _simbody.SimbodyMatterSubsystem_isInstanceOf(arg1)

    @staticmethod
    def downcast(arg1):
        r"""
        downcast(Subsystem const & arg1) -> SimbodyMatterSubsystem

        Parameters
        ----------
        arg1: Subsystem const &

        """
        return _simbody.SimbodyMatterSubsystem_downcast(arg1)

    @staticmethod
    def updDowncast(arg1):
        r"""
        updDowncast(Subsystem & arg1) -> SimbodyMatterSubsystem

        Parameters
        ----------
        arg1: Subsystem &

        """
        return _simbody.SimbodyMatterSubsystem_updDowncast(arg1)

    def getRep(self):
        r"""getRep(SimbodyMatterSubsystem self) -> SimbodyMatterSubsystemRep const &"""
        return _simbody.SimbodyMatterSubsystem_getRep(self)

    def updRep(self):
        r"""updRep(SimbodyMatterSubsystem self) -> SimbodyMatterSubsystemRep &"""
        return _simbody.SimbodyMatterSubsystem_updRep(self)

# Register SimbodyMatterSubsystem in _simbody:
_simbody.SimbodyMatterSubsystem_swigregister(SimbodyMatterSubsystem)
class SimTKVisualizer(object):
    r"""Proxy of C++ SimTK::Visualizer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Visualizer(SimTK::MultibodySystem const & system) -> SimTKVisualizer

        Parameters
        ----------
        system: SimTK::MultibodySystem const &

        Visualizer(SimTK::MultibodySystem const & system, SimTK::Array_< String > const & searchPath) -> SimTKVisualizer

        Parameters
        ----------
        system: SimTK::MultibodySystem const &
        searchPath: SimTK::Array_< String > const &

        __init__(SimTKVisualizer self, SimTKVisualizer src) -> SimTKVisualizer

        Parameters
        ----------
        src: SimTK::Visualizer const &

        """
        _simbody.SimTKVisualizer_swiginit(self, _simbody.new_SimTKVisualizer(*args))
    __swig_destroy__ = _simbody.delete_SimTKVisualizer

    def shutdown(self):
        r"""shutdown(SimTKVisualizer self)"""
        return _simbody.SimTKVisualizer_shutdown(self)

    def setShutdownWhenDestructed(self, shouldShutdown):
        r"""
        setShutdownWhenDestructed(SimTKVisualizer self, bool shouldShutdown) -> SimTKVisualizer

        Parameters
        ----------
        shouldShutdown: bool

        """
        return _simbody.SimTKVisualizer_setShutdownWhenDestructed(self, shouldShutdown)

    def getShutdownWhenDestructed(self):
        r"""getShutdownWhenDestructed(SimTKVisualizer self) -> bool"""
        return _simbody.SimTKVisualizer_getShutdownWhenDestructed(self)
    PassThrough = _simbody.SimTKVisualizer_PassThrough
    
    Sampling = _simbody.SimTKVisualizer_Sampling
    
    RealTime = _simbody.SimTKVisualizer_RealTime
    
    GroundAndSky = _simbody.SimTKVisualizer_GroundAndSky
    
    SolidColor = _simbody.SimTKVisualizer_SolidColor
    
    ViewMenuId = _simbody.SimTKVisualizer_ViewMenuId
    

    def setBackgroundType(self, background):
        r"""
        setBackgroundType(SimTKVisualizer self, SimTK::Visualizer::BackgroundType background) -> SimTKVisualizer

        Parameters
        ----------
        background: enum SimTK::Visualizer::BackgroundType

        """
        return _simbody.SimTKVisualizer_setBackgroundType(self, background)

    def setBackgroundColor(self, color):
        r"""
        setBackgroundColor(SimTKVisualizer self, Vec3 color) -> SimTKVisualizer

        Parameters
        ----------
        color: SimTK::Vec3 const &

        """
        return _simbody.SimTKVisualizer_setBackgroundColor(self, color)

    def setShowShadows(self, showShadows):
        r"""
        setShowShadows(SimTKVisualizer self, bool showShadows) -> SimTKVisualizer

        Parameters
        ----------
        showShadows: bool

        """
        return _simbody.SimTKVisualizer_setShowShadows(self, showShadows)

    def setShowFrameRate(self, showFrameRate):
        r"""
        setShowFrameRate(SimTKVisualizer self, bool showFrameRate) -> SimTKVisualizer

        Parameters
        ----------
        showFrameRate: bool

        """
        return _simbody.SimTKVisualizer_setShowFrameRate(self, showFrameRate)

    def setShowSimTime(self, showSimTime):
        r"""
        setShowSimTime(SimTKVisualizer self, bool showSimTime) -> SimTKVisualizer

        Parameters
        ----------
        showSimTime: bool

        """
        return _simbody.SimTKVisualizer_setShowSimTime(self, showSimTime)

    def setShowFrameNumber(self, showFrameNumber):
        r"""
        setShowFrameNumber(SimTKVisualizer self, bool showFrameNumber) -> SimTKVisualizer

        Parameters
        ----------
        showFrameNumber: bool

        """
        return _simbody.SimTKVisualizer_setShowFrameNumber(self, showFrameNumber)

    def setWindowTitle(self, title):
        r"""
        setWindowTitle(SimTKVisualizer self, String const & title) -> SimTKVisualizer

        Parameters
        ----------
        title: String const &

        """
        return _simbody.SimTKVisualizer_setWindowTitle(self, title)

    def setSystemUpDirection(self, upDirection):
        r"""
        setSystemUpDirection(SimTKVisualizer self, CoordinateDirection upDirection) -> SimTKVisualizer

        Parameters
        ----------
        upDirection: SimTK::CoordinateDirection const &

        """
        return _simbody.SimTKVisualizer_setSystemUpDirection(self, upDirection)

    def getSystemUpDirection(self):
        r"""getSystemUpDirection(SimTKVisualizer self) -> CoordinateDirection"""
        return _simbody.SimTKVisualizer_getSystemUpDirection(self)

    def setGroundHeight(self, height):
        r"""
        setGroundHeight(SimTKVisualizer self, SimTK::Real height) -> SimTKVisualizer

        Parameters
        ----------
        height: SimTK::Real

        """
        return _simbody.SimTKVisualizer_setGroundHeight(self, height)

    def getGroundHeight(self):
        r"""getGroundHeight(SimTKVisualizer self) -> SimTK::Real"""
        return _simbody.SimTKVisualizer_getGroundHeight(self)

    def setMode(self, mode):
        r"""
        setMode(SimTKVisualizer self, SimTK::Visualizer::Mode mode) -> SimTKVisualizer

        Parameters
        ----------
        mode: enum SimTK::Visualizer::Mode

        """
        return _simbody.SimTKVisualizer_setMode(self, mode)

    def getMode(self):
        r"""getMode(SimTKVisualizer self) -> SimTK::Visualizer::Mode"""
        return _simbody.SimTKVisualizer_getMode(self)

    def setDesiredFrameRate(self, framesPerSec):
        r"""
        setDesiredFrameRate(SimTKVisualizer self, SimTK::Real framesPerSec) -> SimTKVisualizer

        Parameters
        ----------
        framesPerSec: SimTK::Real

        """
        return _simbody.SimTKVisualizer_setDesiredFrameRate(self, framesPerSec)

    def getDesiredFrameRate(self):
        r"""getDesiredFrameRate(SimTKVisualizer self) -> SimTK::Real"""
        return _simbody.SimTKVisualizer_getDesiredFrameRate(self)

    def setRealTimeScale(self, simTimePerRealSecond):
        r"""
        setRealTimeScale(SimTKVisualizer self, SimTK::Real simTimePerRealSecond) -> SimTKVisualizer

        Parameters
        ----------
        simTimePerRealSecond: SimTK::Real

        """
        return _simbody.SimTKVisualizer_setRealTimeScale(self, simTimePerRealSecond)

    def getRealTimeScale(self):
        r"""getRealTimeScale(SimTKVisualizer self) -> SimTK::Real"""
        return _simbody.SimTKVisualizer_getRealTimeScale(self)

    def setDesiredBufferLengthInSec(self, bufferLengthInSec):
        r"""
        setDesiredBufferLengthInSec(SimTKVisualizer self, SimTK::Real bufferLengthInSec) -> SimTKVisualizer

        Parameters
        ----------
        bufferLengthInSec: SimTK::Real

        """
        return _simbody.SimTKVisualizer_setDesiredBufferLengthInSec(self, bufferLengthInSec)

    def getDesiredBufferLengthInSec(self):
        r"""getDesiredBufferLengthInSec(SimTKVisualizer self) -> SimTK::Real"""
        return _simbody.SimTKVisualizer_getDesiredBufferLengthInSec(self)

    def getActualBufferLengthInSec(self):
        r"""getActualBufferLengthInSec(SimTKVisualizer self) -> SimTK::Real"""
        return _simbody.SimTKVisualizer_getActualBufferLengthInSec(self)

    def getActualBufferLengthInFrames(self):
        r"""getActualBufferLengthInFrames(SimTKVisualizer self) -> int"""
        return _simbody.SimTKVisualizer_getActualBufferLengthInFrames(self)

    def addInputListener(self, listener):
        r"""
        addInputListener(SimTKVisualizer self, SimTKVisualizerInputListener listener) -> int

        Parameters
        ----------
        listener: SimTK::Visualizer::InputListener *

        """
        return _simbody.SimTKVisualizer_addInputListener(self, listener)

    def getNumInputListeners(self):
        r"""getNumInputListeners(SimTKVisualizer self) -> int"""
        return _simbody.SimTKVisualizer_getNumInputListeners(self)

    def getInputListener(self, i):
        r"""
        getInputListener(SimTKVisualizer self, int i) -> SimTKVisualizerInputListener

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_getInputListener(self, i)

    def updInputListener(self, i):
        r"""
        updInputListener(SimTKVisualizer self, int i) -> SimTKVisualizerInputListener

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_updInputListener(self, i)

    def addFrameController(self, controller):
        r"""
        addFrameController(SimTKVisualizer self, SimTK::Visualizer::FrameController * controller) -> int

        Parameters
        ----------
        controller: SimTK::Visualizer::FrameController *

        """
        return _simbody.SimTKVisualizer_addFrameController(self, controller)

    def getNumFrameControllers(self):
        r"""getNumFrameControllers(SimTKVisualizer self) -> int"""
        return _simbody.SimTKVisualizer_getNumFrameControllers(self)

    def getFrameController(self, i):
        r"""
        getFrameController(SimTKVisualizer self, int i) -> SimTK::Visualizer::FrameController const &

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_getFrameController(self, i)

    def updFrameController(self, i):
        r"""
        updFrameController(SimTKVisualizer self, int i) -> SimTK::Visualizer::FrameController &

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_updFrameController(self, i)

    def report(self, state):
        r"""
        report(SimTKVisualizer self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simbody.SimTKVisualizer_report(self, state)

    def flushFrames(self):
        r"""flushFrames(SimTKVisualizer self)"""
        return _simbody.SimTKVisualizer_flushFrames(self)

    def drawFrameNow(self, state):
        r"""
        drawFrameNow(SimTKVisualizer self, State state)

        Parameters
        ----------
        state: SimTK::State const &

        """
        return _simbody.SimTKVisualizer_drawFrameNow(self, state)

    def addMenu(self, title, id, items):
        r"""
        addMenu(SimTKVisualizer self, String const & title, int id, SimTK::Array_< std::pair< String,int > > const & items) -> SimTKVisualizer

        Parameters
        ----------
        title: String const &
        id: int
        items: SimTK::Array_< std::pair< String,int > > const &

        """
        return _simbody.SimTKVisualizer_addMenu(self, title, id, items)

    def addSlider(self, title, id, min, max, value):
        r"""
        addSlider(SimTKVisualizer self, String const & title, int id, SimTK::Real min, SimTK::Real max, SimTK::Real value) -> SimTKVisualizer

        Parameters
        ----------
        title: String const &
        id: int
        min: SimTK::Real
        max: SimTK::Real
        value: SimTK::Real

        """
        return _simbody.SimTKVisualizer_addSlider(self, title, id, min, max, value)

    def addDecoration(self, mobodIx, X_BD, geometry):
        r"""
        addDecoration(SimTKVisualizer self, MobilizedBodyIndex mobodIx, Transform X_BD, DecorativeGeometry geometry) -> int

        Parameters
        ----------
        mobodIx: MobilizedBodyIndex
        X_BD: SimTK::Transform const &
        geometry: SimTK::DecorativeGeometry const &

        """
        return _simbody.SimTKVisualizer_addDecoration(self, mobodIx, X_BD, geometry)

    def getNumDecorations(self):
        r"""getNumDecorations(SimTKVisualizer self) -> int"""
        return _simbody.SimTKVisualizer_getNumDecorations(self)

    def getDecoration(self, i):
        r"""
        getDecoration(SimTKVisualizer self, int i) -> DecorativeGeometry

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_getDecoration(self, i)

    def updDecoration(self, i):
        r"""
        updDecoration(SimTKVisualizer self, int i) -> DecorativeGeometry

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_updDecoration(self, i)

    def addRubberBandLine(self, b1, station1, b2, station2, line):
        r"""
        addRubberBandLine(SimTKVisualizer self, MobilizedBodyIndex b1, Vec3 station1, MobilizedBodyIndex b2, Vec3 station2, DecorativeLine line) -> int

        Parameters
        ----------
        b1: MobilizedBodyIndex
        station1: SimTK::Vec3 const &
        b2: MobilizedBodyIndex
        station2: SimTK::Vec3 const &
        line: SimTK::DecorativeLine const &

        """
        return _simbody.SimTKVisualizer_addRubberBandLine(self, b1, station1, b2, station2, line)

    def getNumRubberBandLines(self):
        r"""getNumRubberBandLines(SimTKVisualizer self) -> int"""
        return _simbody.SimTKVisualizer_getNumRubberBandLines(self)

    def getRubberBandLine(self, i):
        r"""
        getRubberBandLine(SimTKVisualizer self, int i) -> DecorativeLine

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_getRubberBandLine(self, i)

    def updRubberBandLine(self, i):
        r"""
        updRubberBandLine(SimTKVisualizer self, int i) -> DecorativeLine

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_updRubberBandLine(self, i)

    def addDecorationGenerator(self, generator):
        r"""
        addDecorationGenerator(SimTKVisualizer self, SimTK::DecorationGenerator * generator) -> int

        Parameters
        ----------
        generator: SimTK::DecorationGenerator *

        """
        return _simbody.SimTKVisualizer_addDecorationGenerator(self, generator)

    def getNumDecorationGenerators(self):
        r"""getNumDecorationGenerators(SimTKVisualizer self) -> int"""
        return _simbody.SimTKVisualizer_getNumDecorationGenerators(self)

    def getDecorationGenerator(self, i):
        r"""
        getDecorationGenerator(SimTKVisualizer self, int i) -> SimTK::DecorationGenerator const &

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_getDecorationGenerator(self, i)

    def updDecorationGenerator(self, i):
        r"""
        updDecorationGenerator(SimTKVisualizer self, int i) -> SimTK::DecorationGenerator &

        Parameters
        ----------
        i: int

        """
        return _simbody.SimTKVisualizer_updDecorationGenerator(self, i)

    def setCameraTransform(self, X_GC):
        r"""
        setCameraTransform(SimTKVisualizer self, Transform X_GC) -> SimTKVisualizer

        Parameters
        ----------
        X_GC: SimTK::Transform const &

        """
        return _simbody.SimTKVisualizer_setCameraTransform(self, X_GC)

    def zoomCameraToShowAllGeometry(self):
        r"""zoomCameraToShowAllGeometry(SimTKVisualizer self) -> SimTKVisualizer"""
        return _simbody.SimTKVisualizer_zoomCameraToShowAllGeometry(self)

    def pointCameraAt(self, point, upDirection):
        r"""
        pointCameraAt(SimTKVisualizer self, Vec3 point, Vec3 upDirection) -> SimTKVisualizer

        Parameters
        ----------
        point: SimTK::Vec3 const &
        upDirection: SimTK::Vec3 const &

        """
        return _simbody.SimTKVisualizer_pointCameraAt(self, point, upDirection)

    def setCameraFieldOfView(self, fov):
        r"""
        setCameraFieldOfView(SimTKVisualizer self, SimTK::Real fov) -> SimTKVisualizer

        Parameters
        ----------
        fov: SimTK::Real

        """
        return _simbody.SimTKVisualizer_setCameraFieldOfView(self, fov)

    def setCameraClippingPlanes(self, nearPlane, farPlane):
        r"""
        setCameraClippingPlanes(SimTKVisualizer self, SimTK::Real nearPlane, SimTK::Real farPlane) -> SimTKVisualizer

        Parameters
        ----------
        nearPlane: SimTK::Real
        farPlane: SimTK::Real

        """
        return _simbody.SimTKVisualizer_setCameraClippingPlanes(self, nearPlane, farPlane)

    def setSliderValue(self, slider, value):
        r"""
        setSliderValue(SimTKVisualizer self, int slider, SimTK::Real value) -> SimTKVisualizer

        Parameters
        ----------
        slider: int
        value: SimTK::Real

        """
        return _simbody.SimTKVisualizer_setSliderValue(self, slider, value)

    def setSliderRange(self, slider, newMin, newMax):
        r"""
        setSliderRange(SimTKVisualizer self, int slider, SimTK::Real newMin, SimTK::Real newMax) -> SimTKVisualizer

        Parameters
        ----------
        slider: int
        newMin: SimTK::Real
        newMax: SimTK::Real

        """
        return _simbody.SimTKVisualizer_setSliderRange(self, slider, newMin, newMax)

    def dumpStats(self, o):
        r"""
        dumpStats(SimTKVisualizer self, std::ostream & o)

        Parameters
        ----------
        o: std::ostream &

        """
        return _simbody.SimTKVisualizer_dumpStats(self, o)

    def clearStats(self):
        r"""clearStats(SimTKVisualizer self)"""
        return _simbody.SimTKVisualizer_clearStats(self)

    def getInputListeners(self):
        r"""getInputListeners(SimTKVisualizer self) -> SimTK::Array_< SimTK::Visualizer::InputListener * > const &"""
        return _simbody.SimTKVisualizer_getInputListeners(self)

    def getFrameControllers(self):
        r"""getFrameControllers(SimTKVisualizer self) -> SimTK::Array_< SimTK::Visualizer::FrameController * > const &"""
        return _simbody.SimTKVisualizer_getFrameControllers(self)

    def getSystem(self):
        r"""getSystem(SimTKVisualizer self) -> SimTK::MultibodySystem const &"""
        return _simbody.SimTKVisualizer_getSystem(self)

    def getRefCount(self):
        r"""getRefCount(SimTKVisualizer self) -> int"""
        return _simbody.SimTKVisualizer_getRefCount(self)

    def setBackgroundTypeByInt(self, index):
        r"""
        setBackgroundTypeByInt(SimTKVisualizer self, int index) -> SimTKVisualizer

        Parameters
        ----------
        index: int

        """
        return _simbody.SimTKVisualizer_setBackgroundTypeByInt(self, index)

# Register SimTKVisualizer in _simbody:
_simbody.SimTKVisualizer_swigregister(SimTKVisualizer)
class SimTKVisualizerInputListener(object):
    r"""Proxy of C++ SimTK::Visualizer::InputListener class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ShiftIsDown = _simbody.SimTKVisualizerInputListener_ShiftIsDown
    
    ControlIsDown = _simbody.SimTKVisualizerInputListener_ControlIsDown
    
    AltIsDown = _simbody.SimTKVisualizerInputListener_AltIsDown
    
    IsSpecialKey = _simbody.SimTKVisualizerInputListener_IsSpecialKey
    
    SpecialKeyOffset = _simbody.SimTKVisualizerInputListener_SpecialKeyOffset
    
    KeyControlC = _simbody.SimTKVisualizerInputListener_KeyControlC
    
    KeyBeep = _simbody.SimTKVisualizerInputListener_KeyBeep
    
    KeyBackspace = _simbody.SimTKVisualizerInputListener_KeyBackspace
    
    KeyTab = _simbody.SimTKVisualizerInputListener_KeyTab
    
    KeyLF = _simbody.SimTKVisualizerInputListener_KeyLF
    
    KeyReturn = _simbody.SimTKVisualizerInputListener_KeyReturn
    
    KeyEnter = _simbody.SimTKVisualizerInputListener_KeyEnter
    
    KeyEsc = _simbody.SimTKVisualizerInputListener_KeyEsc
    
    KeyDelete = _simbody.SimTKVisualizerInputListener_KeyDelete
    
    KeyF1 = _simbody.SimTKVisualizerInputListener_KeyF1
    
    KeyF2 = _simbody.SimTKVisualizerInputListener_KeyF2
    
    KeyF3 = _simbody.SimTKVisualizerInputListener_KeyF3
    
    KeyF4 = _simbody.SimTKVisualizerInputListener_KeyF4
    
    KeyF5 = _simbody.SimTKVisualizerInputListener_KeyF5
    
    KeyF6 = _simbody.SimTKVisualizerInputListener_KeyF6
    
    KeyF7 = _simbody.SimTKVisualizerInputListener_KeyF7
    
    KeyF8 = _simbody.SimTKVisualizerInputListener_KeyF8
    
    KeyF9 = _simbody.SimTKVisualizerInputListener_KeyF9
    
    KeyF10 = _simbody.SimTKVisualizerInputListener_KeyF10
    
    KeyF11 = _simbody.SimTKVisualizerInputListener_KeyF11
    
    KeyF12 = _simbody.SimTKVisualizerInputListener_KeyF12
    
    KeyLeftArrow = _simbody.SimTKVisualizerInputListener_KeyLeftArrow
    
    KeyUpArrow = _simbody.SimTKVisualizerInputListener_KeyUpArrow
    
    KeyRightArrow = _simbody.SimTKVisualizerInputListener_KeyRightArrow
    
    KeyDownArrow = _simbody.SimTKVisualizerInputListener_KeyDownArrow
    
    KeyPageUp = _simbody.SimTKVisualizerInputListener_KeyPageUp
    
    KeyPageDown = _simbody.SimTKVisualizerInputListener_KeyPageDown
    
    KeyHome = _simbody.SimTKVisualizerInputListener_KeyHome
    
    KeyEnd = _simbody.SimTKVisualizerInputListener_KeyEnd
    
    KeyInsert = _simbody.SimTKVisualizerInputListener_KeyInsert
    
    __swig_destroy__ = _simbody.delete_SimTKVisualizerInputListener

    def keyPressed(self, key, modifiers):
        r"""
        keyPressed(SimTKVisualizerInputListener self, unsigned int key, unsigned int modifiers) -> bool

        Parameters
        ----------
        key: unsigned int
        modifiers: unsigned int

        """
        return _simbody.SimTKVisualizerInputListener_keyPressed(self, key, modifiers)

    def menuSelected(self, menu, item):
        r"""
        menuSelected(SimTKVisualizerInputListener self, int menu, int item) -> bool

        Parameters
        ----------
        menu: int
        item: int

        """
        return _simbody.SimTKVisualizerInputListener_menuSelected(self, menu, item)

    def sliderMoved(self, slider, value):
        r"""
        sliderMoved(SimTKVisualizerInputListener self, int slider, SimTK::Real value) -> bool

        Parameters
        ----------
        slider: int
        value: SimTK::Real

        """
        return _simbody.SimTKVisualizerInputListener_sliderMoved(self, slider, value)

    def __init__(self):
        r"""__init__(SimTKVisualizerInputListener self) -> SimTKVisualizerInputListener"""
        _simbody.SimTKVisualizerInputListener_swiginit(self, _simbody.new_SimTKVisualizerInputListener())

# Register SimTKVisualizerInputListener in _simbody:
_simbody.SimTKVisualizerInputListener_swigregister(SimTKVisualizerInputListener)
class SimTKVisualizerInputSilo(SimTKVisualizerInputListener):
    r"""Proxy of C++ SimTK::Visualizer::InputSilo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SimTKVisualizerInputSilo self) -> SimTKVisualizerInputSilo"""
        _simbody.SimTKVisualizerInputSilo_swiginit(self, _simbody.new_SimTKVisualizerInputSilo())
    __swig_destroy__ = _simbody.delete_SimTKVisualizerInputSilo

    def isAnyUserInput(self):
        r"""isAnyUserInput(SimTKVisualizerInputSilo self) -> bool"""
        return _simbody.SimTKVisualizerInputSilo_isAnyUserInput(self)

    def waitForAnyUserInput(self):
        r"""waitForAnyUserInput(SimTKVisualizerInputSilo self)"""
        return _simbody.SimTKVisualizerInputSilo_waitForAnyUserInput(self)

    def takeKeyHit(self, key, modifiers):
        r"""
        takeKeyHit(SimTKVisualizerInputSilo self, unsigned int & key, unsigned int & modifiers) -> bool

        Parameters
        ----------
        key: unsigned int &
        modifiers: unsigned int &

        """
        return _simbody.SimTKVisualizerInputSilo_takeKeyHit(self, key, modifiers)

    def waitForKeyHit(self, key, modifiers):
        r"""
        waitForKeyHit(SimTKVisualizerInputSilo self, unsigned int & key, unsigned int & modifiers)

        Parameters
        ----------
        key: unsigned int &
        modifiers: unsigned int &

        """
        return _simbody.SimTKVisualizerInputSilo_waitForKeyHit(self, key, modifiers)

    def takeMenuPick(self, menu, item):
        r"""
        takeMenuPick(SimTKVisualizerInputSilo self, int & menu, int & item) -> bool

        Parameters
        ----------
        menu: int &
        item: int &

        """
        return _simbody.SimTKVisualizerInputSilo_takeMenuPick(self, menu, item)

    def waitForMenuPick(self, menu, item):
        r"""
        waitForMenuPick(SimTKVisualizerInputSilo self, int & menu, int & item)

        Parameters
        ----------
        menu: int &
        item: int &

        """
        return _simbody.SimTKVisualizerInputSilo_waitForMenuPick(self, menu, item)

    def takeSliderMove(self, slider, value):
        r"""
        takeSliderMove(SimTKVisualizerInputSilo self, int & slider, SimTK::Real & value) -> bool

        Parameters
        ----------
        slider: int &
        value: SimTK::Real &

        """
        return _simbody.SimTKVisualizerInputSilo_takeSliderMove(self, slider, value)

    def waitForSliderMove(self, slider, value):
        r"""
        waitForSliderMove(SimTKVisualizerInputSilo self, int & slider, SimTK::Real & value)

        Parameters
        ----------
        slider: int &
        value: SimTK::Real &

        """
        return _simbody.SimTKVisualizerInputSilo_waitForSliderMove(self, slider, value)

    def clear(self):
        r"""clear(SimTKVisualizerInputSilo self)"""
        return _simbody.SimTKVisualizerInputSilo_clear(self)

    def takeKeyHitKeyOnly(self):
        r"""takeKeyHitKeyOnly(SimTKVisualizerInputSilo self) -> unsigned int"""
        return _simbody.SimTKVisualizerInputSilo_takeKeyHitKeyOnly(self)

# Register SimTKVisualizerInputSilo in _simbody:
_simbody.SimTKVisualizerInputSilo_swigregister(SimTKVisualizerInputSilo)

