import os
import sys
import shutil
import threading
import logging
import webbrowser
from tkinter import filedialog, messagebox

import customtkinter as ctk
from PIL import Image, ImageEnhance

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from animesub.utils import setup_logging, resource_path


# =============================
# 1. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# =============================
LOGO_PATH = None
ICON_PATH = None
LOG_FILE_PATH = None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
is_running = False
cancel_event = None

# –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
root = None
input_entry = None
output_entry = None
model_choice = None
device_choice = None
start_btn = None
progress_bar = None
status_label = None

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
try:
    from plyer import notification as plyer_notification
except ImportError:
    plyer_notification = None

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)


# =============================
# 2. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# =============================

def find_ffmpeg() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ffmpeg."""
    if shutil.which("ffmpeg"):
        return True
    if getattr(sys, 'frozen', False):
        exe_dir = os.path.dirname(sys.executable)
        local_ffmpeg = os.path.join(exe_dir, "ffmpeg.exe")
        if os.path.exists(local_ffmpeg):
            os.environ["PATH"] += os.pathsep + exe_dir
            return True
    return False

def notify_user(title: str, message: str, timeout: int = 5):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ."""
    if plyer_notification:
        try:
            plyer_notification.notify(title=title, message=message, timeout=timeout)
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def show_error(title: str, message: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
    logger.error(f"UI Error: {title} - {message}")
    if root:
        root.after(0, lambda: messagebox.showerror(title, message))

def finalize_ui(success: bool, message: str = ""):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç UI –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    global is_running
    is_running = False

    def _finalize():
        start_btn.configure(text="üöÄ Transcribe", state="normal")
        if success:
            progress_bar.set(1.0)
            status_label.configure(text=message or "–ì–æ—Ç–æ–≤–æ")
        else:
            progress_bar.set(0)
            status_label.configure(text=message or "–û—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    if root:
        root.after(0, _finalize)

def open_log_directory():
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ñ–∞–π–ª–æ–≤–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ."""
    if LOG_FILE_PATH:
        log_dir = os.path.dirname(LOG_FILE_PATH)
        try:
            # webbrowser.open —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
            webbrowser.open(f"file:///{log_dir}")
            logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {log_dir}")
        except Exception as e:
            show_error("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏: {e}")
    else:
        show_error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–õ–æ–≥-—Ñ–∞–π–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.")


# =============================
# 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
# =============================

def choose_file_or_url():
    file_path = filedialog.askopenfilename()
    if file_path:
        input_entry.delete(0, "end")
        input_entry.insert(0, file_path)

def choose_output_folder():
    folder_path = filedialog.askdirectory()
    if folder_path:
        output_entry.delete(0, "end")
        output_entry.insert(0, folder_path)

def start_or_cancel_transcription():
    global is_running, cancel_event
    if not is_running:
        cancel_event = threading.Event()
        is_running = True
        start_btn.configure(text="‚ùå Cancel")
        status_label.configure(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")
        progress_bar.set(0)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=run_transcription, args=(cancel_event,), daemon=True).start()
    else:
        if cancel_event:
            logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–º–µ–Ω—É –ø—Ä–æ—Ü–µ—Å—Å–∞.")
            cancel_event.set()
        start_btn.configure(state="disabled", text="–û—Ç–º–µ–Ω–∞...")
        status_label.configure(text="–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è...")

def run_transcription(current_cancel_event):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ."""
    from animesub.main_logic import process_audio
    
    
    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    was_successful = False
    final_message = "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω."

    def report_progress(progress_value, status_message):
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –¥—Ä—É–≥–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º root.after
        def _update_gui():
            if current_cancel_event.is_set():
                return
            progress_bar.set(progress_value)
            status_label.configure(text=status_message)
            
        if root:
            root.after(0, _update_gui)

    try:
        input_path = input_entry.get().strip()
        output_folder = output_entry.get().strip() or os.getcwd()
        model_name = model_choice.get()
        device = "cuda" if device_choice.get() == "GPU CUDA" else "cpu"

        if not find_ffmpeg():
            show_error("–û—à–∏–±–∫–∞", "FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ffmpeg.exe –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º PATH.")
            finalize_ui(success=False, message="–û—à–∏–±–∫–∞: FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        url = None
        output_path = None
        if input_path.startswith(("http://", "https://")):
            url = input_path
            # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ main_logic
            output_path = output_folder 
        elif not input_path:
            show_error("–û—à–∏–±–∫–∞", "–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ URL.")
            finalize_ui(success=False, message="–û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—Ö–æ–¥–∞")
            return
        else:
            if not os.path.exists(input_path):
                show_error("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
                finalize_ui(success=False, message="–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            file_name = os.path.splitext(os.path.basename(input_path))[0]
            output_path = os.path.join(output_folder, f"{file_name}.srt")

        # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
        process_audio(
            input_path=input_path if not url else None,
            output_path=output_path,
            model_name=model_name,
            device=device,
            url=url,
            progress_callback=report_progress,
            cancel_event=current_cancel_event
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if current_cancel_event.is_set():
            final_message = "–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
            was_successful = False
        else:
            final_message = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
            was_successful = True
            notify_user("Kataribe", final_message, timeout=5)

    except Exception as e:
        # –õ–æ–≥–≥–µ—Ä —É–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç —ç—Ç–æ —á–µ—Ä–µ–∑ excepthook, –Ω–æ –º—ã —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∂–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        final_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞."
        show_error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"{e}\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ.")
        was_successful = False
    finally:
        finalize_ui(success=was_successful, message=final_message)


def switch_theme():
    ctk.set_appearance_mode("dark" if theme_switch_var.get() else "light")


# =============================
# 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GUI
# =============================

def init_gui():
    global root, input_entry, output_entry, model_choice, device_choice
    global start_btn, progress_bar, status_label, theme_switch_var

    root = ctk.CTk()
    root.title("Kataribe v1.0")
    if os.path.exists(ICON_PATH):
        try:
            root.iconbitmap(ICON_PATH)
        except Exception:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É: {ICON_PATH}", exc_info=True)
    root.geometry("620x540")
    ctk.set_appearance_mode("dark")

    # --- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å ---
    top_bar = ctk.CTkFrame(root, fg_color="transparent")
    top_bar.pack(fill="x", pady=5, padx=5)
    
    ctk.CTkButton(top_bar, text="üìÇ Open Logs", command=open_log_directory, width=100).pack(side="left", padx=5)
    
    theme_switch_var = ctk.BooleanVar(value=True)
    ctk.CTkSwitch(top_bar, variable=theme_switch_var, command=switch_theme, text="").pack(side="right")
    ctk.CTkLabel(top_bar, text="Theme", text_color='gray', font=("Segoe UI", 12)).pack(side="right", padx=(0, 3))

    ctk.CTkLabel(root, text="KATARIBE", font=("Segoe UI", 28, "bold"), text_color="#58c68b").pack(pady=(0, 5))
    ctk.CTkLabel(root, text="Media Transcribing Tool", font=("Segoe UI", 14), text_color="gray").pack(pady=(0, 15))

    # --- –§—Ä–µ–π–º—ã –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ ---
    input_frame = ctk.CTkFrame(root, corner_radius=10)
    input_frame.pack(pady=10, fill="x", padx=20)
    input_entry = ctk.CTkEntry(input_frame, placeholder_text="Path or URL", height=35)
    input_entry.pack(side="left", fill="x", expand=True, padx=(5, 5), pady=5)
    ctk.CTkButton(input_frame, text="üìÅ", width=40, command=choose_file_or_url).pack(side="left", padx=(5, 5), pady=5)

    output_frame = ctk.CTkFrame(root, corner_radius=10)
    output_frame.pack(pady=10, fill="x", padx=20)
    output_entry = ctk.CTkEntry(output_frame, placeholder_text="Output folder (current by default)", height=35)
    output_entry.pack(side="left", fill="x", expand=True, padx=(5, 5), pady=5)
    ctk.CTkButton(output_frame, text="üìÅ", width=40, command=choose_output_folder).pack(side="left", padx=(5, 5), pady=5)

    # --- –§—Ä–µ–π–º –æ–ø—Ü–∏–π ---
    options_frame = ctk.CTkFrame(root, corner_radius=10)
    options_frame.pack(pady=10, fill="x", padx=20)
    ctk.CTkLabel(options_frame, text="Model", font=("Segoe UI", 12, "bold")).grid(row=0, column=0, sticky="w", padx=10, pady=(5, 0))
    ctk.CTkLabel(options_frame, text="Device", font=("Segoe UI", 12, "bold")).grid(row=0, column=1, sticky="w", padx=10, pady=(5, 0))

    model_choice = ctk.CTkOptionMenu(options_frame,
                                     values=["large-v3", "large-v2", "medium", "small", "base", "tiny",
                                             "kotoba-faster", "kotoba-whisper-v2.2", "kotoba-whisper"], height=35)
    model_choice.set("large-v3")
    model_choice.grid(row=1, column=0, sticky="ew", padx=10, pady=(0, 10))

    device_choice = ctk.CTkOptionMenu(options_frame, values=["GPU CUDA", "CPU"], height=35)
    device_choice.set("GPU CUDA")
    device_choice.grid(row=1, column=1, sticky="ew", padx=10, pady=(0, 10))
    options_frame.grid_columnconfigure((0, 1), weight=1)

    # --- –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å ---
    start_btn = ctk.CTkButton(root, text="üöÄ Transcribe", command=start_or_cancel_transcription,
                              height=40, font=("Segoe UI", 14, "bold"))
    start_btn.pack(pady=15, padx=20, fill="x")

    progress_bar = ctk.CTkProgressBar(root, height=12, progress_color='#58c68b')
    progress_bar.pack(fill="x", padx=20, pady=(0, 5))
    progress_bar.set(0)
    status_label = ctk.CTkLabel(root, text="Ready", font=("Segoe UI", 12), text_color='gray')
    status_label.pack(pady=(0, 15))

    ctk.CTkLabel(root, text="by @iniquitousworld @shim0neta", font=("Segoe UI", 10, "italic"),
                 text_color="#888888").pack(side="bottom", pady=8)


# =============================
# 5. Splash screen (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# =============================
def show_splash():
    # ... –∫–æ–¥ splash screen –æ—Å—Ç–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    splash = ctk.CTk()
    splash.geometry("380x250")
    splash.overrideredirect(True)
    splash.title("Loading...")
    splash.attributes("-topmost", True)
    splash.update_idletasks()
    w = splash.winfo_screenwidth()
    h = splash.winfo_screenheight()
    size = tuple(int(_) for _ in splash.geometry().split('+')[0].split('x'))
    x = w // 2 - size[0] // 2
    y = h // 2 - size[1] // 2
    splash.geometry(f"{size[0]}x{size[1]}+{x}+{y}")
    try:
        logo = Image.open(LOGO_PATH).convert("RGBA")
        enhancer = ImageEnhance.Brightness(logo)
        logo_light = enhancer.enhance(1.4)
        logo_img = ctk.CTkImage(light_image=logo_light, dark_image=logo_light, size=(100, 100))
        ctk.CTkLabel(splash, image=logo_img, text="").pack(pady=(30, 5))
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ
        logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
    ctk.CTkLabel(splash, text="KATARIBE", font=("Segoe UI", 32, "bold"), text_color="#2CDB81").pack()
    ctk.CTkLabel(splash, text="Loading...", font=("Segoe UI", 12), text_color="#525954").pack(pady=(5, 0))
    splash.after(2000, lambda: start_main_app(splash)) # –£–≤–µ–ª–∏—á–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è "—ç—Ñ—Ñ–µ–∫—Ç–∞"
    splash.mainloop()

# =============================
# 6. main()
# =============================
def start_main_app(splash_window):
    splash_window.destroy()
    init_gui()
    root.mainloop()

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º –ª—é–±–æ–≥–æ –æ–∫–Ω–∞
    LOG_FILE_PATH = setup_logging()
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–æ –∏–∫–æ–Ω–æ–∫
    LOGO_PATH = resource_path(r"assets\micon.png")
    ICON_PATH = resource_path(r"assets\micon.ico")

    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("green")
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å GUI –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    show_splash()