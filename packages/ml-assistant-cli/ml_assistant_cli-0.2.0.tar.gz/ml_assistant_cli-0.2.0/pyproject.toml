[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ml-assistant-cli"
dynamic = ["version"]
description = "End-to-end ML workflow CLI - from dataset to deployed API"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "ML Assistant CLI Team" },
]
keywords = ["machine-learning", "cli", "deployment", "bentoml", "mlops"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "typer[all]>=0.9.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "xgboost>=1.7.0",
    "bentoml>=1.2.0",
    "pyyaml>=6.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "click>=8.0.0",
    "httpx>=0.24.0",
    "pathlib-mate>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
]
cloud = [
    "azure-ai-ml>=1.12.0",
    "azure-identity>=1.15.0",
    "boto3>=1.34.0",
    "sagemaker>=2.200.0",
]

[project.urls]
Homepage = "https://github.com/mlcli/mlcli"
Documentation = "https://mlcli.readthedocs.io"
Repository = "https://github.com/mlcli/mlcli"
Issues = "https://github.com/mlcli/mlcli/issues"

[project.scripts]
mlcli = "mlcli.main:app"

[tool.hatch.version]
path = "mlcli/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["mlcli"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=mlcli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.coverage.run]
source = ["mlcli"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]