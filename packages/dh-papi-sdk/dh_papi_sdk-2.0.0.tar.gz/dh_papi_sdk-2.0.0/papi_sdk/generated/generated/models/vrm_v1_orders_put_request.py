# coding: utf-8

"""
    Salesforce Platform API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VrmV1OrdersPutRequest(BaseModel):
    """
    VrmV1OrdersPutRequest
    """ # noqa: E501
    vendor_code: Optional[StrictStr] = Field(default=None, description="The code or identifier of the vendor.", alias="vendorCode")
    grid: Optional[StrictStr] = Field(default=None, description="The unique identifier of the vendor grid.", alias="GRID")
    billing_country: Optional[StrictStr] = Field(default=None, description="The billing country associated with the vendor.", alias="billingCountry")
    supplier_id: Optional[StrictStr] = Field(default=None, description="The identifier of the supplier.", alias="supplierId")
    supplier_name: Optional[StrictStr] = Field(default=None, description="The name of the supplier.", alias="supplierName")
    timestamp: Optional[datetime] = Field(default=None, description="The timestamp of the event.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the order or event.")
    entity_id: Optional[StrictStr] = Field(default=None, description="The identifier of the entity.", alias="entityId")
    uuid: Optional[StrictStr] = Field(default=None, description="A unique identifier for this event.", alias="UUID")
    created_at: Optional[datetime] = Field(default=None, description="The creation timestamp of this record.", alias="createdAt")
    order_id: Optional[StrictStr] = Field(default=None, description="The identifier of the related order.", alias="orderId")
    __properties: ClassVar[List[str]] = ["vendorCode", "GRID", "billingCountry", "supplierId", "supplierName", "timestamp", "status", "entityId", "UUID", "createdAt", "orderId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VrmV1OrdersPutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VrmV1OrdersPutRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "vendorCode": obj.get("vendorCode"),
            "GRID": obj.get("GRID"),
            "billingCountry": obj.get("billingCountry"),
            "supplierId": obj.get("supplierId"),
            "supplierName": obj.get("supplierName"),
            "timestamp": obj.get("timestamp"),
            "status": obj.get("status"),
            "entityId": obj.get("entityId"),
            "UUID": obj.get("UUID"),
            "createdAt": obj.get("createdAt"),
            "orderId": obj.get("orderId")
        })
        return _obj


