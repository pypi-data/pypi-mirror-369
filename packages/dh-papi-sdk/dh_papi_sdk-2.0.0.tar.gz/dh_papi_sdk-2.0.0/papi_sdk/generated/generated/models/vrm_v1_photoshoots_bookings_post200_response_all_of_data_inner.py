# coding: utf-8

"""
    Salesforce Platform API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from .vrm_v1_photoshoots_bookings_post200_response_all_of_data_inner_attributes import VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInnerAttributes
from .vrm_v1_photoshoots_bookings_post200_response_all_of_data_inner_record_type import VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInnerRecordType
from typing import Optional, Set
from typing_extensions import Self

class VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInner(BaseModel):
    """
    VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInner
    """ # noqa: E501
    attributes: Optional[VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInnerAttributes] = None
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    photoshoot_reference_id__c: Optional[StrictStr] = Field(default=None, alias="Photoshoot_Reference_ID__c")
    photography_status__c: Optional[StrictStr] = Field(default=None, alias="Photography_Status__c")
    record_type_id: Optional[StrictStr] = Field(default=None, alias="RecordTypeId")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    record_type: Optional[VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInnerRecordType] = Field(default=None, alias="RecordType")
    blocked_reason__c: Optional[StrictStr] = Field(default=None, alias="Blocked_Reason__c")
    __properties: ClassVar[List[str]] = ["attributes", "Id", "Status", "Photoshoot_Reference_ID__c", "Photography_Status__c", "RecordTypeId", "Type", "RecordType", "Blocked_Reason__c"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of record_type
        if self.record_type:
            _dict['RecordType'] = self.record_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInnerAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "Id": obj.get("Id"),
            "Status": obj.get("Status"),
            "Photoshoot_Reference_ID__c": obj.get("Photoshoot_Reference_ID__c"),
            "Photography_Status__c": obj.get("Photography_Status__c"),
            "RecordTypeId": obj.get("RecordTypeId"),
            "Type": obj.get("Type"),
            "RecordType": VrmV1PhotoshootsBookingsPost200ResponseAllOfDataInnerRecordType.from_dict(obj["RecordType"]) if obj.get("RecordType") is not None else None,
            "Blocked_Reason__c": obj.get("Blocked_Reason__c")
        })
        return _obj


