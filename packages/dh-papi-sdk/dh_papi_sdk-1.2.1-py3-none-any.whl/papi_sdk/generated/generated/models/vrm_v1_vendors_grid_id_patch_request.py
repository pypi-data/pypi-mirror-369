# coding: utf-8

"""
    Salesforce Platform API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VrmV1VendorsGridIdPatchRequest(BaseModel):
    """
    VrmV1VendorsGridIdPatchRequest
    """ # noqa: E501
    name: Optional[StrictStr] = None
    legal_name: Optional[StrictStr] = None
    account_vertical_segment: Optional[StrictStr] = None
    tax_number: Optional[StrictStr] = None
    trade_register_number: Optional[StrictStr] = None
    account_business_licence_exp: Optional[StrictStr] = None
    company_number: Optional[StrictStr] = None
    bvd_id: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "legal_name", "account_vertical_segment", "tax_number", "trade_register_number", "account_business_licence_exp", "company_number", "bvd_id", "email", "phone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VrmV1VendorsGridIdPatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VrmV1VendorsGridIdPatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "legal_name": obj.get("legal_name"),
            "account_vertical_segment": obj.get("account_vertical_segment"),
            "tax_number": obj.get("tax_number"),
            "trade_register_number": obj.get("trade_register_number"),
            "account_business_licence_exp": obj.get("account_business_licence_exp"),
            "company_number": obj.get("company_number"),
            "bvd_id": obj.get("bvd_id"),
            "email": obj.get("email"),
            "phone": obj.get("phone")
        })
        return _obj


