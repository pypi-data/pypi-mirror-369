# coding: utf-8

"""
    Salesforce Platform API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from .v1_citi_beneficiary_search_get200_response_data_payment_additional_information import V1CitiBeneficiarySearchGet200ResponseDataPaymentAdditionalInformation
from .v1_citi_beneficiary_search_get200_response_data_payment_creditor import V1CitiBeneficiarySearchGet200ResponseDataPaymentCreditor
from typing import Optional, Set
from typing_extensions import Self

class V1CitiBeneficiarySearchGet200ResponseDataPayment(BaseModel):
    """
    V1CitiBeneficiarySearchGet200ResponseDataPayment
    """ # noqa: E501
    creditor: Optional[V1CitiBeneficiarySearchGet200ResponseDataPaymentCreditor] = None
    additional_information: Optional[V1CitiBeneficiarySearchGet200ResponseDataPaymentAdditionalInformation] = None
    __properties: ClassVar[List[str]] = ["creditor", "additional_information"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1CitiBeneficiarySearchGet200ResponseDataPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creditor
        if self.creditor:
            _dict['creditor'] = self.creditor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_information
        if self.additional_information:
            _dict['additional_information'] = self.additional_information.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1CitiBeneficiarySearchGet200ResponseDataPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creditor": V1CitiBeneficiarySearchGet200ResponseDataPaymentCreditor.from_dict(obj["creditor"]) if obj.get("creditor") is not None else None,
            "additional_information": V1CitiBeneficiarySearchGet200ResponseDataPaymentAdditionalInformation.from_dict(obj["additional_information"]) if obj.get("additional_information") is not None else None
        })
        return _obj


