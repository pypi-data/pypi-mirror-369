// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/tools/proto_splitter/chunk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/tools/proto_splitter/versions.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
namespace tensorflow {
namespace proto_splitter {
class ChunkInfo;
struct ChunkInfoDefaultTypeInternal;
extern ChunkInfoDefaultTypeInternal _ChunkInfo_default_instance_;
class ChunkMetadata;
struct ChunkMetadataDefaultTypeInternal;
extern ChunkMetadataDefaultTypeInternal _ChunkMetadata_default_instance_;
class ChunkedField;
struct ChunkedFieldDefaultTypeInternal;
extern ChunkedFieldDefaultTypeInternal _ChunkedField_default_instance_;
class ChunkedMessage;
struct ChunkedMessageDefaultTypeInternal;
extern ChunkedMessageDefaultTypeInternal _ChunkedMessage_default_instance_;
class FieldIndex;
struct FieldIndexDefaultTypeInternal;
extern FieldIndexDefaultTypeInternal _FieldIndex_default_instance_;
class FieldIndex_MapKey;
struct FieldIndex_MapKeyDefaultTypeInternal;
extern FieldIndex_MapKeyDefaultTypeInternal _FieldIndex_MapKey_default_instance_;
}  // namespace proto_splitter
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::proto_splitter::ChunkInfo* Arena::CreateMaybeMessage<::tensorflow::proto_splitter::ChunkInfo>(Arena*);
template<> ::tensorflow::proto_splitter::ChunkMetadata* Arena::CreateMaybeMessage<::tensorflow::proto_splitter::ChunkMetadata>(Arena*);
template<> ::tensorflow::proto_splitter::ChunkedField* Arena::CreateMaybeMessage<::tensorflow::proto_splitter::ChunkedField>(Arena*);
template<> ::tensorflow::proto_splitter::ChunkedMessage* Arena::CreateMaybeMessage<::tensorflow::proto_splitter::ChunkedMessage>(Arena*);
template<> ::tensorflow::proto_splitter::FieldIndex* Arena::CreateMaybeMessage<::tensorflow::proto_splitter::FieldIndex>(Arena*);
template<> ::tensorflow::proto_splitter::FieldIndex_MapKey* Arena::CreateMaybeMessage<::tensorflow::proto_splitter::FieldIndex_MapKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace proto_splitter {

enum ChunkInfo_Type : int {
  ChunkInfo_Type_UNSET = 0,
  ChunkInfo_Type_MESSAGE = 1,
  ChunkInfo_Type_BYTES = 2,
  ChunkInfo_Type_ChunkInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChunkInfo_Type_ChunkInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChunkInfo_Type_IsValid(int value);
constexpr ChunkInfo_Type ChunkInfo_Type_Type_MIN = ChunkInfo_Type_UNSET;
constexpr ChunkInfo_Type ChunkInfo_Type_Type_MAX = ChunkInfo_Type_BYTES;
constexpr int ChunkInfo_Type_Type_ARRAYSIZE = ChunkInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChunkInfo_Type_descriptor();
template<typename T>
inline const std::string& ChunkInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChunkInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChunkInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChunkInfo_Type_descriptor(), enum_t_value);
}
inline bool ChunkInfo_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChunkInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChunkInfo_Type>(
    ChunkInfo_Type_descriptor(), name, value);
}
// ===================================================================

class ChunkMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.ChunkMetadata) */ {
 public:
  inline ChunkMetadata() : ChunkMetadata(nullptr) {}
  ~ChunkMetadata() override;
  explicit PROTOBUF_CONSTEXPR ChunkMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkMetadata(const ChunkMetadata& from);
  ChunkMetadata(ChunkMetadata&& from) noexcept
    : ChunkMetadata() {
    *this = ::std::move(from);
  }

  inline ChunkMetadata& operator=(const ChunkMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkMetadata& operator=(ChunkMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkMetadata* internal_default_instance() {
    return reinterpret_cast<const ChunkMetadata*>(
               &_ChunkMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChunkMetadata& a, ChunkMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChunkMetadata& from) {
    ChunkMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter.ChunkMetadata";
  }
  protected:
  explicit ChunkMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunksFieldNumber = 2,
    kVersionFieldNumber = 1,
    kMessageFieldNumber = 3,
  };
  // repeated .tensorflow.proto_splitter.ChunkInfo chunks = 2;
  int chunks_size() const;
  private:
  int _internal_chunks_size() const;
  public:
  void clear_chunks();
  ::tensorflow::proto_splitter::ChunkInfo* mutable_chunks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkInfo >*
      mutable_chunks();
  private:
  const ::tensorflow::proto_splitter::ChunkInfo& _internal_chunks(int index) const;
  ::tensorflow::proto_splitter::ChunkInfo* _internal_add_chunks();
  public:
  const ::tensorflow::proto_splitter::ChunkInfo& chunks(int index) const;
  ::tensorflow::proto_splitter::ChunkInfo* add_chunks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkInfo >&
      chunks() const;

  // .tensorflow.proto_splitter.VersionDef version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::tensorflow::proto_splitter::VersionDef& version() const;
  PROTOBUF_NODISCARD ::tensorflow::proto_splitter::VersionDef* release_version();
  ::tensorflow::proto_splitter::VersionDef* mutable_version();
  void set_allocated_version(::tensorflow::proto_splitter::VersionDef* version);
  private:
  const ::tensorflow::proto_splitter::VersionDef& _internal_version() const;
  ::tensorflow::proto_splitter::VersionDef* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::tensorflow::proto_splitter::VersionDef* version);
  ::tensorflow::proto_splitter::VersionDef* unsafe_arena_release_version();

  // .tensorflow.proto_splitter.ChunkedMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::tensorflow::proto_splitter::ChunkedMessage& message() const;
  PROTOBUF_NODISCARD ::tensorflow::proto_splitter::ChunkedMessage* release_message();
  ::tensorflow::proto_splitter::ChunkedMessage* mutable_message();
  void set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* message);
  private:
  const ::tensorflow::proto_splitter::ChunkedMessage& _internal_message() const;
  ::tensorflow::proto_splitter::ChunkedMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::tensorflow::proto_splitter::ChunkedMessage* message);
  ::tensorflow::proto_splitter::ChunkedMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.ChunkMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkInfo > chunks_;
    ::tensorflow::proto_splitter::VersionDef* version_;
    ::tensorflow::proto_splitter::ChunkedMessage* message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};
// -------------------------------------------------------------------

class ChunkInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.ChunkInfo) */ {
 public:
  inline ChunkInfo() : ChunkInfo(nullptr) {}
  ~ChunkInfo() override;
  explicit PROTOBUF_CONSTEXPR ChunkInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkInfo(const ChunkInfo& from);
  ChunkInfo(ChunkInfo&& from) noexcept
    : ChunkInfo() {
    *this = ::std::move(from);
  }

  inline ChunkInfo& operator=(const ChunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkInfo& operator=(ChunkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkInfo* internal_default_instance() {
    return reinterpret_cast<const ChunkInfo*>(
               &_ChunkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChunkInfo& a, ChunkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChunkInfo& from) {
    ChunkInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter.ChunkInfo";
  }
  protected:
  explicit ChunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChunkInfo_Type Type;
  static constexpr Type UNSET =
    ChunkInfo_Type_UNSET;
  static constexpr Type MESSAGE =
    ChunkInfo_Type_MESSAGE;
  static constexpr Type BYTES =
    ChunkInfo_Type_BYTES;
  static inline bool Type_IsValid(int value) {
    return ChunkInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ChunkInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ChunkInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ChunkInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ChunkInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ChunkInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ChunkInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // uint64 size = 2;
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // uint64 offset = 3;
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // .tensorflow.proto_splitter.ChunkInfo.Type type = 1;
  void clear_type();
  ::tensorflow::proto_splitter::ChunkInfo_Type type() const;
  void set_type(::tensorflow::proto_splitter::ChunkInfo_Type value);
  private:
  ::tensorflow::proto_splitter::ChunkInfo_Type _internal_type() const;
  void _internal_set_type(::tensorflow::proto_splitter::ChunkInfo_Type value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.ChunkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t size_;
    uint64_t offset_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};
// -------------------------------------------------------------------

class ChunkedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.ChunkedMessage) */ {
 public:
  inline ChunkedMessage() : ChunkedMessage(nullptr) {}
  ~ChunkedMessage() override;
  explicit PROTOBUF_CONSTEXPR ChunkedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkedMessage(const ChunkedMessage& from);
  ChunkedMessage(ChunkedMessage&& from) noexcept
    : ChunkedMessage() {
    *this = ::std::move(from);
  }

  inline ChunkedMessage& operator=(const ChunkedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkedMessage& operator=(ChunkedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkedMessage* internal_default_instance() {
    return reinterpret_cast<const ChunkedMessage*>(
               &_ChunkedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChunkedMessage& a, ChunkedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkedMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChunkedMessage& from) {
    ChunkedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkedMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter.ChunkedMessage";
  }
  protected:
  explicit ChunkedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkedFieldsFieldNumber = 2,
    kChunkIndexFieldNumber = 1,
  };
  // repeated .tensorflow.proto_splitter.ChunkedField chunked_fields = 2;
  int chunked_fields_size() const;
  private:
  int _internal_chunked_fields_size() const;
  public:
  void clear_chunked_fields();
  ::tensorflow::proto_splitter::ChunkedField* mutable_chunked_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkedField >*
      mutable_chunked_fields();
  private:
  const ::tensorflow::proto_splitter::ChunkedField& _internal_chunked_fields(int index) const;
  ::tensorflow::proto_splitter::ChunkedField* _internal_add_chunked_fields();
  public:
  const ::tensorflow::proto_splitter::ChunkedField& chunked_fields(int index) const;
  ::tensorflow::proto_splitter::ChunkedField* add_chunked_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkedField >&
      chunked_fields() const;

  // optional uint64 chunk_index = 1;
  bool has_chunk_index() const;
  private:
  bool _internal_has_chunk_index() const;
  public:
  void clear_chunk_index();
  uint64_t chunk_index() const;
  void set_chunk_index(uint64_t value);
  private:
  uint64_t _internal_chunk_index() const;
  void _internal_set_chunk_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.ChunkedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkedField > chunked_fields_;
    uint64_t chunk_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};
// -------------------------------------------------------------------

class ChunkedField final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.ChunkedField) */ {
 public:
  inline ChunkedField() : ChunkedField(nullptr) {}
  ~ChunkedField() override;
  explicit PROTOBUF_CONSTEXPR ChunkedField(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkedField(const ChunkedField& from);
  ChunkedField(ChunkedField&& from) noexcept
    : ChunkedField() {
    *this = ::std::move(from);
  }

  inline ChunkedField& operator=(const ChunkedField& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkedField& operator=(ChunkedField&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunkedField& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkedField* internal_default_instance() {
    return reinterpret_cast<const ChunkedField*>(
               &_ChunkedField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChunkedField& a, ChunkedField& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkedField* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkedField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunkedField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunkedField>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunkedField& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChunkedField& from) {
    ChunkedField::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkedField* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter.ChunkedField";
  }
  protected:
  explicit ChunkedField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldTagFieldNumber = 1,
    kMessageFieldNumber = 3,
  };
  // repeated .tensorflow.proto_splitter.FieldIndex field_tag = 1;
  int field_tag_size() const;
  private:
  int _internal_field_tag_size() const;
  public:
  void clear_field_tag();
  ::tensorflow::proto_splitter::FieldIndex* mutable_field_tag(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::FieldIndex >*
      mutable_field_tag();
  private:
  const ::tensorflow::proto_splitter::FieldIndex& _internal_field_tag(int index) const;
  ::tensorflow::proto_splitter::FieldIndex* _internal_add_field_tag();
  public:
  const ::tensorflow::proto_splitter::FieldIndex& field_tag(int index) const;
  ::tensorflow::proto_splitter::FieldIndex* add_field_tag();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::FieldIndex >&
      field_tag() const;

  // .tensorflow.proto_splitter.ChunkedMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::tensorflow::proto_splitter::ChunkedMessage& message() const;
  PROTOBUF_NODISCARD ::tensorflow::proto_splitter::ChunkedMessage* release_message();
  ::tensorflow::proto_splitter::ChunkedMessage* mutable_message();
  void set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* message);
  private:
  const ::tensorflow::proto_splitter::ChunkedMessage& _internal_message() const;
  ::tensorflow::proto_splitter::ChunkedMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::tensorflow::proto_splitter::ChunkedMessage* message);
  ::tensorflow::proto_splitter::ChunkedMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.ChunkedField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::FieldIndex > field_tag_;
    ::tensorflow::proto_splitter::ChunkedMessage* message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};
// -------------------------------------------------------------------

class FieldIndex_MapKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.FieldIndex.MapKey) */ {
 public:
  inline FieldIndex_MapKey() : FieldIndex_MapKey(nullptr) {}
  ~FieldIndex_MapKey() override;
  explicit PROTOBUF_CONSTEXPR FieldIndex_MapKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldIndex_MapKey(const FieldIndex_MapKey& from);
  FieldIndex_MapKey(FieldIndex_MapKey&& from) noexcept
    : FieldIndex_MapKey() {
    *this = ::std::move(from);
  }

  inline FieldIndex_MapKey& operator=(const FieldIndex_MapKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldIndex_MapKey& operator=(FieldIndex_MapKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldIndex_MapKey& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kS = 1,
    kBoolean = 2,
    kUi32 = 3,
    kUi64 = 4,
    kI32 = 5,
    kI64 = 6,
    TYPE_NOT_SET = 0,
  };

  static inline const FieldIndex_MapKey* internal_default_instance() {
    return reinterpret_cast<const FieldIndex_MapKey*>(
               &_FieldIndex_MapKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FieldIndex_MapKey& a, FieldIndex_MapKey& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldIndex_MapKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldIndex_MapKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldIndex_MapKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldIndex_MapKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldIndex_MapKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldIndex_MapKey& from) {
    FieldIndex_MapKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldIndex_MapKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter.FieldIndex.MapKey";
  }
  protected:
  explicit FieldIndex_MapKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSFieldNumber = 1,
    kBooleanFieldNumber = 2,
    kUi32FieldNumber = 3,
    kUi64FieldNumber = 4,
    kI32FieldNumber = 5,
    kI64FieldNumber = 6,
  };
  // string s = 1;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const std::string& s() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_s(ArgT0&& arg0, ArgT... args);
  std::string* mutable_s();
  PROTOBUF_NODISCARD std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // bool boolean = 2;
  bool has_boolean() const;
  private:
  bool _internal_has_boolean() const;
  public:
  void clear_boolean();
  bool boolean() const;
  void set_boolean(bool value);
  private:
  bool _internal_boolean() const;
  void _internal_set_boolean(bool value);
  public:

  // uint32 ui32 = 3;
  bool has_ui32() const;
  private:
  bool _internal_has_ui32() const;
  public:
  void clear_ui32();
  uint32_t ui32() const;
  void set_ui32(uint32_t value);
  private:
  uint32_t _internal_ui32() const;
  void _internal_set_ui32(uint32_t value);
  public:

  // uint64 ui64 = 4;
  bool has_ui64() const;
  private:
  bool _internal_has_ui64() const;
  public:
  void clear_ui64();
  uint64_t ui64() const;
  void set_ui64(uint64_t value);
  private:
  uint64_t _internal_ui64() const;
  void _internal_set_ui64(uint64_t value);
  public:

  // int32 i32 = 5;
  bool has_i32() const;
  private:
  bool _internal_has_i32() const;
  public:
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // int64 i64 = 6;
  bool has_i64() const;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  int64_t i64() const;
  void set_i64(int64_t value);
  private:
  int64_t _internal_i64() const;
  void _internal_set_i64(int64_t value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.FieldIndex.MapKey)
 private:
  class _Internal;
  void set_has_s();
  void set_has_boolean();
  void set_has_ui32();
  void set_has_ui64();
  void set_has_i32();
  void set_has_i64();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TypeUnion {
      constexpr TypeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
      bool boolean_;
      uint32_t ui32_;
      uint64_t ui64_;
      int32_t i32_;
      int64_t i64_;
    } type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};
// -------------------------------------------------------------------

class FieldIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter.FieldIndex) */ {
 public:
  inline FieldIndex() : FieldIndex(nullptr) {}
  ~FieldIndex() override;
  explicit PROTOBUF_CONSTEXPR FieldIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldIndex(const FieldIndex& from);
  FieldIndex(FieldIndex&& from) noexcept
    : FieldIndex() {
    *this = ::std::move(from);
  }

  inline FieldIndex& operator=(const FieldIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldIndex& operator=(FieldIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldIndex& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kField = 1,
    kMapKey = 2,
    kIndex = 3,
    KIND_NOT_SET = 0,
  };

  static inline const FieldIndex* internal_default_instance() {
    return reinterpret_cast<const FieldIndex*>(
               &_FieldIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FieldIndex& a, FieldIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldIndex& from) {
    FieldIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter.FieldIndex";
  }
  protected:
  explicit FieldIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FieldIndex_MapKey MapKey;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
    kMapKeyFieldNumber = 2,
    kIndexFieldNumber = 3,
  };
  // uint32 field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  uint32_t field() const;
  void set_field(uint32_t value);
  private:
  uint32_t _internal_field() const;
  void _internal_set_field(uint32_t value);
  public:

  // .tensorflow.proto_splitter.FieldIndex.MapKey map_key = 2;
  bool has_map_key() const;
  private:
  bool _internal_has_map_key() const;
  public:
  void clear_map_key();
  const ::tensorflow::proto_splitter::FieldIndex_MapKey& map_key() const;
  PROTOBUF_NODISCARD ::tensorflow::proto_splitter::FieldIndex_MapKey* release_map_key();
  ::tensorflow::proto_splitter::FieldIndex_MapKey* mutable_map_key();
  void set_allocated_map_key(::tensorflow::proto_splitter::FieldIndex_MapKey* map_key);
  private:
  const ::tensorflow::proto_splitter::FieldIndex_MapKey& _internal_map_key() const;
  ::tensorflow::proto_splitter::FieldIndex_MapKey* _internal_mutable_map_key();
  public:
  void unsafe_arena_set_allocated_map_key(
      ::tensorflow::proto_splitter::FieldIndex_MapKey* map_key);
  ::tensorflow::proto_splitter::FieldIndex_MapKey* unsafe_arena_release_map_key();

  // uint64 index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter.FieldIndex)
 private:
  class _Internal;
  void set_has_field();
  void set_has_map_key();
  void set_has_index();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t field_;
      ::tensorflow::proto_splitter::FieldIndex_MapKey* map_key_;
      uint64_t index_;
    } kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChunkMetadata

// .tensorflow.proto_splitter.VersionDef version = 1;
inline bool ChunkMetadata::_internal_has_version() const {
  return this != internal_default_instance() && _impl_.version_ != nullptr;
}
inline bool ChunkMetadata::has_version() const {
  return _internal_has_version();
}
inline const ::tensorflow::proto_splitter::VersionDef& ChunkMetadata::_internal_version() const {
  const ::tensorflow::proto_splitter::VersionDef* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::proto_splitter::VersionDef&>(
      ::tensorflow::proto_splitter::_VersionDef_default_instance_);
}
inline const ::tensorflow::proto_splitter::VersionDef& ChunkMetadata::version() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkMetadata.version)
  return _internal_version();
}
inline void ChunkMetadata::unsafe_arena_set_allocated_version(
    ::tensorflow::proto_splitter::VersionDef* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.proto_splitter.ChunkMetadata.version)
}
inline ::tensorflow::proto_splitter::VersionDef* ChunkMetadata::release_version() {
  
  ::tensorflow::proto_splitter::VersionDef* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::proto_splitter::VersionDef* ChunkMetadata::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.ChunkMetadata.version)
  
  ::tensorflow::proto_splitter::VersionDef* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::tensorflow::proto_splitter::VersionDef* ChunkMetadata::_internal_mutable_version() {
  
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::proto_splitter::VersionDef>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::tensorflow::proto_splitter::VersionDef* ChunkMetadata::mutable_version() {
  ::tensorflow::proto_splitter::VersionDef* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkMetadata.version)
  return _msg;
}
inline void ChunkMetadata::set_allocated_version(::tensorflow::proto_splitter::VersionDef* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version));
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter.ChunkMetadata.version)
}

// repeated .tensorflow.proto_splitter.ChunkInfo chunks = 2;
inline int ChunkMetadata::_internal_chunks_size() const {
  return _impl_.chunks_.size();
}
inline int ChunkMetadata::chunks_size() const {
  return _internal_chunks_size();
}
inline void ChunkMetadata::clear_chunks() {
  _impl_.chunks_.Clear();
}
inline ::tensorflow::proto_splitter::ChunkInfo* ChunkMetadata::mutable_chunks(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkMetadata.chunks)
  return _impl_.chunks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkInfo >*
ChunkMetadata::mutable_chunks() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter.ChunkMetadata.chunks)
  return &_impl_.chunks_;
}
inline const ::tensorflow::proto_splitter::ChunkInfo& ChunkMetadata::_internal_chunks(int index) const {
  return _impl_.chunks_.Get(index);
}
inline const ::tensorflow::proto_splitter::ChunkInfo& ChunkMetadata::chunks(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkMetadata.chunks)
  return _internal_chunks(index);
}
inline ::tensorflow::proto_splitter::ChunkInfo* ChunkMetadata::_internal_add_chunks() {
  return _impl_.chunks_.Add();
}
inline ::tensorflow::proto_splitter::ChunkInfo* ChunkMetadata::add_chunks() {
  ::tensorflow::proto_splitter::ChunkInfo* _add = _internal_add_chunks();
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter.ChunkMetadata.chunks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkInfo >&
ChunkMetadata::chunks() const {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter.ChunkMetadata.chunks)
  return _impl_.chunks_;
}

// .tensorflow.proto_splitter.ChunkedMessage message = 3;
inline bool ChunkMetadata::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool ChunkMetadata::has_message() const {
  return _internal_has_message();
}
inline void ChunkMetadata::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
inline const ::tensorflow::proto_splitter::ChunkedMessage& ChunkMetadata::_internal_message() const {
  const ::tensorflow::proto_splitter::ChunkedMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::proto_splitter::ChunkedMessage&>(
      ::tensorflow::proto_splitter::_ChunkedMessage_default_instance_);
}
inline const ::tensorflow::proto_splitter::ChunkedMessage& ChunkMetadata::message() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkMetadata.message)
  return _internal_message();
}
inline void ChunkMetadata::unsafe_arena_set_allocated_message(
    ::tensorflow::proto_splitter::ChunkedMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.proto_splitter.ChunkMetadata.message)
}
inline ::tensorflow::proto_splitter::ChunkedMessage* ChunkMetadata::release_message() {
  
  ::tensorflow::proto_splitter::ChunkedMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* ChunkMetadata::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.ChunkMetadata.message)
  
  ::tensorflow::proto_splitter::ChunkedMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* ChunkMetadata::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::proto_splitter::ChunkedMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* ChunkMetadata::mutable_message() {
  ::tensorflow::proto_splitter::ChunkedMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkMetadata.message)
  return _msg;
}
inline void ChunkMetadata::set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter.ChunkMetadata.message)
}

// -------------------------------------------------------------------

// ChunkInfo

// .tensorflow.proto_splitter.ChunkInfo.Type type = 1;
inline void ChunkInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::tensorflow::proto_splitter::ChunkInfo_Type ChunkInfo::_internal_type() const {
  return static_cast< ::tensorflow::proto_splitter::ChunkInfo_Type >(_impl_.type_);
}
inline ::tensorflow::proto_splitter::ChunkInfo_Type ChunkInfo::type() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkInfo.type)
  return _internal_type();
}
inline void ChunkInfo::_internal_set_type(::tensorflow::proto_splitter::ChunkInfo_Type value) {
  
  _impl_.type_ = value;
}
inline void ChunkInfo::set_type(::tensorflow::proto_splitter::ChunkInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.ChunkInfo.type)
}

// uint64 size = 2;
inline void ChunkInfo::clear_size() {
  _impl_.size_ = uint64_t{0u};
}
inline uint64_t ChunkInfo::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t ChunkInfo::size() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkInfo.size)
  return _internal_size();
}
inline void ChunkInfo::_internal_set_size(uint64_t value) {
  
  _impl_.size_ = value;
}
inline void ChunkInfo::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.ChunkInfo.size)
}

// uint64 offset = 3;
inline void ChunkInfo::clear_offset() {
  _impl_.offset_ = uint64_t{0u};
}
inline uint64_t ChunkInfo::_internal_offset() const {
  return _impl_.offset_;
}
inline uint64_t ChunkInfo::offset() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkInfo.offset)
  return _internal_offset();
}
inline void ChunkInfo::_internal_set_offset(uint64_t value) {
  
  _impl_.offset_ = value;
}
inline void ChunkInfo::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.ChunkInfo.offset)
}

// -------------------------------------------------------------------

// ChunkedMessage

// optional uint64 chunk_index = 1;
inline bool ChunkedMessage::_internal_has_chunk_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChunkedMessage::has_chunk_index() const {
  return _internal_has_chunk_index();
}
inline void ChunkedMessage::clear_chunk_index() {
  _impl_.chunk_index_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ChunkedMessage::_internal_chunk_index() const {
  return _impl_.chunk_index_;
}
inline uint64_t ChunkedMessage::chunk_index() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkedMessage.chunk_index)
  return _internal_chunk_index();
}
inline void ChunkedMessage::_internal_set_chunk_index(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chunk_index_ = value;
}
inline void ChunkedMessage::set_chunk_index(uint64_t value) {
  _internal_set_chunk_index(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.ChunkedMessage.chunk_index)
}

// repeated .tensorflow.proto_splitter.ChunkedField chunked_fields = 2;
inline int ChunkedMessage::_internal_chunked_fields_size() const {
  return _impl_.chunked_fields_.size();
}
inline int ChunkedMessage::chunked_fields_size() const {
  return _internal_chunked_fields_size();
}
inline void ChunkedMessage::clear_chunked_fields() {
  _impl_.chunked_fields_.Clear();
}
inline ::tensorflow::proto_splitter::ChunkedField* ChunkedMessage::mutable_chunked_fields(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  return _impl_.chunked_fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkedField >*
ChunkedMessage::mutable_chunked_fields() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  return &_impl_.chunked_fields_;
}
inline const ::tensorflow::proto_splitter::ChunkedField& ChunkedMessage::_internal_chunked_fields(int index) const {
  return _impl_.chunked_fields_.Get(index);
}
inline const ::tensorflow::proto_splitter::ChunkedField& ChunkedMessage::chunked_fields(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  return _internal_chunked_fields(index);
}
inline ::tensorflow::proto_splitter::ChunkedField* ChunkedMessage::_internal_add_chunked_fields() {
  return _impl_.chunked_fields_.Add();
}
inline ::tensorflow::proto_splitter::ChunkedField* ChunkedMessage::add_chunked_fields() {
  ::tensorflow::proto_splitter::ChunkedField* _add = _internal_add_chunked_fields();
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::ChunkedField >&
ChunkedMessage::chunked_fields() const {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter.ChunkedMessage.chunked_fields)
  return _impl_.chunked_fields_;
}

// -------------------------------------------------------------------

// ChunkedField

// repeated .tensorflow.proto_splitter.FieldIndex field_tag = 1;
inline int ChunkedField::_internal_field_tag_size() const {
  return _impl_.field_tag_.size();
}
inline int ChunkedField::field_tag_size() const {
  return _internal_field_tag_size();
}
inline void ChunkedField::clear_field_tag() {
  _impl_.field_tag_.Clear();
}
inline ::tensorflow::proto_splitter::FieldIndex* ChunkedField::mutable_field_tag(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkedField.field_tag)
  return _impl_.field_tag_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::FieldIndex >*
ChunkedField::mutable_field_tag() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter.ChunkedField.field_tag)
  return &_impl_.field_tag_;
}
inline const ::tensorflow::proto_splitter::FieldIndex& ChunkedField::_internal_field_tag(int index) const {
  return _impl_.field_tag_.Get(index);
}
inline const ::tensorflow::proto_splitter::FieldIndex& ChunkedField::field_tag(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkedField.field_tag)
  return _internal_field_tag(index);
}
inline ::tensorflow::proto_splitter::FieldIndex* ChunkedField::_internal_add_field_tag() {
  return _impl_.field_tag_.Add();
}
inline ::tensorflow::proto_splitter::FieldIndex* ChunkedField::add_field_tag() {
  ::tensorflow::proto_splitter::FieldIndex* _add = _internal_add_field_tag();
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter.ChunkedField.field_tag)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter::FieldIndex >&
ChunkedField::field_tag() const {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter.ChunkedField.field_tag)
  return _impl_.field_tag_;
}

// .tensorflow.proto_splitter.ChunkedMessage message = 3;
inline bool ChunkedField::_internal_has_message() const {
  return this != internal_default_instance() && _impl_.message_ != nullptr;
}
inline bool ChunkedField::has_message() const {
  return _internal_has_message();
}
inline void ChunkedField::clear_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.message_ != nullptr) {
    delete _impl_.message_;
  }
  _impl_.message_ = nullptr;
}
inline const ::tensorflow::proto_splitter::ChunkedMessage& ChunkedField::_internal_message() const {
  const ::tensorflow::proto_splitter::ChunkedMessage* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::proto_splitter::ChunkedMessage&>(
      ::tensorflow::proto_splitter::_ChunkedMessage_default_instance_);
}
inline const ::tensorflow::proto_splitter::ChunkedMessage& ChunkedField::message() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.ChunkedField.message)
  return _internal_message();
}
inline void ChunkedField::unsafe_arena_set_allocated_message(
    ::tensorflow::proto_splitter::ChunkedMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.proto_splitter.ChunkedField.message)
}
inline ::tensorflow::proto_splitter::ChunkedMessage* ChunkedField::release_message() {
  
  ::tensorflow::proto_splitter::ChunkedMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* ChunkedField::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.ChunkedField.message)
  
  ::tensorflow::proto_splitter::ChunkedMessage* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* ChunkedField::_internal_mutable_message() {
  
  if (_impl_.message_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::proto_splitter::ChunkedMessage>(GetArenaForAllocation());
    _impl_.message_ = p;
  }
  return _impl_.message_;
}
inline ::tensorflow::proto_splitter::ChunkedMessage* ChunkedField::mutable_message() {
  ::tensorflow::proto_splitter::ChunkedMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.ChunkedField.message)
  return _msg;
}
inline void ChunkedField::set_allocated_message(::tensorflow::proto_splitter::ChunkedMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.message_ = message;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter.ChunkedField.message)
}

// -------------------------------------------------------------------

// FieldIndex_MapKey

// string s = 1;
inline bool FieldIndex_MapKey::_internal_has_s() const {
  return type_case() == kS;
}
inline bool FieldIndex_MapKey::has_s() const {
  return _internal_has_s();
}
inline void FieldIndex_MapKey::set_has_s() {
  _impl_._oneof_case_[0] = kS;
}
inline void FieldIndex_MapKey::clear_s() {
  if (_internal_has_s()) {
    _impl_.type_.s_.Destroy();
    clear_has_type();
  }
}
inline const std::string& FieldIndex_MapKey::s() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.s)
  return _internal_s();
}
template <typename ArgT0, typename... ArgT>
inline void FieldIndex_MapKey::set_s(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_s()) {
    clear_type();
    set_has_s();
    _impl_.type_.s_.InitDefault();
  }
  _impl_.type_.s_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.s)
}
inline std::string* FieldIndex_MapKey::mutable_s() {
  std::string* _s = _internal_mutable_s();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.FieldIndex.MapKey.s)
  return _s;
}
inline const std::string& FieldIndex_MapKey::_internal_s() const {
  if (_internal_has_s()) {
    return _impl_.type_.s_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FieldIndex_MapKey::_internal_set_s(const std::string& value) {
  if (!_internal_has_s()) {
    clear_type();
    set_has_s();
    _impl_.type_.s_.InitDefault();
  }
  _impl_.type_.s_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldIndex_MapKey::_internal_mutable_s() {
  if (!_internal_has_s()) {
    clear_type();
    set_has_s();
    _impl_.type_.s_.InitDefault();
  }
  return _impl_.type_.s_.Mutable(      GetArenaForAllocation());
}
inline std::string* FieldIndex_MapKey::release_s() {
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.FieldIndex.MapKey.s)
  if (_internal_has_s()) {
    clear_has_type();
    return _impl_.type_.s_.Release();
  } else {
    return nullptr;
  }
}
inline void FieldIndex_MapKey::set_allocated_s(std::string* s) {
  if (has_type()) {
    clear_type();
  }
  if (s != nullptr) {
    set_has_s();
    _impl_.type_.s_.InitAllocated(s, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter.FieldIndex.MapKey.s)
}

// bool boolean = 2;
inline bool FieldIndex_MapKey::_internal_has_boolean() const {
  return type_case() == kBoolean;
}
inline bool FieldIndex_MapKey::has_boolean() const {
  return _internal_has_boolean();
}
inline void FieldIndex_MapKey::set_has_boolean() {
  _impl_._oneof_case_[0] = kBoolean;
}
inline void FieldIndex_MapKey::clear_boolean() {
  if (_internal_has_boolean()) {
    _impl_.type_.boolean_ = false;
    clear_has_type();
  }
}
inline bool FieldIndex_MapKey::_internal_boolean() const {
  if (_internal_has_boolean()) {
    return _impl_.type_.boolean_;
  }
  return false;
}
inline void FieldIndex_MapKey::_internal_set_boolean(bool value) {
  if (!_internal_has_boolean()) {
    clear_type();
    set_has_boolean();
  }
  _impl_.type_.boolean_ = value;
}
inline bool FieldIndex_MapKey::boolean() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.boolean)
  return _internal_boolean();
}
inline void FieldIndex_MapKey::set_boolean(bool value) {
  _internal_set_boolean(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.boolean)
}

// uint32 ui32 = 3;
inline bool FieldIndex_MapKey::_internal_has_ui32() const {
  return type_case() == kUi32;
}
inline bool FieldIndex_MapKey::has_ui32() const {
  return _internal_has_ui32();
}
inline void FieldIndex_MapKey::set_has_ui32() {
  _impl_._oneof_case_[0] = kUi32;
}
inline void FieldIndex_MapKey::clear_ui32() {
  if (_internal_has_ui32()) {
    _impl_.type_.ui32_ = 0u;
    clear_has_type();
  }
}
inline uint32_t FieldIndex_MapKey::_internal_ui32() const {
  if (_internal_has_ui32()) {
    return _impl_.type_.ui32_;
  }
  return 0u;
}
inline void FieldIndex_MapKey::_internal_set_ui32(uint32_t value) {
  if (!_internal_has_ui32()) {
    clear_type();
    set_has_ui32();
  }
  _impl_.type_.ui32_ = value;
}
inline uint32_t FieldIndex_MapKey::ui32() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.ui32)
  return _internal_ui32();
}
inline void FieldIndex_MapKey::set_ui32(uint32_t value) {
  _internal_set_ui32(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.ui32)
}

// uint64 ui64 = 4;
inline bool FieldIndex_MapKey::_internal_has_ui64() const {
  return type_case() == kUi64;
}
inline bool FieldIndex_MapKey::has_ui64() const {
  return _internal_has_ui64();
}
inline void FieldIndex_MapKey::set_has_ui64() {
  _impl_._oneof_case_[0] = kUi64;
}
inline void FieldIndex_MapKey::clear_ui64() {
  if (_internal_has_ui64()) {
    _impl_.type_.ui64_ = uint64_t{0u};
    clear_has_type();
  }
}
inline uint64_t FieldIndex_MapKey::_internal_ui64() const {
  if (_internal_has_ui64()) {
    return _impl_.type_.ui64_;
  }
  return uint64_t{0u};
}
inline void FieldIndex_MapKey::_internal_set_ui64(uint64_t value) {
  if (!_internal_has_ui64()) {
    clear_type();
    set_has_ui64();
  }
  _impl_.type_.ui64_ = value;
}
inline uint64_t FieldIndex_MapKey::ui64() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.ui64)
  return _internal_ui64();
}
inline void FieldIndex_MapKey::set_ui64(uint64_t value) {
  _internal_set_ui64(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.ui64)
}

// int32 i32 = 5;
inline bool FieldIndex_MapKey::_internal_has_i32() const {
  return type_case() == kI32;
}
inline bool FieldIndex_MapKey::has_i32() const {
  return _internal_has_i32();
}
inline void FieldIndex_MapKey::set_has_i32() {
  _impl_._oneof_case_[0] = kI32;
}
inline void FieldIndex_MapKey::clear_i32() {
  if (_internal_has_i32()) {
    _impl_.type_.i32_ = 0;
    clear_has_type();
  }
}
inline int32_t FieldIndex_MapKey::_internal_i32() const {
  if (_internal_has_i32()) {
    return _impl_.type_.i32_;
  }
  return 0;
}
inline void FieldIndex_MapKey::_internal_set_i32(int32_t value) {
  if (!_internal_has_i32()) {
    clear_type();
    set_has_i32();
  }
  _impl_.type_.i32_ = value;
}
inline int32_t FieldIndex_MapKey::i32() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.i32)
  return _internal_i32();
}
inline void FieldIndex_MapKey::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.i32)
}

// int64 i64 = 6;
inline bool FieldIndex_MapKey::_internal_has_i64() const {
  return type_case() == kI64;
}
inline bool FieldIndex_MapKey::has_i64() const {
  return _internal_has_i64();
}
inline void FieldIndex_MapKey::set_has_i64() {
  _impl_._oneof_case_[0] = kI64;
}
inline void FieldIndex_MapKey::clear_i64() {
  if (_internal_has_i64()) {
    _impl_.type_.i64_ = int64_t{0};
    clear_has_type();
  }
}
inline int64_t FieldIndex_MapKey::_internal_i64() const {
  if (_internal_has_i64()) {
    return _impl_.type_.i64_;
  }
  return int64_t{0};
}
inline void FieldIndex_MapKey::_internal_set_i64(int64_t value) {
  if (!_internal_has_i64()) {
    clear_type();
    set_has_i64();
  }
  _impl_.type_.i64_ = value;
}
inline int64_t FieldIndex_MapKey::i64() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.MapKey.i64)
  return _internal_i64();
}
inline void FieldIndex_MapKey::set_i64(int64_t value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.MapKey.i64)
}

inline bool FieldIndex_MapKey::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void FieldIndex_MapKey::clear_has_type() {
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}
inline FieldIndex_MapKey::TypeCase FieldIndex_MapKey::type_case() const {
  return FieldIndex_MapKey::TypeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FieldIndex

// uint32 field = 1;
inline bool FieldIndex::_internal_has_field() const {
  return kind_case() == kField;
}
inline bool FieldIndex::has_field() const {
  return _internal_has_field();
}
inline void FieldIndex::set_has_field() {
  _impl_._oneof_case_[0] = kField;
}
inline void FieldIndex::clear_field() {
  if (_internal_has_field()) {
    _impl_.kind_.field_ = 0u;
    clear_has_kind();
  }
}
inline uint32_t FieldIndex::_internal_field() const {
  if (_internal_has_field()) {
    return _impl_.kind_.field_;
  }
  return 0u;
}
inline void FieldIndex::_internal_set_field(uint32_t value) {
  if (!_internal_has_field()) {
    clear_kind();
    set_has_field();
  }
  _impl_.kind_.field_ = value;
}
inline uint32_t FieldIndex::field() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.field)
  return _internal_field();
}
inline void FieldIndex::set_field(uint32_t value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.field)
}

// .tensorflow.proto_splitter.FieldIndex.MapKey map_key = 2;
inline bool FieldIndex::_internal_has_map_key() const {
  return kind_case() == kMapKey;
}
inline bool FieldIndex::has_map_key() const {
  return _internal_has_map_key();
}
inline void FieldIndex::set_has_map_key() {
  _impl_._oneof_case_[0] = kMapKey;
}
inline void FieldIndex::clear_map_key() {
  if (_internal_has_map_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.map_key_;
    }
    clear_has_kind();
  }
}
inline ::tensorflow::proto_splitter::FieldIndex_MapKey* FieldIndex::release_map_key() {
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter.FieldIndex.map_key)
  if (_internal_has_map_key()) {
    clear_has_kind();
    ::tensorflow::proto_splitter::FieldIndex_MapKey* temp = _impl_.kind_.map_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tensorflow::proto_splitter::FieldIndex_MapKey& FieldIndex::_internal_map_key() const {
  return _internal_has_map_key()
      ? *_impl_.kind_.map_key_
      : reinterpret_cast< ::tensorflow::proto_splitter::FieldIndex_MapKey&>(::tensorflow::proto_splitter::_FieldIndex_MapKey_default_instance_);
}
inline const ::tensorflow::proto_splitter::FieldIndex_MapKey& FieldIndex::map_key() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.map_key)
  return _internal_map_key();
}
inline ::tensorflow::proto_splitter::FieldIndex_MapKey* FieldIndex::unsafe_arena_release_map_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.proto_splitter.FieldIndex.map_key)
  if (_internal_has_map_key()) {
    clear_has_kind();
    ::tensorflow::proto_splitter::FieldIndex_MapKey* temp = _impl_.kind_.map_key_;
    _impl_.kind_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FieldIndex::unsafe_arena_set_allocated_map_key(::tensorflow::proto_splitter::FieldIndex_MapKey* map_key) {
  clear_kind();
  if (map_key) {
    set_has_map_key();
    _impl_.kind_.map_key_ = map_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.proto_splitter.FieldIndex.map_key)
}
inline ::tensorflow::proto_splitter::FieldIndex_MapKey* FieldIndex::_internal_mutable_map_key() {
  if (!_internal_has_map_key()) {
    clear_kind();
    set_has_map_key();
    _impl_.kind_.map_key_ = CreateMaybeMessage< ::tensorflow::proto_splitter::FieldIndex_MapKey >(GetArenaForAllocation());
  }
  return _impl_.kind_.map_key_;
}
inline ::tensorflow::proto_splitter::FieldIndex_MapKey* FieldIndex::mutable_map_key() {
  ::tensorflow::proto_splitter::FieldIndex_MapKey* _msg = _internal_mutable_map_key();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter.FieldIndex.map_key)
  return _msg;
}

// uint64 index = 3;
inline bool FieldIndex::_internal_has_index() const {
  return kind_case() == kIndex;
}
inline bool FieldIndex::has_index() const {
  return _internal_has_index();
}
inline void FieldIndex::set_has_index() {
  _impl_._oneof_case_[0] = kIndex;
}
inline void FieldIndex::clear_index() {
  if (_internal_has_index()) {
    _impl_.kind_.index_ = uint64_t{0u};
    clear_has_kind();
  }
}
inline uint64_t FieldIndex::_internal_index() const {
  if (_internal_has_index()) {
    return _impl_.kind_.index_;
  }
  return uint64_t{0u};
}
inline void FieldIndex::_internal_set_index(uint64_t value) {
  if (!_internal_has_index()) {
    clear_kind();
    set_has_index();
  }
  _impl_.kind_.index_ = value;
}
inline uint64_t FieldIndex::index() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter.FieldIndex.index)
  return _internal_index();
}
inline void FieldIndex::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter.FieldIndex.index)
}

inline bool FieldIndex::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void FieldIndex::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline FieldIndex::KindCase FieldIndex::kind_case() const {
  return FieldIndex::KindCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_splitter
}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::proto_splitter::ChunkInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::proto_splitter::ChunkInfo_Type>() {
  return ::tensorflow::proto_splitter::ChunkInfo_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2ftools_2fproto_5fsplitter_2fchunk_2eproto
