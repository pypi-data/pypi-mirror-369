// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/tools/proto_splitter/testdata/test_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto;
namespace tensorflow {
namespace proto_splitter_testdata {
class ManyFields;
struct ManyFieldsDefaultTypeInternal;
extern ManyFieldsDefaultTypeInternal _ManyFields_default_instance_;
class ManyFields_MapFieldInt64Entry_DoNotUse;
struct ManyFields_MapFieldInt64Entry_DoNotUseDefaultTypeInternal;
extern ManyFields_MapFieldInt64Entry_DoNotUseDefaultTypeInternal _ManyFields_MapFieldInt64Entry_DoNotUse_default_instance_;
class ManyFields_MapFieldUint32Entry_DoNotUse;
struct ManyFields_MapFieldUint32Entry_DoNotUseDefaultTypeInternal;
extern ManyFields_MapFieldUint32Entry_DoNotUseDefaultTypeInternal _ManyFields_MapFieldUint32Entry_DoNotUse_default_instance_;
class ManyFields_NestedMapBoolEntry_DoNotUse;
struct ManyFields_NestedMapBoolEntry_DoNotUseDefaultTypeInternal;
extern ManyFields_NestedMapBoolEntry_DoNotUseDefaultTypeInternal _ManyFields_NestedMapBoolEntry_DoNotUse_default_instance_;
class RepeatedRepeatedString;
struct RepeatedRepeatedStringDefaultTypeInternal;
extern RepeatedRepeatedStringDefaultTypeInternal _RepeatedRepeatedString_default_instance_;
class RepeatedString;
struct RepeatedStringDefaultTypeInternal;
extern RepeatedStringDefaultTypeInternal _RepeatedString_default_instance_;
class StringNode;
struct StringNodeDefaultTypeInternal;
extern StringNodeDefaultTypeInternal _StringNode_default_instance_;
}  // namespace proto_splitter_testdata
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::proto_splitter_testdata::ManyFields* Arena::CreateMaybeMessage<::tensorflow::proto_splitter_testdata::ManyFields>(Arena*);
template<> ::tensorflow::proto_splitter_testdata::ManyFields_MapFieldInt64Entry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::proto_splitter_testdata::ManyFields_MapFieldInt64Entry_DoNotUse>(Arena*);
template<> ::tensorflow::proto_splitter_testdata::ManyFields_MapFieldUint32Entry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::proto_splitter_testdata::ManyFields_MapFieldUint32Entry_DoNotUse>(Arena*);
template<> ::tensorflow::proto_splitter_testdata::ManyFields_NestedMapBoolEntry_DoNotUse* Arena::CreateMaybeMessage<::tensorflow::proto_splitter_testdata::ManyFields_NestedMapBoolEntry_DoNotUse>(Arena*);
template<> ::tensorflow::proto_splitter_testdata::RepeatedRepeatedString* Arena::CreateMaybeMessage<::tensorflow::proto_splitter_testdata::RepeatedRepeatedString>(Arena*);
template<> ::tensorflow::proto_splitter_testdata::RepeatedString* Arena::CreateMaybeMessage<::tensorflow::proto_splitter_testdata::RepeatedString>(Arena*);
template<> ::tensorflow::proto_splitter_testdata::StringNode* Arena::CreateMaybeMessage<::tensorflow::proto_splitter_testdata::StringNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace proto_splitter_testdata {

// ===================================================================

class RepeatedString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter_testdata.RepeatedString) */ {
 public:
  inline RepeatedString() : RepeatedString(nullptr) {}
  ~RepeatedString() override;
  explicit PROTOBUF_CONSTEXPR RepeatedString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepeatedString(const RepeatedString& from);
  RepeatedString(RepeatedString&& from) noexcept
    : RepeatedString() {
    *this = ::std::move(from);
  }

  inline RepeatedString& operator=(const RepeatedString& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedString& operator=(RepeatedString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatedString& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatedString* internal_default_instance() {
    return reinterpret_cast<const RepeatedString*>(
               &_RepeatedString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RepeatedString& a, RepeatedString& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatedString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepeatedString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepeatedString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepeatedString& from) {
    RepeatedString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter_testdata.RepeatedString";
  }
  protected:
  explicit RepeatedString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringsFieldNumber = 1,
  };
  // repeated string strings = 1;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter_testdata.RepeatedString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class RepeatedRepeatedString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter_testdata.RepeatedRepeatedString) */ {
 public:
  inline RepeatedRepeatedString() : RepeatedRepeatedString(nullptr) {}
  ~RepeatedRepeatedString() override;
  explicit PROTOBUF_CONSTEXPR RepeatedRepeatedString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RepeatedRepeatedString(const RepeatedRepeatedString& from);
  RepeatedRepeatedString(RepeatedRepeatedString&& from) noexcept
    : RepeatedRepeatedString() {
    *this = ::std::move(from);
  }

  inline RepeatedRepeatedString& operator=(const RepeatedRepeatedString& from) {
    CopyFrom(from);
    return *this;
  }
  inline RepeatedRepeatedString& operator=(RepeatedRepeatedString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RepeatedRepeatedString& default_instance() {
    return *internal_default_instance();
  }
  static inline const RepeatedRepeatedString* internal_default_instance() {
    return reinterpret_cast<const RepeatedRepeatedString*>(
               &_RepeatedRepeatedString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RepeatedRepeatedString& a, RepeatedRepeatedString& b) {
    a.Swap(&b);
  }
  inline void Swap(RepeatedRepeatedString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RepeatedRepeatedString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RepeatedRepeatedString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RepeatedRepeatedString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RepeatedRepeatedString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RepeatedRepeatedString& from) {
    RepeatedRepeatedString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepeatedRepeatedString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter_testdata.RepeatedRepeatedString";
  }
  protected:
  explicit RepeatedRepeatedString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRsFieldNumber = 2,
    kFillerFieldFieldNumber = 1,
  };
  // repeated .tensorflow.proto_splitter_testdata.RepeatedString rs = 2;
  int rs_size() const;
  private:
  int _internal_rs_size() const;
  public:
  void clear_rs();
  ::tensorflow::proto_splitter_testdata::RepeatedString* mutable_rs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::RepeatedString >*
      mutable_rs();
  private:
  const ::tensorflow::proto_splitter_testdata::RepeatedString& _internal_rs(int index) const;
  ::tensorflow::proto_splitter_testdata::RepeatedString* _internal_add_rs();
  public:
  const ::tensorflow::proto_splitter_testdata::RepeatedString& rs(int index) const;
  ::tensorflow::proto_splitter_testdata::RepeatedString* add_rs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::RepeatedString >&
      rs() const;

  // int32 filler_field = 1;
  void clear_filler_field();
  int32_t filler_field() const;
  void set_filler_field(int32_t value);
  private:
  int32_t _internal_filler_field() const;
  void _internal_set_filler_field(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter_testdata.RepeatedRepeatedString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::RepeatedString > rs_;
    int32_t filler_field_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ManyFields_MapFieldUint32Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ManyFields_MapFieldUint32Entry_DoNotUse, 
    uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ManyFields_MapFieldUint32Entry_DoNotUse, 
    uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ManyFields_MapFieldUint32Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ManyFields_MapFieldUint32Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ManyFields_MapFieldUint32Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ManyFields_MapFieldUint32Entry_DoNotUse& other);
  static const ManyFields_MapFieldUint32Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ManyFields_MapFieldUint32Entry_DoNotUse*>(&_ManyFields_MapFieldUint32Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tensorflow.proto_splitter_testdata.ManyFields.MapFieldUint32Entry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto;
};

// -------------------------------------------------------------------

class ManyFields_MapFieldInt64Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ManyFields_MapFieldInt64Entry_DoNotUse, 
    int64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ManyFields_MapFieldInt64Entry_DoNotUse, 
    int64_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ManyFields_MapFieldInt64Entry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ManyFields_MapFieldInt64Entry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ManyFields_MapFieldInt64Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ManyFields_MapFieldInt64Entry_DoNotUse& other);
  static const ManyFields_MapFieldInt64Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ManyFields_MapFieldInt64Entry_DoNotUse*>(&_ManyFields_MapFieldInt64Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tensorflow.proto_splitter_testdata.ManyFields.MapFieldInt64Entry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto;
};

// -------------------------------------------------------------------

class ManyFields_NestedMapBoolEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ManyFields_NestedMapBoolEntry_DoNotUse, 
    bool, ::tensorflow::proto_splitter_testdata::ManyFields,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ManyFields_NestedMapBoolEntry_DoNotUse, 
    bool, ::tensorflow::proto_splitter_testdata::ManyFields,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ManyFields_NestedMapBoolEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ManyFields_NestedMapBoolEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ManyFields_NestedMapBoolEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ManyFields_NestedMapBoolEntry_DoNotUse& other);
  static const ManyFields_NestedMapBoolEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ManyFields_NestedMapBoolEntry_DoNotUse*>(&_ManyFields_NestedMapBoolEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto;
};

// -------------------------------------------------------------------

class ManyFields final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter_testdata.ManyFields) */ {
 public:
  inline ManyFields() : ManyFields(nullptr) {}
  ~ManyFields() override;
  explicit PROTOBUF_CONSTEXPR ManyFields(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManyFields(const ManyFields& from);
  ManyFields(ManyFields&& from) noexcept
    : ManyFields() {
    *this = ::std::move(from);
  }

  inline ManyFields& operator=(const ManyFields& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManyFields& operator=(ManyFields&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManyFields& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManyFields* internal_default_instance() {
    return reinterpret_cast<const ManyFields*>(
               &_ManyFields_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ManyFields& a, ManyFields& b) {
    a.Swap(&b);
  }
  inline void Swap(ManyFields* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManyFields* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ManyFields* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ManyFields>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManyFields& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ManyFields& from) {
    ManyFields::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManyFields* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter_testdata.ManyFields";
  }
  protected:
  explicit ManyFields(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRepeatedFieldFieldNumber = 2,
    kRepeatedStringFieldFieldNumber = 4,
    kMapFieldUint32FieldNumber = 5,
    kMapFieldInt64FieldNumber = 6,
    kNestedMapBoolFieldNumber = 7,
    kStringFieldFieldNumber = 3,
    kFieldOneFieldNumber = 1,
  };
  // repeated .tensorflow.proto_splitter_testdata.ManyFields repeated_field = 2;
  int repeated_field_size() const;
  private:
  int _internal_repeated_field_size() const;
  public:
  void clear_repeated_field();
  ::tensorflow::proto_splitter_testdata::ManyFields* mutable_repeated_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::ManyFields >*
      mutable_repeated_field();
  private:
  const ::tensorflow::proto_splitter_testdata::ManyFields& _internal_repeated_field(int index) const;
  ::tensorflow::proto_splitter_testdata::ManyFields* _internal_add_repeated_field();
  public:
  const ::tensorflow::proto_splitter_testdata::ManyFields& repeated_field(int index) const;
  ::tensorflow::proto_splitter_testdata::ManyFields* add_repeated_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::ManyFields >&
      repeated_field() const;

  // repeated string repeated_string_field = 4;
  int repeated_string_field_size() const;
  private:
  int _internal_repeated_string_field_size() const;
  public:
  void clear_repeated_string_field();
  const std::string& repeated_string_field(int index) const;
  std::string* mutable_repeated_string_field(int index);
  void set_repeated_string_field(int index, const std::string& value);
  void set_repeated_string_field(int index, std::string&& value);
  void set_repeated_string_field(int index, const char* value);
  void set_repeated_string_field(int index, const char* value, size_t size);
  std::string* add_repeated_string_field();
  void add_repeated_string_field(const std::string& value);
  void add_repeated_string_field(std::string&& value);
  void add_repeated_string_field(const char* value);
  void add_repeated_string_field(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& repeated_string_field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_repeated_string_field();
  private:
  const std::string& _internal_repeated_string_field(int index) const;
  std::string* _internal_add_repeated_string_field();
  public:

  // map<uint32, string> map_field_uint32 = 5;
  int map_field_uint32_size() const;
  private:
  int _internal_map_field_uint32_size() const;
  public:
  void clear_map_field_uint32();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
      _internal_map_field_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
      _internal_mutable_map_field_uint32();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
      map_field_uint32() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
      mutable_map_field_uint32();

  // map<int64, string> map_field_int64 = 6;
  int map_field_int64_size() const;
  private:
  int _internal_map_field_int64_size() const;
  public:
  void clear_map_field_int64();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
      _internal_map_field_int64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
      _internal_mutable_map_field_int64();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
      map_field_int64() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
      mutable_map_field_int64();

  // map<bool, .tensorflow.proto_splitter_testdata.ManyFields> nested_map_bool = 7;
  int nested_map_bool_size() const;
  private:
  int _internal_nested_map_bool_size() const;
  public:
  void clear_nested_map_bool();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< bool, ::tensorflow::proto_splitter_testdata::ManyFields >&
      _internal_nested_map_bool() const;
  ::PROTOBUF_NAMESPACE_ID::Map< bool, ::tensorflow::proto_splitter_testdata::ManyFields >*
      _internal_mutable_nested_map_bool();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< bool, ::tensorflow::proto_splitter_testdata::ManyFields >&
      nested_map_bool() const;
  ::PROTOBUF_NAMESPACE_ID::Map< bool, ::tensorflow::proto_splitter_testdata::ManyFields >*
      mutable_nested_map_bool();

  // string string_field = 3;
  void clear_string_field();
  const std::string& string_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_field();
  PROTOBUF_NODISCARD std::string* release_string_field();
  void set_allocated_string_field(std::string* string_field);
  private:
  const std::string& _internal_string_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_field(const std::string& value);
  std::string* _internal_mutable_string_field();
  public:

  // .tensorflow.proto_splitter_testdata.ManyFields field_one = 1;
  bool has_field_one() const;
  private:
  bool _internal_has_field_one() const;
  public:
  void clear_field_one();
  const ::tensorflow::proto_splitter_testdata::ManyFields& field_one() const;
  PROTOBUF_NODISCARD ::tensorflow::proto_splitter_testdata::ManyFields* release_field_one();
  ::tensorflow::proto_splitter_testdata::ManyFields* mutable_field_one();
  void set_allocated_field_one(::tensorflow::proto_splitter_testdata::ManyFields* field_one);
  private:
  const ::tensorflow::proto_splitter_testdata::ManyFields& _internal_field_one() const;
  ::tensorflow::proto_splitter_testdata::ManyFields* _internal_mutable_field_one();
  public:
  void unsafe_arena_set_allocated_field_one(
      ::tensorflow::proto_splitter_testdata::ManyFields* field_one);
  ::tensorflow::proto_splitter_testdata::ManyFields* unsafe_arena_release_field_one();

  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter_testdata.ManyFields)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::ManyFields > repeated_field_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> repeated_string_field_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ManyFields_MapFieldUint32Entry_DoNotUse,
        uint32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> map_field_uint32_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ManyFields_MapFieldInt64Entry_DoNotUse,
        int64_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> map_field_int64_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ManyFields_NestedMapBoolEntry_DoNotUse,
        bool, ::tensorflow::proto_splitter_testdata::ManyFields,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> nested_map_bool_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_field_;
    ::tensorflow::proto_splitter_testdata::ManyFields* field_one_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class StringNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.proto_splitter_testdata.StringNode) */ {
 public:
  inline StringNode() : StringNode(nullptr) {}
  ~StringNode() override;
  explicit PROTOBUF_CONSTEXPR StringNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringNode(const StringNode& from);
  StringNode(StringNode&& from) noexcept
    : StringNode() {
    *this = ::std::move(from);
  }

  inline StringNode& operator=(const StringNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringNode& operator=(StringNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringNode* internal_default_instance() {
    return reinterpret_cast<const StringNode*>(
               &_StringNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StringNode& a, StringNode& b) {
    a.Swap(&b);
  }
  inline void Swap(StringNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringNode& from) {
    StringNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.proto_splitter_testdata.StringNode";
  }
  protected:
  explicit StringNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildNodesFieldNumber = 2,
    kValFieldNumber = 1,
  };
  // repeated .tensorflow.proto_splitter_testdata.StringNode child_nodes = 2;
  int child_nodes_size() const;
  private:
  int _internal_child_nodes_size() const;
  public:
  void clear_child_nodes();
  ::tensorflow::proto_splitter_testdata::StringNode* mutable_child_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::StringNode >*
      mutable_child_nodes();
  private:
  const ::tensorflow::proto_splitter_testdata::StringNode& _internal_child_nodes(int index) const;
  ::tensorflow::proto_splitter_testdata::StringNode* _internal_add_child_nodes();
  public:
  const ::tensorflow::proto_splitter_testdata::StringNode& child_nodes(int index) const;
  ::tensorflow::proto_splitter_testdata::StringNode* add_child_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::StringNode >&
      child_nodes() const;

  // string val = 1;
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.proto_splitter_testdata.StringNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::StringNode > child_nodes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RepeatedString

// repeated string strings = 1;
inline int RepeatedString::_internal_strings_size() const {
  return _impl_.strings_.size();
}
inline int RepeatedString::strings_size() const {
  return _internal_strings_size();
}
inline void RepeatedString::clear_strings() {
  _impl_.strings_.Clear();
}
inline std::string* RepeatedString::add_strings() {
  std::string* _s = _internal_add_strings();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.proto_splitter_testdata.RepeatedString.strings)
  return _s;
}
inline const std::string& RepeatedString::_internal_strings(int index) const {
  return _impl_.strings_.Get(index);
}
inline const std::string& RepeatedString::strings(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter_testdata.RepeatedString.strings)
  return _internal_strings(index);
}
inline std::string* RepeatedString::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter_testdata.RepeatedString.strings)
  return _impl_.strings_.Mutable(index);
}
inline void RepeatedString::set_strings(int index, const std::string& value) {
  _impl_.strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter_testdata.RepeatedString.strings)
}
inline void RepeatedString::set_strings(int index, std::string&& value) {
  _impl_.strings_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter_testdata.RepeatedString.strings)
}
inline void RepeatedString::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.proto_splitter_testdata.RepeatedString.strings)
}
inline void RepeatedString::set_strings(int index, const char* value, size_t size) {
  _impl_.strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.proto_splitter_testdata.RepeatedString.strings)
}
inline std::string* RepeatedString::_internal_add_strings() {
  return _impl_.strings_.Add();
}
inline void RepeatedString::add_strings(const std::string& value) {
  _impl_.strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter_testdata.RepeatedString.strings)
}
inline void RepeatedString::add_strings(std::string&& value) {
  _impl_.strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter_testdata.RepeatedString.strings)
}
inline void RepeatedString::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.proto_splitter_testdata.RepeatedString.strings)
}
inline void RepeatedString::add_strings(const char* value, size_t size) {
  _impl_.strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.proto_splitter_testdata.RepeatedString.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RepeatedString::strings() const {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter_testdata.RepeatedString.strings)
  return _impl_.strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RepeatedString::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter_testdata.RepeatedString.strings)
  return &_impl_.strings_;
}

// -------------------------------------------------------------------

// RepeatedRepeatedString

// int32 filler_field = 1;
inline void RepeatedRepeatedString::clear_filler_field() {
  _impl_.filler_field_ = 0;
}
inline int32_t RepeatedRepeatedString::_internal_filler_field() const {
  return _impl_.filler_field_;
}
inline int32_t RepeatedRepeatedString::filler_field() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter_testdata.RepeatedRepeatedString.filler_field)
  return _internal_filler_field();
}
inline void RepeatedRepeatedString::_internal_set_filler_field(int32_t value) {
  
  _impl_.filler_field_ = value;
}
inline void RepeatedRepeatedString::set_filler_field(int32_t value) {
  _internal_set_filler_field(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter_testdata.RepeatedRepeatedString.filler_field)
}

// repeated .tensorflow.proto_splitter_testdata.RepeatedString rs = 2;
inline int RepeatedRepeatedString::_internal_rs_size() const {
  return _impl_.rs_.size();
}
inline int RepeatedRepeatedString::rs_size() const {
  return _internal_rs_size();
}
inline void RepeatedRepeatedString::clear_rs() {
  _impl_.rs_.Clear();
}
inline ::tensorflow::proto_splitter_testdata::RepeatedString* RepeatedRepeatedString::mutable_rs(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter_testdata.RepeatedRepeatedString.rs)
  return _impl_.rs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::RepeatedString >*
RepeatedRepeatedString::mutable_rs() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter_testdata.RepeatedRepeatedString.rs)
  return &_impl_.rs_;
}
inline const ::tensorflow::proto_splitter_testdata::RepeatedString& RepeatedRepeatedString::_internal_rs(int index) const {
  return _impl_.rs_.Get(index);
}
inline const ::tensorflow::proto_splitter_testdata::RepeatedString& RepeatedRepeatedString::rs(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter_testdata.RepeatedRepeatedString.rs)
  return _internal_rs(index);
}
inline ::tensorflow::proto_splitter_testdata::RepeatedString* RepeatedRepeatedString::_internal_add_rs() {
  return _impl_.rs_.Add();
}
inline ::tensorflow::proto_splitter_testdata::RepeatedString* RepeatedRepeatedString::add_rs() {
  ::tensorflow::proto_splitter_testdata::RepeatedString* _add = _internal_add_rs();
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter_testdata.RepeatedRepeatedString.rs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::RepeatedString >&
RepeatedRepeatedString::rs() const {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter_testdata.RepeatedRepeatedString.rs)
  return _impl_.rs_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ManyFields

// .tensorflow.proto_splitter_testdata.ManyFields field_one = 1;
inline bool ManyFields::_internal_has_field_one() const {
  return this != internal_default_instance() && _impl_.field_one_ != nullptr;
}
inline bool ManyFields::has_field_one() const {
  return _internal_has_field_one();
}
inline void ManyFields::clear_field_one() {
  if (GetArenaForAllocation() == nullptr && _impl_.field_one_ != nullptr) {
    delete _impl_.field_one_;
  }
  _impl_.field_one_ = nullptr;
}
inline const ::tensorflow::proto_splitter_testdata::ManyFields& ManyFields::_internal_field_one() const {
  const ::tensorflow::proto_splitter_testdata::ManyFields* p = _impl_.field_one_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::proto_splitter_testdata::ManyFields&>(
      ::tensorflow::proto_splitter_testdata::_ManyFields_default_instance_);
}
inline const ::tensorflow::proto_splitter_testdata::ManyFields& ManyFields::field_one() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter_testdata.ManyFields.field_one)
  return _internal_field_one();
}
inline void ManyFields::unsafe_arena_set_allocated_field_one(
    ::tensorflow::proto_splitter_testdata::ManyFields* field_one) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.field_one_);
  }
  _impl_.field_one_ = field_one;
  if (field_one) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.proto_splitter_testdata.ManyFields.field_one)
}
inline ::tensorflow::proto_splitter_testdata::ManyFields* ManyFields::release_field_one() {
  
  ::tensorflow::proto_splitter_testdata::ManyFields* temp = _impl_.field_one_;
  _impl_.field_one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::proto_splitter_testdata::ManyFields* ManyFields::unsafe_arena_release_field_one() {
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter_testdata.ManyFields.field_one)
  
  ::tensorflow::proto_splitter_testdata::ManyFields* temp = _impl_.field_one_;
  _impl_.field_one_ = nullptr;
  return temp;
}
inline ::tensorflow::proto_splitter_testdata::ManyFields* ManyFields::_internal_mutable_field_one() {
  
  if (_impl_.field_one_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::proto_splitter_testdata::ManyFields>(GetArenaForAllocation());
    _impl_.field_one_ = p;
  }
  return _impl_.field_one_;
}
inline ::tensorflow::proto_splitter_testdata::ManyFields* ManyFields::mutable_field_one() {
  ::tensorflow::proto_splitter_testdata::ManyFields* _msg = _internal_mutable_field_one();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter_testdata.ManyFields.field_one)
  return _msg;
}
inline void ManyFields::set_allocated_field_one(::tensorflow::proto_splitter_testdata::ManyFields* field_one) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.field_one_;
  }
  if (field_one) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(field_one);
    if (message_arena != submessage_arena) {
      field_one = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field_one, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.field_one_ = field_one;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter_testdata.ManyFields.field_one)
}

// repeated .tensorflow.proto_splitter_testdata.ManyFields repeated_field = 2;
inline int ManyFields::_internal_repeated_field_size() const {
  return _impl_.repeated_field_.size();
}
inline int ManyFields::repeated_field_size() const {
  return _internal_repeated_field_size();
}
inline void ManyFields::clear_repeated_field() {
  _impl_.repeated_field_.Clear();
}
inline ::tensorflow::proto_splitter_testdata::ManyFields* ManyFields::mutable_repeated_field(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter_testdata.ManyFields.repeated_field)
  return _impl_.repeated_field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::ManyFields >*
ManyFields::mutable_repeated_field() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter_testdata.ManyFields.repeated_field)
  return &_impl_.repeated_field_;
}
inline const ::tensorflow::proto_splitter_testdata::ManyFields& ManyFields::_internal_repeated_field(int index) const {
  return _impl_.repeated_field_.Get(index);
}
inline const ::tensorflow::proto_splitter_testdata::ManyFields& ManyFields::repeated_field(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter_testdata.ManyFields.repeated_field)
  return _internal_repeated_field(index);
}
inline ::tensorflow::proto_splitter_testdata::ManyFields* ManyFields::_internal_add_repeated_field() {
  return _impl_.repeated_field_.Add();
}
inline ::tensorflow::proto_splitter_testdata::ManyFields* ManyFields::add_repeated_field() {
  ::tensorflow::proto_splitter_testdata::ManyFields* _add = _internal_add_repeated_field();
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter_testdata.ManyFields.repeated_field)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::ManyFields >&
ManyFields::repeated_field() const {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter_testdata.ManyFields.repeated_field)
  return _impl_.repeated_field_;
}

// string string_field = 3;
inline void ManyFields::clear_string_field() {
  _impl_.string_field_.ClearToEmpty();
}
inline const std::string& ManyFields::string_field() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter_testdata.ManyFields.string_field)
  return _internal_string_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ManyFields::set_string_field(ArgT0&& arg0, ArgT... args) {
 
 _impl_.string_field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter_testdata.ManyFields.string_field)
}
inline std::string* ManyFields::mutable_string_field() {
  std::string* _s = _internal_mutable_string_field();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter_testdata.ManyFields.string_field)
  return _s;
}
inline const std::string& ManyFields::_internal_string_field() const {
  return _impl_.string_field_.Get();
}
inline void ManyFields::_internal_set_string_field(const std::string& value) {
  
  _impl_.string_field_.Set(value, GetArenaForAllocation());
}
inline std::string* ManyFields::_internal_mutable_string_field() {
  
  return _impl_.string_field_.Mutable(GetArenaForAllocation());
}
inline std::string* ManyFields::release_string_field() {
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter_testdata.ManyFields.string_field)
  return _impl_.string_field_.Release();
}
inline void ManyFields::set_allocated_string_field(std::string* string_field) {
  if (string_field != nullptr) {
    
  } else {
    
  }
  _impl_.string_field_.SetAllocated(string_field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.string_field_.IsDefault()) {
    _impl_.string_field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter_testdata.ManyFields.string_field)
}

// repeated string repeated_string_field = 4;
inline int ManyFields::_internal_repeated_string_field_size() const {
  return _impl_.repeated_string_field_.size();
}
inline int ManyFields::repeated_string_field_size() const {
  return _internal_repeated_string_field_size();
}
inline void ManyFields::clear_repeated_string_field() {
  _impl_.repeated_string_field_.Clear();
}
inline std::string* ManyFields::add_repeated_string_field() {
  std::string* _s = _internal_add_repeated_string_field();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
  return _s;
}
inline const std::string& ManyFields::_internal_repeated_string_field(int index) const {
  return _impl_.repeated_string_field_.Get(index);
}
inline const std::string& ManyFields::repeated_string_field(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
  return _internal_repeated_string_field(index);
}
inline std::string* ManyFields::mutable_repeated_string_field(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
  return _impl_.repeated_string_field_.Mutable(index);
}
inline void ManyFields::set_repeated_string_field(int index, const std::string& value) {
  _impl_.repeated_string_field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
}
inline void ManyFields::set_repeated_string_field(int index, std::string&& value) {
  _impl_.repeated_string_field_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
}
inline void ManyFields::set_repeated_string_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_string_field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
}
inline void ManyFields::set_repeated_string_field(int index, const char* value, size_t size) {
  _impl_.repeated_string_field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
}
inline std::string* ManyFields::_internal_add_repeated_string_field() {
  return _impl_.repeated_string_field_.Add();
}
inline void ManyFields::add_repeated_string_field(const std::string& value) {
  _impl_.repeated_string_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
}
inline void ManyFields::add_repeated_string_field(std::string&& value) {
  _impl_.repeated_string_field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
}
inline void ManyFields::add_repeated_string_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.repeated_string_field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
}
inline void ManyFields::add_repeated_string_field(const char* value, size_t size) {
  _impl_.repeated_string_field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ManyFields::repeated_string_field() const {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
  return _impl_.repeated_string_field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ManyFields::mutable_repeated_string_field() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter_testdata.ManyFields.repeated_string_field)
  return &_impl_.repeated_string_field_;
}

// map<uint32, string> map_field_uint32 = 5;
inline int ManyFields::_internal_map_field_uint32_size() const {
  return _impl_.map_field_uint32_.size();
}
inline int ManyFields::map_field_uint32_size() const {
  return _internal_map_field_uint32_size();
}
inline void ManyFields::clear_map_field_uint32() {
  _impl_.map_field_uint32_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
ManyFields::_internal_map_field_uint32() const {
  return _impl_.map_field_uint32_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
ManyFields::map_field_uint32() const {
  // @@protoc_insertion_point(field_map:tensorflow.proto_splitter_testdata.ManyFields.map_field_uint32)
  return _internal_map_field_uint32();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
ManyFields::_internal_mutable_map_field_uint32() {
  return _impl_.map_field_uint32_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
ManyFields::mutable_map_field_uint32() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.proto_splitter_testdata.ManyFields.map_field_uint32)
  return _internal_mutable_map_field_uint32();
}

// map<int64, string> map_field_int64 = 6;
inline int ManyFields::_internal_map_field_int64_size() const {
  return _impl_.map_field_int64_.size();
}
inline int ManyFields::map_field_int64_size() const {
  return _internal_map_field_int64_size();
}
inline void ManyFields::clear_map_field_int64() {
  _impl_.map_field_int64_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
ManyFields::_internal_map_field_int64() const {
  return _impl_.map_field_int64_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >&
ManyFields::map_field_int64() const {
  // @@protoc_insertion_point(field_map:tensorflow.proto_splitter_testdata.ManyFields.map_field_int64)
  return _internal_map_field_int64();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
ManyFields::_internal_mutable_map_field_int64() {
  return _impl_.map_field_int64_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, std::string >*
ManyFields::mutable_map_field_int64() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.proto_splitter_testdata.ManyFields.map_field_int64)
  return _internal_mutable_map_field_int64();
}

// map<bool, .tensorflow.proto_splitter_testdata.ManyFields> nested_map_bool = 7;
inline int ManyFields::_internal_nested_map_bool_size() const {
  return _impl_.nested_map_bool_.size();
}
inline int ManyFields::nested_map_bool_size() const {
  return _internal_nested_map_bool_size();
}
inline void ManyFields::clear_nested_map_bool() {
  _impl_.nested_map_bool_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< bool, ::tensorflow::proto_splitter_testdata::ManyFields >&
ManyFields::_internal_nested_map_bool() const {
  return _impl_.nested_map_bool_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< bool, ::tensorflow::proto_splitter_testdata::ManyFields >&
ManyFields::nested_map_bool() const {
  // @@protoc_insertion_point(field_map:tensorflow.proto_splitter_testdata.ManyFields.nested_map_bool)
  return _internal_nested_map_bool();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< bool, ::tensorflow::proto_splitter_testdata::ManyFields >*
ManyFields::_internal_mutable_nested_map_bool() {
  return _impl_.nested_map_bool_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< bool, ::tensorflow::proto_splitter_testdata::ManyFields >*
ManyFields::mutable_nested_map_bool() {
  // @@protoc_insertion_point(field_mutable_map:tensorflow.proto_splitter_testdata.ManyFields.nested_map_bool)
  return _internal_mutable_nested_map_bool();
}

// -------------------------------------------------------------------

// StringNode

// string val = 1;
inline void StringNode::clear_val() {
  _impl_.val_.ClearToEmpty();
}
inline const std::string& StringNode::val() const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter_testdata.StringNode.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringNode::set_val(ArgT0&& arg0, ArgT... args) {
 
 _impl_.val_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.proto_splitter_testdata.StringNode.val)
}
inline std::string* StringNode::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter_testdata.StringNode.val)
  return _s;
}
inline const std::string& StringNode::_internal_val() const {
  return _impl_.val_.Get();
}
inline void StringNode::_internal_set_val(const std::string& value) {
  
  _impl_.val_.Set(value, GetArenaForAllocation());
}
inline std::string* StringNode::_internal_mutable_val() {
  
  return _impl_.val_.Mutable(GetArenaForAllocation());
}
inline std::string* StringNode::release_val() {
  // @@protoc_insertion_point(field_release:tensorflow.proto_splitter_testdata.StringNode.val)
  return _impl_.val_.Release();
}
inline void StringNode::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  _impl_.val_.SetAllocated(val, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.val_.IsDefault()) {
    _impl_.val_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.proto_splitter_testdata.StringNode.val)
}

// repeated .tensorflow.proto_splitter_testdata.StringNode child_nodes = 2;
inline int StringNode::_internal_child_nodes_size() const {
  return _impl_.child_nodes_.size();
}
inline int StringNode::child_nodes_size() const {
  return _internal_child_nodes_size();
}
inline void StringNode::clear_child_nodes() {
  _impl_.child_nodes_.Clear();
}
inline ::tensorflow::proto_splitter_testdata::StringNode* StringNode::mutable_child_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.proto_splitter_testdata.StringNode.child_nodes)
  return _impl_.child_nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::StringNode >*
StringNode::mutable_child_nodes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.proto_splitter_testdata.StringNode.child_nodes)
  return &_impl_.child_nodes_;
}
inline const ::tensorflow::proto_splitter_testdata::StringNode& StringNode::_internal_child_nodes(int index) const {
  return _impl_.child_nodes_.Get(index);
}
inline const ::tensorflow::proto_splitter_testdata::StringNode& StringNode::child_nodes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.proto_splitter_testdata.StringNode.child_nodes)
  return _internal_child_nodes(index);
}
inline ::tensorflow::proto_splitter_testdata::StringNode* StringNode::_internal_add_child_nodes() {
  return _impl_.child_nodes_.Add();
}
inline ::tensorflow::proto_splitter_testdata::StringNode* StringNode::add_child_nodes() {
  ::tensorflow::proto_splitter_testdata::StringNode* _add = _internal_add_child_nodes();
  // @@protoc_insertion_point(field_add:tensorflow.proto_splitter_testdata.StringNode.child_nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::proto_splitter_testdata::StringNode >&
StringNode::child_nodes() const {
  // @@protoc_insertion_point(field_list:tensorflow.proto_splitter_testdata.StringNode.child_nodes)
  return _impl_.child_nodes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_splitter_testdata
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2ftools_2fproto_5fsplitter_2ftestdata_2ftest_5fmessage_2eproto
