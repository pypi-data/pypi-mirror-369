[project]
name = "montesmakes.graphiti-memory"
version = "0.4.3"
description = "Graphiti MCP Server - Memory service for AI agents built on temporal knowledge graphs"
readme = "README.md"
requires-python = ">=3.10,<4"
authors = [
    {name = "Made byMontes", email = "chris@montesmakes.co"}
]
license = {text = "Apache-2.0"}
keywords = ["mcp", "memory", "knowledge-graph", "ai", "agents", "graphiti"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "mcp>=1.12.4",
    "openai>=1.99.9",
    "graphiti-core>=0.18.5",
    "azure-identity>=1.24.0",
    "starlette>=0.47.2",
    "uvicorn>=0.35.0",
    "fastapi>=0.116.1",
    "httpx>=0.28.1",
    "aiohttp>=3.12.15",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.1.1",
]

[project.scripts]
montesmakes-graphiti-memory = "src.graphiti_mcp_server:main"
"montesmakes.graphiti-memory" = "src.graphiti_mcp_server:main"

[project.urls]
Homepage = "https://github.com/mandelbro/graphiti-memory"
Documentation = "https://github.com/mandelbro/graphiti-memory/blob/main/README.md"
Repository = "https://github.com/mandelbro/graphiti-memory.git"
Issues = "https://github.com/mandelbro/graphiti-memory/issues"

[project.optional-dependencies]
dev = [
    "ruff>=0.12.8",
    "pyright>=1.1.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-mock>=3.14.0",
    "pytest-cov>=6.2.1",
    "black>=25.1.0",
    "mypy>=1.17.1",
    "twine>=6.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py313"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pyright]
include = ["."]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".venv",
    ".git",
]
pythonVersion = "3.13"
pythonPlatform = "Darwin"
typeCheckingMode = "basic"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
]
asyncio_mode = "auto"

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
]
