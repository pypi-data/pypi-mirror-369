Metadata-Version: 2.4
Name: pyobfuscator-gmaq
Version: 1.0.0
Summary: Advanced Python Code Protection System with AES-256-GCM encryption and AST obfuscation
Author-email: PyObfuscator Team <pyobfuscator@github.com>
Maintainer-email: PyObfuscator Team <pyobfuscator@github.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/MohamedQM/PyObfuscator-GMAQ
Project-URL: Repository, https://github.com/MohamedQM/PyObfuscator-GMAQ
Project-URL: Documentation, https://github.com/MohamedQM/PyObfuscator-GMAQ#readme
Project-URL: Bug Reports, https://github.com/MohamedQM/PyObfuscator-GMAQ/issues
Project-URL: Source Code, https://github.com/MohamedQM/PyObfuscator-GMAQ
Keywords: python,security,obfuscation,encryption,protection,reverse-engineering,anti-debug,linux
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Security
Classifier: Topic :: Security :: Cryptography
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Pre-processors
Classifier: Topic :: System :: Software Distribution
Classifier: Topic :: Utilities
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: build>=0.10.0
Requires-Dist: cryptography>=3.4.8
Requires-Dist: psutil>=5.8.0
Requires-Dist: twine>=4.0.2
Provides-Extra: dev
Requires-Dist: build>=0.10.0; extra == "dev"
Requires-Dist: twine>=4.0.0; extra == "dev"
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Dynamic: license-file

# PyObfuscator - Advanced Python Code Protection System

[![Python Version](https://img.shields.io/badge/python-3.7+-blue.svg)](https://python.org)
[![Platform](https://img.shields.io/badge/platform-linux-green.svg)](https://linux.org)
[![License](https://img.shields.io/badge/license-MIT-orange.svg)](LICENSE)

A comprehensive Python code obfuscation and encryption system designed for Linux environments. Provides military-grade protection against reverse engineering, code analysis, and unauthorized access through multiple layers of security.

## üõ°Ô∏è Security Features

- **AES-256-GCM Encryption** - Military-grade encryption for maximum security
- **AST-Based Obfuscation** - Advanced Abstract Syntax Tree manipulation
- **Anti-Tampering Protection** - Runtime integrity checks and modification detection
- **Anti-Debugging** - Detects and prevents debugging attempts
- **Variable & Function Renaming** - Systematic identifier obfuscation
- **String Obfuscation** - Advanced string encoding and hiding
- **Dead Code Injection** - Confuses static analysis tools
- **Bytecode Protection** - Low-level bytecode manipulation

## üöÄ Quick Start

### Installation

```bash
# Clone the repository
git clone https://github.com/MohamedQM/PyObfuscator.git
cd PyObfuscator

# Install dependencies (simple method)
python3 install.py

# Or install manually
pip3 install cryptography psutil
```

### Basic Usage

```bash
# Obfuscate a Python file
python3 main.py your_script.py

# Maximum security protection
python3 main.py your_script.py --max-security

# Create importable library
python3 main.py your_script.py --library
```

### Programmatic Usage

```python
from pyobfuscator import obfuscate_code, obfuscate_file

# Obfuscate code directly
code = """
def hello():
    print("Hello World!")
hello()
"""
protected_code = obfuscate_code(code, max_security=True)

# Obfuscate a file
success = obfuscate_file("input.py", "output.py")
```

## üìÅ Project Structure

```
PyObfuscator/
‚îú‚îÄ‚îÄ pyobfuscator/           # Core library
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py        # Main API interface
‚îÇ   ‚îú‚îÄ‚îÄ core.py           # Core obfuscation engine
‚îÇ   ‚îú‚îÄ‚îÄ obfuscator.py     # AST manipulation
‚îÇ   ‚îú‚îÄ‚îÄ encryption.py     # AES-256-GCM encryption
‚îÇ   ‚îú‚îÄ‚îÄ anti_tamper.py    # Anti-tampering protection
‚îÇ   ‚îî‚îÄ‚îÄ utils.py          # Utility functions
‚îú‚îÄ‚îÄ examples/              # Usage examples
‚îÇ   ‚îú‚îÄ‚îÄ sample_code.py    # Sample code for testing
‚îÇ   ‚îî‚îÄ‚îÄ usage_example.py  # Integration examples
‚îú‚îÄ‚îÄ main.py               # CLI interface
‚îú‚îÄ‚îÄ install.py            # Simple installer
‚îú‚îÄ‚îÄ test_basic.py         # Basic functionality tests
‚îî‚îÄ‚îÄ README.md             # This file
```

## üîí Protection Levels

### Basic Protection
- Variable and function renaming
- String encoding and obfuscation
- Basic dead code injection
- Simple control flow changes

### Advanced Protection
- AES-256-GCM encryption with PBKDF2
- Advanced AST transformations
- Metadata removal
- Enhanced anti-debugging

### Maximum Security
- All protection features enabled
- Real-time tampering detection
- Environment analysis
- Process monitoring
- Bytecode encryption

## üß™ Testing

```bash
# Run basic functionality tests
python3 test_basic.py

# Test with sample code
python3 main.py examples/sample_code.py
python3 examples/sample_code_obfuscated.py
```

## üíª System Requirements

- **OS**: Linux (Ubuntu 18.04+ recommended)
- **Python**: 3.7+ (tested on 3.8-3.11)
- **RAM**: 512MB minimum
- **Dependencies**: `cryptography`, `psutil`

## üìñ CLI Options

```bash
python3 main.py [INPUT_FILE] [OPTIONS]

Options:
  -o, --output FILE        Output file path
  --max-security          Enable maximum protection
  --custom-key KEY        Use custom encryption key
  --library              Create importable library
  --no-anti-debug        Disable anti-debugging
  --preserve-names       Keep original function names
```

## üîß Advanced Configuration

### Custom Encryption Key
```python
from pyobfuscator.encryption import AdvancedEncryption

encryptor = AdvancedEncryption()
key = encryptor.generate_key("your_custom_password")
obfuscated = obfuscate_code(source, encryption_key=key)
```

### Selective Protection
```python
from pyobfuscator.core import PyObfuscatorCore

obfuscator = PyObfuscatorCore()
obfuscator.config.rename_variables = True
obfuscator.config.encrypt_strings = True
obfuscator.config.add_fake_code = False
result = obfuscator.obfuscate(source_code)
```

## ‚ö†Ô∏è Important Notes

1. **Linux Only**: This tool is optimized for Linux environments
2. **Backup Your Code**: Always keep original source code backups
3. **Test Thoroughly**: Test obfuscated code before deployment
4. **GitHub Safe**: No sensitive data included - safe for public repositories

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests for new functionality
5. Submit a pull request

## üìÑ License

This project is licensed under the MIT License - see the LICENSE file for details.

## üîó Links

- **Repository**: https://github.com/MohamedQM/PyObfuscator
- **Issues**: https://github.com/MohamedQM/PyObfuscator/issues
- **Documentation**: See `README_SIMPLE.md` for Arabic documentation

---

**Developed with ‚ù§Ô∏è for the Python security community**

*Last Updated: August 2024*
