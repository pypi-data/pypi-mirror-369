[build-system]
requires = ["hatchling>=1.25"]
build-backend = "hatchling.build"

[project]
name = "baloon"
description = "Baloon: Modern geospatial vector format interconverter and CLI toolkit."
readme = "README.md"
license = { file = "LICENSE" }
authors = [{ name = "Eric Miguel Ribeiro" }]
requires-python = ">=3.10"
dynamic = ["version"]
keywords = [
  "gis",
  "geospatial",
  "converter",
  "bln",
  "shapefile",
  "geojson",
  "svg",
  "cli",
  "baloon",
  "interconversion",
]
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering :: GIS",
  "Intended Audience :: Science/Research",
  "Environment :: Console",
]
dependencies = [
  "geopandas>=0.14",
  "shapely>=2.0",
  "pandas>=2.2",
  "pyproj>=3.6",
  "fiona>=1.9",
  "typer>=0.12",
  "rich>=13.7",
  "fastkml>=1.1.0",
  "pygeoif>=1.5.1",
  "lxml>=5.0.0",
]

[project.optional-dependencies]
dev = [
  "ruff>=0.5.0",
  "pyright>=1.1.370",
  "pytest>=8.0",
  "pytest-cov>=5.0",
  "types-pytz",
  "types-python-dateutil",
  "types-shapely>=2.1.0.20250809",
  "types-geopandas>=1.1.1.20250809",
]

[project.scripts]
baloon = "baloon.cli:app"

[tool.hatch.version]
path = "src/baloon/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/baloon"]


[tool.pyright]
include = ["."]
exclude = ["**/node_modules", "**/__pycache__", "**/.*"]
ignore = ["**/pyomo/**"]
reportGeneralTypeIssues = "none"
reportOptionalMemberAccess = "none"
reportOptionalSubscript = "none"
reportOptionalCall = "none"
reportAttributeAccessIssue = "none"
reportUnknownMemberType = "none"
reportUnknownArgumentType = "none"
reportUnknownVariableType = "none"
reportMissingTypeStubs = "none"
typeCheckingMode = "basic"
useLibraryCodeForTypes = true
autoSearchPaths = true
pythonVersion = "3.12"

[tool.vulture]
ignore_names = ["model_config", "TypedDict"]
ignore_decorators = ["@field_validator", "@app*", "@route*"]

[tool.ruff]


# Enable fix behavior by-default when running ruff
# (overridden by the --fix and --no-fix command-line flags).
# Only includes automatic fixes unless --unsafe-fixes is provided.
fix = true
include = ["pyproject.toml", "src/**/*.py", "scripts/**/*.py", "*.py"]
extend-include = ["*.ipynb"]

respect-gitignore = true
show-fixes = true

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Allows removing unused imports at __init__ files
extend-safe-fixes = ["F401"]

# Enable Pyflakes (`F`) and pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
# Enable flake8-bugbear (`B`) rules, in addition to the defaults.
# Enable docs (`D`) and imperative doc mood (D401) rules.
# Enable import sorting (isort) (`I`) rules.
select = ["F", "E", "W", "C901", "B", "D", "D401", "E", "I001"]

# Avoid enforcing line-length violations (`E501`)
# Relax the convention by _not_ requiring documentation for every function parameter.
ignore = ["D417"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# 3. Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = [
  "fastapi.Depends",
  "fastapi.Query",
  "fastapi.Header",
  "fastapi.Path",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy" # Accepts: "google", "numpy", or "pep257".

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "single"

[tool.ruff.lint.flake8-import-conventions.aliases]
# Declare the default aliases.
altair = "alt"
"matplotlib.pyplot" = "plt"
numpy = "np"
pandas = "pd"
seaborn = "sns"
scipy = "sp"
polars = "pl"

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# Declare a custom alias for the `matplotlib` module.
"dask.dataframe" = "dd"

[tool.ruff.lint.isort]
# Forces all from imports to appear on their own line.
force-single-line = true
# Don't sort straight-style imports (like import sys) before from-style imports
# (like from itertools import groupby). Instead, sort the imports by module,
# independent of import style.
force-sort-within-sections = true

# Use a single line after each import block.
lines-after-imports = 2

# Use no lines between direct and from import.
lines-between-types = 0


[tool.coverage.run]
branch = true
source = ["src/baloon"]

[tool.coverage.report]
show_missing = true

[tool.uv]
dev-dependencies = ["pre-commit>=3.7"]


[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests"]
