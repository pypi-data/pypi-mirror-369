import logging
log = logging.getLogger(__name__)

from importlib import resources
from pathlib import Path

import numpy as np

from atom.api import set_default
from enaml.application import deferred_call
from enaml.core.api import Conditional, Looper
from enaml.icon import Icon, IconImage
from enaml.image import Image
from enaml.layout.api import align, hbox, InsertTab, RemoveItem, spacer, TabLayout, vbox
from enaml.stdlib.fields import FloatField, IntField
from enaml.stdlib.message_box import critical, information, question
from enaml.qt.QtCore import Qt
from enaml.widgets.api import (Action, ActionGroup, ButtonGroup, CheckBox,
                               ColorDialog, Container, DockArea, DockItem,
                               DualSlider, Feature, FileDialogEx, Form, HGroup,
                               Html, Label, MainWindow, Menu, MenuBar,
                               MPLCanvas, ObjectCombo, PopupView, ProgressBar,
                               PushButton, Slider, VGroup, Window)


class NDImageCanvas(MPLCanvas):

    toolbar_visible = set_default(False)

    def set_focus(self, event=None):
        self.figure.canvas.setFocus(Qt.OtherFocusReason)


def bind_focus(items, cb):
    observe = ('toggled', 'selected', 'value', 'clicked', 'low_value',
               'high_value')
    for item in items:
        for o in observe:
            if hasattr(item, o):
                item.observe(o, cb)
        if getattr(item, 'children', []):
            bind_focus(item.children, cb)


enamldef ChannelConfigPopup(PopupView):
    attr presenter
    attr display_apply = False

    anchor = (0.5, 0.0)
    parent_anchor = (0.5, 1.0)
    arrow_size = 20

    Container:
        layout_constraints => ():
            widgets = self.visible_widgets()
            cb = widgets[::3]
            pb = widgets[1::3]
            slider = widgets[2::3]
            constraints = [vbox(*[hbox(c, p, s) for c, p, s in zip(cb, pb, slider)])]
            constraints.append(align('left', *cb))
            constraints.append(align('left', *pb))
            constraints.append(align('left', *slider))
            return constraints

        Looper:
            iterable << presenter.current_artist.channel_config.items() \
                if presenter.current_artist is not None else {}
            CheckBox:
                text = loop_item[0]
                checked << loop_item[1].visible
                checked ::
                    presenter.set_channel_visible(loop_item[0], checked, display_apply)
            PushButton:
                constraints = [width == 20]
                background << loop_item[1].display_color
                clicked ::
                    color = ColorDialog.get_color(current_color=loop_item[1].display_color)
                    if color is not None:
                        loop_item[1].display_color = color
            DualSlider:
                minimum = 0
                maximum = 100
                low_value << int(loop_item[1].min_value * 100)
                high_value << int(loop_item[1].max_value * 100)
                low_value ::
                    presenter.set_channel_min_value(loop_item[0], low_value / 100, display_apply)
                high_value ::
                    presenter.set_channel_max_value(loop_item[0], high_value / 100, display_apply)


enamldef DisplayConfig(HGroup): dc:

    attr presenter
    alias display_mode: dm.selected

    padding = 0
    align_widths = False
    share_layout = True

    Conditional:
        condition << dc.presenter.current_artist is not None

        Label: display_label:
            text = 'Display'

        PushButton: channels:
            text = 'Channels'
            clicked ::
                popup = ChannelConfigPopup(self, presenter=presenter)
                popup.show()

        Label: display_as_label:
            text = 'as'

        ObjectCombo: dm:
            items = ['projection', 'slice']
            selected << presenter.current_artist.display_mode
            selected ::
                presenter.set_display_mode(selected)

        DualSlider: dz_slice:
            tick_interval = 1
            enabled << dm.selected == 'slice'
            low_value := dc.presenter.current_artist.z_slice_lb
            high_value := dc.presenter.current_artist.z_slice_ub
            minimum << dc.presenter.current_artist.z_slice_min
            maximum << dc.presenter.current_artist.z_slice_max
            tool_tip = 'Use up and down arrow keys when counting cells to scroll through z-steps'


enamldef NDImageContainer(Container): container:
    attr presenter
    attr focus_canvas = True
    alias canvas_resist_width: canvas.resist_width
    alias canvas_resist_height: canvas.resist_height
    alias canvas_hug_width: canvas.hug_width
    alias canvas_hug_height: canvas.hug_height

    initialized ::
        if focus_canvas:
            deferred_call(bind_focus, container.children, canvas.set_focus)
            deferred_call(canvas.set_focus)
    DisplayConfig:
        presenter << container.presenter
    NDImageCanvas: canvas:
        figure << container.presenter.figure


enamldef NDImageDockItem(DockItem):
    alias presenter: container.presenter
    closable = False
    NDImageContainer: container:
        pass
