import logging

from .jkabstractprotocol import jkAbstractProtocol
# from .protocol_helpers import crc8


log = logging.getLogger("jkpb")

# BMS Info
# CMD: 01 10 161C 0001 02 0000 D3CD


# Additional Info
# CMD: 01 10 161E 0001 02 0000 D22F
# RSP: 55AAEB900105E40C00005A0A0000960A0000420E0000AA0D000005000000AB0D00008C0A0000AC0D0000480D0000C4090000F04902001E0000003C000000F04902001E0000003C00000005000000D0070000580200002602000058020000260200009CFFFFFFCEFFFFFFE80300002003000008000000010000000100000001000000605B0300DC050000160D00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000500000060E3160050033C3218FEFFFFFF3FE9010200000000500110161E00016587

# Cell Readings
# CMD: 01 10 1620 0001 02 0000 D6F1


COMMANDS = {
    "getBalancerData": {
        "name": "getBalancerData",
        "command_code": "0110161C0001020000D3CD",
        "description": "Get Balancer Data",
        "help": " -- Get Balancer Data",
        "type": "QUERY",
        "checksum_required": "True",
        "response_type": "POSITIONAL",
        "response": [
            ["Hex2Str", 308, "Response", ""],
        ],
        "test_responses": [
            bytes.fromhex(

            ),
        ],
    },
    "getAdditionalInfo": {
        "name": "getAdditionalInfo",
        "command_code": "0110161E0001020000D22F",
        "description": "Get Additional Info",
        "help": " -- Get Additional Info",
        "type": "QUERY",
        "checksum_required": "True",
        "response_type": "POSITIONAL",
        "response": [
            ["Hex2Str", 308, "Response", ""],
        ],
        "test_responses": [
            bytes.fromhex(

            ),
        ],
    },
    "getCellData": {
        "name": "getCellData",
        "command_code": "011016200001020000D6F1",
        "description": "Get Cell Data",
        "help": " -- Get Cell Data",
        "type": "QUERY",
        "checksum_required": "True",
        "response_type": "POSITIONAL",
        "response": [
            ["Hex2Str", 308, "Response", ""],
        ],
        "test_responses": [
            bytes.fromhex(

            ),
        ],
    },
}


class jkpb(jkAbstractProtocol):
    def __str__(self):
        return "JKBMS PB model communication protocol handler"

    def __init__(self, *args, **kwargs) -> None:
        super().__init__()
        self._protocol_id = b"JKPB"
        self.COMMANDS = COMMANDS
        self.STATUS_COMMANDS = [
            "getBalancerData",
        ]
        self.SETTINGS_COMMANDS = [
            "",
        ]
        self.DEFAULT_COMMAND = "getBalancerData"
        self._command_defn = None

    def get_full_command(self, command) -> bytes:
        """
        Override the default get_full_command as its different for JK485
        """
        log.info("Using protocol %s with %i commands", self._protocol_id, len(self.COMMANDS))
        # These need to be set to allow other functions to work`
        self._command = command
        self._command_defn = self.get_command_defn(command)
        # End of required variables setting
        if self._command_defn is None:
            # Maybe return a default here?
            return None
        if "command_code" in self._command_defn:
            # full command is 7 bytes long
            cmd = bytearray.fromhex(self._command_defn["command_code"])
            # 011016 1C 0001020000D3CD
            # # address code
            # address_code = 0x01
            # function_code = 0x10
            # starting_register = b'\x16\x1c'
            # cmd[0] = address_code
            # cmd[1] = function_code
            # cmd[2:3] = starting_register
            # log.debug("cmd with header: %s", cmd)

            # # frame data   0001020000
            # cmd[4:8] = bytes.fromhex("0001020000")
            # log.debug("cmd with command code and frame data: %s", cmd)
            # # checksum      0xff
            # cmd[-1] = crc8(cmd)
            log.debug("cmd with crc: %s", cmd)
            return cmd
