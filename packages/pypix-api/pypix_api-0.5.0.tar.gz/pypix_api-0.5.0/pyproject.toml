[project]
name = "pypix-api"
version = "0.5.0"
description = "Biblioteca em Python para comunicação com APIs bancárias focada na integração com o PIX"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    { name = "Fábio Thomaz", email = "fabio@ladder.dev.br" }
]
license.file = "LICENSE"
keywords = ["pix", "api", "banco", "pagamento", "brasil"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
dependencies = [
    "requests>=2.25.1",
    "python-dotenv>=0.15.0",
    "requests-pkcs12>=1.25",
    "ruff>=0.12.0",
]

[project.urls]
Homepage = "https://github.com/laddertech/pypix-api"
Repository = "https://github.com/laddertech/pypix-api"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.6.1",
    "build>=1.2.2.post1",
    "twine>=6.1.0",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.ruff]
# Configurações base do Ruff
line-length = 88
exclude = [
    ".venv",
    "build",
    "dist",
    "__pycache__",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # Line too long (handled by black)
    "S101", # Use of print (handled by black)
]

# Configurações específicas
[tool.ruff.lint.isort]
known-first-party = ["pypix_api"]

[tool.ruff.format]
quote-style = "single"

