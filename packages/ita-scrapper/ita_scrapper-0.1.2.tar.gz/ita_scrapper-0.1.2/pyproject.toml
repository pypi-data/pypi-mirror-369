[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ita-scrapper"
version = "0.1.2"
description = "A Python library for scraping ITA Matrix travel website using Playwright"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
authors = [
    {name = "ITA Scrapper Contributors"},
]
keywords = ["ita", "matrix", "flight", "travel", "scraping", "playwright", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Typing :: Typed",
]
dependencies = [
    "playwright>=1.40.0",
    "pydantic>=2.0.0",
    "python-dateutil>=2.8.0",
    "typing-extensions>=4.0.0",
    "click>=8.0.0",
    "ruff>=0.12.3",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-playwright>=0.4.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
mcp = [
    "mcp>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/ita-scrapper"
Repository = "https://github.com/yourusername/ita-scrapper"
Issues = "https://github.com/yourusername/ita-scrapper/issues"
Documentation = "https://github.com/yourusername/ita-scrapper#readme"
Changelog = "https://github.com/yourusername/ita-scrapper/releases"

[project.scripts]
ita-scrapper = "ita_scrapper.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/ita_scrapper"]

[tool.black]
line-length = 88
target-version = ['py39']

[tool.ruff]
line-length = 88
target-version = "py39"
select = ["E", "F", "W", "I", "N", "UP", "S", "B", "A", "C4", "DTZ", "T20", "RET", "SIM", "ARG", "PTH", "PL", "RUF"]
ignore = ["S101"]  # Allow assert statements in tests

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow tests",
]

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
]
