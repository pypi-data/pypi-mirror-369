name: Backend CI

on:
  push:
    branches: [main, dev]
    paths:
      - "ccproxy/**"
      - "tests/**"
      - "pyproject.toml"
      - "uv.lock"
      - "Makefile"
      - ".github/workflows/backend.yml"
  pull_request:
    branches: [main, dev]
    paths:
      - "ccproxy/**"
      - "tests/**"
      - "pyproject.toml"
      - "uv.lock"
      - "Makefile"
      - ".github/workflows/backend.yml"
  workflow_dispatch:

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Quality Checks (ruff + mypy)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: make dev-install

      - name: Cache mypy
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            mypy-${{ runner.os }}-

      - name: Run quality checks
        run: make check

  tests:
    runs-on: ubuntu-latest
    name: Tests
    needs: quality-checks

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: make dev-install

      - name: Run unit tests
        run: make test-unit

      - name: Upload coverage reports
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  build-verification:
    runs-on: ubuntu-latest
    name: Build Verification
    needs: quality-checks

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: make dev-install

      - name: Test package build
        run: make build-backend

      - name: Verify CLI installation
        run: |
          uv run ccproxy --version
          uv run ccproxy --help
