[project]
name = "ccproxy-api"
# version = "0.1.0"
dynamic = ["version"]
description = "API server that provides an Anthropic and OpenAI compatible interface over Claude Code, allowing to use your Claude OAuth account or over the API."
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
  "aiofiles>=24.1.0",
  "aiosqlite>=0.21.0",
  "jsonschema>=0.33.2",
  "fastapi[standard]>=0.115.14",
  "httpx>=0.28.1",
  "httpx-sse>=0.4.1",
  "keyring>=25.6.0",
  "openai>=1.93.0",
  "prometheus-client>=0.22.1",
  "pydantic>=2.8.0",
  "pydantic-settings>=2.4.0",
  "rich>=13.0.0",
  "rich-toolkit>=0.14.8",
  "structlog>=25.4.0",
  "tomli>=2.0.0; python_version<'3.11'",
  "typer>=0.16.0",
  "duckdb>=1.1.0",
  "typing-extensions>=4.0.0",
  "uvicorn>=0.34.0",
  "sqlmodel>=0.0.24",
  "duckdb-engine>=0.17.0",
  "fastapi-mcp",
  "textual>=3.7.1",
  "claude-code-sdk>=0.0.19",
  "pyjwt>=2.10.1",
]

[build-system]
# Using hatchling to used git tag for version
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"
# requires = ["uv"]
# build-backend = "uv.build"

[tool.hatch.version]
source = "vcs"


[tool.hatch.build.hooks.vcs]
version-file = "ccproxy/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["ccproxy"]
include = [
    "ccproxy/data/*.json"
]

[project.scripts]
# ccproxy = "ccproxy.cli:app"
ccproxy = "ccproxy.cli:main"
ccproxy-api = "ccproxy.cli:main"
ccproxy-perm = "ccproxy.cli.commands.permission:main"

[dependency-groups]
dev = [
  "mypy>=1.16.1",
  "ruff>=0.12.2",
  "pytest>=7.0.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=4.0.0",
  "pytest-env>=0.8.0",
  "pytest-timeout>=2.1.0",
  "pytest-mock>=3.12.0",
  "pytest-xdist>=3.5.0",
  "pytest-html>=4.1.0",
  "pytest-benchmark>=4.0.0",
  "tox>=4.27.0",
  "pre-commit>=4.2.0",
  "anthropic>=0.57.1",
  "textual-dev>=1.7.0",
  "pytest-httpx>=0.35.0",
  "types-pyyaml>=6.0.12.20250516",
  "types-aiofiles>=24.0.0",
]
security = [
  "keyring>=25.0.0", # Optional keyring support for secure credential storage
]
docs = [
  "mkdocs>=1.5.3",
  "mkdocs-material>=9.5.0",
  "mkdocstrings[python]>=0.24.0",
  "mkdocs-gen-files>=0.5.0",
  "mkdocs-literate-nav>=0.6.0",
  "mkdocs-section-index>=0.3.0",
  "mkdocs-swagger-ui-tag>=0.6.0",
  "mkdocs-include-markdown-plugin>=6.0.0",
  "mkdocs-mermaid2-plugin>=1.1.0",
  "mkdocs-glightbox>=0.3.0",
  "mkdocs-minify-plugin>=0.7.0",
  "mkdocs-redirects>=1.2.0",
]
schema = ["pydantic>=2.8.0", "check-jsonschema>=0.33.2"]

[tool.coverage.run]
source = ["ccproxy", "tests"]
include = ["ccproxy/*", "tests/*"]
omit = [
  "ccproxy/_version.py",
  "ccproxy/__main__.py",
  "tests/conftest.py",
  "*/migrations/*",
  "*/__pycache__/*",
  "*/.*",
]
branch = true
parallel = true
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
sort = "Cover"
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "from typing import",
  "VERSION_TUPLE = Tuple",
  "class .*Protocol.*:",
  "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
title = "CCProxy Coverage Report"

[tool.coverage.xml]
output = "coverage.xml"

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # Pyflakes
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
  "PTH", # flake8-use-pathlib
]

ignore = [
  "E501",   # Line too long (handled by formatter)
  "B008",   # Do not perform function calls in argument defaults
  "N806",   # Variable in function should be lowercase (for pandas df, etc)
  "SIM108", # Use ternary operator (sometimes less readable)
  "F401",   # Imported but unused
  "F841",   # Local variable assigned but never used
]

exclude = [
  ".git",
  ".venv",
  "venv",
  "__pycache__",
  "build",
  "dist",
  "*.egg-info",
]


[tool.ruff.format]
quote-style = "double"
indent-style = "space"


[tool.ruff.lint.isort]
known-first-party = ["ccproxy"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
# relax on scripts and tests
"scripts/*" = ["T201"]       # check for print statements
"tests/*" = ["N802", "N803"] # arg/function name should be lowercase

[tool.mypy]
python_version = "3.11"
show_column_numbers = true
follow_imports = "normal"
exclude = ["^[^/]+\\.py$", "docs/", "site/", "tests.depracted/", "examples/"]

# Enable all strict mode flags
strict = true
# The following settings are enabled by --strict:
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_any_unimported = true
warn_unreachable = true

# if we need to disable certain strict checks
# disallow_incomplete_defs = false
# disallow_untyped_decorators = false


[[tool.mypy.overrides]]
module = "tests.*"
# ignore_errors = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_calls = false
warn_unused_ignores = false
# Ignore call-arg errors for Pydantic models with optional fields
disable_error_code = ["call-arg"]


[tool.pytest.ini_options]
minversion = "6.0"
timeout = 30
addopts = [
  "-ra",
  "--strict-markers",
  "--strict-config",
  "--disable-warnings",
  "--tb=short",
  "-v",
  "--cov=ccproxy",
  "--cov=tests",
  "--cov-report=term-missing",
  "--cov-report=html:htmlcov",
  "--cov-report=xml",
  "--cov-branch",
  # "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
norecursedirs = [
  ".git",
  ".tox",
  "dist",
  "build",
  "*.egg",
  "venv",
  ".venv",
  ".devenv",
  "node_modules",
  "__pycache__",
]
filterwarnings = [
  "ignore::UserWarning",
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]

# Set test mode to prevent pollution of real credential files
env = [
  "CCPROXY_TEST_MODE=true",
  "PYTEST_CURRENT_TEST=true",
  "LOG_LEVEL=WARNING",
]

# Test markers for different test categories and tiers
markers = [
  # Primary test categories
  "unit: Fast unit tests (< 1s each) that don't require external dependencies",
  "integration: Integration tests (< 30s each) that test component interactions",
  "slow: Slow tests (> 30s each) - use sparingly",

  # External dependency markers
  "real_api: Tests that make real API calls to external services (requires API keys)",
  "docker: Tests that require Docker to be running",
  "network: Tests that require network access but don't make real API calls",

  # Feature-specific markers
  "auth: Authentication and authorization tests",
  "streaming: SSE/streaming response tests",
  "api: API endpoint tests",
  "config: Configuration and settings tests",
  "cli: Command-line interface tests",
  "metrics: Metrics and monitoring tests",
  "sdk: SDK endpoint tests using Anthropic SDK client (requires running server)",

  # Test quality markers
  "flaky: Tests that may be unreliable and need investigation",
  "skip_ci: Tests to skip in CI environment",
]

[tool.pytest_timeout]
timeout = 300
timeout_method = "thread"

[tool.bandit]
exclude_dirs = ["tests", "docs", "scripts", "examples"]
skips = [
  "B101",
  "B601",
  "B110",
  "B113",
] # Skip assert_used, shell_injection_possible, try_except_pass, request_without_timeout

[tool.tox]
legacy_tox_ini = """
  [tox]
  envlist = py311,py312,py313

  [testenv]
  deps =
      pytest
      pytest-asyncio
      pytest-cov
      pytest-timeout
      pytest-env
      pytest-httpx

  commands = pytest {posargs}
  """

[tool.setuptools.packages.find]
include = ["ccproxy*"]

[tool.uv]
package = true

[tool.uv.sources]
fastapi-mcp = { git = "https://github.com/tadata-org/fastapi_mcp", rev = "6fdbff6168b2c84b22966886741d1f24a584856c" }
