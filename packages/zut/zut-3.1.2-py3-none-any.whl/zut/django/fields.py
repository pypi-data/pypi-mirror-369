from __future__ import annotations

from datetime import date, datetime
from decimal import Decimal

from django.db import models


class TriggerCharField(models.CharField):
    """
    Mark a char field as automatically generated by a database trigger.

    - `db_returning = True` ensures that the model instance is updated after save() with the value computed by the database trigger.
    """
    db_returning = True
    editable = False

    def formfield(self, **kwargs):
        return None


def get_django_field_python_type(field: models.Field) -> type|None:
    if not isinstance(field, models.Field):
        raise TypeError(f"field: {type(field).__name__}")

    if isinstance(field, models.CharField):
        return str
    elif isinstance(field, models.TextField):
        return str
    elif isinstance(field, models.BooleanField):
        return bool
    elif isinstance(field, models.IntegerField):
        return int
    elif isinstance(field, models.FloatField):
        return float
    elif isinstance(field, models.DecimalField):
        return Decimal
    elif isinstance(field, models.DateTimeField):
        return datetime
    elif isinstance(field, models.DateField):
        return date
    elif isinstance(field, models.JSONField):
        return dict
    elif type(field).__name__ == 'ArrayField':
        return list
    else:
        return None # we don't want to make false assumptions (e.g. we would probably want 'str' in the context of a load table and 'int' for a foreign key field)
