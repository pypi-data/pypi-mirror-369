[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pyekw"
version = "0.1.0"
description = "Python library for Polish eKW (Land Registry)"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "Mateusz Hajder"},
]
keywords = ["ekw", "land-registry", "poland", "validation", "utilities"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

dependencies = []

[dependency-groups]
dev = [
    "ruff",
    "pytest",
    "pytest-cov",
    "pre-commit",
]

[project.urls]
Homepage = "https://github.com/mhajder/pyekw"
Repository = "https://github.com/mhajder/pyekw"
Documentation = "https://github.com/mhajder/pyekw#readme"
Issues = "https://github.com/mhajder/pyekw/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/pyekw"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8+.
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",  # Line too long, handled by formatter
    "S101",  # Use of assert (common in tests)
    "S104",  # Possible binding to all interfaces
    "S105",  # Possible hardcoded password
    "S106",  # Possible hardcoded password
    "S107",  # Possible hardcoded password
    "S108",  # Probable insecure usage of temp file/directory
    "T201",  # print found (we use print statements for CLI output)
    "B008",  # Do not perform function calls in argument defaults
    "N806",  # Variable name should be lowercase
    "SIM118", # Use dict.get() instead of conditional assignment
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S106", "S107"]  # Allow assert and hardcoded passwords in tests
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py files

[tool.ruff.lint.isort]
known-first-party = ["pyekw"]
force-single-line = true