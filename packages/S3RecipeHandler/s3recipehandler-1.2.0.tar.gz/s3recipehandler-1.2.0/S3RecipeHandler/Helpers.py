
import os
import struct
from typing import List
from random import randint

class Helpers:
    @staticmethod
    def file_name_to_bytes(file_name: str) -> bytes:
        file_bytes = []
        file_name_no_ext = os.path.splitext(file_name)[0].replace("0x", "")
        for i in range(8):
            byte_str = file_name_no_ext[i * 2:(i * 2) + 2]
            file_bytes.append(int(byte_str, 16))
        return bytes(file_bytes)

    @staticmethod
    def file_name_bytes_to_string(file_name_bytes: bytes) -> str:
        file_name = "0x"
        
        for i in range(len(file_name_bytes)):
            byte_str = format(file_name_bytes[i], 'X')
            if len(byte_str) == 1:
                byte_str = "0" + byte_str
            
            file_name += byte_str
        
        return file_name + ".psg"
    
    @staticmethod
    def random_high_res_arena() -> bytearray:
        high_res_textures = [
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xB5",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC1",
            b"\x2C\x7F\x38\x18\x00\x17\x25\x31",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\x9F",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC7",
            b"\x2C\x7F\x38\x18\x00\x17\x25\x33",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xAA",
            b"\x2C\x7F\x38\x18\x00\x17\x1B\x58",
            b"\x2C\x7F\x38\x18\x00\x17\x1B\x57",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC8",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA9",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA8",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA7",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF8",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF1",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF0",
            b"\x2C\x7F\x38\x18\x00\x17\x19\x03",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA4",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA3",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xB4",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\x9C",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xB0",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xAE",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA0",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xCB",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x9D",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x9B",
            b"\x2C\x7F\x38\x18\x00\x17\x1B\x59",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xBC",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xBF",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xBE",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF3",
            b"\x2C\x7F\x38\x18\x00\x17\x19\x04",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xBD",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xED",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xEC",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xF8",
            b"\x2C\x7F\x38\x18\x00\x17\x02\x8F",
            b"\x2C\x7F\x38\x18\x00\x17\x02\x92",
            b"\x2C\x7F\x38\x18\x00\x17\x02\x94",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xF6",
            b"\x2C\x7F\x38\x18\x00\x17\x02\x8D",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xAF",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\x9A",
            b"\x2C\x7F\x38\x18\x00\x17\x1B\x55",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC2",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xF7",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xFD",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xFA",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xF0",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xEE",
            b"\x2C\x7F\x38\x18\x00\x17\x25\x39",
            b"\x2C\x7F\x38\x18\x00\x17\x25\x36",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x97",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xF1",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xF4",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xF3",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xF2",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xF5",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xFC",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xAD",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\x9D",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xCC",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x9E",
            b"\x2C\x7F\x38\x18\x00\x17\x25\x30",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x94",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF6",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x98",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x95",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xFB",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xFC",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xFD",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xCA",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF4",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF5",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC4",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xB8",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xB7",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xB1",
            b"\x2C\x7F\x38\x18\x00\x17\x19\x00",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xEF",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xB2",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xB3",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xFA",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x92",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x9C",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x96",
            b"\x2C\x7F\x38\x18\x00\x17\x25\x37",
            b"\x2C\x7F\x38\x18\x00\x17\x25\x35",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xFE",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF9",
            b"\x2C\x7F\x38\x18\x00\x17\x25\x32",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA6",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA5",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF2",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x9A",
            b"\x2C\x7F\x38\x18\x00\x17\x1C\xA4",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xEE",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x93",
            b"\x2C\x7F\x38\x18\x00\x17\x23\x99",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC5",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA2",
            b"\x2C\x7F\x38\x18\x00\x17\x1C\xA5",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC6",
            b"\x2C\x7F\x38\x18\x00\x17\x1C\xA3",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xB9",
            b"\x2C\x7F\x38\x18\x00\x08\x00\x1D",
            b"\x2C\x7F\x38\x18\x00\x08\x00\x1E",
            b"\x2C\x7F\x38\x18\x00\x08\x00\x24",
            b"\x2C\x7F\x38\x18\x00\x08\x00\x23",
            b"\x2C\x7F\x38\x18\x00\x08\x00\x20",
            b"\x2C\x7F\x38\x18\x00\x08\x00\x1A",
            b"\x2C\x7F\x38\x18\x00\x17\x19\x02",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xF7",
            b"\x2C\x7F\x38\x18\x00\x17\x18\xFF",
            b"\x2C\x7F\x38\x18\x00\x17\x19\x01",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\x9B",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xFB",
            b"\x2C\x7F\x38\x18\x00\x08\x0C\xEF",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xA1",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC9",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xBB",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC3",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xC0",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xAC",
            b"\x2C\x7F\x38\x18\x00\x17\x1A\xBA",
            b"\x2C\x7F\x38\x18\x00\x02\x04\x33",
            b"\x2C\x7F\x38\x18\x00\x17\x02\x8E",
            b"\x2C\x7F\x38\x18\x00\x17\x02\x90",
            b"\x2C\x7F\x38\x18\x00\x17\x02\x93",
            b"\x2C\x7F\x38\x18\x00\x17\x02\x91",
            b"\x2C\x7F\x38\x18\x00\x17\x1B\xD8",
            b"\x2C\x7F\x38\x18\x00\x17\x1B\xC6",
            b"\x2C\x7F\x38\x18\x00\x17\x19\x4D",
            b"\x2C\x7F\x38\x18\x00\x17\x19\x56",
            b"\x2C\x7F\x38\x18\x00\x17\x16\x91",
            b"\x2C\x7F\x38\x18\x00\x17\x16\x88",
            b"\x2C\x7F\x38\x18\x00\x17\x16\x78",
            b"\x2C\x7F\x38\x18\x00\x17\x25\xB2",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x33",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x26",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x30",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x24",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x37",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x2B",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x2F",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x5D",
            b"\x2C\x7F\x38\x18\x00\x17\x25\xAC",
            b"\x2C\x7F\x38\x18\x00\x17\x25\xB7",
            b"\x2C\x7F\x38\x18\x00\x17\x25\xB1",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x28",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x27",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x2C",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x23",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x32",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x31",
            b"\x2C\x7F\x38\x18\x00\x17\x25\xA7",
            b"\x2C\x7F\x38\x18\x00\x17\x25\xAA",
            b"\x2C\x7F\x38\x18\x00\x17\x26\x35",
    ]

        index = randint(0, len(high_res_textures))

        return (high_res_textures[index])


    @staticmethod
    def SmallToBigEndian(val: int) -> int:
        bytes_le = struct.pack("<I", val)  # little-endian 4-byte int
        val_be = struct.unpack(">I", bytes_le)[0]  # interpret as big-endian
        return val_be

    @staticmethod
    def get_arena_id_from_file_bytes(file_bytes: bytes) -> bytes:
        ff_index = Helpers._pattern_scan(file_bytes, bytes([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]))[0]
        
        return file_bytes[ff_index - 0x10:ff_index - 0x10 + 8]

    @staticmethod
    def _pattern_scan(haystack: bytes, needle: bytes) -> List[int]:
        results = []
        
        for i in range(len(haystack) - len(needle) + 1):
            # Compare the first byte as a check
            if haystack[i] == needle[0]:
                for a in range(len(needle)):
                    if haystack[i + a] != needle[a]:
                        break
                    
                    if a == len(needle) - 1:
                        results.append(i)
        
        return results



if __name__ == "__main__":
    Helpers().file_name_bytes_to_string()