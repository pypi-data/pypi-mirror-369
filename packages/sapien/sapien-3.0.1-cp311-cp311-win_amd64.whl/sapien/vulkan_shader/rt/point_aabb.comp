#version 450
//
// Copyright 2025 Hillbot Inc.
// Copyright 2020-2024 UCSD SU Lab
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "./point.glsl"

layout(push_constant) uniform Constants {
  int size;
};


layout(set = 0, binding = 0, std430) readonly buffer Points {
  Point points[];
};

struct Aabb {
  float lx;
  float ly;
  float lz;
  float hx;
  float hy;
  float hz;
};

layout(set = 0, binding = 0, std430) writeonly buffer Aabbs {
  Aabb aabbs[];
};

void main() {
  uint x = gl_GlobalInvocationID.x;
  if (x >= size) {
    return;
  }
  Point point = points[x];
  vec3 lower = point.position - vec3(point.scale);
  vec3 upper = point.position + vec3(point.scale);

  aabbs[x].lx = lower.x;
  aabbs[x].ly = lower.y;
  aabbs[x].lz = lower.z;
  aabbs[x].hx = upper.x;
  aabbs[x].hy = upper.y;
  aabbs[x].hz = upper.z;
}