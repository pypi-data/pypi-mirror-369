from __future__ import annotations
import numpy
import numpy.typing
import pybind11_stubgen.typing_ext
import sapien.pysapien
import sapien.pysapien.internal_renderer
import typing
__all__ = ['RenderBodyComponent', 'RenderCameraComponent', 'RenderCameraGroup', 'RenderCubemap', 'RenderCudaMeshComponent', 'RenderDirectionalLightComponent', 'RenderLightComponent', 'RenderMaterial', 'RenderParallelogramLightComponent', 'RenderPointCloudComponent', 'RenderPointLightComponent', 'RenderSceneLoaderNode', 'RenderShape', 'RenderShapeBox', 'RenderShapeCapsule', 'RenderShapeCylinder', 'RenderShapePlane', 'RenderShapePrimitive', 'RenderShapeSphere', 'RenderShapeTriangleMesh', 'RenderShapeTriangleMeshPart', 'RenderSpotLightComponent', 'RenderSystem', 'RenderSystemGroup', 'RenderTexture', 'RenderTexture2D', 'RenderTexturedLightComponent', 'RenderVRDisplay', 'RenderWindow', 'SapienRenderer', 'clear_cache', 'enable_vr', 'get_camera_shader_dir', 'get_device_summary', 'get_imgui_ini_filename', 'get_msaa', 'get_ray_tracing_denoiser', 'get_ray_tracing_dof_aperture', 'get_ray_tracing_dof_plane', 'get_ray_tracing_path_depth', 'get_ray_tracing_samples_per_pixel', 'get_viewer_shader_dir', 'get_vr_action_manifest_filename', 'get_vr_enabled', 'load_scene', 'set_camera_shader_dir', 'set_global_config', 'set_imgui_ini_filename', 'set_log_level', 'set_msaa', 'set_picture_format', 'set_ray_tracing_denoiser', 'set_ray_tracing_dof_aperture', 'set_ray_tracing_dof_plane', 'set_ray_tracing_path_depth', 'set_ray_tracing_samples_per_pixel', 'set_viewer_shader_dir', 'set_vr_action_manifest_filename']
class RenderBodyComponent(sapien.pysapien.Component):
    shading_mode: int
    visibility: float
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self) -> None:
        ...
    def attach(self, shape: RenderShape) -> RenderBodyComponent:
        ...
    def clone(self) -> RenderBodyComponent:
        ...
    def compute_global_aabb_tight(self) -> numpy.ndarray[tuple[typing.Literal[2], typing.Literal[3]], numpy.dtype[numpy.float32]]:
        ...
    def disable_render_id(self) -> None:
        ...
    def enable_render_id(self) -> None:
        ...
    def get_global_aabb_fast(self) -> numpy.ndarray[tuple[typing.Literal[2], typing.Literal[3]], numpy.dtype[numpy.float32]]:
        ...
    @typing.overload
    def set_property(self, name: str, value: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]] | list[float] | tuple) -> None:
        ...
    @typing.overload
    def set_property(self, name: str, value: float) -> None:
        ...
    @typing.overload
    def set_property(self, name: str, value: int) -> None:
        ...
    def set_texture(self, name: str, texture: RenderTexture) -> None:
        ...
    def set_texture_array(self, name: str, textures: list[RenderTexture]) -> None:
        ...
    @property
    def _internal_node(self) -> sapien.pysapien.internal_renderer.Node:
        ...
    @property
    def is_render_id_disabled(self) -> bool:
        ...
    @property
    def render_shapes(self) -> list[RenderShape]:
        ...
class RenderCameraComponent(sapien.pysapien.Component):
    far: float
    local_pose: sapien.pysapien.Pose
    near: float
    skew: float
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, width: int, height: int, shader_dir: str = '') -> None:
        ...
    def get_extrinsic_matrix(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[3, 4]"]:
        """
        Get 3x4 extrinsic camera matrix in OpenCV format.
        """
    def get_far(self) -> float:
        ...
    def get_global_pose(self) -> sapien.pysapien.Pose:
        ...
    def get_height(self) -> int:
        ...
    def get_intrinsic_matrix(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[3, 3]"]:
        """
        Get 3x3 intrinsic camera matrix in OpenCV format.
        """
    def get_local_pose(self) -> sapien.pysapien.Pose:
        ...
    def get_mode(self) -> typing.Literal['perspective', 'orthographic']:
        ...
    def get_model_matrix(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[4, 4]"]:
        """
        Get model matrix (inverse of extrinsic matrix) used in rendering (Y up, Z back)
        """
    def get_near(self) -> float:
        ...
    def get_picture(self, name: str) -> numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]:
        ...
    def get_picture_cuda(self, name: str) -> sapien.pysapien.CudaArray:
        """
        This function transfers the rendered image into a CUDA buffer.
        
        Usage:
        
        # use torch backend
        sapien.set_cuda_tensor_backend("torch")  # called once per process
        image: torch.Tensor = camera.get_picture_cuda()
        
        # use default backend
        image = camera.get_picture_cuda()
        torch_tensor = torch.as_tensor(image)
        
        Warning: The camera must not be destroyed when the GPU tensor is in use by the
        consumer library. Make a copy if needed.
        """
    def get_picture_names(self) -> list[str]:
        ...
    def get_projection_matrix(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[4, 4]"]:
        """
        Get projection matrix in used in rendering (right-handed NDC with [-1,1] XY and [0,1] Z)
        """
    def get_skew(self) -> float:
        ...
    def get_width(self) -> int:
        ...
    def set_far(self, far: float) -> None:
        ...
    def set_focal_lengths(self, fx: float, fy: float) -> None:
        ...
    def set_fovx(self, fov: float, compute_y: bool = True) -> None:
        ...
    def set_fovy(self, fov: float, compute_x: bool = True) -> None:
        ...
    def set_gpu_pose_batch_index(self, index: int) -> None:
        ...
    def set_local_pose(self, pose: sapien.pysapien.Pose) -> None:
        ...
    def set_near(self, near: float) -> None:
        ...
    @typing.overload
    def set_orthographic_parameters(self, near: float, far: float, top: float) -> None:
        ...
    @typing.overload
    def set_orthographic_parameters(self, near: float, far: float, left: float, right: float, bottom: float, top: float) -> None:
        ...
    def set_perspective_parameters(self, near: float, far: float, fx: float, fy: float, cx: float, cy: float, skew: float) -> None:
        ...
    def set_principal_point(self, cx: float, cy: float) -> None:
        ...
    @typing.overload
    def set_property(self, name: str, value: float) -> None:
        ...
    @typing.overload
    def set_property(self, name: str, value: int) -> None:
        ...
    def set_skew(self, skew: float) -> None:
        ...
    def set_texture(self, name: str, texture: RenderTexture) -> None:
        ...
    def set_texture_array(self, name: str, textures: list[RenderTexture]) -> None:
        ...
    def take_picture(self) -> None:
        ...
    @property
    def _cuda_buffer(self) -> sapien.pysapien.CudaArray:
        """
        Debug only. Get the CUDA buffer containing GPU data for this camera, including transformaion matrices, sizes, and user-defined shader fields.
        """
    @property
    def _internal_renderer(self) -> sapien.pysapien.internal_renderer.Renderer:
        ...
    @property
    def cx(self) -> float:
        ...
    @property
    def cy(self) -> float:
        ...
    @property
    def fovx(self) -> float:
        ...
    @property
    def fovy(self) -> float:
        ...
    @property
    def fx(self) -> float:
        ...
    @property
    def fy(self) -> float:
        ...
    @property
    def global_pose(self) -> sapien.pysapien.Pose:
        ...
    @property
    def height(self) -> int:
        ...
    @property
    def mode(self) -> typing.Literal['perspective', 'orthographic']:
        ...
    @property
    def ortho_bottom(self) -> float:
        ...
    @property
    def ortho_left(self) -> float:
        ...
    @property
    def ortho_right(self) -> float:
        ...
    @property
    def ortho_top(self) -> float:
        ...
    @property
    def width(self) -> int:
        ...
class RenderCameraGroup:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def get_picture_cuda(self, name: str) -> sapien.pysapien.CudaArray:
        ...
    def take_picture(self) -> None:
        ...
class RenderCubemap:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self, filename: str) -> None:
        ...
    @typing.overload
    def __init__(self, px: str, nx: str, py: str, ny: str, pz: str, nz: str) -> None:
        ...
    def export(self, filename: str) -> None:
        ...
    @property
    def _internal_cubemap(self) -> sapien.pysapien.internal_renderer.Cubemap:
        ...
class RenderCudaMeshComponent(sapien.pysapien.Component):
    material: RenderMaterial
    triangle_count: int
    vertex_count: int
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, max_vertex_count: int, max_triangle_count: int) -> None:
        ...
    def get_cuda_triangles(self) -> sapien.pysapien.CudaArray:
        ...
    def get_cuda_vertices(self) -> sapien.pysapien.CudaArray:
        ...
    def get_material(self) -> RenderMaterial:
        ...
    def get_triangle_count(self) -> int:
        ...
    def get_vertex_count(self) -> int:
        ...
    def notify_vertex_updated(self, cuda_stream: int = 0) -> None:
        ...
    def set_material(self, material: RenderMaterial) -> None:
        ...
    def set_triangle_count(self, count: int) -> None:
        ...
    def set_triangles(self, triangles: typing.Annotated[numpy.typing.ArrayLike, numpy.uint32, "[m, 3]"]) -> None:
        ...
    def set_vertex_count(self, count: int) -> None:
        ...
    @property
    def cuda_triangles(self) -> sapien.pysapien.CudaArray:
        ...
    @property
    def cuda_vertices(self) -> sapien.pysapien.CudaArray:
        ...
class RenderDirectionalLightComponent(RenderLightComponent):
    shadow_half_size: float
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self) -> None:
        ...
    def get_shadow_half_size(self) -> float:
        ...
    def set_shadow_half_size(self, size: float) -> None:
        ...
class RenderLightComponent(sapien.pysapien.Component):
    color: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]
    local_pose: sapien.pysapien.Pose
    shadow: bool
    shadow_far: float
    shadow_map_size: int
    shadow_near: float
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def disable_shadow(self) -> None:
        ...
    def enable_shadow(self) -> None:
        ...
    def get_color(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]:
        ...
    def get_global_pose(self) -> sapien.pysapien.Pose:
        ...
    def get_local_pose(self) -> sapien.pysapien.Pose:
        ...
    def get_shadow_far(self) -> float:
        ...
    def get_shadow_map_size(self) -> int:
        ...
    def get_shadow_near(self) -> float:
        ...
    def set_color(self, color: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]] | list[float] | tuple) -> None:
        ...
    def set_local_pose(self, pose: sapien.pysapien.Pose) -> None:
        ...
    def set_shadow_far(self, far: float) -> None:
        ...
    def set_shadow_map_size(self, size: int) -> None:
        ...
    def set_shadow_near(self, near: float) -> None:
        ...
    @property
    def global_pose(self) -> sapien.pysapien.Pose:
        ...
class RenderMaterial:
    __hash__: typing.ClassVar[None] = None
    base_color: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(4)]
    base_color_texture: RenderTexture2D
    diffuse_texture = ...
    emission: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(4)]
    emission_texture: RenderTexture2D
    ior: float
    metallic: float
    metallic_texture: RenderTexture2D
    normal_texture: RenderTexture2D
    roughness: float
    roughness_texture: RenderTexture2D
    specular: float
    transmission: float
    transmission_roughness: float
    transmission_texture: RenderTexture2D
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __eq__(self, arg0: RenderMaterial) -> bool:
        ...
    def __init__(self, emission: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(4)] = [0.0, 0.0, 0.0, 0.0], base_color: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(4)] = [1.0, 1.0, 1.0, 1.0], specular: float = 0.0, roughness: float = 1.0, metallic: float = 0.0, transmission: float = 0.0, ior: float = 1.4500000476837158, transmission_roughness: float = 0.0) -> None:
        ...
    def get_base_color(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(4)]:
        ...
    def get_base_color_texture(self) -> RenderTexture2D:
        ...
    def get_diffuse_texture(self):
        ...
    def get_emission(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(4)]:
        ...
    def get_emission_texture(self) -> RenderTexture2D:
        ...
    def get_ior(self) -> float:
        ...
    def get_metallic(self) -> float:
        ...
    def get_metallic_texture(self) -> RenderTexture2D:
        ...
    def get_normal_texture(self) -> RenderTexture2D:
        ...
    def get_roughness(self) -> float:
        ...
    def get_roughness_texture(self) -> RenderTexture2D:
        ...
    def get_specular(self) -> float:
        ...
    def get_transmission(self) -> float:
        ...
    def get_transmission_roughness(self) -> float:
        ...
    def get_transmission_texture(self) -> RenderTexture2D:
        ...
    def set_base_color(self, color: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(4)]) -> None:
        ...
    def set_base_color_texture(self, texture: RenderTexture2D) -> None:
        ...
    def set_diffuse_texture(self, texture):
        ...
    def set_emission(self, emission: typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(4)]) -> None:
        ...
    def set_emission_texture(self, texture: RenderTexture2D) -> None:
        ...
    def set_ior(self, ior: float) -> None:
        ...
    def set_metallic(self, metallic: float) -> None:
        ...
    def set_metallic_texture(self, texture: RenderTexture2D) -> None:
        ...
    def set_normal_texture(self, texture: RenderTexture2D) -> None:
        ...
    def set_roughness(self, roughness: float) -> None:
        ...
    def set_roughness_texture(self, texture: RenderTexture2D) -> None:
        ...
    def set_specular(self, specular: float) -> None:
        ...
    def set_transmission(self, transmission: float) -> None:
        ...
    def set_transmission_roughness(self, roughness: float) -> None:
        ...
    def set_transmission_texture(self, texture: RenderTexture2D) -> None:
        ...
class RenderParallelogramLightComponent(RenderLightComponent):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self) -> None:
        ...
    def get_angle(self) -> float:
        ...
    def get_half_height(self) -> float:
        ...
    def get_half_width(self) -> float:
        ...
    def set_shape(self, half_width: float, half_height: float, angle: float = 1.5707963705062866) -> None:
        ...
    @property
    def angle(self) -> float:
        ...
    @property
    def half_height(self) -> float:
        ...
    @property
    def half_width(self) -> float:
        ...
class RenderPointCloudComponent(sapien.pysapien.Component):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, capacity: int = 0) -> None:
        ...
    def get_cuda_aabb(self) -> sapien.pysapien.CudaArray | None:
        """
        this function is a temporary hack to help update the AABBs used for ray tracing BLAS. returns None if ray tracing has not been initialized
        """
    def get_cuda_vertices(self) -> sapien.pysapien.CudaArray:
        ...
    def get_vertices(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 3]"]:
        """
        Get previously set vertices. This function does not reflect any changes directly made to the GPU.
        """
    def set_attribute(self, name: str, attribute: typing.Annotated[numpy.typing.ArrayLike, numpy.float32, "[m, n]"]) -> RenderPointCloudComponent:
        ...
    def set_vertices(self, vertices: typing.Annotated[numpy.typing.ArrayLike, numpy.float32, "[m, 3]"]) -> RenderPointCloudComponent:
        ...
class RenderPointLightComponent(RenderLightComponent):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self) -> None:
        ...
class RenderSceneLoaderNode:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def flatten(self) -> tuple[list[RenderShapeTriangleMesh], list[RenderLightComponent]]:
        ...
    @property
    def children(self) -> list[RenderSceneLoaderNode]:
        ...
    @property
    def light(self) -> RenderLightComponent:
        ...
    @property
    def mesh(self) -> RenderShapeTriangleMesh:
        ...
    @property
    def name(self) -> str:
        ...
    @property
    def pose(self) -> sapien.pysapien.Pose:
        ...
    @property
    def scale(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]:
        ...
class RenderShape:
    front_face: typing.Literal['counterclockwise', 'clockwise']
    local_pose: sapien.pysapien.Pose
    name: str
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def clone(self) -> RenderShape:
        ...
    def get_front_face(self) -> typing.Literal['counterclockwise', 'clockwise']:
        ...
    def get_local_pose(self) -> sapien.pysapien.Pose:
        ...
    def get_material(self) -> RenderMaterial:
        ...
    def get_name(self) -> str:
        ...
    def get_parts(self) -> list[RenderShapeTriangleMeshPart]:
        ...
    def get_per_scene_id(self) -> int:
        ...
    def set_front_face(self, front_face: typing.Literal['counterclockwise', 'clockwise']) -> None:
        ...
    def set_gpu_pose_batch_index(self, index: int) -> None:
        ...
    def set_local_pose(self, pose: sapien.pysapien.Pose) -> None:
        ...
    def set_name(self, name: str) -> None:
        ...
    @property
    def material(self) -> RenderMaterial:
        ...
    @property
    def parts(self) -> list[RenderShapeTriangleMeshPart]:
        ...
    @property
    def per_scene_id(self) -> int:
        ...
class RenderShapeBox(RenderShapePrimitive):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, half_size: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]] | list[float] | tuple, material: RenderMaterial) -> None:
        ...
    def get_half_size(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]:
        ...
    @property
    def half_size(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]:
        ...
class RenderShapeCapsule(RenderShapePrimitive):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, radius: float, half_length: float, material: RenderMaterial) -> None:
        ...
    def get_half_length(self) -> float:
        ...
    def get_radius(self) -> float:
        ...
    @property
    def half_length(self) -> float:
        ...
    @property
    def radius(self) -> float:
        ...
class RenderShapeCylinder(RenderShapePrimitive):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, radius: float, half_length: float, material: RenderMaterial) -> None:
        ...
    def get_half_length(self) -> float:
        ...
    def get_radius(self) -> float:
        ...
    @property
    def half_length(self) -> float:
        ...
    @property
    def radius(self) -> float:
        ...
class RenderShapePlane(RenderShapePrimitive):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, scale: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]] | list[float] | tuple, material: RenderMaterial) -> None:
        ...
    def get_scale(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]:
        ...
    @property
    def scale(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]:
        ...
class RenderShapePrimitive(RenderShape):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def get_triangles(self) -> typing.Annotated[numpy.typing.NDArray[numpy.uint32], "[m, 3]"]:
        ...
    def get_vertex_normal(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 3]"]:
        ...
    def get_vertex_uv(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 2]"]:
        ...
    def get_vertices(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 3]"]:
        ...
    @property
    def triangles(self) -> typing.Annotated[numpy.typing.NDArray[numpy.uint32], "[m, 3]"]:
        ...
    @property
    def vertex_normal(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 3]"]:
        ...
    @property
    def vertex_uv(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 2]"]:
        ...
    @property
    def vertices(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 3]"]:
        ...
class RenderShapeSphere(RenderShapePrimitive):
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, radius: float, material: RenderMaterial) -> None:
        ...
    def get_radius(self) -> float:
        ...
    @property
    def radius(self) -> float:
        ...
class RenderShapeTriangleMesh(RenderShape):
    scale: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self, vertices: typing.Annotated[numpy.typing.ArrayLike, numpy.float32, "[m, 3]"], triangles: typing.Annotated[numpy.typing.ArrayLike, numpy.uint32, "[m, 3]"], normals: typing.Annotated[numpy.typing.ArrayLike, numpy.float32, "[m, 3]"], uvs: typing.Annotated[numpy.typing.ArrayLike, numpy.float32, "[m, 2]"], material: RenderMaterial) -> None:
        ...
    @typing.overload
    def __init__(self, filename: str, scale: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]] | list[float] | tuple = ..., material: RenderMaterial | None = None) -> None:
        ...
    def get_filename(self) -> str:
        ...
    def get_scale(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]:
        ...
    def set_scale(self, scale: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]] | list[float] | tuple) -> None:
        """
        Note: this function only works when the shape is not added to scene
        """
    @property
    def filename(self) -> str:
        ...
class RenderShapeTriangleMeshPart:
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __eq__(self, arg0: RenderShapeTriangleMeshPart) -> bool:
        ...
    def get_cuda_triangles(self) -> sapien.pysapien.CudaArray:
        ...
    def get_cuda_vertices(self) -> sapien.pysapien.CudaArray:
        ...
    def get_material(self) -> RenderMaterial:
        ...
    def get_triangles(self) -> typing.Annotated[numpy.typing.NDArray[numpy.uint32], "[m, 3]"]:
        ...
    def get_vertex_normal(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 3]"]:
        ...
    def get_vertex_uv(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 2]"]:
        ...
    def get_vertices(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 3]"]:
        ...
    def set_vertex_normal(self, normal: typing.Annotated[numpy.typing.ArrayLike, numpy.float32, "[m, 3]"]) -> None:
        ...
    def set_vertex_uv(self, uv: typing.Annotated[numpy.typing.ArrayLike, numpy.float32, "[m, 2]"]) -> None:
        ...
    @property
    def cuda_triangles(self) -> sapien.pysapien.CudaArray:
        ...
    @property
    def cuda_vertices(self) -> sapien.pysapien.CudaArray:
        ...
    @property
    def material(self) -> RenderMaterial:
        ...
    @property
    def triangles(self) -> typing.Annotated[numpy.typing.NDArray[numpy.uint32], "[m, 3]"]:
        ...
    @property
    def vertices(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[m, 3]"]:
        ...
class RenderSpotLightComponent(RenderLightComponent):
    inner_fov: float
    outer_fov: float
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self) -> None:
        ...
    def get_inner_fov(self) -> float:
        ...
    def get_outer_fov(self) -> float:
        ...
    def set_inner_fov(self, fov: float) -> None:
        ...
    def set_outer_fov(self, fov: float) -> None:
        ...
class RenderSystem(sapien.pysapien.System):
    ambient_light: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]
    cubemap: RenderCubemap
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self, device: sapien.pysapien.Device | None = None) -> None:
        ...
    @typing.overload
    def __init__(self, device: str) -> None:
        ...
    def get_ambient_light(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]:
        ...
    def get_cameras(self) -> list[RenderCameraComponent]:
        ...
    def get_cubemap(self) -> RenderCubemap:
        ...
    def get_lights(self) -> list[RenderLightComponent]:
        ...
    def get_point_clouds(self) -> list[RenderPointCloudComponent]:
        ...
    def get_render_bodies(self) -> list[RenderBodyComponent]:
        ...
    def set_ambient_light(self, color: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]] | list[float] | tuple) -> None:
        ...
    def set_cubemap(self, cubemap: RenderCubemap) -> None:
        ...
    @property
    def _internal_scene(self) -> sapien.pysapien.internal_renderer.Scene:
        ...
    @property
    def cameras(self) -> list[RenderCameraComponent]:
        ...
    @property
    def cuda_object_transforms(self) -> sapien.pysapien.CudaArray:
        ...
    @property
    def device(self) -> sapien.pysapien.Device:
        ...
    @property
    def lights(self) -> list[RenderLightComponent]:
        ...
    @property
    def point_clouds(self) -> list[RenderPointCloudComponent]:
        ...
    @property
    def render_bodies(self) -> list[RenderBodyComponent]:
        ...
class RenderSystemGroup:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, systems: list[RenderSystem]) -> None:
        ...
    def create_camera_group(self, cameras: list[RenderCameraComponent], picture_names: list[str]) -> RenderCameraGroup:
        ...
    def set_cuda_poses(self, pose_buffer: sapien.pysapien.CudaArray) -> None:
        ...
    def set_cuda_stream(self, stream: int) -> None:
        ...
    def update_render(self) -> None:
        """
        This function performs CUDA operations to transfer poses from the CUDA buffer provided by :func:`set_cuda_poses` into render systems.
        It updates the transformation matrices of objects and cameras.
        
        This function waits for any pending CUDA operations on cuda stream provided by :func:`set_cuda_stream`.
        """
class RenderTexture:
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __eq__(self, arg0: RenderTexture) -> bool:
        ...
    def __init__(self, array: numpy.ndarray[typing.Any, numpy.dtype[typing.Any]] | list | tuple, dim: int, format: str, mipmap_levels: int = 1, filter_mode: typing.Literal['nearest', 'linear'] = 'linear', address_mode: typing.Literal['repeat', 'border', 'edge', 'mirror'] = 'repeat', srgb: bool = False) -> None:
        ...
    def download(self) -> numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]:
        ...
    def get_address_mode(self) -> typing.Literal['repeat', 'border', 'edge', 'mirror']:
        ...
    def get_channels(self) -> int:
        ...
    def get_depth(self) -> int:
        ...
    def get_filter_mode(self) -> typing.Literal['nearest', 'linear']:
        ...
    def get_format(self) -> str:
        ...
    def get_height(self) -> int:
        ...
    def get_mipmap_levels(self) -> int:
        ...
    def get_width(self) -> int:
        ...
    def upload(self, data: numpy.ndarray[typing.Any, numpy.dtype[typing.Any]] | list | tuple) -> None:
        ...
    @property
    def address_mode(self) -> typing.Literal['repeat', 'border', 'edge', 'mirror']:
        ...
    @property
    def channels(self) -> int:
        ...
    @property
    def depth(self) -> int:
        ...
    @property
    def filter_mode(self) -> typing.Literal['nearest', 'linear']:
        ...
    @property
    def format(self) -> str:
        ...
    @property
    def height(self) -> int:
        ...
    @property
    def is_srgb(self) -> bool:
        ...
    @property
    def mipmap_levels(self) -> int:
        ...
    @property
    def width(self) -> int:
        ...
class RenderTexture2D:
    __hash__: typing.ClassVar[None] = None
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __eq__(self, arg0: RenderTexture2D) -> bool:
        ...
    @typing.overload
    def __init__(self, array: numpy.ndarray[typing.Any, numpy.dtype[typing.Any]] | list | tuple, format: str, mipmap_levels: int = 1, filter_mode: typing.Literal['nearest', 'linear'] = 'linear', address_mode: typing.Literal['repeat', 'border', 'edge', 'mirror'] = 'repeat', srgb: bool = False) -> None:
        ...
    @typing.overload
    def __init__(self, filename: str, mipmap_levels: int = 1, filter_mode: typing.Literal['nearest', 'linear'] = 'linear', address_mode: typing.Literal['repeat', 'border', 'edge', 'mirror'] = 'repeat', srgb: bool = True) -> None:
        """
        Create texture from file. The srgb parameter only affects files in uint8 format; it should be true for color textures (diffuse, emission) and false for others (normal, roughness)
        """
    def download(self) -> numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]:
        ...
    def get_address_mode(self) -> typing.Literal['repeat', 'border', 'edge', 'mirror']:
        ...
    def get_channels(self) -> int:
        ...
    def get_filename(self) -> str:
        ...
    def get_filter_mode(self) -> typing.Literal['nearest', 'linear']:
        ...
    def get_format(self) -> str:
        ...
    def get_height(self) -> int:
        ...
    def get_mipmap_levels(self) -> int:
        ...
    def get_width(self) -> int:
        ...
    def upload(self, data: numpy.ndarray[typing.Any, numpy.dtype[typing.Any]] | list | tuple) -> None:
        ...
    @property
    def address_mode(self) -> typing.Literal['repeat', 'border', 'edge', 'mirror']:
        ...
    @property
    def channels(self) -> int:
        ...
    @property
    def filename(self) -> str:
        ...
    @property
    def filter_mode(self) -> typing.Literal['nearest', 'linear']:
        ...
    @property
    def format(self) -> str:
        ...
    @property
    def height(self) -> int:
        ...
    @property
    def is_srgb(self) -> bool:
        ...
    @property
    def mipmap_levels(self) -> int:
        ...
    @property
    def width(self) -> int:
        ...
class RenderTexturedLightComponent(RenderSpotLightComponent):
    texture: RenderTexture2D
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self) -> None:
        ...
    def get_texture(self) -> RenderTexture2D:
        ...
    def set_texture(self, texture: RenderTexture2D) -> None:
        ...
class RenderVRDisplay:
    root_pose: sapien.pysapien.Pose
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self) -> None:
        ...
    def fetch_poses(self) -> None:
        """
        fetches poses of HMD and controllers
        """
    def get_controller_axis_state(self, id: int, axis: int) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def get_controller_button_pressed(self, id: int) -> int:
        ...
    def get_controller_button_touched(self, id: int) -> int:
        ...
    def get_controller_ids(self) -> list[int]:
        ...
    def get_controller_pose(self, id: int) -> sapien.pysapien.Pose:
        """
        Gets the local pose of a controller. It should be called immediately after fetch_poses
        """
    def get_hmd_pose(self) -> sapien.pysapien.Pose:
        """
        Gets the local pose of the head set. It should be called immediately after fetch_poses
        """
    def get_left_hand_root_pose(self) -> sapien.pysapien.Pose:
        ...
    def get_left_hand_skeletal_poses(self) -> list[sapien.pysapien.Pose]:
        ...
    def get_right_hand_root_pose(self) -> sapien.pysapien.Pose:
        ...
    def get_right_hand_skeletal_poses(self) -> list[sapien.pysapien.Pose]:
        ...
    def get_root_pose(self) -> sapien.pysapien.Pose:
        ...
    def render(self) -> None:
        ...
    def set_camera_parameters(self, near: float, far: float) -> None:
        ...
    def set_root_pose(self, pose: sapien.pysapien.Pose) -> None:
        ...
    def set_scene(self, scene: sapien.pysapien.Scene) -> None:
        ...
    def update_render(self) -> None:
        """
        update_render implicitly calls fetch_poses to make sure the HMD pose is up-to-date
        """
    @property
    def _internal_scene(self) -> sapien.pysapien.internal_renderer.Scene:
        ...
class RenderWindow:
    cursor: bool
    denoiser: typing.Literal['none', 'oidn', 'optix']
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, width: int, height: int, shader_dir: str) -> None:
        ...
    def get_camera_model_matrix(self) -> typing.Annotated[numpy.typing.NDArray[numpy.float32], "[4, 4]"]:
        ...
    def get_camera_pose(self) -> sapien.pysapien.Pose:
        ...
    def get_camera_position(self) -> numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]:
        ...
    def get_camera_projection_matrix(self) -> numpy.typing.NDArray[numpy.float32]:
        ...
    def get_camera_property_float(self, key: str) -> float:
        ...
    def get_camera_property_int(self, key: str) -> int:
        ...
    def get_camera_rotation(self) -> numpy.ndarray[typing.Literal[4], numpy.dtype[numpy.float32]]:
        ...
    def get_content_scale(self) -> float:
        ...
    def get_picture(self, name: str) -> numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]:
        ...
    def get_picture_pixel(self, name: str, x: int, y: int) -> numpy.ndarray[typing.Any, numpy.dtype[typing.Any]]:
        ...
    def get_picture_size(self, name: str) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    def hide(self) -> None:
        ...
    def key_down(self, key: str) -> bool:
        ...
    def key_press(self, key: str) -> bool:
        ...
    def mouse_click(self, key: int) -> bool:
        ...
    def mouse_down(self, key: int) -> bool:
        ...
    def render(self, target_name: str, ui_windows: list[sapien.pysapien.internal_renderer.UIWidget] = []) -> None:
        ...
    def resize(self, width: int, height: int) -> None:
        ...
    def set_camera_orthographic_parameters(self, near: float, far: float, top: float) -> None:
        ...
    def set_camera_parameters(self, near: float, far: float, fovy: float) -> None:
        ...
    def set_camera_pose(self, pose: sapien.pysapien.Pose) -> None:
        ...
    def set_camera_position(self, position: numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]] | list[float] | tuple) -> None:
        ...
    @typing.overload
    def set_camera_property(self, key: str, value: float) -> None:
        ...
    @typing.overload
    def set_camera_property(self, key: str, value: int) -> None:
        ...
    def set_camera_rotation(self, quat: numpy.ndarray[typing.Literal[4], numpy.dtype[numpy.float32]] | list[float] | tuple) -> None:
        ...
    def set_camera_texture(self, name: str, texture: RenderTexture2D) -> None:
        ...
    def set_camera_texture_array(self, name: str, textures: list[RenderTexture2D]) -> None:
        ...
    def set_content_scale(self, scale: float) -> None:
        ...
    def set_drop_callback(self, callback: typing.Callable[[list[str]], None]) -> None:
        ...
    def set_focus_callback(self, callback: typing.Callable[[int], None]) -> None:
        ...
    def set_intrinsic_parameters(self, near: float, far: float, fx: float, fy: float, cx: float, cy: float, skew: float) -> None:
        ...
    def set_scene(self, scene: sapien.pysapien.Scene) -> None:
        ...
    def set_scenes(self, scenes: list[sapien.pysapien.Scene], offsets: list[numpy.ndarray[typing.Literal[3], numpy.dtype[numpy.float32]]]) -> None:
        ...
    def set_shader_dir(self, shader_dir: str) -> None:
        ...
    def show(self) -> None:
        ...
    def unset_drop_callback(self) -> None:
        ...
    def unset_focus_callback(self) -> None:
        ...
    def update_render(self) -> None:
        """
        Equivalent to calling the update_render function for all added scene
        """
    @property
    def _internal_renderer(self) -> sapien.pysapien.internal_renderer.Renderer:
        ...
    @property
    def _internal_scene(self) -> sapien.pysapien.internal_renderer.Scene:
        ...
    @property
    def alt(self) -> bool:
        ...
    @property
    def camera_mode(self) -> typing.Literal['perspective', 'orthographic']:
        ...
    @property
    def ctrl(self) -> bool:
        ...
    @property
    def display_picture_names(self) -> list[str]:
        """
        Names for available display targets that can be displayed in the render function
        """
    @property
    def far(self) -> float:
        ...
    @property
    def fovy(self) -> float:
        ...
    @property
    def fps(self) -> float:
        ...
    @property
    def mouse_delta(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    @property
    def mouse_position(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    @property
    def mouse_wheel_delta(self) -> typing.Annotated[list[float], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    @property
    def near(self) -> float:
        ...
    @property
    def ortho_top(self) -> float:
        ...
    @property
    def shift(self) -> bool:
        ...
    @property
    def should_close(self) -> bool:
        ...
    @property
    def size(self) -> typing.Annotated[list[int], pybind11_stubgen.typing_ext.FixedSize(2)]:
        ...
    @property
    def super(self) -> bool:
        ...
class SapienRenderer:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    def __init__(self, device: sapien.pysapien.Device | None = None) -> None:
        ...
    @property
    def _internal_context(self) -> sapien.pysapien.internal_renderer.Context:
        ...
def _force_vr_shutdown() -> None:
    """
    SteamVR will be permanently broken (even across processes) when the process is killed without shutting down VR. This function is used to force shutting down VR when you know SAPIEN will be killed without a clean shutdown.
    """
def _internal_set_shader_search_path(path: str) -> None:
    ...
def clear_cache(models: bool = True, images: bool = True, shaders: bool = False) -> None:
    ...
def enable_vr() -> None:
    """
    Enable VR via Steam. Must be called before creating RenderSystem or sapien Scene.
    """
def get_camera_shader_dir() -> str:
    ...
def get_device_summary() -> str:
    ...
def get_imgui_ini_filename() -> str:
    ...
def get_msaa() -> int:
    ...
def get_ray_tracing_denoiser() -> typing.Literal['none', 'oidn', 'optix']:
    ...
def get_ray_tracing_dof_aperture() -> float:
    ...
def get_ray_tracing_dof_plane() -> float:
    ...
def get_ray_tracing_path_depth() -> int:
    ...
def get_ray_tracing_samples_per_pixel() -> int:
    ...
def get_viewer_shader_dir() -> str:
    ...
def get_vr_action_manifest_filename() -> str:
    ...
def get_vr_enabled() -> bool:
    ...
def load_scene(filename: str, apply_scale: bool = True) -> RenderSceneLoaderNode:
    ...
def set_camera_shader_dir(dir: str) -> None:
    ...
def set_global_config(max_num_materials: int = 128, max_num_textures: int = 512, default_mipmap_levels: int = 1, do_not_load_texture: bool = False) -> None:
    """
    Sets global properties for SAPIEN renderer. This function should only be called before creating any renderer-related objects.
    """
def set_imgui_ini_filename(filename: str) -> None:
    ...
def set_log_level(level: str) -> None:
    ...
def set_msaa(msaa: int) -> None:
    ...
def set_picture_format(name: str, format: str) -> None:
    ...
def set_ray_tracing_denoiser(name: typing.Literal['none', 'oidn', 'optix']) -> None:
    ...
def set_ray_tracing_dof_aperture(radius: float) -> None:
    ...
def set_ray_tracing_dof_plane(depth: float) -> None:
    ...
def set_ray_tracing_path_depth(depth: int) -> None:
    ...
def set_ray_tracing_samples_per_pixel(spp: int) -> None:
    ...
def set_viewer_shader_dir(dir: str) -> None:
    ...
def set_vr_action_manifest_filename(filename: str) -> None:
    ...
