from typing import Dict, List

from tfparse import load_from_path

type_mapping: Dict[str, str] = {
    "string": "String",
    "number": "Number",
    "bool": "Boolean",
    "list of dynamic": "Listing | List",
    "list(any)": "Listing | List",
    "list of string": "Listing<String> | List<String>",
    "list of number": "Listing<Number> | List<Number>",
    "list of bool": "Listing<Boolean> | List<Boolean>",
    "map of dynamic": "Mapping<String, Any> | Map<String, Any>",
    "map of string": "Mapping<String, String> | Map<String, String>",
    "map of number": "Mapping<String, Number> | Map<String, Number>",
    "map of bool": "Mapping<String, Boolean> | Map<String, Boolean>",
}

indent = "  "


def map_type(terraform_type: str) -> str:
    """Map Terraform type to Python type."""
    return type_mapping[terraform_type]


def generate_pkl_type(chdir: str, type_name: str) -> str:
    parsed = load_from_path(chdir)
    root_variables = [
        variable
        for variable in parsed["variable"]
        if variable["__tfmeta"]["filename"] == "variables.tf"
    ]
    output: List[str] = []

    output.append(
        f"// This file is automatically generated based on the input variables in {chdir}/variables.tf"
    )
    output.append(f"class {type_name} {{")

    for variable in root_variables:
        output.append(
            f"{indent}{variable['__tfmeta']['label']}: {map_type(variable['type'])}"
        )

    output.append("}")
    return "\n".join(output)


def write_pkl_type(chdir: str, target_file_path: str, type_name: str) -> None:
    """Generate and write the PKL type to a file."""
    result = generate_pkl_type(chdir, type_name)

    with open(target_file_path, "w") as file:
        file.write(result)
