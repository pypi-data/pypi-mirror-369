
# Copyright (C) 2023-2025 Cognizant Digital Business, Evolutionary AI.
# All Rights Reserved.
# Issued under the Academic Public License.
#
# You can be released from the terms, and requirements of the Academic Public
# License by purchasing a commercial license.
# Purchase of a commercial license is mandatory for any use of the
# neuro-san SDK Software in commercial settings.
#
# END COPYRIGHT

# The schema specifications for this file are documented here:
# https://github.com/cognizant-ai-lab/neuro-san/blob/main/docs/agent_hocon_reference.md

{
    # Optional metadata describing this agent network
    "metadata": {
        "description": "Example of web search using Google Serper",
        "tags": ["example", "web_search"],
    },
    "llm_config": {
        "model_name": "gpt-4o",
    },
    "tools": [
        # This first agent definition is regarded as the "Front Man", which
        # does all the talking to the outside world/client.
        #
        # Some disqualifications from being a front man:
        #   1) Cannot use a CodedTool "class" definition
        #   2) Cannot use a Tool "toolbox" definition
        #
        # Besides the first agent being the front man, these tool definitions
        # do not have to be in any particular order. How they are linked and
        # call each other is defined within their own specs.
        # This could be a graph, potentially even with cycles.
        {
            "name": "searcher",
            "instructions": "Use your tool to respond to the inquiry.",
            "function": {
                # The description acts as an initial prompt.
                "description": "Assist user with answer from internet."
            }
            "tools": ["search_tool"]
        },
        {
            "name": "search_tool",
            # The "toolbox" specifies which tool in the toolbox should be instantiated.
            # In this case, "google_serper" is chosen, which allows querying Google Serper for search results.

            # Note that tools in toolbox can be either langchain tools or coded tools
            # In this case "google_serper" is a shared coded tool.
            
            # Documentation on the google serper tool:
            # - GoogleSerper class: coded_tools/google_serper.py
            # - LangChain's Google Serper Tool: https://python.langchain.com/docs/integrations/tools/google_serper/
            # - Google Serper API: https://serper.dev/
            
            "toolbox": "google_serper"

            # "args" contains the parameters that will be passed to the selected tool.
            # These arguments must align with the tool’s expected function signature.
            # 
            # For "google_serper", one of the key parameters is "k", which determines 
            # how many search results should be returned.
            # 
            # Other tools will have different required/optional arguments, so be sure to refer to
            # the tool’s documentation to understand what parameters can be configured.

            # Note that for "google_serper" if no "args" is provided, the search is performed with defaults parameters.

            "args": {

                # Country code to localize search results (default is "us" for United States).
                "gl": "us",

                # Language code for the search interface (default is "en" for English).
                "hl": "en",

                # Number of top search results to retrieve (default is 10).
                "k": 3,

                # Type of search (e.g., "news", "places", "images", or "search" for general).
                "type": "search",

                # Search filter string (e.g., "qdr:d" for past day results); optional and can be used for time filtering
                # Default is None.
                "tbs": null
            }

            # -------------------------------------------------------------------------------
            # CURRENTLY AVAILABLE TOOLS
            # The following tools can be used as values for "toolbox":
            #
            # Langchain Tools
            #
            #   1️)  "bing_search" - Uses Bing to perform web searches.
            #   2️)  "tavily_search" - Uses Tavily for search queries.
            #   3️)  "requests_get" - Makes an HTTP GET request.
            #   4️)  "requests_post" - Makes an HTTP POST request.
            #   5️)  "requests_patch" - Makes an HTTP PATCH request.
            #   6️)  "requests_put" - Makes an HTTP PUT request.
            #   7️)  "requests_delete" - Makes an HTTP DELETE request.
            #   8)  "requests_toolkit" - Contains all of the request tools.
            #
            # Coded Tools
            #
            #   9)  "website_search" - Search internet with DuckduckgoSearch.
            #   10) "google_serper" - Search internet with Google Serper
            #   11) "rag_retriever" - Perform retrival-augmented generation on given urls.
            #
            # Each of these tools may require specific arguments in the "args" section.
            # Refer to the tool's documentation for more details.
            # -------------------------------------------------------------------------------

            # -------------------------------------------------------------------------------
            # EXTENSIBILITY
            # - Tool registration can be done without modifying core code by specifying the 
            #   tool configuration file (HOCON format) via the AGENT_TOOLBOX_INFO_FILE environment variable.
            # - The default tool configuration file is located at: 
            #   neuro_san/internals/run_context/langchain/toolbox/toolbox_info.hocon
            # -------------------------------------------------------------------------------

        }
    ]
}
