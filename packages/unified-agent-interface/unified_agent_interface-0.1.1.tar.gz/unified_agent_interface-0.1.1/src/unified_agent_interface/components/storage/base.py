from __future__ import annotations

from typing import List, Optional, Protocol

from ...models.chat import Artifact, ChatSession, Message
from ...models.run import LogEntry, RunArtifact, RunTask


class Storage(Protocol):
    # Chat storage
    def create_chat(self) -> ChatSession: ...
    def get_chat(self, session_id: str) -> Optional[ChatSession]: ...
    def delete_chat(self, session_id: str) -> bool: ...
    def add_message(self, session_id: str, message: Message) -> None: ...
    def get_messages(self, session_id: str) -> Optional[List[Message]]: ...
    def add_artifact(self, session_id: str, artifact: Artifact) -> None: ...
    def get_artifacts(self, session_id: str) -> Optional[List[Artifact]]: ...
    def get_artifact(self, session_id: str, artifact_id: str) -> Optional[Artifact]: ...

    # Run storage
    def create_run(self, initial_input: Optional[str], params: dict) -> RunTask: ...
    def get_run(self, task_id: str) -> Optional[RunTask]: ...
    def delete_run(self, task_id: str) -> bool: ...
    def append_run_input(self, task_id: str, text: str) -> None: ...
    def append_run_log(self, task_id: str, log: LogEntry) -> None: ...
    def add_run_artifact(self, task_id: str, artifact: RunArtifact) -> None: ...
    def get_run_artifacts(self, task_id: str) -> Optional[List[RunArtifact]]: ...
    def get_single_run_artifact(
        self, task_id: str, artifact_id: str
    ) -> Optional[RunArtifact]: ...
