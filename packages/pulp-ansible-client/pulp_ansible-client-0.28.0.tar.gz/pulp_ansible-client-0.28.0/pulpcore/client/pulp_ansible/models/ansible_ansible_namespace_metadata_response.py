# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pulpcore.client.pulp_ansible.models.namespace_link_response import NamespaceLinkResponse
from typing import Optional, Set
from typing_extensions import Self

class AnsibleAnsibleNamespaceMetadataResponse(BaseModel):
    """
    A serializer for Namespaces.
    """ # noqa: E501
    pulp_href: Optional[StrictStr] = None
    name: Annotated[str, Field(min_length=3, strict=True, max_length=64)] = Field(description="Required named, only accepts lowercase, numbers and underscores.")
    company: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="Optional namespace company owner.")
    email: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Optional namespace contact email.")
    description: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Optional short description.")
    resources: Optional[StrictStr] = Field(default=None, description="Optional resource page in markdown format.")
    links: Optional[List[NamespaceLinkResponse]] = Field(default=None, description="Labeled related links.")
    avatar_sha256: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="SHA256 digest of avatar image if present.")
    avatar_url: Optional[StrictStr] = Field(default=None, description="Download link for avatar image if present.")
    metadata_sha256: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["pulp_href", "name", "company", "email", "description", "resources", "links", "avatar_sha256", "avatar_url", "metadata_sha256"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!.*__)[a-z]+[0-9a-z_]*$", value):
            raise ValueError(r"must validate the regular expression /^(?!.*__)[a-z]+[0-9a-z_]*$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnsibleAnsibleNamespaceMetadataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "pulp_href",
            "avatar_sha256",
            "avatar_url",
            "metadata_sha256",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in links (list)
        _items = []
        if self.links:
            for _item_links in self.links:
                if _item_links:
                    _items.append(_item_links.to_dict())
            _dict['links'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnsibleAnsibleNamespaceMetadataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pulp_href": obj.get("pulp_href"),
            "name": obj.get("name"),
            "company": obj.get("company"),
            "email": obj.get("email"),
            "description": obj.get("description"),
            "resources": obj.get("resources"),
            "links": [NamespaceLinkResponse.from_dict(_item) for _item in obj["links"]] if obj.get("links") is not None else None,
            "avatar_sha256": obj.get("avatar_sha256"),
            "avatar_url": obj.get("avatar_url"),
            "metadata_sha256": obj.get("metadata_sha256")
        })
        return _obj


