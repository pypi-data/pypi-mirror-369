# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pulpcore.client.pulp_ansible.models.unpaginated_collection_version_response import UnpaginatedCollectionVersionResponse

class TestUnpaginatedCollectionVersionResponse(unittest.TestCase):
    """UnpaginatedCollectionVersionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UnpaginatedCollectionVersionResponse:
        """Test UnpaginatedCollectionVersionResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UnpaginatedCollectionVersionResponse`
        """
        model = UnpaginatedCollectionVersionResponse()
        if include_optional:
            return UnpaginatedCollectionVersionResponse(
                version = '',
                href = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                requires_ansible = '',
                marks = [
                    ''
                    ],
                artifact = pulpcore.client.pulp_ansible.models.artifact_ref_response.ArtifactRefResponse(
                    filename = '', 
                    sha256 = '', 
                    size = 56, ),
                collection = pulpcore.client.pulp_ansible.models.collection_ref_response.CollectionRefResponse(
                    id = '', 
                    name = '', 
                    href = '', ),
                download_url = '',
                name = '',
                namespace = pulpcore.client.pulp_ansible.models.collection_namespace_response.CollectionNamespaceResponse(
                    name = '', 
                    metadata_sha256 = '', ),
                signatures = [
                    pulpcore.client.pulp_ansible.models.collection_version_signature_response.CollectionVersionSignatureResponse(
                        signature = '', 
                        pubkey_fingerprint = '', 
                        signing_service = '', 
                        pulp_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                metadata = pulpcore.client.pulp_ansible.models.collection_metadata_response.CollectionMetadataResponse(
                    authors = [
                        ''
                        ], 
                    contents = null, 
                    dependencies = null, 
                    description = '', 
                    documentation = '', 
                    homepage = '', 
                    issues = '', 
                    license = [
                        ''
                        ], 
                    repository = '', 
                    tags = [
                        ''
                        ], ),
                git_url = '',
                git_commit_sha = ''
            )
        else:
            return UnpaginatedCollectionVersionResponse(
                version = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                signatures = [
                    pulpcore.client.pulp_ansible.models.collection_version_signature_response.CollectionVersionSignatureResponse(
                        signature = '', 
                        pubkey_fingerprint = '', 
                        signing_service = '', 
                        pulp_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
        )
        """

    def testUnpaginatedCollectionVersionResponse(self):
        """Test UnpaginatedCollectionVersionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
