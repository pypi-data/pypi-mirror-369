# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from pulpcore.client.pulp_ansible.models.paginatedansible_collection_version_response_list import PaginatedansibleCollectionVersionResponseList

class TestPaginatedansibleCollectionVersionResponseList(unittest.TestCase):
    """PaginatedansibleCollectionVersionResponseList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaginatedansibleCollectionVersionResponseList:
        """Test PaginatedansibleCollectionVersionResponseList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaginatedansibleCollectionVersionResponseList`
        """
        model = PaginatedansibleCollectionVersionResponseList()
        if include_optional:
            return PaginatedansibleCollectionVersionResponseList(
                count = 123,
                next = 'http://api.example.org/accounts/?offset=400&limit=100',
                previous = 'http://api.example.org/accounts/?offset=200&limit=100',
                results = [
                    pulpcore.client.pulp_ansible.models.ansible/collection_version_response.ansible.CollectionVersionResponse(
                        prn = '', 
                        pulp_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        pulp_href = '', 
                        pulp_labels = {
                            'key' : ''
                            }, 
                        artifact = '', 
                        pulp_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        vuln_report = '', 
                        sha256 = '', 
                        md5 = '', 
                        sha1 = '', 
                        sha224 = '', 
                        sha384 = '', 
                        sha512 = '', 
                        id = '', 
                        authors = [
                            ''
                            ], 
                        contents = [
                            null
                            ], 
                        dependencies = pulpcore.client.pulp_ansible.models.dependencies.dependencies(), 
                        description = '', 
                        docs_blob = pulpcore.client.pulp_ansible.models.docs_blob.docs_blob(), 
                        manifest = pulpcore.client.pulp_ansible.models.manifest.manifest(), 
                        files = pulpcore.client.pulp_ansible.models.files.files(), 
                        documentation = '', 
                        homepage = '', 
                        issues = '', 
                        license = [
                            ''
                            ], 
                        name = '', 
                        namespace = '', 
                        origin_repository = '', 
                        tags = [
                            pulpcore.client.pulp_ansible.models.collection_summary_response_tags_inner.CollectionSummaryResponse_tags_inner(
                                name = '', )
                            ], 
                        version = '', 
                        requires_ansible = '', )
                    ]
            )
        else:
            return PaginatedansibleCollectionVersionResponseList(
                count = 123,
                results = [
                    pulpcore.client.pulp_ansible.models.ansible/collection_version_response.ansible.CollectionVersionResponse(
                        prn = '', 
                        pulp_last_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        pulp_href = '', 
                        pulp_labels = {
                            'key' : ''
                            }, 
                        artifact = '', 
                        pulp_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        vuln_report = '', 
                        sha256 = '', 
                        md5 = '', 
                        sha1 = '', 
                        sha224 = '', 
                        sha384 = '', 
                        sha512 = '', 
                        id = '', 
                        authors = [
                            ''
                            ], 
                        contents = [
                            null
                            ], 
                        dependencies = pulpcore.client.pulp_ansible.models.dependencies.dependencies(), 
                        description = '', 
                        docs_blob = pulpcore.client.pulp_ansible.models.docs_blob.docs_blob(), 
                        manifest = pulpcore.client.pulp_ansible.models.manifest.manifest(), 
                        files = pulpcore.client.pulp_ansible.models.files.files(), 
                        documentation = '', 
                        homepage = '', 
                        issues = '', 
                        license = [
                            ''
                            ], 
                        name = '', 
                        namespace = '', 
                        origin_repository = '', 
                        tags = [
                            pulpcore.client.pulp_ansible.models.collection_summary_response_tags_inner.CollectionSummaryResponse_tags_inner(
                                name = '', )
                            ], 
                        version = '', 
                        requires_ansible = '', )
                    ],
        )
        """

    def testPaginatedansibleCollectionVersionResponseList(self):
        """Test PaginatedansibleCollectionVersionResponseList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
