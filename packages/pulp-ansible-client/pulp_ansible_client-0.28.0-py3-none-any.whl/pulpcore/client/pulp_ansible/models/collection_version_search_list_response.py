# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pulpcore.client.pulp_ansible.models.ansible_ansible_namespace_metadata_response import AnsibleAnsibleNamespaceMetadataResponse
from pulpcore.client.pulp_ansible.models.collection_summary_response import CollectionSummaryResponse
from pulpcore.client.pulp_ansible.models.repository_response import RepositoryResponse
from typing import Optional, Set
from typing_extensions import Self

class CollectionVersionSearchListResponse(BaseModel):
    """
    Cross-repo search results.
    """ # noqa: E501
    repository: RepositoryResponse
    collection_version: CollectionSummaryResponse
    repository_version: Optional[StrictStr] = None
    namespace_metadata: Optional[AnsibleAnsibleNamespaceMetadataResponse]
    is_highest: StrictBool
    is_deprecated: StrictBool
    is_signed: StrictBool
    __properties: ClassVar[List[str]] = ["repository", "collection_version", "repository_version", "namespace_metadata", "is_highest", "is_deprecated", "is_signed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectionVersionSearchListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "repository_version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of repository
        if self.repository:
            _dict['repository'] = self.repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collection_version
        if self.collection_version:
            _dict['collection_version'] = self.collection_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of namespace_metadata
        if self.namespace_metadata:
            _dict['namespace_metadata'] = self.namespace_metadata.to_dict()
        # set to None if namespace_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.namespace_metadata is None and "namespace_metadata" in self.model_fields_set:
            _dict['namespace_metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectionVersionSearchListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "repository": RepositoryResponse.from_dict(obj["repository"]) if obj.get("repository") is not None else None,
            "collection_version": CollectionSummaryResponse.from_dict(obj["collection_version"]) if obj.get("collection_version") is not None else None,
            "repository_version": obj.get("repository_version"),
            "namespace_metadata": AnsibleAnsibleNamespaceMetadataResponse.from_dict(obj["namespace_metadata"]) if obj.get("namespace_metadata") is not None else None,
            "is_highest": obj.get("is_highest"),
            "is_deprecated": obj.get("is_deprecated"),
            "is_signed": obj.get("is_signed")
        })
        return _obj


