{
  "permissions": {
    "allow": [
      "Bash(docker compose:*)",
      "Bash(mkdir:*)",
      "Bash(docker logs:*)",
      "Bash(docker exec:*)",
      "Bash(docker cp:*)",
      "WebSearch",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(chmod:*)",
      "Bash(python test:*)",
      "Bash(python3:*)",
      "Bash(pip3 install:*)",
      "Bash(pip3 uninstall:*)",
      "Bash(grep:*)",
      "Bash(touch:*)",
      "Bash(pip index versions:*)",
      "Bash(pip install:*)",
      "Bash(python:*)",
      "Bash(pipx reinstall:*)",
      "Bash(pipx uninstall:*)",
      "Bash(pipx install:*)",
      "Bash(maos:*)",
      "Bash(rm:*)",
      "Bash(sed:*)",
      "Bash(find:*)",
      "Bash(for file in *.py)",
      "Bash(do sed -i '' 's/from \\.\\.main import/from .._main import/g' \"$file\")",
      "Bash(done)",
      "Bash(PYTHONPATH=src python3 -c \"\nimport os\nos.chdir(''/tmp'')  # Change to tmp to avoid local file issues\n\n# Test initializing orchestrator with fixed config\nprint(''Testing orchestrator initialization...'')\n\ntry:\n    from maos.core.orchestrator import Orchestrator\n    \n    config = {\n        ''state_manager'': {\n            ''auto_checkpoint_interval'': 300,  # Using correct parameter\n            ''max_snapshots'': 50\n        }\n    }\n    \n    orchestrator = Orchestrator(component_config=config)\n    print(''✓ Orchestrator initialized successfully'')\n    \n    # Test state manager\n    print(''✓ State manager working'')\n    \n    print(''\\n✅ ALL CORE COMPONENTS WORK!'')\n    \nexcept Exception as e:\n    print(f''❌ FAILED: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=src python3:*)"
    ],
    "deny": [],
    "ask": []
  },
  "enabledMcpjsonServers": [
    "supabase",
    "firebase",
    "reddit",
    "github",
    "googleanalytics",
    "twilio"
  ]
}