from _typeshed import Incomplete
from typing import Iterator

OTHER_OP_TYPES = complex | int | float
OP_TYPES: Incomplete

class complexint:
    real: int
    imag: int
    def __init__(self, real: int = 0, imag: int = 0) -> None: ...
    def __add__(self, other: OP_TYPES) -> complexint: ...
    def __radd__(self, other: OTHER_OP_TYPES) -> complexint: ...
    def __sub__(self, other: OP_TYPES) -> complexint: ...
    def __rsub__(self, other: OTHER_OP_TYPES) -> complexint: ...
    def __neg__(self) -> complexint: ...
    def __pos__(self) -> complexint: ...
    def __mul__(self, other: OP_TYPES) -> complexint: ...
    def __rmul__(self, other: OTHER_OP_TYPES) -> complexint: ...
    def __truediv__(self, other: OP_TYPES) -> complexint: ...
    def __rtruediv__(self, other: OTHER_OP_TYPES) -> complexint: ...
    def __floordiv__(self, other: OP_TYPES) -> complexint: ...
    def __rfloordiv__(self, other: OTHER_OP_TYPES) -> complexint: ...
    def __pow__(self, power, modulo: None = None) -> complexint: ...
    def __abs__(self) -> complexint: ...
    def __iter__(self) -> Iterator: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...

C1: Incomplete
