Metadata-Version: 2.4
Name: bot-vision-suite
Version: 1.0.4
Summary: Advanced GUI automation with OCR and image recognition
Author-email: Automation Suite Developer <matheuszwilkdev@gmail.com>
License-Expression: MIT
Project-URL: Homepage, https://github.com/matheuszwilk/bot-vision-suite
Project-URL: Documentation, https://github.com/matheuszwilk/bot-vision-suite#readme
Project-URL: Repository, https://github.com/matheuszwilk/bot-vision-suite.git
Project-URL: Bug Tracker, https://github.com/matheuszwilk/bot-vision-suite/issues
Keywords: automation,gui,ocr,image-recognition,rpa,bot,desktop-automation
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Desktop Environment
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: PyAutoGUI==0.9.54
Requires-Dist: pytesseract
Requires-Dist: opencv-python==4.9.0.80
Requires-Dist: Pillow>=10.0.0
Requires-Dist: numpy==1.26.4
Requires-Dist: pyperclip>=1.8.2
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=5.0.0; extra == "dev"
Provides-Extra: automation
Requires-Dist: keyboard==0.13.5; extra == "automation"
Requires-Dist: MouseInfo==0.1.3; extra == "automation"
Requires-Dist: setuptools; extra == "automation"
Requires-Dist: pandas; extra == "automation"
Provides-Extra: ai
Requires-Dist: openai>=1.0.0; extra == "ai"
Provides-Extra: web
Requires-Dist: webdriver-manager>=4.0.0; extra == "web"
Dynamic: license-file

# Bot Vision Suite

![Python](https://img.shields.io/badge/python-3.8+-blue.svg)
![License](https://img.shields.io/badge/license-MIT-green.svg)
![Status](https://img.shields.io/badge/status-beta-orange.svg)

**Bot Vision Suite** √© uma biblioteca Python avan√ßada para automa√ß√£o de interface gr√°fica que combina reconhecimento √≥ptico de caracteres (OCR) otimizado com detec√ß√£o de imagens para executar tarefas automatizadas em aplica√ß√µes desktop.

## üöÄ Caracter√≠sticas Principais

- **OCR Avan√ßado**: M√∫ltiplas t√©cnicas de pr√©-processamento para m√°xima precis√£o
- **Detec√ß√£o de Imagens**: Localiza√ß√£o robusta com diferentes escalas e n√≠veis de confian√ßa
- **üÜï Imagens Relativas**: Busca target pr√≥ximo a imagem √¢ncora (anti-duplica√ß√£o)
- **üÜï Clique em Coordenadas**: Clique direto em posi√ß√µes espec√≠ficas
- **üÜï Comandos de Teclado**: 100+ comandos pr√©-definidos (F1-F12, Ctrl+S, etc.)
- **üÜï Digita√ß√£o Avan√ßada**: Suporte a comandos especiais em texto
- **Automa√ß√£o de Tasks**: Sistema flex√≠vel para automa√ß√£o de sequ√™ncias complexas
- **Backtrack Inteligente**: Retry autom√°tico com navega√ß√£o para tarefas anteriores
- **Overlay Visual**: Feedback visual para debug e monitoramento
- **Configura√ß√£o Autom√°tica**: Detecta automaticamente Tesseract e depend√™ncias
- **Multiplataforma**: Windows, Linux e macOS

## üì¶ Instala√ß√£o

```bash
pip install bot-vision-suite
```

### Pr√©-requisitos

A biblioteca detecta automaticamente o Tesseract OCR. Se n√£o estiver instalado:

**Windows:**
```bash
# Baixe de: https://github.com/UB-Mannheim/tesseract/wiki
```

**Linux:**
```bash
sudo apt-get install tesseract-ocr
```

**macOS:**
```bash
brew install tesseract
```

## üéØ Uso R√°pido

### Exemplo B√°sico

```python
from bot_vision import execute_tasks

# Defina suas tasks de automa√ß√£o
tasks = [
    {
        'text': 'Login',
        'region': (100, 100, 500, 300),
        'char_type': 'letters',
        'delay': 1
    },
    {
        'image': 'botao_confirmar.png',
        'confidence': 0.9,
        'delay': 2
    }
]

# Execute a automa√ß√£o
execute_tasks(tasks)
```

### Uso com Classe

```python
from bot_vision import BotVision

# Inicialize o bot
bot = BotVision()

# Execute tasks
bot.execute_tasks(tasks)

# Ou use m√©todos individuais
location = bot.find_text("Confirmar", region=(0, 0, 800, 600))
if location:
    bot.click_at(location)
```

### Fun√ß√µes de Conveni√™ncia

```python
from bot_vision import (find_text, click_text, click_image, click_at,
                        find_relative_image, click_relative_image,     # üÜï NOVO!
                        click_coordinates, type_text_standalone,        # üÜï NOVO!
                        keyboard_command_standalone)                    # üÜï NOVO!

# Funcionalidades tradicionais
location = find_text("Login", region=(100, 100, 500, 300))
success = click_text("Confirmar", region=(200, 200, 600, 400))
success = click_image("botao.png", confidence=0.9)
success = click_at(300, 250, show_overlay=False)

# üÜï NOVAS FUNCIONALIDADES
# Imagem relativa - busca target pr√≥ximo a √¢ncora
location = find_relative_image("anchor.png", "target.png", max_distance=150)
success = click_relative_image("warning.png", "ok_button.png", backtrack=True)

# Clique em coordenadas espec√≠ficas
success = click_coordinates(100, 200, delay=1, mouse_button="right", backtrack=True)

# üÜï NOVO! Apenas mover o mouse (hover) sem clicar
success = click_text("Menu", mouse_button="move_to")  # Apenas move mouse para o texto
success = click_image("botao.png", mouse_button="move_to")  # Apenas move mouse para a imagem
success = click_coordinates(100, 200, mouse_button="move_to")  # Move mouse para coordenada

# Digita√ß√£o avan√ßada com comandos especiais
success = type_text_standalone("{ctrl}a{del}Novo texto{enter}", backtrack=True)

# Comandos de teclado (100+ pr√©-definidos)
success = keyboard_command_standalone("Ctrl+S", delay=1, backtrack=True)
success = keyboard_command_standalone("F7", backtrack=True)  # Oracle Forms

# Ver lista completa de comandos
commands = get_available_keyboard_commands()
print(f"Total de comandos: {len(commands)}")
```

### Controle de Overlay Visual

Por padr√£o, a Bot Vision Suite exibe uma marca√ß√£o vermelha antes de executar cliques para facilitar o debug. Este comportamento pode ser controlado:

```python
from bot_vision import BotVision

bot = BotVision()

# Com overlay habilitado (comportamento padr√£o)
bot.click_text("Login", show_overlay=True)

# Sem overlay (execu√ß√£o silenciosa)
bot.click_text("Login", show_overlay=False)

# Aplica-se a todos os m√©todos de clique
bot.click_image("botao.png", show_overlay=False)
bot.click_at(100, 200, show_overlay=False)
```

## üîß Configura√ß√£o de Tasks

### Formato de Task Tradicional

```python
task = {
    'text': 'Texto a buscar',           # OU 'image': 'caminho/imagem.png'
    'region': (x, y, width, height),    # Regi√£o onde buscar
    'char_type': 'letters',             # 'numbers', 'letters', 'both'
    'delay': 2,                         # Delay ap√≥s a√ß√£o (segundos)
    'confidence': 0.9,                  # Para imagens (0.0-1.0)
    'mouse_button': 'left',             # 'left', 'right', 'double', 'move_to'
    'backtrack': True,                  # Voltar em caso de falha
    'sendtext': 'Texto a digitar',      # Texto ap√≥s clique
    'occurrence': 1,                    # Qual ocorr√™ncia clicar
    'early_confidence': 75.0,           # Limiar para a√ß√£o imediata
    'show_overlay': True                # Exibir marca√ß√£o visual (padr√£o: True)
}
```

### üÜï Novos Tipos de Tarefa

```python
# 1. Imagem Relativa - Busca target pr√≥ximo a √¢ncora
{
    'type': 'relative_image',
    'anchor_image': 'warning_icon.png',     # Imagem √¢ncora √∫nica
    'target_image': 'ok_button.png',        # Imagem target pr√≥xima
    'max_distance': 200,                    # Dist√¢ncia m√°xima em pixels
    'confidence': 0.9,
    'target_region': (0, 0, 800, 600),     # Regi√£o para buscar target (opcional)
    'specific': True,
    'backtrack': True,
    'delay': 1
}

# 2. Clique em Coordenadas Espec√≠ficas
{
    'type': 'click',
    'x': 500,                              # Coordenada X
    'y': 300,                              # Coordenada Y
    'mouse_button': 'right',               # 'left', 'right', 'double', 'move_to'
    'delay': 0.5,
    'backtrack': False
}

# 3. Digita√ß√£o Direta de Texto
{
    'type': 'type_text',
    'text': 'Hello World!',               # Texto a digitar
    'interval': 0.05,                     # Intervalo entre caracteres
    'delay': 1
}

# 4. Comando de Teclado
{
    'type': 'keyboard_command',
    'command': 'Ctrl+S',                  # Comando a executar
    'delay': 1
}
```

### Lista Completa de Comandos de Teclado Suportados

```python
# Comandos do Sistema (Oracle Forms, etc.)
'F5', 'F6', 'F7', 'F8', 'F12'
'Ctrl+S', 'Ctrl+E', 'Ctrl+F11'
'Shift+F5', 'Shift+F6', 'Ctrl+Up', 'Ctrl+Down'

# Comandos Gerais
'Ctrl+C', 'Ctrl+V', 'Ctrl+X', 'Ctrl+A', 'Ctrl+Z', 'Ctrl+Y'
'Tab', 'Enter', 'Escape', 'Delete', 'Backspace'
'Arrow Up', 'Arrow Down', 'Arrow Left', 'Arrow Right'
'Home', 'End', 'Page Up', 'Page Down'

# Comandos de Navegador
'Ctrl+T', 'Ctrl+W', 'Ctrl+R', 'Ctrl+Shift+T'

# Comandos de Sistema
'Alt+Tab', 'Alt+F4', 'Windows+D', 'Windows+L'

# E muito mais... Use get_available_keyboard_commands() para ver todos
```
    'occurrence': 1,                    # Qual ocorr√™ncia clicar
    'early_confidence': 75.0            # Limiar para a√ß√£o imediata
}
```

### Comandos Especiais em SendText

```python
{
    'text': 'Campo',
    'sendtext': '{ctrl}a{del}Novo texto{enter}'
}
```

Comandos dispon√≠veis: `{ctrl}a`, `{del}`, `{tab}`, `{enter}`

## üé® Exemplos Avan√ßados

### Automa√ß√£o Completa

```python
from bot_vision import BotVision
import calendar
from datetime import datetime

# Configura√ß√£o customizada
config = {
    "confidence_threshold": 80.0,
    "retry_attempts": 5,
    "overlay_color": "blue"
}

bot = BotVision(config=config)

# Vari√°veis din√¢micas
primeiro_dia = str(1)
ultimo_dia = str(calendar.monthrange(datetime.now().year, datetime.now().month)[1])

# Tasks complexas
tasks = [
    {
        'text': 'Data Inicial',
        'region': (100, 100, 300, 200),
        'char_type': 'letters',
        'sendtext': f'{primeiro_dia}/01/{datetime.now().year}',
        'delay': 1
    },
    {
        'text': 'Data Final', 
        'region': (100, 250, 300, 200),
        'char_type': 'letters',
        'sendtext': f'{ultimo_dia}/12/{datetime.now().year}',
        'delay': 1
    },
    {
        'image': 'processar.png',
        'confidence': 0.8,
        'delay': 3,
        'backtrack': True
    }
]

# Execute
bot.execute_tasks(tasks)
```

### OCR Espec√≠fico

```python
# Apenas mover o mouse para elementos (hover)
from bot_vision import click_text, click_image, click_coordinates

# Hover em texto (mover mouse sem clicar)
success = click_text("Menu", mouse_button="move_to", delay=0.5)

# Hover em imagem
success = click_image("button.png", mouse_button="move_to", delay=1.0)

# Hover em coordenadas espec√≠ficas
success = click_coordinates(100, 200, mouse_button="move_to", delay=0.5)

# Usar com tasks
hover_tasks = [
    {
        'text': 'Tooltip trigger',
        'mouse_button': 'move_to',  # Apenas posiciona o mouse
        'delay': 2.0                # Espera para tooltip aparecer
    },
    {
        'text': 'Click here',       # Agora clica em outro elemento
        'mouse_button': 'left',
        'delay': 1.0
    }
]
```

```python
from bot_vision import OCREngine
from PIL import Image

# Carregue uma imagem
img = Image.open('screenshot.png')

# Initialize OCR engine
ocr = OCREngine()

# Extraia todo o texto
results = ocr.extract_all_text(img, filter_type='numbers')

for result in results:
    print(f"Texto: {result.text}, Confian√ßa: {result.confidence}")
```

### Processamento de Imagem

```python
from bot_vision import ImageProcessor
from PIL import Image

# Carregue imagem
img = Image.open('documento.png')

# Processe para OCR
processor = ImageProcessor(methods=['hsv_enhancement', 'dark_background'])
processed_images = processor.preprocess_for_ocr(img)

print(f"Geradas {len(processed_images)} varia√ß√µes para OCR")
```

## üîç Debugging e Visualiza√ß√£o

```python
from bot_vision import show_overlay, show_multiple_overlays

# Mostrar regi√£o √∫nica
show_overlay((100, 100, 200, 50), duration=2000, color="red")

# Mostrar m√∫ltiplas regi√µes
regions = [(100, 100, 200, 50), (300, 200, 150, 30)]
show_multiple_overlays(regions, duration=3000, color="green")
```

## üìö Migra√ß√£o do C√≥digo Existente

Se voc√™ j√° tem um arquivo `tasks_config.py`, a migra√ß√£o √© simples:

### Antes (c√≥digo antigo):
```python
# bot_vision.py executado diretamente
from tasks_config import tasks
# ... c√≥digo complexo ...
```

### Depois (usando a biblioteca):
```python
# seu_bot.py
from bot_vision import execute_tasks
from tasks_config import tasks  # mesmo arquivo!

execute_tasks(tasks)  # uma linha!
```

## üõ†Ô∏è Configura√ß√£o Avan√ßada

```python
from bot_vision import BotVisionConfig, BotVision

# Configura√ß√£o personalizada
config = BotVisionConfig({
    "tesseract_path": "/custom/path/tesseract",
    "confidence_threshold": 85.0,
    "retry_attempts": 3,
    "overlay_duration": 1500,
    "overlay_color": "blue",
    "ocr_languages": ["eng", "por"],
    "log_level": "DEBUG"
})

bot = BotVision(config=config)
```

## üîß Desenvolvimento

### Estrutura do Projeto

```
bot-vision-suite/
‚îú‚îÄ‚îÄ bot_vision/
‚îÇ   ‚îú‚îÄ‚îÄ core/           # M√≥dulos principais
‚îÇ   ‚îú‚îÄ‚îÄ utils/          # Utilit√°rios
‚îÇ   ‚îî‚îÄ‚îÄ exceptions.py   # Exce√ß√µes customizadas
‚îú‚îÄ‚îÄ tests/              # Testes automatizados
‚îú‚îÄ‚îÄ docs/               # Documenta√ß√£o
‚îî‚îÄ‚îÄ examples/           # Exemplos de uso
```

### Executar Testes

```bash
pip install bot-vision-suite[dev]
pytest tests/
```

## ü§ù Contribuindo

1. Fork o projeto
2. Crie uma branch (`git checkout -b feature/nova-funcionalidade`)
3. Commit suas mudan√ßas (`git commit -am 'Adiciona nova funcionalidade'`)
4. Push para a branch (`git push origin feature/nova-funcionalidade`)
5. Abra um Pull Request

## üìÑ Licen√ßa

Este projeto est√° licenciado sob a Licen√ßa MIT - veja o arquivo [LICENSE](LICENSE) para detalhes.

## üÜò Suporte

- **Documenta√ß√£o**: [Documenta√ß√£o Completa](docs/)
- **Issues**: [GitHub Issues](https://github.com/automation-suite/bot-vision-suite/issues)
- **Exemplos**: [Pasta de Exemplos](examples/)

## üôè Agradecimentos

- [Tesseract OCR](https://github.com/tesseract-ocr/tesseract) pela engine de OCR
- [PyAutoGUI](https://github.com/asweigart/pyautogui) pela automa√ß√£o de interface
- [OpenCV](https://opencv.org/) pelo processamento de imagem
- [Pillow](https://python-pillow.org/) pela manipula√ß√£o de imagens

---

**Bot Vision Suite** - Automatize sua interface gr√°fica com precis√£o! ü§ñ‚ú®
