[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "braze-mcp-server"
version = "1.0.1"
description = "Braze MCP Server - Model Context Protocol server for Braze REST API Read-Only access"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "McKay Harris", email = "mckay.harris@braze.com"},
    {name = "Mohammad Atallah", email = "M.Atallah@braze.com"},
]
license = {text = "MIT"}
homepage = "https://github.com/braze-inc/braze_mcp_server"
repository = "https://github.com/braze-inc/braze_mcp_server"
keywords = ["braze", "mcp", "model-context-protocol", "ai", "api", "marketing", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastapi[standard]>=0.116.1",
    "httpx>=0.28.1",
    "mcp[cli]>=1.11.0",
    "python-dotenv>=1.1.1",
]

[project.optional-dependencies]
dev = [
    "bandit>=1.8.6",
    "mypy>=1.17.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.3",
    "twine>=5.0.0",
]

[project.scripts]
braze-mcp-server = "braze_mcp.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src/braze_mcp"]

[tool.coverage.run]
source = ["src"]
omit = [
    "src/braze_mcp/main.py",
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 100
target-version = "py312"
preview = true

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "T20",   # flake8-print (catches print statements)
    "LOG",   # flake8-logging (catches direct logging.* calls)
    "G",     # flake8-logging-format (catches logging format issues)
    "TRY4",  # tryceratops (catches logging.error instead of logging.exception)
    "E301",  # expected 1 blank line, found 0
    "E302",  # expected 2 blank lines, found N  
    "E303",  # too many blank lines
    "E304",  # blank lines found after function decorator
    "E305",  # expected 2 blank lines after class or function definition
]
ignore = [
    "E501",  # line too long, handled by formatter
    "G004",  # f-strings in logging - allow f-strings in logging
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
markers = [
    "real_api: marks tests that make real HTTP requests to Braze API (run with BRAZE_REAL_API_TEST=1)",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
