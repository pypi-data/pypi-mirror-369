[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-commander"
version = "0.1.1"
description = "Cross-platform command-line tool for managing MCP (Model Context Protocol) servers across editors"
authors = [
    {name = "Evandro Camargo", email = "evandro@camargo.uk"}
]
maintainers = [
    {name = "Evandro Camargo", email = "evandro@camargo.uk"}
]
readme = "README.md"
license = {text = "Apache-2.0"}
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development",
    "Topic :: System :: Systems Administration",
    "Topic :: Terminals",
    "Topic :: Utilities",
    "Typing :: Typed",
]
keywords = ["mcp", "model-context-protocol", "claude", "cursor", "vscode", "cli"]

dependencies = [
    "colorama>=0.4.6",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]
build = [
    "build>=0.10.0",
    "twine>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/nmindz/mcp-commander"
Repository = "https://github.com/nmindz/mcp-commander"
Issues = "https://github.com/nmindz/mcp-commander/issues"
Documentation = "https://github.com/nmindz/mcp-commander#readme"

[project.scripts]
mcp = "mcpcommander.cli.main:main"
mcp-commander = "mcpcommander.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
mcpcommander = ["py.typed"]


# MyPy configuration
[tool.mypy]
python_version = "0.1.1"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=mcpcommander",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=25",
    "-ra",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow-running tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/mcpcommander"]
omit = [
    "tests/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff configuration
[tool.ruff]
target-version = "0.1.1"
line-length = 100
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by ruff formatter
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
    "N806",  # variable in function should be lowercase
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S608", "S602"]
"src/mcpcommander/schemas/*" = ["N805"]  # Pydantic validators use cls parameter
"run.py" = ["E402"]  # Module level import needed after sys.path modification

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]
