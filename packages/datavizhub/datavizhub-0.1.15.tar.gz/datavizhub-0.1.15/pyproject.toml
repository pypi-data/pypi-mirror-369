[tool.poetry]
name = "datavizhub"
version = "0.1.15"
description = "A tool to ingest data from various sources and formats, create imagery or video based on that data, and send the results to various locations for dissemination."
authors = ["Eric Hackathorn <eric.j.hackathorn@noaa.gov>"]
include = [
    "src/datavizhub/assets/**",
]
license = "MIT"
readme = "README.md"
packages = [
    { include = "datavizhub", from = "src" }
]

[tool.poetry.urls]
Homepage = "https://github.com/NOAA-GSL/datavizhub"
Documentation = "https://github.com/NOAA-GSL/datavizhub/blob/main/README.md"
Source = "https://github.com/NOAA-GSL/datavizhub"
Tracker = "https://github.com/NOAA-GSL/datavizhub/issues"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
python-dotenv = "^0.19.1"

# Optional feature dependencies (installed via extras)
boto3 = { version = "^1.17", optional = true }
PyVimeo = { version = "^1.0", optional = true }
requests = { version = "^2.25", optional = true }
pygrib = { version = "^2.1.5", optional = true }
scipy = { version = "^1.12.0", optional = true }
siphon = { version = "^0.9", optional = true }
cartopy = { version = "^0.22.0", optional = true }
matplotlib = { version = "^3.8.3", optional = true }
netcdf4 = { version = "^1.6.5", optional = true }
xarray = { version = "^2024.3.0", optional = true }
ffmpeg-python = { version = "^0.2.0", optional = true }
cfgrib = { version = "^0.9.12.0", optional = true }
rioxarray = { version = "^0.15.5", optional = true }
rasterio = { version = "^1.3.9", optional = true }

# -------------------------------------------------------------------
# Optional dependency groups
# Install examples:
#   pip install "datavizhub[datatransfer]"   # S3, HTTP, Vimeo transfers
#   pip install "datavizhub[processing]"     # GRIB2, NetCDF, GeoTIFF + processing
#   pip install "datavizhub[visualization]"  # Cartopy/Matplotlib plotting
#   pip install "datavizhub[grib2]"          # Minimal GRIB2 decoding
#   pip install "datavizhub[netcdf]"         # Minimal NetCDF handling
#   pip install "datavizhub[geotiff]"        # Minimal GeoTIFF export
#   pip install "datavizhub[all]"            # Everything (full dev/test)
#
# Documentation:
#   Wiki (design, architecture, vision): https://github.com/NOAA-GSL/datavizhub/wiki
#   API Reference & Examples: https://noaa-gsl.github.io/datavizhub/
# -------------------------------------------------------------------
[tool.poetry.extras]
# Transfer-only dependencies
datatransfer = [
    "boto3",
    "PyVimeo",
    "requests",
]

# Processing extra now includes GRIB2, NetCDF, and raster exports
processing = [
    "scipy",
    "siphon",
    "ffmpeg-python",
    "cfgrib",
    "pygrib",
    "netcdf4",
    "xarray",
    "rioxarray",
    "rasterio",
]

# Visualization-only dependencies
visualization = [
    "cartopy",
    "matplotlib",
    "xarray",
    "scipy",
    "pandas",
    "contextily",
]

# Interactive visualization (optional)
interactive = [
    "folium",
    "plotly",
]

# Focused extras for targeted installs
grib2 = [
    "cfgrib",
    "pygrib",
]
netcdf = [
    "netcdf4",
    "xarray",
]
geotiff = [
    "rioxarray",
    "rasterio",
]

# All-in-one install
all = [
    # Data transfer
    "boto3",
    "PyVimeo",
    "requests",
    # Processing (includes GRIB2/NetCDF/GeoTIFF deps)
    "scipy",
    "siphon",
    "ffmpeg-python",
    "cfgrib",
    "pygrib",
    "netcdf4",
    "xarray",
    "rioxarray",
    "rasterio",
    # Visualization
    "cartopy",
    "matplotlib",
    "contextily",
]

[tool.poetry.scripts]
datavizhub = "datavizhub.cli:main"

[tool.poetry.group.dev.dependencies]
coverage = "^7.4.0"
py = ">=1.11.0"
pytest = "^7.4"
pytest-cov = "^4.1"
ruff = "^0.1.6"
ipykernel = "^6.30.1"

[tool.poetry.plugins."poetry.plugin"]
"dynamic-versioning" = "poetry_dynamic_versioning"

[tool.poetry-dynamic-versioning]
enable = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-s -v --durations=0"
cache_dir = ".cache/pytest_cache"
markers = [
    "cli: marks tests that invoke the CLI",
    "pipeline: marks tests that run the pipeline runner",
]

[tool.coverage.run]
branch = true
source = ["src"]
command_line = "-m pytest"

[tool.coverage.report]
show_missing = true

[tool.coverage.xml]
output = "coverage.xml"
