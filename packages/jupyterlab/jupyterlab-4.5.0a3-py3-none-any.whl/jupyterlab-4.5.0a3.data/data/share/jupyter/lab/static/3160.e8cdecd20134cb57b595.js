"use strict";(self["webpackChunk_jupyterlab_application_top"]=self["webpackChunk_jupyterlab_application_top"]||[]).push([[3160],{97134:(e,n,t)=>{t.d(n,{A:()=>o});var r=t(59386);var a=4;function i(e){return(0,r.A)(e,a)}const o=i},3160:(e,n,t)=>{t.r(n);t.d(n,{render:()=>T});var r=t(77497);var a=t(50134);var i=t(37721);var o=t(84034);var s=t(10471);var d=t(34505);var c=t(46077);var l=t(82211);var g=t(89523);var f=t(97134);var u=t(8937);var p=t(65791);function h(e){var n={options:{directed:e.isDirected(),multigraph:e.isMultigraph(),compound:e.isCompound()},nodes:m(e),edges:w(e)};if(!g.A(e.graph())){n.value=f.A(e.graph())}return n}function m(e){return u.A(e.nodes(),(function(n){var t=e.node(n);var r=e.parent(n);var a={v:n};if(!g.A(t)){a.value=t}if(!g.A(r)){a.parent=r}return a}))}function w(e){return u.A(e.edges(),(function(n){var t=e.edge(n);var r={v:n.v,w:n.w};if(!g.A(n.name)){r.name=n.name}if(!g.A(t)){r.value=t}return r}))}function v(e){var n=new Graph(e.options).setGraph(e.value);_.each(e.nodes,(function(e){n.setNode(e.v,e.value);if(e.parent){n.setParent(e.v,e.parent)}}));_.each(e.edges,(function(e){n.setEdge({v:e.v,w:e.w,name:e.name},e.value)}));return n}var R=t(84416);var y=new Map;var X=new Map;var b=new Map;var E=(0,c.K2)((()=>{X.clear();b.clear();y.clear()}),"clear");var N=(0,c.K2)(((e,n)=>{const t=X.get(n)||[];c.Rm.trace("In isDescendant",n," ",e," = ",t.includes(e));return t.includes(e)}),"isDescendant");var C=(0,c.K2)(((e,n)=>{const t=X.get(n)||[];c.Rm.info("Descendants of ",n," is ",t);c.Rm.info("Edge is ",e);if(e.v===n||e.w===n){return false}if(!t){c.Rm.debug("Tilt, ",n,",not in descendants");return false}return t.includes(e.v)||N(e.v,n)||N(e.w,n)||t.includes(e.w)}),"edgeInCluster");var S=(0,c.K2)(((e,n,t,r)=>{c.Rm.warn("Copying children of ",e,"root",r,"data",n.node(e),r);const a=n.children(e)||[];if(e!==r){a.push(e)}c.Rm.warn("Copying (nodes) clusterId",e,"nodes",a);a.forEach((a=>{if(n.children(a).length>0){S(a,n,t,r)}else{const i=n.node(a);c.Rm.info("cp ",a," to ",r," with parent ",e);t.setNode(a,i);if(r!==n.parent(a)){c.Rm.warn("Setting parent",a,n.parent(a));t.setParent(a,n.parent(a))}if(e!==r&&a!==e){c.Rm.debug("Setting parent",a,e);t.setParent(a,e)}else{c.Rm.info("In copy ",e,"root",r,"data",n.node(e),r);c.Rm.debug("Not Setting parent for node=",a,"cluster!==rootId",e!==r,"node!==clusterId",a!==e)}const o=n.edges(a);c.Rm.debug("Copying Edges",o);o.forEach((a=>{c.Rm.info("Edge",a);const i=n.edge(a.v,a.w,a.name);c.Rm.info("Edge data",i,r);try{if(C(a,r)){c.Rm.info("Copying as ",a.v,a.w,i,a.name);t.setEdge(a.v,a.w,i,a.name);c.Rm.info("newGraph edges ",t.edges(),t.edge(t.edges()[0]))}else{c.Rm.info("Skipping copy of edge ",a.v,"--\x3e",a.w," rootId: ",r," clusterId:",e)}}catch(o){c.Rm.error(o)}}))}c.Rm.debug("Removing node",a);n.removeNode(a)}))}),"copy");var x=(0,c.K2)(((e,n)=>{const t=n.children(e);let r=[...t];for(const a of t){b.set(a,e);r=[...r,...x(a,n)]}return r}),"extractDescendants");var I=(0,c.K2)(((e,n,t)=>{const r=e.edges().filter((e=>e.v===n||e.w===n));const a=e.edges().filter((e=>e.v===t||e.w===t));const i=r.map((e=>({v:e.v===n?t:e.v,w:e.w===n?n:e.w})));const o=a.map((e=>({v:e.v,w:e.w})));const s=i.filter((e=>o.some((n=>e.v===n.v&&e.w===n.w))));return s}),"findCommonEdges");var D=(0,c.K2)(((e,n,t)=>{const r=n.children(e);c.Rm.trace("Searching children of id ",e,r);if(r.length<1){return e}let a;for(const i of r){const e=D(i,n,t);const r=I(n,t,e);if(e){if(r.length>0){a=e}else{return e}}}return a}),"findNonClusterChild");var A=(0,c.K2)((e=>{if(!y.has(e)){return e}if(!y.get(e).externalConnections){return e}if(y.has(e)){return y.get(e).id}return e}),"getAnchorId");var O=(0,c.K2)(((e,n)=>{if(!e||n>10){c.Rm.debug("Opting out, no graph ");return}else{c.Rm.debug("Opting in, graph ")}e.nodes().forEach((function(n){const t=e.children(n);if(t.length>0){c.Rm.warn("Cluster identified",n," Replacement id in edges: ",D(n,e,n));X.set(n,x(n,e));y.set(n,{id:D(n,e,n),clusterData:e.node(n)})}}));e.nodes().forEach((function(n){const t=e.children(n);const r=e.edges();if(t.length>0){c.Rm.debug("Cluster identified",n,X);r.forEach((e=>{const t=N(e.v,n);const r=N(e.w,n);if(t^r){c.Rm.warn("Edge: ",e," leaves cluster ",n);c.Rm.warn("Descendants of XXX ",n,": ",X.get(n));y.get(n).externalConnections=true}}))}else{c.Rm.debug("Not a cluster ",n,X)}}));for(let t of y.keys()){const n=y.get(t).id;const r=e.parent(n);if(r!==t&&y.has(r)&&!y.get(r).externalConnections){y.get(t).id=r}}e.edges().forEach((function(n){const t=e.edge(n);c.Rm.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n));c.Rm.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let r=n.v;let a=n.w;c.Rm.warn("Fix XXX",y,"ids:",n.v,n.w,"Translating: ",y.get(n.v)," --- ",y.get(n.w));if(y.get(n.v)||y.get(n.w)){c.Rm.warn("Fixing and trying - removing XXX",n.v,n.w,n.name);r=A(n.v);a=A(n.w);e.removeEdge(n.v,n.w,n.name);if(r!==n.v){const a=e.parent(r);y.get(a).externalConnections=true;t.fromCluster=n.v}if(a!==n.w){const r=e.parent(a);y.get(r).externalConnections=true;t.toCluster=n.w}c.Rm.warn("Fix Replacing with XXX",r,a,n.name);e.setEdge(r,a,t,n.name)}}));c.Rm.warn("Adjusted Graph",h(e));k(e,0);c.Rm.trace(y)}),"adjustClustersAndEdges");var k=(0,c.K2)(((e,n)=>{c.Rm.warn("extractor - ",n,h(e),e.children("D"));if(n>10){c.Rm.error("Bailing out");return}let t=e.nodes();let r=false;for(const a of t){const n=e.children(a);r=r||n.length>0}if(!r){c.Rm.debug("Done, no node has children",e.nodes());return}c.Rm.debug("Nodes = ",t,n);for(const a of t){c.Rm.debug("Extracting node",a,y,y.has(a)&&!y.get(a).externalConnections,!e.parent(a),e.node(a),e.children("D")," Depth ",n);if(!y.has(a)){c.Rm.debug("Not a cluster",a,n)}else if(!y.get(a).externalConnections&&e.children(a)&&e.children(a).length>0){c.Rm.warn("Cluster without external connections, without a parent and with children",a,n);const t=e.graph();let r=t.rankdir==="TB"?"LR":"TB";if(y.get(a)?.clusterData?.dir){r=y.get(a).clusterData.dir;c.Rm.warn("Fixing dir",y.get(a).clusterData.dir,r)}const i=new R.T({multigraph:true,compound:true}).setGraph({rankdir:r,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));c.Rm.warn("Old graph before copy",h(e));S(a,e,i,a);e.setNode(a,{clusterNode:true,id:a,clusterData:y.get(a).clusterData,label:y.get(a).label,graph:i});c.Rm.warn("New graph after copy node: (",a,")",h(i));c.Rm.debug("Old graph after copy",h(e))}else{c.Rm.warn("Cluster ** ",a," **not meeting the criteria !externalConnections:",!y.get(a).externalConnections," no parent: ",!e.parent(a)," children ",e.children(a)&&e.children(a).length>0,e.children("D"),n);c.Rm.debug(y)}}t=e.nodes();c.Rm.warn("New list of nodes",t);for(const a of t){const t=e.node(a);c.Rm.warn(" Now next level",a,t);if(t?.clusterNode){k(t.graph,n+1)}}}),"extractor");var G=(0,c.K2)(((e,n)=>{if(n.length===0){return[]}let t=Object.assign([],n);n.forEach((n=>{const r=e.children(n);const a=G(e,r);t=[...t,...a]}));return t}),"sorter");var K=(0,c.K2)((e=>G(e,e.children())),"sortNodesByHierarchy");var P=(0,c.K2)((async(e,n,t,a,s,d)=>{c.Rm.warn("Graph in recursive render:XAX",h(n),s);const g=n.graph().rankdir;c.Rm.trace("Dir in recursive render - dir:",g);const f=e.insert("g").attr("class","root");if(!n.nodes()){c.Rm.info("No nodes found for",n)}else{c.Rm.info("Recursive render XXX",n.nodes())}if(n.edges().length>0){c.Rm.info("Recursive edges",n.edge(n.edges()[0]))}const u=f.insert("g").attr("class","clusters");const p=f.insert("g").attr("class","edgePaths");const m=f.insert("g").attr("class","edgeLabels");const w=f.insert("g").attr("class","nodes");await Promise.all(n.nodes().map((async function(e){const r=n.node(e);if(s!==void 0){const t=JSON.parse(JSON.stringify(s.clusterData));c.Rm.trace("Setting data for parent cluster XXX\n Node.id = ",e,"\n data=",t.height,"\nParent cluster",s.height);n.setNode(s.id,t);if(!n.parent(e)){c.Rm.trace("Setting parent",e,s.id);n.setParent(e,s.id,t)}}c.Rm.info("(Insert) Node XXX"+e+": "+JSON.stringify(n.node(e)));if(r?.clusterNode){c.Rm.info("Cluster identified XBX",e,r.width,n.node(e));const{ranksep:o,nodesep:s}=n.graph();r.graph.setGraph({...r.graph.graph(),ranksep:o+25,nodesep:s});const l=await P(w,r.graph,t,a,n.node(e),d);const g=l.elem;(0,i.lC)(r,g);r.diff=l.diff||0;c.Rm.info("New compound node after recursive render XAX",e,"width",r.width,"height",r.height);(0,i.U7)(g,r)}else{if(n.children(e).length>0){c.Rm.trace("Cluster - the non recursive path XBX",e,r.id,r,r.width,"Graph:",n);c.Rm.trace(D(r.id,n));y.set(r.id,{id:D(r.id,n),node:r})}else{c.Rm.trace("Node - the non recursive path XAX",e,w,n.node(e),g);await(0,i.on)(w,n.node(e),{config:d,dir:g})}}})));const v=(0,c.K2)((async()=>{const e=n.edges().map((async function(e){const t=n.edge(e.v,e.w,e.name);c.Rm.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(e));c.Rm.info("Edge "+e.v+" -> "+e.w+": ",e," ",JSON.stringify(n.edge(e)));c.Rm.info("Fix",y,"ids:",e.v,e.w,"Translating: ",y.get(e.v),y.get(e.w));await(0,r.jP)(m,t)}));await Promise.all(e)}),"processEdges");await v();c.Rm.info("Graph before layout:",JSON.stringify(h(n)));c.Rm.info("############################################# XXX");c.Rm.info("###                Layout                 ### XXX");c.Rm.info("############################################# XXX");(0,l.Zp)(n);c.Rm.info("Graph after layout:",JSON.stringify(h(n)));let R=0;let{subGraphTitleTotalMargin:X}=(0,o.O)(d);await Promise.all(K(n).map((async function(e){const t=n.node(e);c.Rm.info("Position XBX => "+e+": ("+t.x,","+t.y,") width: ",t.width," height: ",t.height);if(t?.clusterNode){t.y+=X;c.Rm.info("A tainted cluster node XBX1",e,t.id,t.width,t.height,t.x,t.y,n.parent(e));y.get(t.id).node=t;(0,i.U_)(t)}else{if(n.children(e).length>0){c.Rm.info("A pure cluster node XBX1",e,t.id,t.x,t.y,t.width,t.height,n.parent(e));t.height+=X;n.node(t.parentId);const r=t?.padding/2||0;const a=t?.labelBBox?.height||0;const o=a-r||0;c.Rm.debug("OffsetY",o,"labelHeight",a,"halfPadding",r);await(0,i.U)(u,t);y.get(t.id).node=t}else{const e=n.node(t.parentId);t.y+=X/2;c.Rm.info("A regular node XBX1 - using the padding",t.id,"parent",t.parentId,t.width,t.height,t.x,t.y,"offsetY",t.offsetY,"parent",e,e?.offsetY,t);(0,i.U_)(t)}}})));n.edges().forEach((function(e){const i=n.edge(e);c.Rm.info("Edge "+e.v+" -> "+e.w+": "+JSON.stringify(i),i);i.points.forEach((e=>e.y+=X/2));const o=n.node(e.v);var s=n.node(e.w);const d=(0,r.Jo)(p,i,y,t,o,s,a);(0,r.T_)(i,d)}));n.nodes().forEach((function(e){const t=n.node(e);c.Rm.info(e,t.type,t.diff);if(t.isGroup){R=t.diff}}));c.Rm.warn("Returning from recursive render XAX",f,R);return{elem:f,diff:R}}),"recursiveRender");var T=(0,c.K2)((async(e,n)=>{const t=new R.T({multigraph:true,compound:true}).setGraph({rankdir:e.direction,nodesep:e.config?.nodeSpacing||e.config?.flowchart?.nodeSpacing||e.nodeSpacing,ranksep:e.config?.rankSpacing||e.config?.flowchart?.rankSpacing||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel((function(){return{}}));const a=n.select("g");(0,r.g0)(a,e.markers,e.type,e.diagramId);(0,i.gh)();(0,r.IU)();(0,i.IU)();E();e.nodes.forEach((e=>{t.setNode(e.id,{...e});if(e.parentId){t.setParent(e.id,e.parentId)}}));c.Rm.debug("Edges:",e.edges);e.edges.forEach((e=>{if(e.start===e.end){const n=e.start;const r=n+"---"+n+"---1";const a=n+"---"+n+"---2";const i=t.node(n);t.setNode(r,{domId:r,id:r,parentId:i.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10});t.setParent(r,i.parentId);t.setNode(a,{domId:a,id:a,parentId:i.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10});t.setParent(a,i.parentId);const o=structuredClone(e);const s=structuredClone(e);const d=structuredClone(e);o.label="";o.arrowTypeEnd="none";o.id=n+"-cyclic-special-1";s.arrowTypeStart="none";s.arrowTypeEnd="none";s.id=n+"-cyclic-special-mid";d.label="";if(i.isGroup){o.fromCluster=n;d.toCluster=n}d.id=n+"-cyclic-special-2";d.arrowTypeStart="none";t.setEdge(n,r,o,n+"-cyclic-special-0");t.setEdge(r,a,s,n+"-cyclic-special-1");t.setEdge(a,n,d,n+"-cyc<lic-special-2")}else{t.setEdge(e.start,e.end,{...e},e.id)}}));c.Rm.warn("Graph at first:",JSON.stringify(h(t)));O(t);c.Rm.warn("Graph after XAX:",JSON.stringify(h(t)));const o=(0,c.D7)();await P(a,t,e.type,e.diagramId,void 0,o)}),"render")}}]);