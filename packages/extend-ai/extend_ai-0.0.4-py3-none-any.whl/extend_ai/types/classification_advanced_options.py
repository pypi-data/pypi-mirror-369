# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.serialization import FieldMetadata
from ..core.unchecked_base_model import UncheckedBaseModel
from .classification_advanced_options_context import ClassificationAdvancedOptionsContext
from .classification_advanced_options_page_ranges_item import ClassificationAdvancedOptionsPageRangesItem


class ClassificationAdvancedOptions(UncheckedBaseModel):
    context: typing.Optional[ClassificationAdvancedOptionsContext] = pydantic.Field(default=None)
    """
    The context to use for classification.
    """

    advanced_multimodal_enabled: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="advancedMultimodalEnabled")
    ] = pydantic.Field(default=None)
    """
    Enable advanced multimodal processing for better handling of visual elements during classification.
    """

    fixed_page_limit: typing_extensions.Annotated[typing.Optional[int], FieldMetadata(alias="fixedPageLimit")] = (
        pydantic.Field(default=None)
    )
    """
    Limit processing to a specific number of pages from the beginning of the document.
    """

    page_ranges: typing_extensions.Annotated[
        typing.Optional[typing.List[ClassificationAdvancedOptionsPageRangesItem]], FieldMetadata(alias="pageRanges")
    ] = pydantic.Field(default=None)
    """
    Limit processing to the specified page ranges.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
