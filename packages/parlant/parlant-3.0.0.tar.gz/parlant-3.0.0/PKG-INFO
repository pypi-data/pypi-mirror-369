Metadata-Version: 2.1
Name: parlant
Version: 3.0.0
Summary: 
License: Apache-2.0
Author: Yam Marcovitz
Author-email: yam@emcie.co
Requires-Python: >=3.10,<4.0
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Provides-Extra: anthropic
Provides-Extra: aws
Provides-Extra: cerebras
Provides-Extra: deepseek
Provides-Extra: gemini
Provides-Extra: litellm
Provides-Extra: mongo
Provides-Extra: together
Requires-Dist: aiofiles (>=24.1.0,<25.0.0)
Requires-Dist: aiopenapi3 (==0.8.1)
Requires-Dist: aiorwlock (>=1.5.0,<2.0.0)
Requires-Dist: anthropic (>=0.60.0,<0.61.0) ; extra == "anthropic" or extra == "aws"
Requires-Dist: boto3 (>=1.35.70,<2.0.0)
Requires-Dist: cachetools (==5.5.2)
Requires-Dist: cerebras-cloud-sdk (>=1.25.0,<2.0.0) ; extra == "cerebras"
Requires-Dist: chromadb (==1.0.15)
Requires-Dist: click (>=8.1.7,<9.0.0)
Requires-Dist: colorama (>=0.4.6,<0.5.0)
Requires-Dist: coloredlogs (>=15.0.1,<16.0.0)
Requires-Dist: contextvars (>=2.4,<3.0)
Requires-Dist: croniter (>=5.0.1,<6.0.0)
Requires-Dist: fastapi (==0.115.12)
Requires-Dist: fastmcp (==2.6.1)
Requires-Dist: google-api-core (>=2.24.2,<3.0.0) ; extra == "gemini"
Requires-Dist: google-genai (>=1.29.0,<2.0.0) ; extra == "gemini"
Requires-Dist: httpx (>=0.28.1,<0.29.0)
Requires-Dist: jinja2 (>=3.1.6,<4.0.0)
Requires-Dist: jsonfinder (>=0.4.2,<0.5.0)
Requires-Dist: jsonschema (>=4.23.0,<5.0.0)
Requires-Dist: lagom (>=2.6.0,<3.0.0)
Requires-Dist: limits (>=5.5.0,<6.0.0)
Requires-Dist: litellm (>=1.61.16,<2.0.0) ; extra == "litellm"
Requires-Dist: mcp[cli] (>=1.7.1,<2.0.0)
Requires-Dist: more-itertools (>=10.3.0)
Requires-Dist: nano-vectordb (>=0.0.4.3,<0.0.5.0)
Requires-Dist: nanoid (>=2.0.0,<3.0.0)
Requires-Dist: networkx[default] (>=3.3,<4.0)
Requires-Dist: openai (>=1.45.0,<2.0.0)
Requires-Dist: openapi3-parser (==1.1.21)
Requires-Dist: opentelemetry-exporter-otlp-proto-grpc (==1.27.0)
Requires-Dist: parlant-client (>=3.0.0,<4.0.0)
Requires-Dist: pymongo (>=4.11.1,<5.0.0) ; extra == "mongo"
Requires-Dist: python-dateutil (>=2.8.2,<3.0.0)
Requires-Dist: python-dotenv (>=1.0.1,<2.0.0)
Requires-Dist: requests (>=2.32.3,<3.0.0)
Requires-Dist: rich (>=13.7.1,<14.0.0)
Requires-Dist: semver (>=3.0.2,<4.0.0)
Requires-Dist: structlog (>=24.4.0,<25.0.0)
Requires-Dist: tabulate (>=0.9.0,<0.10.0)
Requires-Dist: tiktoken (>=0.8,<0.9)
Requires-Dist: together (>=1.2.12,<2.0.0) ; extra == "together"
Requires-Dist: tokenizers (>=0.20,<0.21)
Requires-Dist: toml (>=0.10.2,<0.11.0)
Requires-Dist: torch (>=2.6.0,<3.0.0) ; extra == "anthropic" or extra == "aws" or extra == "together" or extra == "cerebras" or extra == "deepseek" or extra == "gemini" or extra == "litellm"
Requires-Dist: transformers (>=4.46.2,<5.0.0) ; extra == "anthropic" or extra == "aws" or extra == "together" or extra == "cerebras" or extra == "deepseek" or extra == "litellm"
Requires-Dist: types-aiofiles (>=24.1.0.20240626,<25.0.0.0)
Requires-Dist: types-cachetools (>=6.0.0.20250525,<7.0.0.0)
Requires-Dist: types-croniter (>=4.0.0.20241030,<5.0.0.0)
Requires-Dist: types-jsonschema (>=4.22.0.20240610,<5.0.0.0)
Requires-Dist: uvicorn (>=0.32.1,<0.33.0)
Description-Content-Type: text/markdown

<div align="center">

<picture>
  <source media="(prefers-color-scheme: dark)" srcset="https://github.com/emcie-co/parlant/blob/develop/docs/LogoTransparentLight.png?raw=true">
  <img alt="Parlant - AI Agent Framework" src="https://github.com/emcie-co/parlant/blob/develop/docs/LogoTransparentDark.png?raw=true" width=400 />
</picture>

<h3>Finally, LLM agents that actually follow instructions</h3>

<p>
  <a href="https://www.parlant.io/" target="_blank">🌐 Website</a> •
  <a href="https://www.parlant.io/docs/quickstart/installation" target="_blank">⚡ Quick Start</a> •
  <a href="https://discord.gg/duxWqxKk6J" target="_blank">💬 Discord</a> •
  <a href="https://www.parlant.io/docs/quickstart/examples" target="_blank">📖 Examples</a>
</p>

<p>
  <a href="https://pypi.org/project/parlant/"><img alt="PyPI" src="https://img.shields.io/pypi/v/parlant?color=blue"></a>
  <img alt="Python 3.10+" src="https://img.shields.io/badge/python-3.10+-blue">
  <a href="https://opensource.org/licenses/Apache-2.0"><img alt="License" src="https://img.shields.io/badge/license-Apache%202.0-green"></a>
  <a href="https://discord.gg/duxWqxKk6J"><img alt="Discord" src="https://img.shields.io/discord/1312378700993663007?color=7289da&logo=discord&logoColor=white"></a>
  <img alt="GitHub Repo stars" src="https://img.shields.io/github/stars/emcie-co/parlant?style=social">
</p>

<a href="https://trendshift.io/repositories/12768" target="_blank">
  <img src="https://trendshift.io/api/badge/repositories/12768" alt="Trending on TrendShift" style="width: 250px; height: 55px;" width="250" height="55"/>
</a>

</div>

---

## 🎯 The Problem Every AI Developer Faces

You build an AI agent. It works great in testing. Then real users start talking to it and...

- ❌ It ignores your carefully crafted system prompts
- ❌ It hallucinates responses in critical moments
- ❌ It can't handle edge cases consistently
- ❌ Each conversation feels like a roll of the dice

**Sound familiar?** You're not alone. This is the #1 pain point for developers building production AI agents.

## ⚡ The Solution: Teach Principles, Not Scripts

Parlant flips the script on AI agent development. Instead of hoping your LLM will follow instructions, **Parlant guarantees it**.

```python
# Traditional approach: Cross your fingers 🤞
system_prompt = "You are a helpful assistant. Please follow these 47 rules..."

# Parlant approach: Guaranteed compliance ✅
await agent.create_guideline(
    condition="Customer asks about refunds",
    action="Check order status first to see if eligible",
    tools=[check_order_status],
)
```

<div align="center">

## 🚀 Get Your Agent Running in 60 Seconds

</div>

```bash
pip install parlant
```

```python
import parlant.sdk as p

@p.tool
async def get_weather(context: p.ToolContext, city: str) -> p.ToolResult:
    # Your weather API logic here
    return p.ToolResult(f"Sunny, 72°F in {city}")

async def main():
    async with p.Server() as server:
        agent = await server.create_agent(
            name="WeatherBot",
            description="Helpful weather assistant"
        )

        # Define behavior with natural language
        await agent.create_guideline(
            condition="User asks about weather",
            action="Get current weather and provide a friendly response with suggestions",
            tools=[get_weather]
        )

        # 🎉 Agent ready at http://localhost:8800

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
```

**That's it!** Your agent is running with guaranteed rule-following behavior.

## 🎬 See It In Action

<img alt="Parlant Demo" src="https://www.parlant.io/img/example-scheduling-journey.gif" width="100%" />

## 🔥 Why Developers Are Switching to Parlant

<table>
<tr>
<td width="50%">

### 🏗️ **Traditional AI Frameworks**

- Write complex system prompts
- Hope the LLM follows them
- Debug unpredictable behaviors
- Scale by adding more prompt engineering
- Cross fingers for production reliability

</td>
<td width="50%">

### ⚡ **Parlant**

- Define rules in natural language
- **Guaranteed** rule compliance
- Predictable, consistent behavior
- Scale by adding more guidelines
- Production-ready reliability from day one

</td>
</tr>
</table>

## 🎯 Perfect For Your Use Case

<div align="center">

|  **Financial Services**  |     **Healthcare**      |       **E-commerce**        |       **Legal Tech**       |
| :----------------------: | :---------------------: | :-------------------------: | :------------------------: |
| Compliance-first design  |   HIPAA-ready agents    |  Customer service at scale  |   Precise legal guidance   |
| Risk management built-in | Patient data protection | Order processing automation | Document review assistance |

</div>

## 🛠️ Enterprise-Grade Features

- **🎯 Dynamic Guideline Matching** - Context-aware rule application
- **🔧 Reliable Tool Integration** - APIs, databases, external services
- **📊 Conversation Analytics** - Deep insights into agent behavior
- **🔄 Iterative Refinement** - Continuously improve agent responses
- **🛡️ Built-in Guardrails** - Prevent hallucination and off-topic responses
- **📱 React Widget** - Drop-in chat UI for any web app
- **🔍 Full Explainability** - Understand every decision your agent makes

## 📈 Join 1000+ Developers Building Better AI

<div align="center">

**Companies using Parlant in production:**

_Financial institutions • Healthcare providers • Legal firms • E-commerce platforms_

[![Star History Chart](https://api.star-history.com/svg?repos=emcie-co/parlant&type=Date)](https://star-history.com/#emcie-co/parlant&Date)

</div>

## 🏃‍♂️ Quick Start Paths

<table>
<tr>
<td><strong>🎯 I want to test it myself</strong></td>
<td><a href="https://www.parlant.io/docs/quickstart/installation">→ 5-minute quickstart</a></td>
</tr>
<tr>
<td><strong>🛠️ I want to see an example</strong></td>
<td><a href="https://www.parlant.io/docs/quickstart/examples">→ Healthcare agent example</a></td>
</tr>
<tr>
<td><strong>🚀 I want to get involved</strong></td>
<td><a href="https://discord.gg/duxWqxKk6J">→ Join our Discord community</a></td>
</tr>
</table>

## 🌟 What Developers Are Saying

> _"Finally! An AI framework that actually works in production. Parlant solved our consistency issues overnight."_ > **— Sarah Chen, Lead AI Engineer @ FinTech Startup**

> _"The difference is night and day. Our agents went from 60% accuracy to 95%+ with Parlant's guideline system."_ > **— Marcus Rodriguez, CTO @ HealthTech Company**

## 🤝 Community & Support

- 💬 **[Discord Community](https://discord.gg/duxWqxKk6J)** - Get help from the team and community
- 📖 **[Documentation](https://parlant.io/docs/quickstart/installation)** - Comprehensive guides and examples
- 🐛 **[GitHub Issues](https://github.com/emcie-co/parlant/issues)** - Bug reports and feature requests
- 📧 **[Direct Support](https://parlant.io/contact)** - Direct line to our engineering team

## 📄 License

Apache 2.0 - Use it anywhere, including commercial projects.

---

<div align="center">

**Ready to build AI agents that actually work?**

⭐ **Star this repo** • 🚀 **[Try Parlant now](https://parlant.io/)** • 💬 **[Join Discord](https://discord.gg/duxWqxKk6J)**

_Built with ❤️ by the team at [Emcie](https://emcie.co)_

</div>

