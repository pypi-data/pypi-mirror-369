<tools>
  <tool name="terminal_action">
    <description>Perform terminal actions using a terminal emulator instance. Each terminal instance
  is PERSISTENT and remains active until explicitly closed, allowing for multi-step
  workflows and long-running processes.</description>
    <parameters>
      <parameter name="action" type="string" required="true">
        <description>The terminal action to perform: - new_terminal: Create a new terminal instance. This MUST be the first action   for each terminal tab. - send_input: Send keyboard input to the specified terminal. - wait: Pause execution for specified number of seconds. Can be also used to get   the current terminal state (screenshot, output, etc.) after using other tools. - close: Close the specified terminal instance. This MUST be the final action   for each terminal tab.</description>
      </parameter>
      <parameter name="inputs" type="string" required="false">
        <description>Required for 'new_terminal' and 'send_input' actions: - List of inputs to send to terminal.   Each element in the list MUST be one of the following:   - Regular text: "hello", "world", etc.   - Literal text (not interpreted as special keys): prefix with "literal:"     e.g., "literal:Home", "literal:Escape", "literal:Enter" to send these as text   - Enter   - Space   - Backspace   - Escape: "Escape", "^[", "C-["   - Tab: "Tab"   - Arrow keys: "Left", "Right", "Up", "Down"   - Navigation: "Home", "End", "PageUp", "PageDown"   - Function keys: "F1" through "F12"   Modifier keys supported with prefixes:   - ^ or C- : Control (e.g., "^c", "C-c")   - S- : Shift (e.g., "S-F6")   - A- : Alt (e.g., "A-Home")   - Combined modifiers for arrows: "S-A-Up", "C-S-Left"   - Inputs MUST in all cases be sent as a LIST of strings, even if you are only     sending one input.   - Sending Inputs as a single string will NOT work.</description>
      </parameter>
      <parameter name="time" type="string" required="false">
        <description>Required for 'wait' action. Number of seconds to pause execution. Can be fractional (e.g., 0.5 for half a second).</description>
      </parameter>
      <parameter name="terminal_id" type="string" required="false">
        <description>Identifier for the terminal instance. Required for all actions except the first 'new_terminal' action. Allows managing multiple concurrent terminal tabs. - For 'new_terminal': if not provided, a default terminal is created. If provided,   creates a new terminal with that ID. - For other actions: specifies which terminal instance to operate on. - Default terminal ID is "default" if not specified.</description>
      </parameter>
    </parameters>
    <returns type="Dict[str, Any]">
      <description>Response containing: - snapshot: raw representation of current terminal state where you can see the   output of the command - terminal_id: the ID of the terminal instance that was operated on</description>
    </returns>
    <notes>
  Important usage rules:
  1. PERSISTENCE: Terminal instances remain active and maintain their state (environment
     variables, current directory, running processes) until explicitly closed with the
     'close' action. This allows for multi-step workflows across multiple tool calls.
  2. MULTIPLE TERMINALS: You can run multiple terminal instances concurrently by using
     different terminal_id values. Each terminal operates independently.
  3. Terminal interaction MUST begin with 'new_terminal' action for each terminal instance.
  4. Only one action can be performed per call.
  5. Input handling:
     - Regular text is sent as-is
     - Literal text: prefix with "literal:" to send special key names as literal text
     - Special keys must match supported key names
     - Modifier combinations follow specific syntax
     - Control can be specified as ^ or C- prefix
     - Shift (S-) works with special keys only
     - Alt (A-) works with any character/key
  6. Wait action:
      - Time is specified in seconds
      - Can be used to wait for command completion
      - Can be fractional (e.g., 0.5 seconds)
      - Snapshot and output are captured after the wait
      - You should estimate the time it will take to run the command and set the wait time accordingly.
      - It can be from a few seconds to a few minutes, choose wisely depending on the command you are running and the task.
  7. The terminal can operate concurrently with other tools. You may invoke
     browser, proxy, or other tools (in separate assistant messages) while maintaining
     active terminal sessions.
  8. You do not need to close terminals after you are done, but you can if you want to
     free up resources.
  9. You MUST end the inputs list with an "Enter" if you want to run the command, as
     it is not sent automatically.
  10. AUTOMATIC SPACING BEHAVIOR:
      - Consecutive regular text inputs have spaces automatically added between them
      - This is helpful for shell commands: ["ls", "-la"] becomes "ls -la"
      - This causes problems for compound commands: [":", "w", "q"] becomes ": w q"
      - Use "literal:" prefix to bypass spacing: [":", "literal:wq"] becomes ":wq"
      - Special keys (Enter, Space, etc.) and literal strings never trigger spacing
  11. WHEN TO USE LITERAL PREFIX:
      - Vim commands: [":", "literal:wq", "Enter"] instead of [":", "w", "q", "Enter"]
      - Any sequence where exact character positioning matters
      - When you need multiple characters sent as a single unit
  12. Do NOT use terminal actions for file editing or writing. Use the replace_in_file,
      write_to_file, or read_file tools instead.
  13. PREFER SIMPLE COMMANDS: Avoid complex multiline commands with nested quotes or
      complex syntax. Break down complex operations into simpler, individual commands
      for better reliability and readability. Never send multiple commands in a single
      input list with multiple "Enter" keys - execute one command at a time instead.
    </notes>
    <examples>
  # Create new terminal with Node.js (default terminal)
  <function=terminal_action>
  <parameter=action>new_terminal</parameter>
  <parameter=inputs>["node", "Enter"]</parameter>
  </function>

  # Create a second (parallel) terminal instance for Python
  <function=terminal_action>
  <parameter=action>new_terminal</parameter>
  <parameter=terminal_id>python_terminal</parameter>
  <parameter=inputs>["python3", "Enter"]</parameter>
  </function>

  # Send command to the default terminal
  <function=terminal_action>
  <parameter=action>send_input</parameter>
  <parameter=inputs>["require('crypto').randomBytes(1000000).toString('hex')",
                     "Enter"]</parameter>
  </function>

  # Wait for previous action on default terminal
  <function=terminal_action>
  <parameter=action>wait</parameter>
  <parameter=time>2.0</parameter>
  </function>

  # Send multiple inputs with special keys to current terminal
  <function=terminal_action>
  <parameter=action>send_input</parameter>
  <parameter=inputs>["sqlmap -u 'http://example.com/page.php?id=1' --batch", "Enter", "y",
               "Enter", "n", "Enter", "n", "Enter"]</parameter>
  </function>

  # WRONG: Vim command with automatic spacing (becomes ": w q")
  <function=terminal_action>
  <parameter=action>send_input</parameter>
  <parameter=inputs>[":", "w", "q", "Enter"]</parameter>
  </function>

  # CORRECT: Vim command using literal prefix (becomes ":wq")
  <function=terminal_action>
  <parameter=action>send_input</parameter>
  <parameter=inputs>[":", "literal:wq", "Enter"]</parameter>
  </function>
    </examples>
  </tool>
</tools>
