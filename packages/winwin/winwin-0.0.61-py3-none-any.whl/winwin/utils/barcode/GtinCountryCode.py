GtinPrefixToCountry = [
    (1, "US")
    , (2, "US")
    , (3, "US")
    , (4, "US")
    , (5, "US")
    , (6, "US")
    , (7, "US")
    , (8, "US")
    , (9, "US")
    , (10, "US")
    , (11, "US")
    , (12, "US")
    , (13, "US")
    , (14, "US")
    , (15, "US")
    , (16, "US")
    , (17, "US")
    , (18, "US")
    , (19, "US")
    , (30, "US")
    , (31, "US")
    , (32, "US")
    , (33, "US")
    , (34, "US")
    , (35, "US")
    , (36, "US")
    , (37, "US")
    , (38, "US")
    , (39, "US")
    , (60, "US")
    , (61, "US")
    , (62, "US")
    , (63, "US")
    , (64, "US")
    , (65, "US")
    , (66, "US")
    , (67, "US")
    , (68, "US")
    , (69, "US")
    , (70, "US")
    , (71, "US")
    , (72, "US")
    , (73, "US")
    , (74, "US")
    , (75, "US")
    , (76, "US")
    , (77, "US")
    , (78, "US")
    , (79, "US")
    , (80, "US")
    , (81, "US")
    , (82, "US")
    , (83, "US")
    , (84, "US")
    , (85, "US")
    , (86, "US")
    , (87, "US")
    , (88, "US")
    , (89, "US")
    , (90, "US")
    , (91, "US")
    , (92, "US")
    , (93, "US")
    , (94, "US")
    , (95, "US")
    , (96, "US")
    , (97, "US")
    , (98, "US")
    , (99, "US")
    , (100, "US")
    , (101, "US")
    , (102, "US")
    , (103, "US")
    , (104, "US")
    , (105, "US")
    , (106, "US")
    , (107, "US")
    , (108, "US")
    , (109, "US")
    , (110, "US")
    , (111, "US")
    , (112, "US")
    , (113, "US")
    , (114, "US")
    , (115, "US")
    , (116, "US")
    , (117, "US")
    , (118, "US")
    , (119, "US")
    , (120, "US")
    , (121, "US")
    , (122, "US")
    , (123, "US")
    , (124, "US")
    , (125, "US")
    , (126, "US")
    , (127, "US")
    , (128, "US")
    , (129, "US")
    , (130, "US")
    , (131, "US")
    , (132, "US")
    , (133, "US")
    , (134, "US")
    , (135, "US")
    , (136, "US")
    , (137, "US")
    , (138, "US")
    , (139, "US")
    , (300, "FR")
    , (301, "FR")
    , (302, "FR")
    , (303, "FR")
    , (304, "FR")
    , (305, "FR")
    , (306, "FR")
    , (307, "FR")
    , (308, "FR")
    , (309, "FR")
    , (310, "FR")
    , (311, "FR")
    , (312, "FR")
    , (313, "FR")
    , (314, "FR")
    , (315, "FR")
    , (316, "FR")
    , (317, "FR")
    , (318, "FR")
    , (319, "FR")
    , (320, "FR")
    , (321, "FR")
    , (322, "FR")
    , (323, "FR")
    , (324, "FR")
    , (325, "FR")
    , (326, "FR")
    , (327, "FR")
    , (328, "FR")
    , (329, "FR")
    , (330, "FR")
    , (331, "FR")
    , (332, "FR")
    , (333, "FR")
    , (334, "FR")
    , (335, "FR")
    , (336, "FR")
    , (337, "FR")
    , (338, "FR")
    , (339, "FR")
    , (340, "FR")
    , (341, "FR")
    , (342, "FR")
    , (343, "FR")
    , (344, "FR")
    , (345, "FR")
    , (346, "FR")
    , (347, "FR")
    , (348, "FR")
    , (349, "FR")
    , (350, "FR")
    , (351, "FR")
    , (352, "FR")
    , (353, "FR")
    , (354, "FR")
    , (355, "FR")
    , (356, "FR")
    , (357, "FR")
    , (358, "FR")
    , (359, "FR")
    , (360, "FR")
    , (361, "FR")
    , (362, "FR")
    , (363, "FR")
    , (364, "FR")
    , (365, "FR")
    , (366, "FR")
    , (367, "FR")
    , (368, "FR")
    , (369, "FR")
    , (370, "FR")
    , (371, "FR")
    , (372, "FR")
    , (373, "FR")
    , (374, "FR")
    , (375, "FR")
    , (376, "FR")
    , (377, "FR")
    , (378, "FR")
    , (379, "FR")
    , (380, "BG")
    , (383, "SK")
    , (385, "HR")
    , (387, "BA")
    , (389, "ME")
    , (400, "DE")
    , (401, "DE")
    , (402, "DE")
    , (403, "DE")
    , (404, "DE")
    , (405, "DE")
    , (406, "DE")
    , (407, "DE")
    , (408, "DE")
    , (409, "DE")
    , (410, "DE")
    , (411, "DE")
    , (412, "DE")
    , (413, "DE")
    , (414, "DE")
    , (415, "DE")
    , (416, "DE")
    , (417, "DE")
    , (418, "DE")
    , (419, "DE")
    , (420, "DE")
    , (421, "DE")
    , (422, "DE")
    , (423, "DE")
    , (424, "DE")
    , (425, "DE")
    , (426, "DE")
    , (427, "DE")
    , (428, "DE")
    , (429, "DE")
    , (430, "DE")
    , (431, "DE")
    , (432, "DE")
    , (433, "DE")
    , (434, "DE")
    , (435, "DE")
    , (436, "DE")
    , (437, "DE")
    , (438, "DE")
    , (439, "DE")
    , (440, "DE")
    , (450, "JP")
    , (451, "JP")
    , (452, "JP")
    , (453, "JP")
    , (454, "JP")
    , (455, "JP")
    , (456, "JP")
    , (457, "JP")
    , (458, "JP")
    , (459, "JP")
    , (460, "RU")
    , (461, "RU")
    , (462, "RU")
    , (463, "RU")
    , (464, "RU")
    , (465, "RU")
    , (466, "RU")
    , (467, "RU")
    , (468, "RU")
    , (469, "RU")
    , (470, "KG")
    , (471, "TW")
    , (474, "EE")
    , (475, "LV")
    , (476, "AZ")
    , (477, "LT")
    , (478, "UZ")
    , (479, "LK")
    , (480, "PH")
    , (481, "BY")
    , (482, "UA")
    , (483, "TM")
    , (484, "MD")
    , (485, "AM")
    , (486, "GE")
    , (488, "TJ")
    , (489, "HK")
    , (490, "JP")
    , (491, "JP")
    , (492, "JP")
    , (493, "JP")
    , (494, "JP")
    , (495, "JP")
    , (496, "JP")
    , (497, "JP")
    , (498, "JP")
    , (499, "JP")
    , (500, "UK")
    , (501, "UK")
    , (502, "UK")
    , (503, "UK")
    , (504, "UK")
    , (505, "UK")
    , (506, "UK")
    , (507, "UK")
    , (508, "UK")
    , (509, "UK")
    , (520, "GR")
    , (521, "GR")
    , (528, "LB")
    , (529, "CY")
    , (530, "AL")
    , (531, "MK")
    , (535, "MT")
    , (539, "IE")
    , (540, "BE")
    , (541, "BE")
    , (542, "BE")
    , (543, "BE")
    , (544, "BE")
    , (545, "BE")
    , (546, "BE")
    , (547, "BE")
    , (548, "BE")
    , (549, "BE")
    , (560, "PT")
    , (569, "IS")
    , (570, "DK")
    , (571, "DK")
    , (572, "DK")
    , (573, "DK")
    , (574, "DK")
    , (575, "DK")
    , (576, "DK")
    , (577, "DK")
    , (578, "DK")
    , (579, "DK")
    , (590, "PL")
    , (594, "RO")
    , (599, "HU")
    , (600, "ZA")
    , (601, "ZA")
    , (603, "GH")
    , (604, "SN")
    , (608, "BH")
    , (609, "MU")
    , (611, "MA")
    , (613, "DZ")
    , (615, "NG")
    , (616, "KE")
    , (617, "CM")
    , (619, "TN")
    , (620, "TZ")
    , (621, "SY")
    , (622, "EG")
    , (623, "BN")
    , (624, "LY")
    , (625, "JO")
    , (626, "IR")
    , (627, "KW")
    , (628, "SA")
    , (629, "AE")
    , (630, "QA")
    , (640, "FI")
    , (641, "FI")
    , (642, "FI")
    , (643, "FI")
    , (644, "FI")
    , (645, "FI")
    , (646, "FI")
    , (647, "FI")
    , (648, "FI")
    , (649, "FI")
    , (690, "CN")
    , (691, "CN")
    , (692, "CN")
    , (693, "CN")
    , (694, "CN")
    , (695, "CN")
    , (696, "CN")
    , (697, "CN")
    , (698, "CN")
    , (699, "CN")
    , (700, "NO")
    , (701, "NO")
    , (702, "NO")
    , (703, "NO")
    , (704, "NO")
    , (705, "NO")
    , (706, "NO")
    , (707, "NO")
    , (708, "NO")
    , (709, "NO")
    , (729, "IL")
    , (730, "SE")
    , (731, "SE")
    , (732, "SE")
    , (733, "SE")
    , (734, "SE")
    , (735, "SE")
    , (736, "SE")
    , (737, "SE")
    , (738, "SE")
    , (739, "SE")
    , (740, "GT")
    , (741, "SV")
    , (742, "HN")
    , (743, "NI")
    , (744, "CR")
    , (745, "PA")
    , (746, "DM")
    , (750, "MX")
    , (754, "CA")
    , (755, "CA")
    , (759, "VE")
    , (760, "CH")
    , (761, "CH")
    , (762, "CH")
    , (763, "CH")
    , (764, "CH")
    , (765, "CH")
    , (766, "CH")
    , (767, "CH")
    , (768, "CH")
    , (769, "CH")
    , (770, "CO")
    , (771, "CO")
    , (773, "UY")
    , (775, "PE")
    , (777, "BO")
    , (778, "AR")
    , (779, "AR")
    , (780, "CL")
    , (784, "PY")
    , (786, "EC")
    , (789, "BR")
    , (790, "BR")
    , (800, "IT")
    , (801, "IT")
    , (802, "IT")
    , (803, "IT")
    , (804, "IT")
    , (805, "IT")
    , (806, "IT")
    , (807, "IT")
    , (808, "IT")
    , (809, "IT")
    , (810, "IT")
    , (811, "IT")
    , (812, "IT")
    , (813, "IT")
    , (814, "IT")
    , (815, "IT")
    , (816, "IT")
    , (817, "IT")
    , (818, "IT")
    , (819, "IT")
    , (820, "IT")
    , (821, "IT")
    , (822, "IT")
    , (823, "IT")
    , (824, "IT")
    , (825, "IT")
    , (826, "IT")
    , (827, "IT")
    , (828, "IT")
    , (829, "IT")
    , (830, "IT")
    , (831, "IT")
    , (832, "IT")
    , (833, "IT")
    , (834, "IT")
    , (835, "IT")
    , (836, "IT")
    , (837, "IT")
    , (838, "IT")
    , (839, "IT")
    , (840, "ES")
    , (841, "ES")
    , (842, "ES")
    , (843, "ES")
    , (844, "ES")
    , (845, "ES")
    , (846, "ES")
    , (847, "ES")
    , (848, "ES")
    , (849, "ES")
    , (850, "CU")
    , (858, "SK")
    , (859, "CZ")
    , (860, "RS")
    , (865, "MN")
    , (867, "KP")
    , (868, "TR")
    , (869, "TR")
    , (870, "NL")
    , (871, "NL")
    , (872, "NL")
    , (873, "NL")
    , (874, "NL")
    , (875, "NL")
    , (876, "NL")
    , (877, "NL")
    , (878, "NL")
    , (879, "NL")
    , (880, "KR")
    , (883, "MM")
    , (884, "KH")
    , (885, "TH")
    , (888, "SG")
    , (890, "IN")
    , (893, "VN")
    , (896, "PK")
    , (899, "ID")
    , (900, "AT")
    , (901, "AT")
    , (902, "AT")
    , (903, "AT")
    , (904, "AT")
    , (905, "AT")
    , (906, "AT")
    , (907, "AT")
    , (908, "AT")
    , (909, "AT")
    , (910, "AT")
    , (911, "AT")
    , (912, "AT")
    , (913, "AT")
    , (914, "AT")
    , (915, "AT")
    , (916, "AT")
    , (917, "AT")
    , (918, "AT")
    , (919, "AT")
    , (930, "AU")
    , (931, "AU")
    , (932, "AU")
    , (933, "AU")
    , (934, "AU")
    , (935, "AU")
    , (936, "AU")
    , (937, "AU")
    , (938, "AU")
    , (939, "AU")
    , (940, "NZ")
    , (941, "NZ")
    , (942, "NZ")
    , (943, "NZ")
    , (944, "NZ")
    , (945, "NZ")
    , (946, "NZ")
    , (947, "NZ")
    , (948, "NZ")
    , (949, "NZ")
    , (955, "MY")
    , (958, "MO")]

GtinPrefixToCountryMap = {i[0]: i[1] for i in GtinPrefixToCountry}


def load_iso3166(_file: str = None):
    import os
    import csv
    iso3166_file = 'iso3166.csv'
    if _file and os.path.exists(_file):
        iso3166_file = _file
    elif not os.path.exists(iso3166_file):
        iso3166_file = os.path.join(os.path.dirname(os.path.abspath(__file__)), iso3166_file)

    with open(iso3166_file, newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='|')
        next(reader)  # skip csv header
        for row in reader:
            yield row


def make_iso3166(_file: str = None):
    iso3166 = {}
    for i in load_iso3166(_file):
        for j in range(1, 5):
            key = None
            try:
                key = i[j].strip()
            except IndexError as e:
                pass
            if key and key not in ('-',):
                iso3166[key] = i[0]
    return iso3166


ISO1366Map = {}


def reset_iso3166(custom_file: str):
    global ISO1366Map
    ISO1366Map = make_iso3166(custom_file)


set_iso3166 = reset_iso3166


def get_country_name(country_code: str) -> str:
    global ISO1366Map
    if not ISO1366Map:
        print("load iso1366")
        ISO1366Map = make_iso3166()

    return ISO1366Map.get(country_code)


def get_country_code(barcode: str) -> str:
    barcode = barcode[-13:]
    barcode_refix = int((barcode if len(barcode) == 8 else barcode.strip().zfill(13))[:3])
    return GtinPrefixToCountryMap.get(barcode_refix)


if __name__ == '__main__':
    # reset_iso3166("./iso3166.csv")
    _barcode = '123456789012'
    _country_code = get_country_code(_barcode)
    _country_name = get_country_name(_country_code)
    print("Country Code: ", _country_code)
    print("Country Name: ", _country_name)

    _barcode = '6901028317122'
    _country_code = get_country_code(_barcode)
    _country_name = get_country_name(_country_code)
    print("Country Code: ", _country_code)
    print("Country Name: ", _country_name)

    _barcode = '16901028317122'
    _country_code = get_country_code(_barcode)
    _country_name = get_country_name(_country_code)
    print("Country Code: ", _country_code)
    print("Country Name: ", _country_name)

    _barcode = '06901028317122'
    _country_code = get_country_code(_barcode)
    _country_name = get_country_name(_country_code)
    print("Country Code: ", _country_code)
    print("Country Name: ", _country_name)

    _barcode = '77953537'
    _country_code = get_country_code(_barcode)
    _country_name = get_country_name(_country_code)
    print("Country Code: ", _country_code)
    print("Country Name: ", _country_name)
