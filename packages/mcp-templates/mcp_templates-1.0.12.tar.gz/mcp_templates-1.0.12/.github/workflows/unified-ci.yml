name: Unified CI/CD Pipeline

on:
  push:
    branches: ["*"]  # Run on all branches
    tags: ["release-pypi-*"]  # Run on PyPI release tags
  pull_request:
    branches: ["main"]  # Run on all PRs

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Quick validation tests - fastest feedback
  quick-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Test import availability
      run: |
        python -c "
        from mcp_template import TemplateDiscovery, DockerDeploymentService, DeploymentManager
        print('✅ All imports successful')

        # Test basic functionality
        discovery = TemplateDiscovery()
        templates = discovery.discover_templates()
        print(f'✅ Found {len(templates)} templates')

        manager = DeploymentManager(backend_type='mock')
        print('✅ DeploymentManager initialized')
        "

  # Core system tests
  core-tests:
    runs-on: ubuntu-latest
    needs: quick-tests
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run unit tests
      run: |
        python tests/runner.py --unit

  # Template tests
  template-tests:
    runs-on: ubuntu-latest
    needs: quick-tests
    strategy:
      matrix:
        template: [demo]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Test template ${{ matrix.template }}
      run: |
        cd mcp_template/template/templates/${{ matrix.template }}
        python -m pytest tests/ -v --tb=short --cov-fail-under=0

  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 bandit

    - name: Check code formatting
      run: |
        black --check mcp_template/ tests/ || echo "⚠️ Code formatting issues found"

    - name: Check import sorting
      run: |
        isort --check-only mcp_template/ tests/ || echo "⚠️ Import sorting issues found"

    - name: Run linting
      run: |
        flake8 mcp_template/ tests/ --max-line-length=100 --extend-ignore=E203,W503 || echo "⚠️ Linting issues found"

    - name: Run security scan
      run: |
        bandit -r mcp_template/ --exit-zero || echo "⚠️ Security issues found"

  # Multi-Python version testing (on main branch only)
  multi-python-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'release-pypi-')
    needs: [quick-tests, core-tests]
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

  # PyPI deployment (only on release tags)
  deploy-pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/release-pypi-')
    needs: [quick-tests, core-tests, template-tests, code-quality]
    environment:
      name: pypi
      url: https://pypi.org/p/mcp-template
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools_scm

    - name: Install package dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Show package version (from git tag)
      run: |
        python -c "from mcp_template import __version__; print(f'PyPI version from git tag: {__version__}')"

    - name: Run final tests before deploy
      run: |
        python tests/runner.py --unit

    - name: Check version from setuptools_scm
      run: |
        VERSION=$(python -m setuptools_scm)
        echo "Detected version: $VERSION"
        if [[ "$VERSION" == "0.0.0" ]]; then
          echo "❌ ERROR: setuptools_scm did not detect a version from tags"
          exit 1
        fi

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true

  # Integration tests (optional, on main branch)
  integration-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    needs: [core-tests, template-tests]
    continue-on-error: true  # Don't fail the entire pipeline
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run integration tests
      run: |
        python tests/runner.py --integration || echo "⚠️ Some integration tests failed"
