[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "intelliscript-ai"
version = "2.1.0"
authors = [
    {name = "IntelliScript Team", email = "team@intelliscript.dev"},
]
description = "World's first AI CLI tool with Google LangExtract integration for command generation and data analysis"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Utilities",
    "Environment :: Console",
]
keywords = [
    "ai", "cli", "command-line", "langextract", "data-extraction", 
    "visualization", "automation", "llm", "openai", "ollama", 
    "anthropic", "google-gemini", "data-analysis", "reports"
]

dependencies = [
    "requests>=2.28.0",
    "toml>=0.10.0",
    "click>=8.0.0",
    "rich>=13.4.0",
    "langextract>=0.1.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "bokeh>=3.2.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "jinja2>=3.1.0",
    "beautifulsoup4>=4.12.0",
    "typer>=0.9.0",
    "openpyxl>=3.1.0",
    "pyyaml>=6.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
ai-providers = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "google-generativeai>=0.3.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "coverage[toml]>=7.2.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
]
all = [
    "intelliscript[ai-providers,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/hongping-zh/intelliscript"
Documentation = "https://github.com/hongping-zh/intelliscript/blob/main/README.md"
Repository = "https://github.com/hongping-zh/intelliscript.git"
"Bug Tracker" = "https://github.com/hongping-zh/intelliscript/issues"
"Feature Requests" = "https://github.com/hongping-zh/intelliscript/discussions"
Changelog = "https://github.com/hongping-zh/intelliscript/blob/main/CHANGELOG_v2.1.md"

[project.scripts]
intelliscript = "intelliscript.cli:main"
is = "intelliscript.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["intelliscript*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
intelliscript = [
    "config/*.toml",
    "templates/*.html",
    "schemas/*.json",
    "py.typed",
]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["intelliscript"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-config",
    "--strict-markers",
    "--cov=intelliscript",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src/intelliscript"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
