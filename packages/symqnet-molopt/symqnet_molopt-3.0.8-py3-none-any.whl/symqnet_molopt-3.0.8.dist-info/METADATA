Metadata-Version: 2.4
Name: symqnet-molopt
Version: 3.0.8
Summary: Universal SymQNet Molecular Optimisation (supports any qubit count)
Home-page: https://github.com/YTomar79/symqnet-molopt
Author: YTomar79
Author-email: yashm.tomar@gmail.com
License: MIT
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Environment :: Console
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=1.12.0
Requires-Dist: numpy<3,>=1.26
Requires-Dist: qiskit>=0.39.0
Requires-Dist: openfermion>=1.5.0
Requires-Dist: scipy>=1.9.0
Requires-Dist: click>=8.0.0
Requires-Dist: tqdm>=4.64.0
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: torch-geometric>=2.2.0
Requires-Dist: pandas>=1.4.0
Requires-Dist: tensorboard>=2.8.0
Requires-Dist: gymnasium>=1.1.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=22.0; extra == "dev"
Requires-Dist: flake8>=4.0; extra == "dev"
Requires-Dist: isort>=5.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx>=4.0; extra == "docs"
Requires-Dist: sphinx-rtd-theme>=1.0; extra == "docs"
Requires-Dist: myst-parser>=0.17; extra == "docs"
Provides-Extra: gpu
Requires-Dist: torch>=1.12.0; extra == "gpu"
Requires-Dist: torch-geometric>=2.2.0; extra == "gpu"
Provides-Extra: analysis
Requires-Dist: pandas>=1.4.0; extra == "analysis"
Requires-Dist: seaborn>=0.11.0; extra == "analysis"
Requires-Dist: scikit-learn>=1.1.0; extra == "analysis"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# WaveForge (SymQNet-MolOpt): Quantum Molecular Optimization

Neural network-guided parameter estimation for molecular Hamiltonians with **universal qubit support**. Is much more scalable, sample efficient, and accurate in molecular optimization.


[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![Universal Support](https://img.shields.io/badge/qubits-2%2B%20supported-green.svg)](https://github.com/YTomar79/WaveForge)

## üöÄ Installation

pip install SymQNet-MolOpt

 

## üåç Universal Qubit Support

**WaveForge now supports any molecular system** with intelligent performance scaling:

| Qubit Count | Use Case |
|-------------|----------|
| 2-6 qubits  |  Small molecules (H‚ÇÇ, LiH) |
| 8-12 qubits | Medium molecules (H‚ÇÇO, NH‚ÇÉ) |
| **10 qubits** |  **Maximum accuracy** |
| 14-18 qubits | Large molecules (C‚ÇÇH‚ÇÑ) |


## üìñ How to Use

### Quick Start
Works with any molecular system!
SymQNet-MolOpt --hamiltonian your_molecule.json --output results.json

 

### üß™ Example Systems

#### Small Molecule (4 qubits)
SymQNet-MolOpt
--hamiltonian examples/H2_4q.json
--output h2_results.json
--shots 1024

 

#### Medium Molecule (10 qubits)
SymQNet-MolOpt
--hamiltonian examples/H2O_10q.json
--output h2o_results.json
--shots 1024
--n-rollouts 5
--max-steps 50

 

#### Large Molecule (15 qubits)
SymQNet-MolOpt
--hamiltonian examples/large_mol_15q.json
--output large_results.json
--shots 2048
--n-rollouts 8

 

### üîß Create Example Files
Generate examples for different system sizes
symqnet-examples

Validate any molecular system
symqnet-add my_molecule.json --validate-only

 

### üìä Performance Analysis
Get detailed performance analysis
SymQNet-MolOpt
--hamiltonian molecule.json
--output results.json
--show-performance-analysis

 

## üéõÔ∏è Command Reference

### Core Commands
| Command | Description | Qubit Support |
|---------|-------------|---------------|
| `SymQNet-MolOpt` | Run molecular parameter optimization | **Any count ‚â•2** |
| `symqnet-add` | Add or validate a Hamiltonian file | **Universal** |
| `symqnet-examples` | Generate example Hamiltonians | **Multiple sizes** |
| `symqnet-validate` | Validate installation | **System check** |

### Key Parameters
| Parameter | Description | Recommendation |
|-----------|-------------|----------------|
| `--hamiltonian` | Input Hamiltonian file (any qubit count) | **Required** |
| `--output` | Output results file | **Required** |
| `--shots` | Shots per measurement | Auto-scales with system size |
| `--n-rollouts` | Number of optimization runs | Auto-scales with system size |
| `--max-steps` | Max steps per rollout | 50 (standard) |
| `--show-performance-analysis` | Show performance expectations | Recommended for new systems |
| `--no-performance-warnings` | Disable performance warnings | For batch processing |

## üéØ Performance Optimization

### Automatic Parameter Scaling
WaveForge automatically adjusts parameters based on your system size:

4-qubit system: CLI automatically increases shots/rollouts
SymQNet-MolOpt --hamiltonian small_mol_4q.json --output results.json

10-qubit system: Optimal parameters used
SymQNet-MolOpt --hamiltonian optimal_mol_10q.json --output results.json

16-qubit system: CLI recommends higher accuracy settings
SymQNet-MolOpt --hamiltonian large_mol_16q.json --output results.json

 


 

## üìÅ Hamiltonian Format

Your molecular system files should specify the qubit count:

{
"format": "openfermion",
"molecule": "H2O",
"n_qubits": 10,
"pauli_terms": [
{"coefficient": -74.943, "pauli_string": "IIIIIIIIII"},
{"coefficient": 0.342, "pauli_string": "IIIIIIIIIZ"}
]
}


**Supported qubit counts:** 2, 3, 4, ..., 10 ‚≠ê, ..., 20, 25, 30+

## üìä Results Format

{
"symqnet_results": {
"coupling_parameters": [
{
"index": 0,
"mean": 0.213400,
"confidence_interval": [0.208900, 0.217900],
"uncertainty": 0.004500
}
],
"field_parameters": [...],
"total_uncertainty": 0.085600
},
"hamiltonian_info": {
"molecule": "H2O",
"n_qubits": 10,
"performance_optimal": true
},
"performance_analysis": {
"expected_performance": 1.0,
"performance_level": "optimal"
}
}

 

## ‚ö° Quick Examples

Validate any system
symqnet-add examples/molecule_8q.json --validate-only

Quick test (any qubit count)
SymQNet-MolOpt --hamiltonian examples/test.json --output output.json --shots 512

High accuracy run (auto-optimized parameters)
SymQNet-MolOpt --hamiltonian molecule.json --output results.json --shots 2048 --n-rollouts 10

Batch processing (no warnings)
SymQNet-MolOpt --hamiltonian large_system.json --output results.json --no-performance-warnings

 

## üîß Requirements

- **Python 3.8+**
- **PyTorch 1.12+**
- **NumPy, SciPy, Click**
- **Universal qubit support** (2+ qubits)


## üåç Universal Capabilities

### ‚úÖ What Works
- **Any molecular system** with ‚â•2 qubits
- **Automatic performance scaling** 
- **Intelligent parameter recommendations**
- **Performance transparency**
- **Backward compatibility** with existing 10-qubit workflows


 

## üÜò Support

- **Issues:** [GitHub Issues](https://github.com/YTomar79/WaveForge/issues)
- **Help:** Run any command with `--help` for usage info
- **Performance Questions:** Use `--show-performance-analysis` for system-specific guidance

## üìÑ License

MIT License - See [LICENSE](LICENSE) file for details.

---

## üéâ Universal SymQNet

**Install once, optimize any molecular system:**

pip install SymQNet-MolOpt

SymQNet-MolOpt --hamiltonian your_molecule.json --output results.json

 ‚öõÔ∏èüöÄ
