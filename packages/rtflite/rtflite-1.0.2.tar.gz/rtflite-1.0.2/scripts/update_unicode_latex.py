import urllib.request


def update_unicode_latex():
    """
    Download and process unimathsymbols.txt to generate unicode_latex.py
    containing the mapping between Unicode characters and LaTeX commands.

    The original unimathsymbols.txt file is licensed under the LaTeX Project Public
    License (LPPL), version 1.3 or later.
    """
    url = "https://milde.users.sourceforge.net/LUCR/Math/data/unimathsymbols.txt"

    # Download and decode the file
    with urllib.request.urlopen(url) as response:
        content = response.read().decode("utf-8")

    # Process the file line by line
    data = []
    excluded_commands = {
        r"\Micro",
        r"\times",
        r"\eth",
        r"\div",
        r"\bullet",
        r"\vec",
        r"\eqcolon",
        r"\square",
        r"\blacksquare",
    }

    for line in content.split("\n"):
        if line.startswith("#") or not line.strip():
            continue

        # Split on '^' and get unicode and latex columns
        parts = line.split("^")
        if len(parts) < 3:
            continue

        unicode_hex = parts[0].strip()
        latex_cmd = parts[2].strip()

        # Apply filters similar to R version
        if not latex_cmd or not latex_cmd.startswith("\\"):
            continue

        int_val = int(unicode_hex, 16)
        if int_val < 177:
            continue

        # Filter out entries with int values >= 20000
        if int_val >= 20000:
            continue

        if latex_cmd in excluded_commands:
            continue

        data.append((unicode_hex, latex_cmd, int_val))

    # Generate the Python module content
    module_content = [
        "# Generated by scripts/update_unicode_latex.py: do not edit by hand",
        "# Please run python scripts/update_unicode_latex.py to regenerate this file",
        "",
        "unicode_latex = [",
    ]

    # Add data rows
    for unicode_hex, latex_cmd, int_val in data:
        # Escape backslashes in latex commands
        latex_cmd = latex_cmd.replace("\\", "\\\\")
        row = f'    ("{unicode_hex}", "{latex_cmd}", {int_val}),'
        module_content.append(row)

    module_content.extend(
        [
            "]",
            "",
            "# Convert to dictionary for easier lookup",
            "unicode_to_latex = {item[0]: item[1] for item in unicode_latex}",
            "latex_to_unicode = {item[1]: item[0] for item in unicode_latex}",
            "unicode_to_int = {item[0]: item[2] for item in unicode_latex}",
            "",
        ]
    )

    # Write the output file
    with open("src/rtflite/dictionary/unicode_latex.py", "w", encoding="utf-8") as f:
        f.write("\n".join(module_content))


if __name__ == "__main__":
    update_unicode_latex()
