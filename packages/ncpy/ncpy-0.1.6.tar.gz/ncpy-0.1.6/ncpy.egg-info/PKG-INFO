Metadata-Version: 2.4
Name: ncpy
Version: 0.1.6
Summary: A Python package for numerical computing, including root-finding, interpolation, integration, differentiation, and linear system solvers.
Home-page: https://github.com/muhammadalmaskhan/ncpy
Author: M. Almas
Author-email: mkhan@cs.qau.edu.pk
License: MIT
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Mathematics
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: scipy
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# ncpy

[![PyPI Version](https://img.shields.io/pypi/v/ncpy.svg)](https://pypi.org/project/ncpy/)
[![License](https://img.shields.io/pypi/l/ncpy.svg)](https://github.com/yourusername/ncpy/blob/main/LICENSE)
[![Downloads](https://static.pepy.tech/badge/ncpy)](https://pepy.tech/project/ncpy)

**ncpy** â€” Numerical Computing in Python.

`ncpy` is a compact, educational Python library that implements common numerical methods for courses and quick prototyping.  
It is built on top of **NumPy** and (optionally) **SciPy**, and provides easy-to-use functions for root finding, interpolation, approximation, integration, differentiation, and solving linear systems.

---

## âœ¨ Features

- **Root-finding**: Bisection, Newtonâ€“Raphson, Secant, Fixed-point iteration  
- **Interpolation**: Lagrange, Newton divided differences, Linear, Cubic spline, Nevilleâ€™s method  
- **Approximation / Curve fitting**: Polynomial least squares, Exponential fit, Logarithmic fit  
- **Numerical integration**: Trapezoidal, Simpson 1/3, Simpson 3/8, Romberg, Gaussian quadrature  
- **Numerical differentiation**: Forward, Backward, Central differences, Richardson extrapolation, Numerical gradient  
- **Linear systems**: Gaussian elimination, Gaussâ€“Jordan, LU decomposition, Jacobi, Gaussâ€“Seidel, Conjugate Gradient

---
## Quick Example
from ncpy import roots

### Example: Newtonâ€“Raphson method
f = lambda x: x**2 - 2
df = lambda x: 2*x

root = roots.newton_raphson(f, df, x0=1.0)
print("Root:", root)

---

## ðŸ“¦ Installation

```bash
pip install ncpy
