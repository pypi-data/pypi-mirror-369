[project]
name = "bench-af"
version = "0.1.9"
description = "Bench-AF: Alignment Faking Benchmark"
readme = "README.md"
requires-python = "==3.12.*"
dependencies = [
    "beautifulsoup4",
    "requests",
    "tqdm",
    "pyyaml",
    "pydantic>=2.0.0",
    "setuptools>=42",
    "typer>=0.16.0",
    "rich",
    "python-dotenv",
    "anthropic>=0.57.1",
    "openai>=1.97.0",
    "matplotlib>=3.10.3",
    "ipykernel>=6.30.0",
    "ipywidgets>=8.1.7",
    "inspect-ai",
    "together"
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "ruff",
    "mypy",
    "types-tqdm>=4.67.0.20250516",
    "pandas-stubs>=2.3.0.250703",
    "types-pyyaml>=6.0.12.20250516",
]
training = [
    "trl",
    "scrapy", 
    "datasets",
    "torch>=2.7.1",
    "transformers>=4.53.0",
    "nnsight>=0.4.11",
]

[project.scripts]
bench-af = "bench_af.cli.cli:main"

[project.entry-points.inspect_ai]
bench-af = "bench_af.__init__"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest",
    "pytest-cov", 
    "ruff",
    "mypy",
]

[tool.uv.sources]
inspect-ai = { git = "https://github.com/xretr0/inspect_ai.git" }

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
# Also enable common additional rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "SIM",    # flake8-simplify
    "I",      # isort
    "N",      # pep8-naming
    "TCH",    # flake8-type-checking
    "RUF",    # Ruff-specific rules
]

ignore = [
    "E501",   # line too long, handled by formatter
    "B008",   # do not perform function calls in argument defaults
    "N806",   # variable in function should be lowercase (conflicts with ML naming)
    "N999",   # ignore invalid module name (project uses bench-af naming)
    "UP007",  # Use `X | Y` for type annotations (stick with Union for older Python compatibility)
    "W293",   # Blank lines with whitespaces
    "W291",   # Trailing whitespaces
    "I001",   # Unsorted imports
    "B027",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
# Basic mypy configuration
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Handle namespace packages
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"

# Output
show_error_codes = true
show_column_numbers = true
pretty = true

# Exclude certain directories
exclude = [
    ".venv/",
    "build/",
    "dist/",
    ".tox/",
    ".eggs/",
    ".*\\.egg-info/",
    "tests/"
]

[[tool.mypy.overrides]]
module = ["nnsight.*"]
follow_untyped_imports = true
