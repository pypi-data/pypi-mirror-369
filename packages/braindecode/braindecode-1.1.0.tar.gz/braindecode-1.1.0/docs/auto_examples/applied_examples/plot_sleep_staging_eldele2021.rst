
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/applied_examples/plot_sleep_staging_eldele2021.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_applied_examples_plot_sleep_staging_eldele2021.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_applied_examples_plot_sleep_staging_eldele2021.py:

.. _sleep-staging-physionet-eldele2021:

Sleep staging on the Sleep Physionet dataset using Eldele2021
=============================================================

This tutorial shows how to train and test a sleep staging neural network with
Braindecode. We use the attention-based model from [1]_ with the time distributed approach of [2]_
to learn on sequences of EEG windows using the openly accessible Sleep Physionet dataset [3]_ [4]_.

.. GENERATED FROM PYTHON SOURCE LINES 11-16

.. code-block:: Python

    # Authors: Divyesh Narayanan <divyesh.narayanan@gmail.com>
    #
    # License: BSD (3-clause)









.. GENERATED FROM PYTHON SOURCE LINES 17-29

Loading and preprocessing the dataset
-------------------------------------

Loading
~~~~~~~

First, we load the data using the
:class:`braindecode.datasets.sleep_physionet.SleepPhysionet` class. We load
two recordings from two different individuals: we will use the first one to
train our network and the second one to evaluate performance (as in the `MNE
sleep staging example <mne-clinical-60-sleep_>`_).


.. GENERATED FROM PYTHON SOURCE LINES 29-40

.. code-block:: Python


    from numbers import Integral

    from braindecode.datasets import SleepPhysionet

    subject_ids = [0, 1]
    crop = (0, 30 * 400)  # we only keep 400 windows of 30s to speed example
    dataset = SleepPhysionet(
        subject_ids=subject_ids, recording_ids=[2], crop_wake_mins=30, crop=crop
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Extracting EDF parameters from /Users/baristim/mne_data/physionet-sleep-data/SC4002E0-PSG.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Extracting EDF parameters from /Users/baristim/mne_data/physionet-sleep-data/SC4012E0-PSG.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...




.. GENERATED FROM PYTHON SOURCE LINES 41-46

Preprocessing
~~~~~~~~~~~~~

Next, we preprocess the raw data. We convert the data to microvolts and apply
a lowpass filter.

.. GENERATED FROM PYTHON SOURCE LINES 46-65

.. code-block:: Python


    from numpy import multiply

    from braindecode.preprocessing import Preprocessor, preprocess

    high_cut_hz = 30
    # Factor to convert from V to uV
    factor = 1e6

    preprocessors = [
        Preprocessor(
            lambda data: multiply(data, factor), apply_on_array=True
        ),  # Convert from V to uV
        Preprocessor("filter", l_freq=None, h_freq=high_cut_hz),
    ]

    # Transform the data
    preprocess(dataset, preprocessors)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/baristim/Projects/braindecode-1/braindecode/preprocessing/preprocess.py:71: UserWarning: Preprocessing choices with lambda functions cannot be saved.
      warn("Preprocessing choices with lambda functions cannot be saved.")
    Reading 0 ... 1200000  =      0.000 ... 12000.000 secs...
    Filtering raw data in 1 contiguous segment
    Setting up low-pass filter at 30 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal lowpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Upper passband edge: 30.00 Hz
    - Upper transition bandwidth: 7.50 Hz (-6 dB cutoff frequency: 33.75 Hz)
    - Filter length: 45 samples (0.450 s)

    Reading 0 ... 1200000  =      0.000 ... 12000.000 secs...
    Filtering raw data in 1 contiguous segment
    Setting up low-pass filter at 30 Hz

    FIR filter parameters
    ---------------------
    Designing a one-pass, zero-phase, non-causal lowpass filter:
    - Windowed time-domain design (firwin) method
    - Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
    - Upper passband edge: 30.00 Hz
    - Upper transition bandwidth: 7.50 Hz (-6 dB cutoff frequency: 33.75 Hz)
    - Filter length: 45 samples (0.450 s)


    <braindecode.datasets.sleep_physionet.SleepPhysionet object at 0x30f7624e0>



.. GENERATED FROM PYTHON SOURCE LINES 66-73

Extract windows
~~~~~~~~~~~~~~~

We extract 30-s windows to be used in the classification task.
The :class:`braindecode.models.SleepStagerEldele2021` model takes a
single channel as input. Here, the Fpz-Cz channel is used as it
was found to give better performance than using the Pz-Oz channel

.. GENERATED FROM PYTHON SOURCE LINES 73-100

.. code-block:: Python


    from braindecode.preprocessing import create_windows_from_events

    mapping = {  # We merge stages 3 and 4 following AASM standards.
        "Sleep stage W": 0,
        "Sleep stage 1": 1,
        "Sleep stage 2": 2,
        "Sleep stage 3": 3,
        "Sleep stage 4": 3,
        "Sleep stage R": 4,
    }

    window_size_s = 30
    sfreq = 100
    window_size_samples = window_size_s * sfreq

    windows_dataset = create_windows_from_events(
        dataset,
        trial_start_offset_samples=0,
        trial_stop_offset_samples=0,
        window_size_samples=window_size_samples,
        window_stride_samples=window_size_samples,
        picks="Fpz-Cz",  # the other option is Pz-Oz,
        preload=True,
        mapping=mapping,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/baristim/Projects/braindecode-1/braindecode/preprocessing/windowers.py:177: UserWarning: Using reject or picks or flat or dropping bad windows means mne Epochs are created, which will be substantially slower and may be deprecated in the future.
      warnings.warn(
    Used Annotations descriptions: ['Sleep stage 1', 'Sleep stage 2', 'Sleep stage 3', 'Sleep stage 4', 'Sleep stage R', 'Sleep stage W']
    Used Annotations descriptions: ['Sleep stage 1', 'Sleep stage 2', 'Sleep stage 3', 'Sleep stage 4', 'Sleep stage R', 'Sleep stage W']




.. GENERATED FROM PYTHON SOURCE LINES 101-106

Window preprocessing
~~~~~~~~~~~~~~~~~~~~

We also preprocess the windows by applying channel-wise z-score normalization
in each window.

.. GENERATED FROM PYTHON SOURCE LINES 106-111

.. code-block:: Python


    from sklearn.preprocessing import scale as standard_scale

    preprocess(windows_dataset, [Preprocessor(standard_scale, channel_wise=True)])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <braindecode.datasets.base.BaseConcatDataset object at 0x3265e8ec0>



.. GENERATED FROM PYTHON SOURCE LINES 112-117

Split dataset into train and valid
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We split the dataset into training and validation set taking
every other subject as train or valid.

.. GENERATED FROM PYTHON SOURCE LINES 117-122

.. code-block:: Python


    split_ids = dict(train=subject_ids[::2], valid=subject_ids[1::2])
    splits = windows_dataset.split(split_ids)
    train_set, valid_set = splits["train"], splits["valid"]








.. GENERATED FROM PYTHON SOURCE LINES 123-136

Create sequence samplers
------------------------

Following the time distributed approach of [2]_, we need to provide our
neural network with sequences of windows, such that the embeddings of
multiple consecutive windows can be concatenated and provided to a final
classifier. We can achieve this by defining Sampler objects that return
sequences of window indices.
To simplify the example, we train the whole model end-to-end on sequences,
rather than using the two-step approach of [2]_ (i.e. training the feature
extractor on single windows, then freezing its weights and training the
classifier).


.. GENERATED FROM PYTHON SOURCE LINES 136-151

.. code-block:: Python


    from braindecode.samplers import SequenceSampler

    n_windows = 3  # Sequences of 3 consecutive windows
    n_windows_stride = 3  # Maximally overlapping sequences

    train_sampler = SequenceSampler(
        train_set.get_metadata(), n_windows, n_windows_stride, randomize=True
    )
    valid_sampler = SequenceSampler(valid_set.get_metadata(), n_windows, n_windows_stride)

    # Print number of examples per class
    print("Training examples: ", len(train_sampler))
    print("Validation examples: ", len(valid_sampler))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Training examples:  133
    Validation examples:  133




.. GENERATED FROM PYTHON SOURCE LINES 152-154

We also implement a transform to extract the label of the center window of a
sequence to use it as target.

.. GENERATED FROM PYTHON SOURCE LINES 154-168

.. code-block:: Python


    import numpy as np


    # Use label of center window in the sequence
    def get_center_label(x):
        if isinstance(x, Integral):
            return x
        return x[np.ceil(len(x) / 2).astype(int)] if len(x) > 1 else x


    train_set.target_transform = get_center_label
    valid_set.target_transform = get_center_label








.. GENERATED FROM PYTHON SOURCE LINES 169-173

Finally, since some sleep stages appear a lot more often than others (e.g.
most of the night is spent in the N2 stage), the classes are imbalanced. To
avoid overfitting on the more frequent classes, we compute weights that we
will provide to the loss function when training.

.. GENERATED FROM PYTHON SOURCE LINES 173-179

.. code-block:: Python


    from sklearn.utils import compute_class_weight

    y_train = [train_set[idx][1] for idx in train_sampler]
    class_weights = compute_class_weight("balanced", classes=np.unique(y_train), y=y_train)








.. GENERATED FROM PYTHON SOURCE LINES 180-189

Create model
------------

We can now create the deep learning model. In this tutorial, we use the sleep
staging architecture introduced in [1]_, which is an attention-based
neural network. We use the time distributed version of the model, where the
feature vectors of a sequence of windows are concatenated and passed to a
linear layer for classification.


.. GENERATED FROM PYTHON SOURCE LINES 189-228

.. code-block:: Python


    import torch
    from torch import nn

    from braindecode.models import SleepStagerEldele2021
    from braindecode.modules import TimeDistributed
    from braindecode.util import set_random_seeds

    cuda = torch.cuda.is_available()  # check if GPU is available
    device = "cuda" if torch.cuda.is_available() else "cpu"
    if cuda:
        torch.backends.cudnn.benchmark = True
    # Set random seed to be able to reproduce results
    set_random_seeds(seed=31, cuda=cuda)

    n_classes = 5
    # Extract number of channels and time steps from dataset
    n_channels, input_size_samples = train_set[0][0].shape

    feat_extractor = SleepStagerEldele2021(
        sfreq,
        n_outputs=n_classes,
        n_times=input_size_samples,
        return_feats=True,
    )

    model = nn.Sequential(
        TimeDistributed(feat_extractor),  # apply model on each 30-s window
        nn.Sequential(  # apply linear layer on concatenated feature vectors
            nn.Flatten(start_dim=1),
            nn.Dropout(0.5),
            nn.Linear(feat_extractor.len_last_layer * n_windows, n_classes),
        ),
    )

    # Send model to GPU
    if cuda:
        model.cuda()








.. GENERATED FROM PYTHON SOURCE LINES 229-238

Training
--------

We can now train our network. :class:`braindecode.EEGClassifier` is a
braindecode object that is responsible for managing the training of neural
networks. It inherits from :class:`skorch.NeuralNetClassifier`, so the
training logic is the same as in
`Skorch <https://skorch.readthedocs.io/en/stable/>`__.


.. GENERATED FROM PYTHON SOURCE LINES 238-281

.. code-block:: Python


    from skorch.callbacks import EpochScoring
    from skorch.helper import predefined_split

    from braindecode import EEGClassifier

    lr = 1e-3
    batch_size = 32
    n_epochs = 3  # we use few epochs for speed and but more than one for plotting

    train_bal_acc = EpochScoring(
        scoring="balanced_accuracy",
        on_train=True,
        name="train_bal_acc",
        lower_is_better=False,
    )
    valid_bal_acc = EpochScoring(
        scoring="balanced_accuracy",
        on_train=False,
        name="valid_bal_acc",
        lower_is_better=False,
    )
    callbacks = [("train_bal_acc", train_bal_acc), ("valid_bal_acc", valid_bal_acc)]

    clf = EEGClassifier(
        model,
        criterion=torch.nn.CrossEntropyLoss,
        criterion__weight=torch.Tensor(class_weights).to(device),
        optimizer=torch.optim.Adam,
        iterator_train__shuffle=False,
        iterator_train__sampler=train_sampler,
        iterator_valid__sampler=valid_sampler,
        train_split=predefined_split(valid_set),  # using valid_set for validation
        optimizer__lr=lr,
        batch_size=batch_size,
        callbacks=callbacks,
        device=device,
        classes=np.unique(y_train),
    )
    # Model training for a specified number of epochs. ``y`` is ``None`` as it is already
    # supplied in the dataset.
    clf.fit(train_set, y=None, epochs=n_epochs)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      epoch    train_bal_acc    train_loss    valid_acc    valid_bal_acc    valid_loss     dur
    -------  ---------------  ------------  -----------  ---------------  ------------  ------
          1           0.2236        2.8211       0.4662           0.1968        3.2438  4.0712
          2           0.2103        2.2210       0.0752           0.2000        1.8338  3.9557
          3           0.5019        1.5034       0.2256           0.2200        4.7129  3.9192


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-1 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-1 pre {
      padding: 0;
    }

    #sk-container-id-1 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-1 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-1 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-1 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-1 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-1 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-1 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-1 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-1 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-1 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-1 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-1 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-1 div.sk-label label.sk-toggleable__label,
    #sk-container-id-1 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-1 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-1 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-1 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-1 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-1 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-1 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>&lt;class &#x27;braindecode.classifier.EEGClassifier&#x27;&gt;[initialized](
      module_=Sequential(
        (0): TimeDistributed(
          (module): SleepStagerEldele2021(
            (feature_extractor): Sequential(
              (0): _MRCNN(
                (GELU): GELU(approximate=&#x27;none&#x27;)
                (features1): Sequential(
                  (0): Conv1d(1, 64, kernel_size=(50,), stride=(6,), padding=(24,), bias=False)
                  (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): GELU(approximate=&#x27;none&#x27;)
                  (3): MaxPool1d(kernel_size=8, stride=2, padding=4, dilation=1, ceil_mode=False)
                  (4): Dropout(p=0.5, inplace=False)
                  (5): Conv1d(64, 128, kernel_size=(8,), stride=(1,), padding=(4,), bias=False)
                  (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (7): GELU(approximate=&#x27;none&#x27;)
                  (8): Conv1d(128, 128, kernel_size=(8,), stride=(1,), padding=(4,), bias=False)
                  (9): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (10): GELU(approximate=&#x27;none&#x27;)
                  (11): MaxPool1d(kernel_size=4, stride=4, padding=2, dilation=1, ceil_mode=False)
                )
                (features2): Sequential(
                  (0): Conv1d(1, 64, kernel_size=(400,), stride=(50,), padding=(200,), bias=False)
                  (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): GELU(approximate=&#x27;none&#x27;)
                  (3): MaxPool1d(kernel_size=4, stride=2, padding=2, dilation=1, ceil_mode=False)
                  (4): Dropout(p=0.5, inplace=False)
                  (5): Conv1d(64, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
                  (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (7): GELU(approximate=&#x27;none&#x27;)
                  (8): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
                  (9): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (10): GELU(approximate=&#x27;none&#x27;)
                  (11): MaxPool1d(kernel_size=2, stride=2, padding=1, dilation=1, ceil_mode=False)
                )
                (dropout): Dropout(p=0.5, inplace=False)
                (AFR): Sequential(
                  (0): _SEBasicBlock(
                    (conv1): Conv1d(128, 30, kernel_size=(1,), stride=(1,))
                    (bn1): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (relu): ReLU(inplace=True)
                    (conv2): Conv1d(30, 30, kernel_size=(1,), stride=(1,))
                    (bn2): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (se): _SELayer(
                      (avg_pool): AdaptiveAvgPool1d(output_size=1)
                      (fc): Sequential(
                        (0): Linear(in_features=30, out_features=1, bias=False)
                        (1): ReLU(inplace=True)
                        (2): Linear(in_features=1, out_features=30, bias=False)
                        (3): Sigmoid()
                      )
                    )
                    (downsample): Sequential(
                      (0): Conv1d(128, 30, kernel_size=(1,), stride=(1,), bias=False)
                      (1): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    )
                    (features): Sequential(
                      (0): Conv1d(128, 30, kernel_size=(1,), stride=(1,))
                      (1): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                      (2): ReLU(inplace=True)
                      (3): Conv1d(30, 30, kernel_size=(1,), stride=(1,))
                      (4): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                      (5): _SELayer(
                        (avg_pool): AdaptiveAvgPool1d(output_size=1)
                        (fc): Sequential(
                          (0): Linear(in_features=30, out_features=1, bias=False)
                          (1): ReLU(inplace=True)
                          (2): Linear(in_features=1, out_features=30, bias=False)
                          (3): Sigmoid()
                        )
                      )
                    )
                  )
                )
              )
              (1): _TCE(
                (layers): ModuleList(
                  (0-1): 2 x _EncoderLayer(
                    (self_attn): _MultiHeadedAttention(
                      (convs): ModuleList(
                        (0-2): 3 x CausalConv1d(30, 30, kernel_size=(7,), stride=(1,), padding=(6,))
                      )
                      (linear): Linear(in_features=80, out_features=80, bias=True)
                      (dropout): Dropout(p=0.1, inplace=False)
                    )
                    (feed_forward): _PositionwiseFeedForward(
                      (w_1): Linear(in_features=80, out_features=120, bias=True)
                      (w_2): Linear(in_features=120, out_features=80, bias=True)
                      (dropout): Dropout(p=0.1, inplace=False)
                      (activate): ReLU()
                    )
                    (residual_self_attn): _ResidualLayerNormAttn(
                      (norm): LayerNorm((80,), eps=1e-06, elementwise_affine=True)
                      (dropout): Dropout(p=0.1, inplace=False)
                      (fn_attn): _MultiHeadedAttention(
                        (convs): ModuleList(
                          (0-2): 3 x CausalConv1d(30, 30, kernel_size=(7,), stride=(1,), padding=(6,))
                        )
                        (linear): Linear(in_features=80, out_features=80, bias=True)
                        (dropout): Dropout(p=0.1, inplace=False)
                      )
                    )
                    (residual_ff): _ResidualLayerNormFF(
                      (norm): LayerNorm((80,), eps=1e-06, elementwise_affine=True)
                      (dropout): Dropout(p=0.1, inplace=False)
                      (fn_ff): _PositionwiseFeedForward(
                        (w_1): Linear(in_features=80, out_features=120, bias=True)
                        (w_2): Linear(in_features=120, out_features=80, bias=True)
                        (dropout): Dropout(p=0.1, inplace=False)
                        (activate): ReLU()
                      )
                    )
                    (conv): CausalConv1d(30, 30, kernel_size=(7,), stride=(1,), padding=(6,))
                  )
                )
                (norm): LayerNorm((80,), eps=1e-06, elementwise_affine=True)
              )
            )
          )
        )
        (1): Sequential(
          (0): Flatten(start_dim=1, end_dim=-1)
          (1): Dropout(p=0.5, inplace=False)
          (2): Linear(in_features=7200, out_features=5, bias=True)
        )
      ),
    )</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;EEGClassifier<span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>&lt;class &#x27;braindecode.classifier.EEGClassifier&#x27;&gt;[initialized](
      module_=Sequential(
        (0): TimeDistributed(
          (module): SleepStagerEldele2021(
            (feature_extractor): Sequential(
              (0): _MRCNN(
                (GELU): GELU(approximate=&#x27;none&#x27;)
                (features1): Sequential(
                  (0): Conv1d(1, 64, kernel_size=(50,), stride=(6,), padding=(24,), bias=False)
                  (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): GELU(approximate=&#x27;none&#x27;)
                  (3): MaxPool1d(kernel_size=8, stride=2, padding=4, dilation=1, ceil_mode=False)
                  (4): Dropout(p=0.5, inplace=False)
                  (5): Conv1d(64, 128, kernel_size=(8,), stride=(1,), padding=(4,), bias=False)
                  (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (7): GELU(approximate=&#x27;none&#x27;)
                  (8): Conv1d(128, 128, kernel_size=(8,), stride=(1,), padding=(4,), bias=False)
                  (9): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (10): GELU(approximate=&#x27;none&#x27;)
                  (11): MaxPool1d(kernel_size=4, stride=4, padding=2, dilation=1, ceil_mode=False)
                )
                (features2): Sequential(
                  (0): Conv1d(1, 64, kernel_size=(400,), stride=(50,), padding=(200,), bias=False)
                  (1): BatchNorm1d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (2): GELU(approximate=&#x27;none&#x27;)
                  (3): MaxPool1d(kernel_size=4, stride=2, padding=2, dilation=1, ceil_mode=False)
                  (4): Dropout(p=0.5, inplace=False)
                  (5): Conv1d(64, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
                  (6): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (7): GELU(approximate=&#x27;none&#x27;)
                  (8): Conv1d(128, 128, kernel_size=(7,), stride=(1,), padding=(3,), bias=False)
                  (9): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                  (10): GELU(approximate=&#x27;none&#x27;)
                  (11): MaxPool1d(kernel_size=2, stride=2, padding=1, dilation=1, ceil_mode=False)
                )
                (dropout): Dropout(p=0.5, inplace=False)
                (AFR): Sequential(
                  (0): _SEBasicBlock(
                    (conv1): Conv1d(128, 30, kernel_size=(1,), stride=(1,))
                    (bn1): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (relu): ReLU(inplace=True)
                    (conv2): Conv1d(30, 30, kernel_size=(1,), stride=(1,))
                    (bn2): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    (se): _SELayer(
                      (avg_pool): AdaptiveAvgPool1d(output_size=1)
                      (fc): Sequential(
                        (0): Linear(in_features=30, out_features=1, bias=False)
                        (1): ReLU(inplace=True)
                        (2): Linear(in_features=1, out_features=30, bias=False)
                        (3): Sigmoid()
                      )
                    )
                    (downsample): Sequential(
                      (0): Conv1d(128, 30, kernel_size=(1,), stride=(1,), bias=False)
                      (1): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                    )
                    (features): Sequential(
                      (0): Conv1d(128, 30, kernel_size=(1,), stride=(1,))
                      (1): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                      (2): ReLU(inplace=True)
                      (3): Conv1d(30, 30, kernel_size=(1,), stride=(1,))
                      (4): BatchNorm1d(30, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
                      (5): _SELayer(
                        (avg_pool): AdaptiveAvgPool1d(output_size=1)
                        (fc): Sequential(
                          (0): Linear(in_features=30, out_features=1, bias=False)
                          (1): ReLU(inplace=True)
                          (2): Linear(in_features=1, out_features=30, bias=False)
                          (3): Sigmoid()
                        )
                      )
                    )
                  )
                )
              )
              (1): _TCE(
                (layers): ModuleList(
                  (0-1): 2 x _EncoderLayer(
                    (self_attn): _MultiHeadedAttention(
                      (convs): ModuleList(
                        (0-2): 3 x CausalConv1d(30, 30, kernel_size=(7,), stride=(1,), padding=(6,))
                      )
                      (linear): Linear(in_features=80, out_features=80, bias=True)
                      (dropout): Dropout(p=0.1, inplace=False)
                    )
                    (feed_forward): _PositionwiseFeedForward(
                      (w_1): Linear(in_features=80, out_features=120, bias=True)
                      (w_2): Linear(in_features=120, out_features=80, bias=True)
                      (dropout): Dropout(p=0.1, inplace=False)
                      (activate): ReLU()
                    )
                    (residual_self_attn): _ResidualLayerNormAttn(
                      (norm): LayerNorm((80,), eps=1e-06, elementwise_affine=True)
                      (dropout): Dropout(p=0.1, inplace=False)
                      (fn_attn): _MultiHeadedAttention(
                        (convs): ModuleList(
                          (0-2): 3 x CausalConv1d(30, 30, kernel_size=(7,), stride=(1,), padding=(6,))
                        )
                        (linear): Linear(in_features=80, out_features=80, bias=True)
                        (dropout): Dropout(p=0.1, inplace=False)
                      )
                    )
                    (residual_ff): _ResidualLayerNormFF(
                      (norm): LayerNorm((80,), eps=1e-06, elementwise_affine=True)
                      (dropout): Dropout(p=0.1, inplace=False)
                      (fn_ff): _PositionwiseFeedForward(
                        (w_1): Linear(in_features=80, out_features=120, bias=True)
                        (w_2): Linear(in_features=120, out_features=80, bias=True)
                        (dropout): Dropout(p=0.1, inplace=False)
                        (activate): ReLU()
                      )
                    )
                    (conv): CausalConv1d(30, 30, kernel_size=(7,), stride=(1,), padding=(6,))
                  )
                )
                (norm): LayerNorm((80,), eps=1e-06, elementwise_affine=True)
              )
            )
          )
        )
        (1): Sequential(
          (0): Flatten(start_dim=1, end_dim=-1)
          (1): Dropout(p=0.5, inplace=False)
          (2): Linear(in_features=7200, out_features=5, bias=True)
        )
      ),
    )</pre></div> </div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 282-288

Plot results
------------

We use the history stored by Skorch during training to plot the performance of
the model throughout training. Specifically, we plot the loss and the balanced
balanced accuracy for the training and validation sets.

.. GENERATED FROM PYTHON SOURCE LINES 288-305

.. code-block:: Python


    import matplotlib.pyplot as plt
    import pandas as pd

    # Extract loss and balanced accuracy values for plotting from history object
    df = pd.DataFrame(clf.history.to_list())
    df.index.name = "Epoch"
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 7), sharex=True)
    df[["train_loss", "valid_loss"]].plot(color=["r", "b"], ax=ax1)
    df[["train_bal_acc", "valid_bal_acc"]].plot(color=["r", "b"], ax=ax2)
    ax1.set_ylabel("Loss")
    ax2.set_ylabel("Balanced accuracy")
    ax1.legend(["Train", "Valid"])
    ax2.legend(["Train", "Valid"])
    fig.tight_layout()
    plt.show()




.. image-sg:: /auto_examples/applied_examples/images/sphx_glr_plot_sleep_staging_eldele2021_001.png
   :alt: plot sleep staging eldele2021
   :srcset: /auto_examples/applied_examples/images/sphx_glr_plot_sleep_staging_eldele2021_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 306-308

Finally, we also display the confusion matrix and classification report:


.. GENERATED FROM PYTHON SOURCE LINES 308-323

.. code-block:: Python


    from sklearn.metrics import classification_report, confusion_matrix

    from braindecode.visualization import plot_confusion_matrix

    y_true = [valid_set[[i]][1][0] for i in range(len(valid_sampler))]
    y_pred = clf.predict(valid_set)

    confusion_mat = confusion_matrix(y_true, y_pred)

    plot_confusion_matrix(confusion_mat=confusion_mat)
    #                      class_names=['Wake', 'N1', 'N2', 'N3', 'N4', 'REM'])

    print(classification_report(y_true, y_pred))




.. image-sg:: /auto_examples/applied_examples/images/sphx_glr_plot_sleep_staging_eldele2021_002.png
   :alt: plot sleep staging eldele2021
   :srcset: /auto_examples/applied_examples/images/sphx_glr_plot_sleep_staging_eldele2021_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /Users/baristim/miniforge3/envs/braindecode-official/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
      _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))
    /Users/baristim/miniforge3/envs/braindecode-official/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
      _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))
    /Users/baristim/miniforge3/envs/braindecode-official/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
      _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))
    /Users/baristim/miniforge3/envs/braindecode-official/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
      _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))
    /Users/baristim/miniforge3/envs/braindecode-official/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
      _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))
    /Users/baristim/miniforge3/envs/braindecode-official/lib/python3.12/site-packages/sklearn/metrics/_classification.py:1531: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
      _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))
                  precision    recall  f1-score   support

               0       0.00      0.00      0.00        60
               1       0.00      0.00      0.00         6
               2       0.00      0.00      0.00        48
               3       0.14      1.00      0.25        19
               4       0.00      0.00      0.00         0

        accuracy                           0.14       133
       macro avg       0.03      0.20      0.05       133
    weighted avg       0.02      0.14      0.04       133





.. GENERATED FROM PYTHON SOURCE LINES 324-328

Finally, we can also visualize the hypnogram of the recording we used for
validation, with the predicted sleep stages overlaid on top of the true
sleep stages. We can see that the model cannot correctly identify the
different sleep stages with this amount of training.

.. GENERATED FROM PYTHON SOURCE LINES 328-337

.. code-block:: Python


    import matplotlib.pyplot as plt

    fig, ax = plt.subplots(figsize=(15, 5))
    ax.plot(y_true, color="b", label="Expert annotations")
    ax.plot(y_pred.flatten(), color="r", label="Predict annotations", alpha=0.5)
    ax.set_xlabel("Time (epochs)")
    ax.set_ylabel("Sleep stage")




.. image-sg:: /auto_examples/applied_examples/images/sphx_glr_plot_sleep_staging_eldele2021_003.png
   :alt: plot sleep staging eldele2021
   :srcset: /auto_examples/applied_examples/images/sphx_glr_plot_sleep_staging_eldele2021_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(150.22222222222223, 0.5, 'Sleep stage')



.. GENERATED FROM PYTHON SOURCE LINES 338-350

The model was able to learn despite the low amount of data that was available
(only two recordings in this example) and reached a balanced accuracy of
about 43% in a 5-class classification task (chance-level = 20%) on held-out
data over 10 epochs.

.. note::
   To further improve performance, the number of epochs should be increased.
   It has been reduced here for faster run-time in document generation. In
   testing, 10 epochs provided reasonable performance with around 89% balanced
   accuracy on training data and around 43% on held out validation data.
   Increasing the number of training recordings and optimizing the hyperparameters
   will also help increase performance

.. GENERATED FROM PYTHON SOURCE LINES 352-376

References
----------

.. [1] E. Eldele et al., "An Attention-Based Deep Learning Approach for Sleep Stage
        Classification With Single-Channel EEG," in IEEE Transactions on Neural Systems and
        Rehabilitation Engineering, vol. 29, pp. 809-818, 2021, doi: 10.1109/TNSRE.2021.3076234.

.. [2] Chambon, S., Galtier, M., Arnal, P., Wainrib, G. and Gramfort, A.
      (2018)A Deep Learning Architecture for Temporal Sleep Stage
      Classification Using Multivariate and Multimodal Time Series.
      IEEE Trans. on Neural Systems and Rehabilitation Engineering 26:
      (758-769)

.. [3] B Kemp, AH Zwinderman, B Tuk, HAC Kamphuisen, JJL Oberyé. Analysis of
       a sleep-dependent neuronal feedback loop: the slow-wave
       microcontinuity of the EEG. IEEE-BME 47(9):1185-1194 (2000).

.. [4] Goldberger AL, Amaral LAN, Glass L, Hausdorff JM, Ivanov PCh,
       Mark RG, Mietus JE, Moody GB, Peng C-K, Stanley HE. (2000)
       PhysioBank, PhysioToolkit, and PhysioNet: Components of a New
       Research Resource for Complex Physiologic Signals.
       Circulation 101(23):e215-e220

.. include:: /links.inc


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 43.871 seconds)

**Estimated memory usage:**  1112 MB


.. _sphx_glr_download_auto_examples_applied_examples_plot_sleep_staging_eldele2021.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sleep_staging_eldele2021.ipynb <plot_sleep_staging_eldele2021.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sleep_staging_eldele2021.py <plot_sleep_staging_eldele2021.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_sleep_staging_eldele2021.zip <plot_sleep_staging_eldele2021.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
