
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/datasets_io/plot_split_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_datasets_io_plot_split_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_datasets_io_plot_split_dataset.py:

.. _split-dataset-example:

Split Dataset Example
=====================

In this example, we aim to show multiple ways of how you can split your datasets for
training, testing, and evaluating your models.

.. contents:: This example covers:
   :local:
   :depth: 2

.. GENERATED FROM PYTHON SOURCE LINES 14-22

.. code-block:: Python


    # Authors: Lukas Gemein <l.gemein@gmail.com>
    #
    # License: BSD (3-clause)

    from braindecode.datasets import MOABBDataset
    from braindecode.preprocessing import create_windows_from_events








.. GENERATED FROM PYTHON SOURCE LINES 23-30

Loading the dataset
-------------------------------------

Firstly, we create a dataset using the braindecode
:class:`MOABBDataset <braindecode.datasets.MOABBDataset>` to load
it fetched from MOABB. In this example, we're using Dataset 2a from BCI
Competition IV.

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: Python


    dataset = MOABBDataset(dataset_name="BNCI2014001", subject_ids=[1])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    BNCI2014001 has been renamed to BNCI2014_001. BNCI2014001 will be removed in version 1.1.
    The dataset class name 'BNCI2014001' must be an abbreviation of its code 'BNCI2014-001'. See moabb.datasets.base.is_abbrev for more information.




.. GENERATED FROM PYTHON SOURCE LINES 34-44

Splitting
-------------------------------------

By description information
~~~~~~~~~~~~~~~~~~~~~~~~~~

The class :class:`MOABBDataset <braindecode.datasets.MOABBDataset>` has a pandas
DataFrame containing additional description of its internal datasets,
which can be used to help splitting the data
based on recording information, such as subject, session, and run of each trial.

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: Python


    dataset.description






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>subject</th>
          <th>session</th>
          <th>run</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>0train</td>
          <td>0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>0train</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1</td>
          <td>0train</td>
          <td>2</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>0train</td>
          <td>3</td>
        </tr>
        <tr>
          <th>4</th>
          <td>1</td>
          <td>0train</td>
          <td>4</td>
        </tr>
        <tr>
          <th>5</th>
          <td>1</td>
          <td>0train</td>
          <td>5</td>
        </tr>
        <tr>
          <th>6</th>
          <td>1</td>
          <td>1test</td>
          <td>0</td>
        </tr>
        <tr>
          <th>7</th>
          <td>1</td>
          <td>1test</td>
          <td>1</td>
        </tr>
        <tr>
          <th>8</th>
          <td>1</td>
          <td>1test</td>
          <td>2</td>
        </tr>
        <tr>
          <th>9</th>
          <td>1</td>
          <td>1test</td>
          <td>3</td>
        </tr>
        <tr>
          <th>10</th>
          <td>1</td>
          <td>1test</td>
          <td>4</td>
        </tr>
        <tr>
          <th>11</th>
          <td>1</td>
          <td>1test</td>
          <td>5</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 48-51

Here, we're splitting the data based on different runs. The method split returns
a dictionary with string keys corresponding to unique entries in the description
DataFrame column.

.. GENERATED FROM PYTHON SOURCE LINES 51-56

.. code-block:: Python


    splits = dataset.split("run")
    print(splits)
    splits["4"].description





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'0': <braindecode.datasets.base.BaseConcatDataset object at 0x318818290>, '1': <braindecode.datasets.base.BaseConcatDataset object at 0x38f3c8980>, '2': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f1220>, '3': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f0a70>, '4': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f08f0>, '5': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f2060>}


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>subject</th>
          <th>session</th>
          <th>run</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>0train</td>
          <td>4</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>1test</td>
          <td>4</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 57-63

By row index
~~~~~~~~~~~~~

Another way we can split the dataset is based on a list of integers corresponding to
rows in the description. In this case, the returned dictionary will have
'0' as the only key.

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: Python


    splits = dataset.split([0, 1, 5])
    print(splits)
    splits["0"].description





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'0': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f39b0>}


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>subject</th>
          <th>session</th>
          <th>run</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>0train</td>
          <td>0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>0train</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1</td>
          <td>0train</td>
          <td>5</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 69-73

However, if we want multiple splits based on indices, we can also define a list
containing lists of integers. In this case, the dictionary will have string keys
representing the index of the dataset split in the order of the given list of
integers.

.. GENERATED FROM PYTHON SOURCE LINES 73-78

.. code-block:: Python


    splits = dataset.split([[0, 1, 5], [2, 3, 4], [6, 7, 8, 9, 10, 11]])
    print(splits)
    splits["2"].description





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'0': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f0bc0>, '1': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f2f00>, '2': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f1130>}


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>subject</th>
          <th>session</th>
          <th>run</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>1test</td>
          <td>0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>1test</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1</td>
          <td>1test</td>
          <td>2</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>1test</td>
          <td>3</td>
        </tr>
        <tr>
          <th>4</th>
          <td>1</td>
          <td>1test</td>
          <td>4</td>
        </tr>
        <tr>
          <th>5</th>
          <td>1</td>
          <td>1test</td>
          <td>5</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 79-81

You can also name each split in the output dictionary by specifying the keys
of each list of indexes in the input dictionary:

.. GENERATED FROM PYTHON SOURCE LINES 81-88

.. code-block:: Python


    splits = dataset.split(
        {"train": [0, 1, 5], "valid": [2, 3, 4], "test": [6, 7, 8, 9, 10, 11]}
    )
    print(splits)
    splits["test"].description





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'train': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f0800>, 'valid': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f27e0>, 'test': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f08c0>}


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>subject</th>
          <th>session</th>
          <th>run</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>1</td>
          <td>1test</td>
          <td>0</td>
        </tr>
        <tr>
          <th>1</th>
          <td>1</td>
          <td>1test</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1</td>
          <td>1test</td>
          <td>2</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1</td>
          <td>1test</td>
          <td>3</td>
        </tr>
        <tr>
          <th>4</th>
          <td>1</td>
          <td>1test</td>
          <td>4</td>
        </tr>
        <tr>
          <th>5</th>
          <td>1</td>
          <td>1test</td>
          <td>5</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 89-93

Observation
-------------------------------------

Similarly, we can split datasets after creating windows using the same methods.

.. GENERATED FROM PYTHON SOURCE LINES 93-98

.. code-block:: Python


    windows = create_windows_from_events(
        dataset, trial_start_offset_samples=0, trial_stop_offset_samples=0
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']
    Used Annotations descriptions: ['feet', 'left_hand', 'right_hand', 'tongue']




.. GENERATED FROM PYTHON SOURCE LINES 99-121

.. code-block:: Python


    # Splitting by different runs
    print("Using description info")
    splits = windows.split("run")
    print(splits)
    print()

    # Splitting by row index
    print("Splitting by row index")
    splits = windows.split([4, 8])
    print(splits)
    print()

    print("Multiple row index split")
    splits = windows.split([[4, 8], [5, 9, 11]])
    print(splits)
    print()

    # Specifying output's keys
    print("Specifying keys")
    splits = windows.split(dict(train=[4, 8], test=[5, 9, 11]))
    print(splits)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using description info
    {'0': <braindecode.datasets.base.BaseConcatDataset object at 0x3e3ce5370>, '1': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f2720>, '2': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f39b0>, '3': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f3c80>, '4': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f10a0>, '5': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f0230>}

    Splitting by row index
    {'0': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f2060>}

    Multiple row index split
    {'0': <braindecode.datasets.base.BaseConcatDataset object at 0x32f15d1c0>, '1': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f10a0>}

    Specifying keys
    {'train': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f2060>, 'test': <braindecode.datasets.base.BaseConcatDataset object at 0x38a9f08c0>}





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 22.365 seconds)

**Estimated memory usage:**  509 MB


.. _sphx_glr_download_auto_examples_datasets_io_plot_split_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_split_dataset.ipynb <plot_split_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_split_dataset.py <plot_split_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_split_dataset.zip <plot_split_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
