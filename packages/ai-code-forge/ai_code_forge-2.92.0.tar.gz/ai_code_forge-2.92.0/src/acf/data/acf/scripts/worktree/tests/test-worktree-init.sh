#!/bin/bash
set -euo pipefail

# Test Suite for worktree-init.sh
# Validates shell initialization functionality and edge cases

# Test directory setup
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
WORKTREE_DIR="$(dirname "$SCRIPT_DIR")"

# Color codes for test output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test result tracking
TESTS_RUN=0
TESTS_PASSED=0
TESTS_FAILED=0

# Print test results
print_test() {
    local test_name="$1"
    local result="$2"
    local details="$3"
    
    TESTS_RUN=$((TESTS_RUN + 1))
    
    if [[ "$result" == "PASS" ]]; then
        echo -e "${GREEN}✓ PASS${NC}: $test_name"
        TESTS_PASSED=$((TESTS_PASSED + 1))
    else
        echo -e "${RED}✗ FAIL${NC}: $test_name"
        echo -e "${YELLOW}  Details: $details${NC}"
        TESTS_FAILED=$((TESTS_FAILED + 1))
    fi
}

# Test function wrapper
run_test() {
    local test_name="$1"
    shift
    local test_function="$1"
    shift
    
    echo -e "${BLUE}Running: $test_name${NC}"
    
    local result
    local details
    
    if result="$($test_function "$@" 2>&1)"; then
        print_test "$test_name" "PASS" "$result"
    else
        print_test "$test_name" "FAIL" "$result"
    fi
}

# Test: Basic functionality - help command
test_help_command() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --help 2>&1)"
    
    if [[ "$output" =~ "Git Worktree Shell Initialization" ]]; then
        echo "Help command works correctly"
        return 0
    else
        echo "Help command output unexpected: $output"
        return 1
    fi
}

# Test: Shell detection functionality
test_shell_detection() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init 2>/dev/null)"
    
    if [[ "$output" =~ "Generated by worktree.sh init for" ]]; then
        echo "Shell detection and output generation working"
        return 0
    else
        echo "Shell detection failed: $output"
        return 1
    fi
}

# Test: Specific shell override - bash
test_bash_override() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --shell bash 2>/dev/null)"
    
    if [[ "$output" =~ "Generated by worktree.sh init for bash" ]] && [[ "$output" =~ "alias wt=" ]]; then
        echo "Bash shell override works correctly"
        return 0
    else
        echo "Bash override failed: $output"
        return 1
    fi
}

# Test: Specific shell override - zsh
test_zsh_override() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --shell zsh 2>/dev/null)"
    
    if [[ "$output" =~ "Generated by worktree.sh init for zsh" ]] && [[ "$output" =~ "alias wt=" ]]; then
        echo "Zsh shell override works correctly"
        return 0
    else
        echo "Zsh override failed: $output"
        return 1
    fi
}

# Test: Specific shell override - fish
test_fish_override() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --shell fish 2>/dev/null)"
    
    if [[ "$output" =~ "Generated by worktree.sh init for fish" ]] && [[ "$output" =~ "alias wt=" ]]; then
        echo "Fish shell override works correctly"
        return 0
    else
        echo "Fish override failed: $output"
        return 1
    fi
}

# Test: Invalid shell error handling
test_invalid_shell() {
    local output
    local exit_code
    
    set +e
    output="$($WORKTREE_DIR/worktree.sh init --shell invalid-shell 2>&1)"
    exit_code=$?
    set -e
    
    if [[ $exit_code -ne 0 ]] && [[ "$output" =~ "Unsupported shell: invalid-shell" ]]; then
        echo "Invalid shell error handling works correctly"
        return 0
    else
        echo "Invalid shell error handling failed: exit_code=$exit_code, output=$output"
        return 1
    fi
}

# Test: Missing argument error handling
test_missing_shell_arg() {
    local output
    local exit_code
    
    set +e
    output="$($WORKTREE_DIR/worktree.sh init --shell 2>&1)"
    exit_code=$?
    set -e
    
    if [[ $exit_code -ne 0 ]] && [[ "$output" =~ "--shell option requires a shell name" ]]; then
        echo "Missing shell argument error handling works correctly"
        return 0
    else
        echo "Missing shell argument error handling failed: exit_code=$exit_code, output=$output"
        return 1
    fi
}

# Test: Unknown option error handling
test_unknown_option() {
    local output
    local exit_code
    
    set +e
    output="$($WORKTREE_DIR/worktree.sh init --unknown-option 2>&1)"
    exit_code=$?
    set -e
    
    if [[ $exit_code -ne 0 ]] && [[ "$output" =~ "Unknown option" ]]; then
        echo "Unknown option error handling works correctly"
        return 0
    else
        echo "Unknown option error handling failed: exit_code=$exit_code, output=$output"
        return 1
    fi
}

# Test: PATH modification generation
test_path_modification() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --shell bash 2>/dev/null)"
    
    if [[ "$output" =~ "export PATH=" ]] && [[ "$output" =~ "$WORKTREE_DIR" ]]; then
        echo "PATH modification generation works correctly"
        return 0
    else
        echo "PATH modification generation failed: $output"
        return 1
    fi
}

# Test: Alias generation
test_alias_generation() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --shell bash 2>/dev/null)"
    
    local required_aliases=("alias wt=" "alias wtc=" "alias wtl=" "alias wti=" "alias wtw=" "alias wtr=")
    
    for alias_def in "${required_aliases[@]}"; do
        if [[ ! "$output" =~ $alias_def ]]; then
            echo "Missing required alias: $alias_def"
            return 1
        fi
    done
    
    echo "All required aliases generated correctly"
    return 0
}

# Test: Function generation (bash/zsh)
test_function_generation() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --shell bash 2>/dev/null)"
    
    if [[ "$output" =~ "wtcd()" ]] && [[ "$output" =~ "wtlaunch()" ]]; then
        echo "Function generation works correctly"
        return 0
    else
        echo "Function generation failed: $output"
        return 1
    fi
}

# Test: Fish function generation
test_fish_function_generation() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --shell fish 2>/dev/null)"
    
    if [[ "$output" =~ "function wtcd" ]] && [[ "$output" =~ "function wtlaunch" ]]; then
        echo "Fish function generation works correctly"
        return 0
    else
        echo "Fish function generation failed: $output"
        return 1
    fi
}

# Test: Security warnings in output
test_security_warnings() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --shell bash 2>/dev/null)"
    
    if [[ "$output" =~ "WARNING: This modifies your PATH" ]] && [[ "$output" =~ "Review these changes before applying" ]]; then
        echo "Security warnings present in output"
        return 0
    else
        echo "Security warnings missing from output: $output"
        return 1
    fi
}

# Test: Absolute paths in output
test_absolute_paths() {
    local output
    output="$($WORKTREE_DIR/worktree.sh init --shell bash 2>/dev/null)"
    
    # Count absolute path references
    local abs_path_count
    abs_path_count=$(echo "$output" | grep -c "$WORKTREE_DIR" || true)
    
    if [[ $abs_path_count -ge 10 ]]; then
        echo "Absolute paths correctly used throughout output"
        return 0
    else
        echo "Insufficient absolute path usage: found $abs_path_count references"
        return 1
    fi
}

# Main test runner
main() {
    echo -e "${BLUE}=== Git Worktree Init Test Suite ===${NC}"
    echo "Testing worktree-init.sh functionality and edge cases"
    echo
    
    # Run all tests
    run_test "Help Command" test_help_command
    run_test "Shell Detection" test_shell_detection
    run_test "Bash Shell Override" test_bash_override
    run_test "Zsh Shell Override" test_zsh_override
    run_test "Fish Shell Override" test_fish_override
    run_test "Invalid Shell Error" test_invalid_shell
    run_test "Missing Shell Argument" test_missing_shell_arg
    run_test "Unknown Option Error" test_unknown_option
    run_test "PATH Modification" test_path_modification
    run_test "Alias Generation" test_alias_generation
    run_test "Function Generation" test_function_generation
    run_test "Fish Function Generation" test_fish_function_generation
    run_test "Security Warnings" test_security_warnings
    run_test "Absolute Paths" test_absolute_paths
    
    # Print summary
    echo
    echo -e "${BLUE}=== Test Summary ===${NC}"
    echo "Tests run: $TESTS_RUN"
    echo -e "${GREEN}Passed: $TESTS_PASSED${NC}"
    echo -e "${RED}Failed: $TESTS_FAILED${NC}"
    
    if [[ $TESTS_FAILED -eq 0 ]]; then
        echo -e "${GREEN}All tests passed!${NC}"
        exit 0
    else
        echo -e "${RED}Some tests failed.${NC}"
        exit 1
    fi
}

# Run tests if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi