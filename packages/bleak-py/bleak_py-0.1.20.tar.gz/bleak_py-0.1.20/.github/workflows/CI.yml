# This file is autogenerated by maturin v1.9.1
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    tags:
      - 'v*-pyo3'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          before-script-linux: |
            # Install system dependencies for D-Bus
            if command -v yum &> /dev/null; then
              yum install -y dbus-devel pkgconfig
              # For aarch64 cross-compilation
              if [ "${{ matrix.platform.target }}" = "aarch64" ]; then
                yum install -y gcc-aarch64-linux-gnu
                # Try to install cross-compilation libraries
                yum install -y dbus-devel.aarch64 || echo "Cross-compilation dbus not available"
              fi
            elif command -v dnf &> /dev/null; then
              dnf install -y dbus-devel pkgconf-pkg-config
              # For aarch64 cross-compilation
              if [ "${{ matrix.platform.target }}" = "aarch64" ]; then
                dnf install -y gcc-aarch64-linux-gnu
                dnf install -y dbus-devel.aarch64 || echo "Cross-compilation dbus not available"
              fi
            elif command -v apt-get &> /dev/null; then
              apt-get update
              apt-get install -y libdbus-1-dev pkg-config
              # For aarch64 cross-compilation
              if [ "${{ matrix.platform.target }}" = "aarch64" ]; then
                dpkg --add-architecture arm64
                apt-get update
                apt-get install -y gcc-aarch64-linux-gnu libdbus-1-dev:arm64
                # Set up pkg-config for cross-compilation
                export PKG_CONFIG_ALLOW_CROSS=1
                export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
                export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig
                export PKG_CONFIG_SYSROOT_DIR=/
                # Create a cross-compilation wrapper for pkg-config
                cat > /usr/local/bin/aarch64-linux-gnu-pkg-config << 'EOF'
            #!/bin/bash
            export PKG_CONFIG_ALLOW_CROSS=1
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
            export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig
            export PKG_CONFIG_SYSROOT_DIR=/
            exec pkg-config "$@"
            EOF
                chmod +x /usr/local/bin/aarch64-linux-gnu-pkg-config
                export PKG_CONFIG=/usr/local/bin/aarch64-linux-gnu-pkg-config
              fi
            fi
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter --manifest-path Cargo.toml
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --manifest-path Cargo.toml
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: 'wheels-*/*'
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
