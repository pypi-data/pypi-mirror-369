// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/tpu/kernels/tpu_compile.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompile_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompile_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tensorflow/core/framework/attr_value.pb.h"
#include "tensorflow/core/framework/function.pb.h"
#include "tensorflow/core/framework/tensor.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
#include "tensorflow/core/protobuf/tpu/compile_metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompile_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompile_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompile_2eproto;
namespace tensorflow {
namespace tpu {
class TpuCompilationRequestProto;
struct TpuCompilationRequestProtoDefaultTypeInternal;
extern TpuCompilationRequestProtoDefaultTypeInternal _TpuCompilationRequestProto_default_instance_;
}  // namespace tpu
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::tpu::TpuCompilationRequestProto* Arena::CreateMaybeMessage<::tensorflow::tpu::TpuCompilationRequestProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace tpu {

// ===================================================================

class TpuCompilationRequestProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.tpu.TpuCompilationRequestProto) */ {
 public:
  inline TpuCompilationRequestProto() : TpuCompilationRequestProto(nullptr) {}
  ~TpuCompilationRequestProto() override;
  explicit PROTOBUF_CONSTEXPR TpuCompilationRequestProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TpuCompilationRequestProto(const TpuCompilationRequestProto& from);
  TpuCompilationRequestProto(TpuCompilationRequestProto&& from) noexcept
    : TpuCompilationRequestProto() {
    *this = ::std::move(from);
  }

  inline TpuCompilationRequestProto& operator=(const TpuCompilationRequestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TpuCompilationRequestProto& operator=(TpuCompilationRequestProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TpuCompilationRequestProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TpuCompilationRequestProto* internal_default_instance() {
    return reinterpret_cast<const TpuCompilationRequestProto*>(
               &_TpuCompilationRequestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TpuCompilationRequestProto& a, TpuCompilationRequestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TpuCompilationRequestProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TpuCompilationRequestProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TpuCompilationRequestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TpuCompilationRequestProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TpuCompilationRequestProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TpuCompilationRequestProto& from) {
    TpuCompilationRequestProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TpuCompilationRequestProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.tpu.TpuCompilationRequestProto";
  }
  protected:
  explicit TpuCompilationRequestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgShapesFieldNumber = 6,
    kGuaranteedConstantsFieldNumber = 7,
    kMlirModuleFieldNumber = 8,
    kMetadataFieldNumber = 5,
    kFdefLibFieldNumber = 9,
    kFunctionFieldNumber = 11,
    kUseExperimentalFieldNumber = 1,
    kUseMlirFieldNumber = 2,
    kReturnHloProtosFieldNumber = 3,
    kUnloadCacheOnSessionCloseFieldNumber = 4,
    kGraphDefVersionFieldNumber = 10,
  };
  // repeated .tensorflow.TensorShapeProto arg_shapes = 6;
  int arg_shapes_size() const;
  private:
  int _internal_arg_shapes_size() const;
  public:
  void clear_arg_shapes();
  ::tensorflow::TensorShapeProto* mutable_arg_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
      mutable_arg_shapes();
  private:
  const ::tensorflow::TensorShapeProto& _internal_arg_shapes(int index) const;
  ::tensorflow::TensorShapeProto* _internal_add_arg_shapes();
  public:
  const ::tensorflow::TensorShapeProto& arg_shapes(int index) const;
  ::tensorflow::TensorShapeProto* add_arg_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
      arg_shapes() const;

  // repeated .tensorflow.TensorProto guaranteed_constants = 7;
  int guaranteed_constants_size() const;
  private:
  int _internal_guaranteed_constants_size() const;
  public:
  void clear_guaranteed_constants();
  ::tensorflow::TensorProto* mutable_guaranteed_constants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >*
      mutable_guaranteed_constants();
  private:
  const ::tensorflow::TensorProto& _internal_guaranteed_constants(int index) const;
  ::tensorflow::TensorProto* _internal_add_guaranteed_constants();
  public:
  const ::tensorflow::TensorProto& guaranteed_constants(int index) const;
  ::tensorflow::TensorProto* add_guaranteed_constants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >&
      guaranteed_constants() const;

  // string mlir_module = 8;
  void clear_mlir_module();
  const std::string& mlir_module() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mlir_module(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mlir_module();
  PROTOBUF_NODISCARD std::string* release_mlir_module();
  void set_allocated_mlir_module(std::string* mlir_module);
  private:
  const std::string& _internal_mlir_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mlir_module(const std::string& value);
  std::string* _internal_mutable_mlir_module();
  public:

  // .tensorflow.tpu.TPUCompileMetadataProto metadata = 5;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::tensorflow::tpu::TPUCompileMetadataProto& metadata() const;
  PROTOBUF_NODISCARD ::tensorflow::tpu::TPUCompileMetadataProto* release_metadata();
  ::tensorflow::tpu::TPUCompileMetadataProto* mutable_metadata();
  void set_allocated_metadata(::tensorflow::tpu::TPUCompileMetadataProto* metadata);
  private:
  const ::tensorflow::tpu::TPUCompileMetadataProto& _internal_metadata() const;
  ::tensorflow::tpu::TPUCompileMetadataProto* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::tensorflow::tpu::TPUCompileMetadataProto* metadata);
  ::tensorflow::tpu::TPUCompileMetadataProto* unsafe_arena_release_metadata();

  // .tensorflow.FunctionDefLibrary fdef_lib = 9;
  bool has_fdef_lib() const;
  private:
  bool _internal_has_fdef_lib() const;
  public:
  void clear_fdef_lib();
  const ::tensorflow::FunctionDefLibrary& fdef_lib() const;
  PROTOBUF_NODISCARD ::tensorflow::FunctionDefLibrary* release_fdef_lib();
  ::tensorflow::FunctionDefLibrary* mutable_fdef_lib();
  void set_allocated_fdef_lib(::tensorflow::FunctionDefLibrary* fdef_lib);
  private:
  const ::tensorflow::FunctionDefLibrary& _internal_fdef_lib() const;
  ::tensorflow::FunctionDefLibrary* _internal_mutable_fdef_lib();
  public:
  void unsafe_arena_set_allocated_fdef_lib(
      ::tensorflow::FunctionDefLibrary* fdef_lib);
  ::tensorflow::FunctionDefLibrary* unsafe_arena_release_fdef_lib();

  // .tensorflow.NameAttrList function = 11;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const ::tensorflow::NameAttrList& function() const;
  PROTOBUF_NODISCARD ::tensorflow::NameAttrList* release_function();
  ::tensorflow::NameAttrList* mutable_function();
  void set_allocated_function(::tensorflow::NameAttrList* function);
  private:
  const ::tensorflow::NameAttrList& _internal_function() const;
  ::tensorflow::NameAttrList* _internal_mutable_function();
  public:
  void unsafe_arena_set_allocated_function(
      ::tensorflow::NameAttrList* function);
  ::tensorflow::NameAttrList* unsafe_arena_release_function();

  // bool use_experimental = 1;
  void clear_use_experimental();
  bool use_experimental() const;
  void set_use_experimental(bool value);
  private:
  bool _internal_use_experimental() const;
  void _internal_set_use_experimental(bool value);
  public:

  // bool use_mlir = 2;
  void clear_use_mlir();
  bool use_mlir() const;
  void set_use_mlir(bool value);
  private:
  bool _internal_use_mlir() const;
  void _internal_set_use_mlir(bool value);
  public:

  // bool return_hlo_protos = 3;
  void clear_return_hlo_protos();
  bool return_hlo_protos() const;
  void set_return_hlo_protos(bool value);
  private:
  bool _internal_return_hlo_protos() const;
  void _internal_set_return_hlo_protos(bool value);
  public:

  // bool unload_cache_on_session_close = 4;
  void clear_unload_cache_on_session_close();
  bool unload_cache_on_session_close() const;
  void set_unload_cache_on_session_close(bool value);
  private:
  bool _internal_unload_cache_on_session_close() const;
  void _internal_set_unload_cache_on_session_close(bool value);
  public:

  // int32 graph_def_version = 10;
  void clear_graph_def_version();
  int32_t graph_def_version() const;
  void set_graph_def_version(int32_t value);
  private:
  int32_t _internal_graph_def_version() const;
  void _internal_set_graph_def_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.tpu.TpuCompilationRequestProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto > arg_shapes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto > guaranteed_constants_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mlir_module_;
    ::tensorflow::tpu::TPUCompileMetadataProto* metadata_;
    ::tensorflow::FunctionDefLibrary* fdef_lib_;
    ::tensorflow::NameAttrList* function_;
    bool use_experimental_;
    bool use_mlir_;
    bool return_hlo_protos_;
    bool unload_cache_on_session_close_;
    int32_t graph_def_version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompile_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TpuCompilationRequestProto

// bool use_experimental = 1;
inline void TpuCompilationRequestProto::clear_use_experimental() {
  _impl_.use_experimental_ = false;
}
inline bool TpuCompilationRequestProto::_internal_use_experimental() const {
  return _impl_.use_experimental_;
}
inline bool TpuCompilationRequestProto::use_experimental() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.use_experimental)
  return _internal_use_experimental();
}
inline void TpuCompilationRequestProto::_internal_set_use_experimental(bool value) {
  
  _impl_.use_experimental_ = value;
}
inline void TpuCompilationRequestProto::set_use_experimental(bool value) {
  _internal_set_use_experimental(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationRequestProto.use_experimental)
}

// bool use_mlir = 2;
inline void TpuCompilationRequestProto::clear_use_mlir() {
  _impl_.use_mlir_ = false;
}
inline bool TpuCompilationRequestProto::_internal_use_mlir() const {
  return _impl_.use_mlir_;
}
inline bool TpuCompilationRequestProto::use_mlir() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.use_mlir)
  return _internal_use_mlir();
}
inline void TpuCompilationRequestProto::_internal_set_use_mlir(bool value) {
  
  _impl_.use_mlir_ = value;
}
inline void TpuCompilationRequestProto::set_use_mlir(bool value) {
  _internal_set_use_mlir(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationRequestProto.use_mlir)
}

// bool return_hlo_protos = 3;
inline void TpuCompilationRequestProto::clear_return_hlo_protos() {
  _impl_.return_hlo_protos_ = false;
}
inline bool TpuCompilationRequestProto::_internal_return_hlo_protos() const {
  return _impl_.return_hlo_protos_;
}
inline bool TpuCompilationRequestProto::return_hlo_protos() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.return_hlo_protos)
  return _internal_return_hlo_protos();
}
inline void TpuCompilationRequestProto::_internal_set_return_hlo_protos(bool value) {
  
  _impl_.return_hlo_protos_ = value;
}
inline void TpuCompilationRequestProto::set_return_hlo_protos(bool value) {
  _internal_set_return_hlo_protos(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationRequestProto.return_hlo_protos)
}

// bool unload_cache_on_session_close = 4;
inline void TpuCompilationRequestProto::clear_unload_cache_on_session_close() {
  _impl_.unload_cache_on_session_close_ = false;
}
inline bool TpuCompilationRequestProto::_internal_unload_cache_on_session_close() const {
  return _impl_.unload_cache_on_session_close_;
}
inline bool TpuCompilationRequestProto::unload_cache_on_session_close() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.unload_cache_on_session_close)
  return _internal_unload_cache_on_session_close();
}
inline void TpuCompilationRequestProto::_internal_set_unload_cache_on_session_close(bool value) {
  
  _impl_.unload_cache_on_session_close_ = value;
}
inline void TpuCompilationRequestProto::set_unload_cache_on_session_close(bool value) {
  _internal_set_unload_cache_on_session_close(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationRequestProto.unload_cache_on_session_close)
}

// .tensorflow.tpu.TPUCompileMetadataProto metadata = 5;
inline bool TpuCompilationRequestProto::_internal_has_metadata() const {
  return this != internal_default_instance() && _impl_.metadata_ != nullptr;
}
inline bool TpuCompilationRequestProto::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::tensorflow::tpu::TPUCompileMetadataProto& TpuCompilationRequestProto::_internal_metadata() const {
  const ::tensorflow::tpu::TPUCompileMetadataProto* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::tpu::TPUCompileMetadataProto&>(
      ::tensorflow::tpu::_TPUCompileMetadataProto_default_instance_);
}
inline const ::tensorflow::tpu::TPUCompileMetadataProto& TpuCompilationRequestProto::metadata() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.metadata)
  return _internal_metadata();
}
inline void TpuCompilationRequestProto::unsafe_arena_set_allocated_metadata(
    ::tensorflow::tpu::TPUCompileMetadataProto* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TpuCompilationRequestProto.metadata)
}
inline ::tensorflow::tpu::TPUCompileMetadataProto* TpuCompilationRequestProto::release_metadata() {
  
  ::tensorflow::tpu::TPUCompileMetadataProto* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::tpu::TPUCompileMetadataProto* TpuCompilationRequestProto::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TpuCompilationRequestProto.metadata)
  
  ::tensorflow::tpu::TPUCompileMetadataProto* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::tensorflow::tpu::TPUCompileMetadataProto* TpuCompilationRequestProto::_internal_mutable_metadata() {
  
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::tpu::TPUCompileMetadataProto>(GetArenaForAllocation());
    _impl_.metadata_ = p;
  }
  return _impl_.metadata_;
}
inline ::tensorflow::tpu::TPUCompileMetadataProto* TpuCompilationRequestProto::mutable_metadata() {
  ::tensorflow::tpu::TPUCompileMetadataProto* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TpuCompilationRequestProto.metadata)
  return _msg;
}
inline void TpuCompilationRequestProto::set_allocated_metadata(::tensorflow::tpu::TPUCompileMetadataProto* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TpuCompilationRequestProto.metadata)
}

// repeated .tensorflow.TensorShapeProto arg_shapes = 6;
inline int TpuCompilationRequestProto::_internal_arg_shapes_size() const {
  return _impl_.arg_shapes_.size();
}
inline int TpuCompilationRequestProto::arg_shapes_size() const {
  return _internal_arg_shapes_size();
}
inline ::tensorflow::TensorShapeProto* TpuCompilationRequestProto::mutable_arg_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TpuCompilationRequestProto.arg_shapes)
  return _impl_.arg_shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
TpuCompilationRequestProto::mutable_arg_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tpu.TpuCompilationRequestProto.arg_shapes)
  return &_impl_.arg_shapes_;
}
inline const ::tensorflow::TensorShapeProto& TpuCompilationRequestProto::_internal_arg_shapes(int index) const {
  return _impl_.arg_shapes_.Get(index);
}
inline const ::tensorflow::TensorShapeProto& TpuCompilationRequestProto::arg_shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.arg_shapes)
  return _internal_arg_shapes(index);
}
inline ::tensorflow::TensorShapeProto* TpuCompilationRequestProto::_internal_add_arg_shapes() {
  return _impl_.arg_shapes_.Add();
}
inline ::tensorflow::TensorShapeProto* TpuCompilationRequestProto::add_arg_shapes() {
  ::tensorflow::TensorShapeProto* _add = _internal_add_arg_shapes();
  // @@protoc_insertion_point(field_add:tensorflow.tpu.TpuCompilationRequestProto.arg_shapes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
TpuCompilationRequestProto::arg_shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.tpu.TpuCompilationRequestProto.arg_shapes)
  return _impl_.arg_shapes_;
}

// repeated .tensorflow.TensorProto guaranteed_constants = 7;
inline int TpuCompilationRequestProto::_internal_guaranteed_constants_size() const {
  return _impl_.guaranteed_constants_.size();
}
inline int TpuCompilationRequestProto::guaranteed_constants_size() const {
  return _internal_guaranteed_constants_size();
}
inline ::tensorflow::TensorProto* TpuCompilationRequestProto::mutable_guaranteed_constants(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TpuCompilationRequestProto.guaranteed_constants)
  return _impl_.guaranteed_constants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >*
TpuCompilationRequestProto::mutable_guaranteed_constants() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tpu.TpuCompilationRequestProto.guaranteed_constants)
  return &_impl_.guaranteed_constants_;
}
inline const ::tensorflow::TensorProto& TpuCompilationRequestProto::_internal_guaranteed_constants(int index) const {
  return _impl_.guaranteed_constants_.Get(index);
}
inline const ::tensorflow::TensorProto& TpuCompilationRequestProto::guaranteed_constants(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.guaranteed_constants)
  return _internal_guaranteed_constants(index);
}
inline ::tensorflow::TensorProto* TpuCompilationRequestProto::_internal_add_guaranteed_constants() {
  return _impl_.guaranteed_constants_.Add();
}
inline ::tensorflow::TensorProto* TpuCompilationRequestProto::add_guaranteed_constants() {
  ::tensorflow::TensorProto* _add = _internal_add_guaranteed_constants();
  // @@protoc_insertion_point(field_add:tensorflow.tpu.TpuCompilationRequestProto.guaranteed_constants)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorProto >&
TpuCompilationRequestProto::guaranteed_constants() const {
  // @@protoc_insertion_point(field_list:tensorflow.tpu.TpuCompilationRequestProto.guaranteed_constants)
  return _impl_.guaranteed_constants_;
}

// string mlir_module = 8;
inline void TpuCompilationRequestProto::clear_mlir_module() {
  _impl_.mlir_module_.ClearToEmpty();
}
inline const std::string& TpuCompilationRequestProto::mlir_module() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.mlir_module)
  return _internal_mlir_module();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TpuCompilationRequestProto::set_mlir_module(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mlir_module_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationRequestProto.mlir_module)
}
inline std::string* TpuCompilationRequestProto::mutable_mlir_module() {
  std::string* _s = _internal_mutable_mlir_module();
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TpuCompilationRequestProto.mlir_module)
  return _s;
}
inline const std::string& TpuCompilationRequestProto::_internal_mlir_module() const {
  return _impl_.mlir_module_.Get();
}
inline void TpuCompilationRequestProto::_internal_set_mlir_module(const std::string& value) {
  
  _impl_.mlir_module_.Set(value, GetArenaForAllocation());
}
inline std::string* TpuCompilationRequestProto::_internal_mutable_mlir_module() {
  
  return _impl_.mlir_module_.Mutable(GetArenaForAllocation());
}
inline std::string* TpuCompilationRequestProto::release_mlir_module() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TpuCompilationRequestProto.mlir_module)
  return _impl_.mlir_module_.Release();
}
inline void TpuCompilationRequestProto::set_allocated_mlir_module(std::string* mlir_module) {
  if (mlir_module != nullptr) {
    
  } else {
    
  }
  _impl_.mlir_module_.SetAllocated(mlir_module, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mlir_module_.IsDefault()) {
    _impl_.mlir_module_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TpuCompilationRequestProto.mlir_module)
}

// .tensorflow.FunctionDefLibrary fdef_lib = 9;
inline bool TpuCompilationRequestProto::_internal_has_fdef_lib() const {
  return this != internal_default_instance() && _impl_.fdef_lib_ != nullptr;
}
inline bool TpuCompilationRequestProto::has_fdef_lib() const {
  return _internal_has_fdef_lib();
}
inline const ::tensorflow::FunctionDefLibrary& TpuCompilationRequestProto::_internal_fdef_lib() const {
  const ::tensorflow::FunctionDefLibrary* p = _impl_.fdef_lib_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::FunctionDefLibrary&>(
      ::tensorflow::_FunctionDefLibrary_default_instance_);
}
inline const ::tensorflow::FunctionDefLibrary& TpuCompilationRequestProto::fdef_lib() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.fdef_lib)
  return _internal_fdef_lib();
}
inline void TpuCompilationRequestProto::unsafe_arena_set_allocated_fdef_lib(
    ::tensorflow::FunctionDefLibrary* fdef_lib) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fdef_lib_);
  }
  _impl_.fdef_lib_ = fdef_lib;
  if (fdef_lib) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TpuCompilationRequestProto.fdef_lib)
}
inline ::tensorflow::FunctionDefLibrary* TpuCompilationRequestProto::release_fdef_lib() {
  
  ::tensorflow::FunctionDefLibrary* temp = _impl_.fdef_lib_;
  _impl_.fdef_lib_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::FunctionDefLibrary* TpuCompilationRequestProto::unsafe_arena_release_fdef_lib() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TpuCompilationRequestProto.fdef_lib)
  
  ::tensorflow::FunctionDefLibrary* temp = _impl_.fdef_lib_;
  _impl_.fdef_lib_ = nullptr;
  return temp;
}
inline ::tensorflow::FunctionDefLibrary* TpuCompilationRequestProto::_internal_mutable_fdef_lib() {
  
  if (_impl_.fdef_lib_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::FunctionDefLibrary>(GetArenaForAllocation());
    _impl_.fdef_lib_ = p;
  }
  return _impl_.fdef_lib_;
}
inline ::tensorflow::FunctionDefLibrary* TpuCompilationRequestProto::mutable_fdef_lib() {
  ::tensorflow::FunctionDefLibrary* _msg = _internal_mutable_fdef_lib();
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TpuCompilationRequestProto.fdef_lib)
  return _msg;
}
inline void TpuCompilationRequestProto::set_allocated_fdef_lib(::tensorflow::FunctionDefLibrary* fdef_lib) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fdef_lib_);
  }
  if (fdef_lib) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fdef_lib));
    if (message_arena != submessage_arena) {
      fdef_lib = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fdef_lib, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fdef_lib_ = fdef_lib;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TpuCompilationRequestProto.fdef_lib)
}

// int32 graph_def_version = 10;
inline void TpuCompilationRequestProto::clear_graph_def_version() {
  _impl_.graph_def_version_ = 0;
}
inline int32_t TpuCompilationRequestProto::_internal_graph_def_version() const {
  return _impl_.graph_def_version_;
}
inline int32_t TpuCompilationRequestProto::graph_def_version() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.graph_def_version)
  return _internal_graph_def_version();
}
inline void TpuCompilationRequestProto::_internal_set_graph_def_version(int32_t value) {
  
  _impl_.graph_def_version_ = value;
}
inline void TpuCompilationRequestProto::set_graph_def_version(int32_t value) {
  _internal_set_graph_def_version(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.TpuCompilationRequestProto.graph_def_version)
}

// .tensorflow.NameAttrList function = 11;
inline bool TpuCompilationRequestProto::_internal_has_function() const {
  return this != internal_default_instance() && _impl_.function_ != nullptr;
}
inline bool TpuCompilationRequestProto::has_function() const {
  return _internal_has_function();
}
inline const ::tensorflow::NameAttrList& TpuCompilationRequestProto::_internal_function() const {
  const ::tensorflow::NameAttrList* p = _impl_.function_;
  return p != nullptr ? *p : reinterpret_cast<const ::tensorflow::NameAttrList&>(
      ::tensorflow::_NameAttrList_default_instance_);
}
inline const ::tensorflow::NameAttrList& TpuCompilationRequestProto::function() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.TpuCompilationRequestProto.function)
  return _internal_function();
}
inline void TpuCompilationRequestProto::unsafe_arena_set_allocated_function(
    ::tensorflow::NameAttrList* function) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.function_);
  }
  _impl_.function_ = function;
  if (function) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.tpu.TpuCompilationRequestProto.function)
}
inline ::tensorflow::NameAttrList* TpuCompilationRequestProto::release_function() {
  
  ::tensorflow::NameAttrList* temp = _impl_.function_;
  _impl_.function_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tensorflow::NameAttrList* TpuCompilationRequestProto::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.TpuCompilationRequestProto.function)
  
  ::tensorflow::NameAttrList* temp = _impl_.function_;
  _impl_.function_ = nullptr;
  return temp;
}
inline ::tensorflow::NameAttrList* TpuCompilationRequestProto::_internal_mutable_function() {
  
  if (_impl_.function_ == nullptr) {
    auto* p = CreateMaybeMessage<::tensorflow::NameAttrList>(GetArenaForAllocation());
    _impl_.function_ = p;
  }
  return _impl_.function_;
}
inline ::tensorflow::NameAttrList* TpuCompilationRequestProto::mutable_function() {
  ::tensorflow::NameAttrList* _msg = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.TpuCompilationRequestProto.function)
  return _msg;
}
inline void TpuCompilationRequestProto::set_allocated_function(::tensorflow::NameAttrList* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.function_);
  }
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function));
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.function_ = function;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.TpuCompilationRequestProto.function)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tpu
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fcompile_2eproto
