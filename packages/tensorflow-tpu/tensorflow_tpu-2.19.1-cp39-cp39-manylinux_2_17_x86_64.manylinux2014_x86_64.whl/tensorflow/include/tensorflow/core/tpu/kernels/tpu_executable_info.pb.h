// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/tpu/kernels/tpu_executable_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "xla/service/hlo.pb.h"
#include "xla/xla_data.pb.h"
#include "tensorflow/core/framework/tensor_shape.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto;
namespace tensorflow {
class TPUExecutableInfoProto;
struct TPUExecutableInfoProtoDefaultTypeInternal;
extern TPUExecutableInfoProtoDefaultTypeInternal _TPUExecutableInfoProto_default_instance_;
class TPUExecutableInfoProto_ShapeIndex;
struct TPUExecutableInfoProto_ShapeIndexDefaultTypeInternal;
extern TPUExecutableInfoProto_ShapeIndexDefaultTypeInternal _TPUExecutableInfoProto_ShapeIndex_default_instance_;
class TPUExecutableInfoProto_UpdateIndexPair;
struct TPUExecutableInfoProto_UpdateIndexPairDefaultTypeInternal;
extern TPUExecutableInfoProto_UpdateIndexPairDefaultTypeInternal _TPUExecutableInfoProto_UpdateIndexPair_default_instance_;
class TPUHostTransferInfoProto;
struct TPUHostTransferInfoProtoDefaultTypeInternal;
extern TPUHostTransferInfoProtoDefaultTypeInternal _TPUHostTransferInfoProto_default_instance_;
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::TPUExecutableInfoProto* Arena::CreateMaybeMessage<::tensorflow::TPUExecutableInfoProto>(Arena*);
template<> ::tensorflow::TPUExecutableInfoProto_ShapeIndex* Arena::CreateMaybeMessage<::tensorflow::TPUExecutableInfoProto_ShapeIndex>(Arena*);
template<> ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* Arena::CreateMaybeMessage<::tensorflow::TPUExecutableInfoProto_UpdateIndexPair>(Arena*);
template<> ::tensorflow::TPUHostTransferInfoProto* Arena::CreateMaybeMessage<::tensorflow::TPUHostTransferInfoProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {

// ===================================================================

class TPUExecutableInfoProto_UpdateIndexPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TPUExecutableInfoProto.UpdateIndexPair) */ {
 public:
  inline TPUExecutableInfoProto_UpdateIndexPair() : TPUExecutableInfoProto_UpdateIndexPair(nullptr) {}
  ~TPUExecutableInfoProto_UpdateIndexPair() override;
  explicit PROTOBUF_CONSTEXPR TPUExecutableInfoProto_UpdateIndexPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPUExecutableInfoProto_UpdateIndexPair(const TPUExecutableInfoProto_UpdateIndexPair& from);
  TPUExecutableInfoProto_UpdateIndexPair(TPUExecutableInfoProto_UpdateIndexPair&& from) noexcept
    : TPUExecutableInfoProto_UpdateIndexPair() {
    *this = ::std::move(from);
  }

  inline TPUExecutableInfoProto_UpdateIndexPair& operator=(const TPUExecutableInfoProto_UpdateIndexPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPUExecutableInfoProto_UpdateIndexPair& operator=(TPUExecutableInfoProto_UpdateIndexPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPUExecutableInfoProto_UpdateIndexPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPUExecutableInfoProto_UpdateIndexPair* internal_default_instance() {
    return reinterpret_cast<const TPUExecutableInfoProto_UpdateIndexPair*>(
               &_TPUExecutableInfoProto_UpdateIndexPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TPUExecutableInfoProto_UpdateIndexPair& a, TPUExecutableInfoProto_UpdateIndexPair& b) {
    a.Swap(&b);
  }
  inline void Swap(TPUExecutableInfoProto_UpdateIndexPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPUExecutableInfoProto_UpdateIndexPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPUExecutableInfoProto_UpdateIndexPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPUExecutableInfoProto_UpdateIndexPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPUExecutableInfoProto_UpdateIndexPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPUExecutableInfoProto_UpdateIndexPair& from) {
    TPUExecutableInfoProto_UpdateIndexPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUExecutableInfoProto_UpdateIndexPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TPUExecutableInfoProto.UpdateIndexPair";
  }
  protected:
  explicit TPUExecutableInfoProto_UpdateIndexPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kUpdatedFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // bool updated = 2;
  void clear_updated();
  bool updated() const;
  void set_updated(bool value);
  private:
  bool _internal_updated() const;
  void _internal_set_updated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.TPUExecutableInfoProto.UpdateIndexPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    bool updated_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TPUExecutableInfoProto_ShapeIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TPUExecutableInfoProto.ShapeIndex) */ {
 public:
  inline TPUExecutableInfoProto_ShapeIndex() : TPUExecutableInfoProto_ShapeIndex(nullptr) {}
  ~TPUExecutableInfoProto_ShapeIndex() override;
  explicit PROTOBUF_CONSTEXPR TPUExecutableInfoProto_ShapeIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPUExecutableInfoProto_ShapeIndex(const TPUExecutableInfoProto_ShapeIndex& from);
  TPUExecutableInfoProto_ShapeIndex(TPUExecutableInfoProto_ShapeIndex&& from) noexcept
    : TPUExecutableInfoProto_ShapeIndex() {
    *this = ::std::move(from);
  }

  inline TPUExecutableInfoProto_ShapeIndex& operator=(const TPUExecutableInfoProto_ShapeIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPUExecutableInfoProto_ShapeIndex& operator=(TPUExecutableInfoProto_ShapeIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPUExecutableInfoProto_ShapeIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPUExecutableInfoProto_ShapeIndex* internal_default_instance() {
    return reinterpret_cast<const TPUExecutableInfoProto_ShapeIndex*>(
               &_TPUExecutableInfoProto_ShapeIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TPUExecutableInfoProto_ShapeIndex& a, TPUExecutableInfoProto_ShapeIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(TPUExecutableInfoProto_ShapeIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPUExecutableInfoProto_ShapeIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPUExecutableInfoProto_ShapeIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPUExecutableInfoProto_ShapeIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPUExecutableInfoProto_ShapeIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPUExecutableInfoProto_ShapeIndex& from) {
    TPUExecutableInfoProto_ShapeIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUExecutableInfoProto_ShapeIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TPUExecutableInfoProto.ShapeIndex";
  }
  protected:
  explicit TPUExecutableInfoProto_ShapeIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // repeated int32 index = 1;
  int index_size() const;
  private:
  int _internal_index_size() const;
  public:
  void clear_index();
  private:
  int32_t _internal_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_index() const;
  void _internal_add_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_index();
  public:
  int32_t index(int index) const;
  void set_index(int index, int32_t value);
  void add_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:tensorflow.TPUExecutableInfoProto.ShapeIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > index_;
    mutable std::atomic<int> _index_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TPUExecutableInfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TPUExecutableInfoProto) */ {
 public:
  inline TPUExecutableInfoProto() : TPUExecutableInfoProto(nullptr) {}
  ~TPUExecutableInfoProto() override;
  explicit PROTOBUF_CONSTEXPR TPUExecutableInfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPUExecutableInfoProto(const TPUExecutableInfoProto& from);
  TPUExecutableInfoProto(TPUExecutableInfoProto&& from) noexcept
    : TPUExecutableInfoProto() {
    *this = ::std::move(from);
  }

  inline TPUExecutableInfoProto& operator=(const TPUExecutableInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPUExecutableInfoProto& operator=(TPUExecutableInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPUExecutableInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPUExecutableInfoProto* internal_default_instance() {
    return reinterpret_cast<const TPUExecutableInfoProto*>(
               &_TPUExecutableInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TPUExecutableInfoProto& a, TPUExecutableInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TPUExecutableInfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPUExecutableInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPUExecutableInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPUExecutableInfoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPUExecutableInfoProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPUExecutableInfoProto& from) {
    TPUExecutableInfoProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUExecutableInfoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TPUExecutableInfoProto";
  }
  protected:
  explicit TPUExecutableInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TPUExecutableInfoProto_UpdateIndexPair UpdateIndexPair;
  typedef TPUExecutableInfoProto_ShapeIndex ShapeIndex;

  // accessors -------------------------------------------------------

  enum : int {
    kInputShapesFieldNumber = 2,
    kOutputTensorShapesFieldNumber = 8,
    kVariableIndicesFieldNumber = 10,
    kDynamicOutputIndicesFieldNumber = 11,
    kOutputShapeFieldNumber = 3,
    kSessionModuleFieldNumber = 5,
    kDeviceAssignmentFieldNumber = 6,
  };
  // repeated .xla.ShapeProto input_shapes = 2;
  int input_shapes_size() const;
  private:
  int _internal_input_shapes_size() const;
  public:
  void clear_input_shapes();
  ::xla::ShapeProto* mutable_input_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >*
      mutable_input_shapes();
  private:
  const ::xla::ShapeProto& _internal_input_shapes(int index) const;
  ::xla::ShapeProto* _internal_add_input_shapes();
  public:
  const ::xla::ShapeProto& input_shapes(int index) const;
  ::xla::ShapeProto* add_input_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >&
      input_shapes() const;

  // repeated .tensorflow.TensorShapeProto output_tensor_shapes = 8;
  int output_tensor_shapes_size() const;
  private:
  int _internal_output_tensor_shapes_size() const;
  public:
  void clear_output_tensor_shapes();
  ::tensorflow::TensorShapeProto* mutable_output_tensor_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
      mutable_output_tensor_shapes();
  private:
  const ::tensorflow::TensorShapeProto& _internal_output_tensor_shapes(int index) const;
  ::tensorflow::TensorShapeProto* _internal_add_output_tensor_shapes();
  public:
  const ::tensorflow::TensorShapeProto& output_tensor_shapes(int index) const;
  ::tensorflow::TensorShapeProto* add_output_tensor_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
      output_tensor_shapes() const;

  // repeated .tensorflow.TPUExecutableInfoProto.UpdateIndexPair variable_indices = 10;
  int variable_indices_size() const;
  private:
  int _internal_variable_indices_size() const;
  public:
  void clear_variable_indices();
  ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* mutable_variable_indices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair >*
      mutable_variable_indices();
  private:
  const ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair& _internal_variable_indices(int index) const;
  ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* _internal_add_variable_indices();
  public:
  const ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair& variable_indices(int index) const;
  ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* add_variable_indices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair >&
      variable_indices() const;

  // repeated .tensorflow.TPUExecutableInfoProto.ShapeIndex dynamic_output_indices = 11;
  int dynamic_output_indices_size() const;
  private:
  int _internal_dynamic_output_indices_size() const;
  public:
  void clear_dynamic_output_indices();
  ::tensorflow::TPUExecutableInfoProto_ShapeIndex* mutable_dynamic_output_indices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex >*
      mutable_dynamic_output_indices();
  private:
  const ::tensorflow::TPUExecutableInfoProto_ShapeIndex& _internal_dynamic_output_indices(int index) const;
  ::tensorflow::TPUExecutableInfoProto_ShapeIndex* _internal_add_dynamic_output_indices();
  public:
  const ::tensorflow::TPUExecutableInfoProto_ShapeIndex& dynamic_output_indices(int index) const;
  ::tensorflow::TPUExecutableInfoProto_ShapeIndex* add_dynamic_output_indices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex >&
      dynamic_output_indices() const;

  // .xla.ShapeProto output_shape = 3;
  bool has_output_shape() const;
  private:
  bool _internal_has_output_shape() const;
  public:
  void clear_output_shape();
  const ::xla::ShapeProto& output_shape() const;
  PROTOBUF_NODISCARD ::xla::ShapeProto* release_output_shape();
  ::xla::ShapeProto* mutable_output_shape();
  void set_allocated_output_shape(::xla::ShapeProto* output_shape);
  private:
  const ::xla::ShapeProto& _internal_output_shape() const;
  ::xla::ShapeProto* _internal_mutable_output_shape();
  public:
  void unsafe_arena_set_allocated_output_shape(
      ::xla::ShapeProto* output_shape);
  ::xla::ShapeProto* unsafe_arena_release_output_shape();

  // .xla.HloSnapshot session_module = 5;
  bool has_session_module() const;
  private:
  bool _internal_has_session_module() const;
  public:
  void clear_session_module();
  const ::xla::HloSnapshot& session_module() const;
  PROTOBUF_NODISCARD ::xla::HloSnapshot* release_session_module();
  ::xla::HloSnapshot* mutable_session_module();
  void set_allocated_session_module(::xla::HloSnapshot* session_module);
  private:
  const ::xla::HloSnapshot& _internal_session_module() const;
  ::xla::HloSnapshot* _internal_mutable_session_module();
  public:
  void unsafe_arena_set_allocated_session_module(
      ::xla::HloSnapshot* session_module);
  ::xla::HloSnapshot* unsafe_arena_release_session_module();

  // .xla.DeviceAssignmentProto device_assignment = 6;
  bool has_device_assignment() const;
  private:
  bool _internal_has_device_assignment() const;
  public:
  void clear_device_assignment();
  const ::xla::DeviceAssignmentProto& device_assignment() const;
  PROTOBUF_NODISCARD ::xla::DeviceAssignmentProto* release_device_assignment();
  ::xla::DeviceAssignmentProto* mutable_device_assignment();
  void set_allocated_device_assignment(::xla::DeviceAssignmentProto* device_assignment);
  private:
  const ::xla::DeviceAssignmentProto& _internal_device_assignment() const;
  ::xla::DeviceAssignmentProto* _internal_mutable_device_assignment();
  public:
  void unsafe_arena_set_allocated_device_assignment(
      ::xla::DeviceAssignmentProto* device_assignment);
  ::xla::DeviceAssignmentProto* unsafe_arena_release_device_assignment();

  // @@protoc_insertion_point(class_scope:tensorflow.TPUExecutableInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto > input_shapes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto > output_tensor_shapes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair > variable_indices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex > dynamic_output_indices_;
    ::xla::ShapeProto* output_shape_;
    ::xla::HloSnapshot* session_module_;
    ::xla::DeviceAssignmentProto* device_assignment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto;
};
// -------------------------------------------------------------------

class TPUHostTransferInfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.TPUHostTransferInfoProto) */ {
 public:
  inline TPUHostTransferInfoProto() : TPUHostTransferInfoProto(nullptr) {}
  ~TPUHostTransferInfoProto() override;
  explicit PROTOBUF_CONSTEXPR TPUHostTransferInfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPUHostTransferInfoProto(const TPUHostTransferInfoProto& from);
  TPUHostTransferInfoProto(TPUHostTransferInfoProto&& from) noexcept
    : TPUHostTransferInfoProto() {
    *this = ::std::move(from);
  }

  inline TPUHostTransferInfoProto& operator=(const TPUHostTransferInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPUHostTransferInfoProto& operator=(TPUHostTransferInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPUHostTransferInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPUHostTransferInfoProto* internal_default_instance() {
    return reinterpret_cast<const TPUHostTransferInfoProto*>(
               &_TPUHostTransferInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TPUHostTransferInfoProto& a, TPUHostTransferInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TPUHostTransferInfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPUHostTransferInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPUHostTransferInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPUHostTransferInfoProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPUHostTransferInfoProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPUHostTransferInfoProto& from) {
    TPUHostTransferInfoProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPUHostTransferInfoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.TPUHostTransferInfoProto";
  }
  protected:
  explicit TPUHostTransferInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedTransfersFieldNumber = 2,
  };
  // repeated bytes serialized_transfers = 2 [ctype = CORD];
  int serialized_transfers_size() const;
  private:
  int _internal_serialized_transfers_size() const;
  public:
  void clear_serialized_transfers();
 private:
  // Hidden due to unknown ctype option.
  const std::string& serialized_transfers(int index) const;
  std::string* mutable_serialized_transfers(int index);
  void set_serialized_transfers(int index, const std::string& value);
  void set_serialized_transfers(int index, std::string&& value);
  void set_serialized_transfers(int index, const char* value);
  void set_serialized_transfers(int index, const void* value, size_t size);
  std::string* add_serialized_transfers();
  void add_serialized_transfers(const std::string& value);
  void add_serialized_transfers(std::string&& value);
  void add_serialized_transfers(const char* value);
  void add_serialized_transfers(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& serialized_transfers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_serialized_transfers();
  private:
  const std::string& _internal_serialized_transfers(int index) const;
  std::string* _internal_add_serialized_transfers();
  public:
 public:

  // @@protoc_insertion_point(class_scope:tensorflow.TPUHostTransferInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> serialized_transfers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TPUExecutableInfoProto_UpdateIndexPair

// int32 index = 1;
inline void TPUExecutableInfoProto_UpdateIndexPair::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t TPUExecutableInfoProto_UpdateIndexPair::_internal_index() const {
  return _impl_.index_;
}
inline int32_t TPUExecutableInfoProto_UpdateIndexPair::index() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.UpdateIndexPair.index)
  return _internal_index();
}
inline void TPUExecutableInfoProto_UpdateIndexPair::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void TPUExecutableInfoProto_UpdateIndexPair::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tensorflow.TPUExecutableInfoProto.UpdateIndexPair.index)
}

// bool updated = 2;
inline void TPUExecutableInfoProto_UpdateIndexPair::clear_updated() {
  _impl_.updated_ = false;
}
inline bool TPUExecutableInfoProto_UpdateIndexPair::_internal_updated() const {
  return _impl_.updated_;
}
inline bool TPUExecutableInfoProto_UpdateIndexPair::updated() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.UpdateIndexPair.updated)
  return _internal_updated();
}
inline void TPUExecutableInfoProto_UpdateIndexPair::_internal_set_updated(bool value) {
  
  _impl_.updated_ = value;
}
inline void TPUExecutableInfoProto_UpdateIndexPair::set_updated(bool value) {
  _internal_set_updated(value);
  // @@protoc_insertion_point(field_set:tensorflow.TPUExecutableInfoProto.UpdateIndexPair.updated)
}

// -------------------------------------------------------------------

// TPUExecutableInfoProto_ShapeIndex

// repeated int32 index = 1;
inline int TPUExecutableInfoProto_ShapeIndex::_internal_index_size() const {
  return _impl_.index_.size();
}
inline int TPUExecutableInfoProto_ShapeIndex::index_size() const {
  return _internal_index_size();
}
inline void TPUExecutableInfoProto_ShapeIndex::clear_index() {
  _impl_.index_.Clear();
}
inline int32_t TPUExecutableInfoProto_ShapeIndex::_internal_index(int index) const {
  return _impl_.index_.Get(index);
}
inline int32_t TPUExecutableInfoProto_ShapeIndex::index(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
  return _internal_index(index);
}
inline void TPUExecutableInfoProto_ShapeIndex::set_index(int index, int32_t value) {
  _impl_.index_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
}
inline void TPUExecutableInfoProto_ShapeIndex::_internal_add_index(int32_t value) {
  _impl_.index_.Add(value);
}
inline void TPUExecutableInfoProto_ShapeIndex::add_index(int32_t value) {
  _internal_add_index(value);
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TPUExecutableInfoProto_ShapeIndex::_internal_index() const {
  return _impl_.index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TPUExecutableInfoProto_ShapeIndex::index() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
  return _internal_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TPUExecutableInfoProto_ShapeIndex::_internal_mutable_index() {
  return &_impl_.index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TPUExecutableInfoProto_ShapeIndex::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.ShapeIndex.index)
  return _internal_mutable_index();
}

// -------------------------------------------------------------------

// TPUExecutableInfoProto

// repeated .xla.ShapeProto input_shapes = 2;
inline int TPUExecutableInfoProto::_internal_input_shapes_size() const {
  return _impl_.input_shapes_.size();
}
inline int TPUExecutableInfoProto::input_shapes_size() const {
  return _internal_input_shapes_size();
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::mutable_input_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.input_shapes)
  return _impl_.input_shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >*
TPUExecutableInfoProto::mutable_input_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.input_shapes)
  return &_impl_.input_shapes_;
}
inline const ::xla::ShapeProto& TPUExecutableInfoProto::_internal_input_shapes(int index) const {
  return _impl_.input_shapes_.Get(index);
}
inline const ::xla::ShapeProto& TPUExecutableInfoProto::input_shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.input_shapes)
  return _internal_input_shapes(index);
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::_internal_add_input_shapes() {
  return _impl_.input_shapes_.Add();
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::add_input_shapes() {
  ::xla::ShapeProto* _add = _internal_add_input_shapes();
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.input_shapes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::ShapeProto >&
TPUExecutableInfoProto::input_shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.input_shapes)
  return _impl_.input_shapes_;
}

// .xla.ShapeProto output_shape = 3;
inline bool TPUExecutableInfoProto::_internal_has_output_shape() const {
  return this != internal_default_instance() && _impl_.output_shape_ != nullptr;
}
inline bool TPUExecutableInfoProto::has_output_shape() const {
  return _internal_has_output_shape();
}
inline const ::xla::ShapeProto& TPUExecutableInfoProto::_internal_output_shape() const {
  const ::xla::ShapeProto* p = _impl_.output_shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::ShapeProto&>(
      ::xla::_ShapeProto_default_instance_);
}
inline const ::xla::ShapeProto& TPUExecutableInfoProto::output_shape() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.output_shape)
  return _internal_output_shape();
}
inline void TPUExecutableInfoProto::unsafe_arena_set_allocated_output_shape(
    ::xla::ShapeProto* output_shape) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_shape_);
  }
  _impl_.output_shape_ = output_shape;
  if (output_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TPUExecutableInfoProto.output_shape)
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::release_output_shape() {
  
  ::xla::ShapeProto* temp = _impl_.output_shape_;
  _impl_.output_shape_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::unsafe_arena_release_output_shape() {
  // @@protoc_insertion_point(field_release:tensorflow.TPUExecutableInfoProto.output_shape)
  
  ::xla::ShapeProto* temp = _impl_.output_shape_;
  _impl_.output_shape_ = nullptr;
  return temp;
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::_internal_mutable_output_shape() {
  
  if (_impl_.output_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::ShapeProto>(GetArenaForAllocation());
    _impl_.output_shape_ = p;
  }
  return _impl_.output_shape_;
}
inline ::xla::ShapeProto* TPUExecutableInfoProto::mutable_output_shape() {
  ::xla::ShapeProto* _msg = _internal_mutable_output_shape();
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.output_shape)
  return _msg;
}
inline void TPUExecutableInfoProto::set_allocated_output_shape(::xla::ShapeProto* output_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.output_shape_);
  }
  if (output_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_shape));
    if (message_arena != submessage_arena) {
      output_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_shape, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.output_shape_ = output_shape;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TPUExecutableInfoProto.output_shape)
}

// repeated .tensorflow.TPUExecutableInfoProto.ShapeIndex dynamic_output_indices = 11;
inline int TPUExecutableInfoProto::_internal_dynamic_output_indices_size() const {
  return _impl_.dynamic_output_indices_.size();
}
inline int TPUExecutableInfoProto::dynamic_output_indices_size() const {
  return _internal_dynamic_output_indices_size();
}
inline void TPUExecutableInfoProto::clear_dynamic_output_indices() {
  _impl_.dynamic_output_indices_.Clear();
}
inline ::tensorflow::TPUExecutableInfoProto_ShapeIndex* TPUExecutableInfoProto::mutable_dynamic_output_indices(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return _impl_.dynamic_output_indices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex >*
TPUExecutableInfoProto::mutable_dynamic_output_indices() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return &_impl_.dynamic_output_indices_;
}
inline const ::tensorflow::TPUExecutableInfoProto_ShapeIndex& TPUExecutableInfoProto::_internal_dynamic_output_indices(int index) const {
  return _impl_.dynamic_output_indices_.Get(index);
}
inline const ::tensorflow::TPUExecutableInfoProto_ShapeIndex& TPUExecutableInfoProto::dynamic_output_indices(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return _internal_dynamic_output_indices(index);
}
inline ::tensorflow::TPUExecutableInfoProto_ShapeIndex* TPUExecutableInfoProto::_internal_add_dynamic_output_indices() {
  return _impl_.dynamic_output_indices_.Add();
}
inline ::tensorflow::TPUExecutableInfoProto_ShapeIndex* TPUExecutableInfoProto::add_dynamic_output_indices() {
  ::tensorflow::TPUExecutableInfoProto_ShapeIndex* _add = _internal_add_dynamic_output_indices();
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_ShapeIndex >&
TPUExecutableInfoProto::dynamic_output_indices() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.dynamic_output_indices)
  return _impl_.dynamic_output_indices_;
}

// repeated .tensorflow.TPUExecutableInfoProto.UpdateIndexPair variable_indices = 10;
inline int TPUExecutableInfoProto::_internal_variable_indices_size() const {
  return _impl_.variable_indices_.size();
}
inline int TPUExecutableInfoProto::variable_indices_size() const {
  return _internal_variable_indices_size();
}
inline void TPUExecutableInfoProto::clear_variable_indices() {
  _impl_.variable_indices_.Clear();
}
inline ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* TPUExecutableInfoProto::mutable_variable_indices(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.variable_indices)
  return _impl_.variable_indices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair >*
TPUExecutableInfoProto::mutable_variable_indices() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.variable_indices)
  return &_impl_.variable_indices_;
}
inline const ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair& TPUExecutableInfoProto::_internal_variable_indices(int index) const {
  return _impl_.variable_indices_.Get(index);
}
inline const ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair& TPUExecutableInfoProto::variable_indices(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.variable_indices)
  return _internal_variable_indices(index);
}
inline ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* TPUExecutableInfoProto::_internal_add_variable_indices() {
  return _impl_.variable_indices_.Add();
}
inline ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* TPUExecutableInfoProto::add_variable_indices() {
  ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair* _add = _internal_add_variable_indices();
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.variable_indices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TPUExecutableInfoProto_UpdateIndexPair >&
TPUExecutableInfoProto::variable_indices() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.variable_indices)
  return _impl_.variable_indices_;
}

// repeated .tensorflow.TensorShapeProto output_tensor_shapes = 8;
inline int TPUExecutableInfoProto::_internal_output_tensor_shapes_size() const {
  return _impl_.output_tensor_shapes_.size();
}
inline int TPUExecutableInfoProto::output_tensor_shapes_size() const {
  return _internal_output_tensor_shapes_size();
}
inline ::tensorflow::TensorShapeProto* TPUExecutableInfoProto::mutable_output_tensor_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return _impl_.output_tensor_shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >*
TPUExecutableInfoProto::mutable_output_tensor_shapes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return &_impl_.output_tensor_shapes_;
}
inline const ::tensorflow::TensorShapeProto& TPUExecutableInfoProto::_internal_output_tensor_shapes(int index) const {
  return _impl_.output_tensor_shapes_.Get(index);
}
inline const ::tensorflow::TensorShapeProto& TPUExecutableInfoProto::output_tensor_shapes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return _internal_output_tensor_shapes(index);
}
inline ::tensorflow::TensorShapeProto* TPUExecutableInfoProto::_internal_add_output_tensor_shapes() {
  return _impl_.output_tensor_shapes_.Add();
}
inline ::tensorflow::TensorShapeProto* TPUExecutableInfoProto::add_output_tensor_shapes() {
  ::tensorflow::TensorShapeProto* _add = _internal_add_output_tensor_shapes();
  // @@protoc_insertion_point(field_add:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tensorflow::TensorShapeProto >&
TPUExecutableInfoProto::output_tensor_shapes() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUExecutableInfoProto.output_tensor_shapes)
  return _impl_.output_tensor_shapes_;
}

// .xla.HloSnapshot session_module = 5;
inline bool TPUExecutableInfoProto::_internal_has_session_module() const {
  return this != internal_default_instance() && _impl_.session_module_ != nullptr;
}
inline bool TPUExecutableInfoProto::has_session_module() const {
  return _internal_has_session_module();
}
inline const ::xla::HloSnapshot& TPUExecutableInfoProto::_internal_session_module() const {
  const ::xla::HloSnapshot* p = _impl_.session_module_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::HloSnapshot&>(
      ::xla::_HloSnapshot_default_instance_);
}
inline const ::xla::HloSnapshot& TPUExecutableInfoProto::session_module() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.session_module)
  return _internal_session_module();
}
inline void TPUExecutableInfoProto::unsafe_arena_set_allocated_session_module(
    ::xla::HloSnapshot* session_module) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_module_);
  }
  _impl_.session_module_ = session_module;
  if (session_module) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TPUExecutableInfoProto.session_module)
}
inline ::xla::HloSnapshot* TPUExecutableInfoProto::release_session_module() {
  
  ::xla::HloSnapshot* temp = _impl_.session_module_;
  _impl_.session_module_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::HloSnapshot* TPUExecutableInfoProto::unsafe_arena_release_session_module() {
  // @@protoc_insertion_point(field_release:tensorflow.TPUExecutableInfoProto.session_module)
  
  ::xla::HloSnapshot* temp = _impl_.session_module_;
  _impl_.session_module_ = nullptr;
  return temp;
}
inline ::xla::HloSnapshot* TPUExecutableInfoProto::_internal_mutable_session_module() {
  
  if (_impl_.session_module_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::HloSnapshot>(GetArenaForAllocation());
    _impl_.session_module_ = p;
  }
  return _impl_.session_module_;
}
inline ::xla::HloSnapshot* TPUExecutableInfoProto::mutable_session_module() {
  ::xla::HloSnapshot* _msg = _internal_mutable_session_module();
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.session_module)
  return _msg;
}
inline void TPUExecutableInfoProto::set_allocated_session_module(::xla::HloSnapshot* session_module) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_module_);
  }
  if (session_module) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_module));
    if (message_arena != submessage_arena) {
      session_module = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_module, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.session_module_ = session_module;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TPUExecutableInfoProto.session_module)
}

// .xla.DeviceAssignmentProto device_assignment = 6;
inline bool TPUExecutableInfoProto::_internal_has_device_assignment() const {
  return this != internal_default_instance() && _impl_.device_assignment_ != nullptr;
}
inline bool TPUExecutableInfoProto::has_device_assignment() const {
  return _internal_has_device_assignment();
}
inline const ::xla::DeviceAssignmentProto& TPUExecutableInfoProto::_internal_device_assignment() const {
  const ::xla::DeviceAssignmentProto* p = _impl_.device_assignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::xla::DeviceAssignmentProto&>(
      ::xla::_DeviceAssignmentProto_default_instance_);
}
inline const ::xla::DeviceAssignmentProto& TPUExecutableInfoProto::device_assignment() const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUExecutableInfoProto.device_assignment)
  return _internal_device_assignment();
}
inline void TPUExecutableInfoProto::unsafe_arena_set_allocated_device_assignment(
    ::xla::DeviceAssignmentProto* device_assignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_assignment_);
  }
  _impl_.device_assignment_ = device_assignment;
  if (device_assignment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.TPUExecutableInfoProto.device_assignment)
}
inline ::xla::DeviceAssignmentProto* TPUExecutableInfoProto::release_device_assignment() {
  
  ::xla::DeviceAssignmentProto* temp = _impl_.device_assignment_;
  _impl_.device_assignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::xla::DeviceAssignmentProto* TPUExecutableInfoProto::unsafe_arena_release_device_assignment() {
  // @@protoc_insertion_point(field_release:tensorflow.TPUExecutableInfoProto.device_assignment)
  
  ::xla::DeviceAssignmentProto* temp = _impl_.device_assignment_;
  _impl_.device_assignment_ = nullptr;
  return temp;
}
inline ::xla::DeviceAssignmentProto* TPUExecutableInfoProto::_internal_mutable_device_assignment() {
  
  if (_impl_.device_assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::xla::DeviceAssignmentProto>(GetArenaForAllocation());
    _impl_.device_assignment_ = p;
  }
  return _impl_.device_assignment_;
}
inline ::xla::DeviceAssignmentProto* TPUExecutableInfoProto::mutable_device_assignment() {
  ::xla::DeviceAssignmentProto* _msg = _internal_mutable_device_assignment();
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUExecutableInfoProto.device_assignment)
  return _msg;
}
inline void TPUExecutableInfoProto::set_allocated_device_assignment(::xla::DeviceAssignmentProto* device_assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_assignment_);
  }
  if (device_assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_assignment));
    if (message_arena != submessage_arena) {
      device_assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_assignment, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.device_assignment_ = device_assignment;
  // @@protoc_insertion_point(field_set_allocated:tensorflow.TPUExecutableInfoProto.device_assignment)
}

// -------------------------------------------------------------------

// TPUHostTransferInfoProto

// repeated bytes serialized_transfers = 2 [ctype = CORD];
inline int TPUHostTransferInfoProto::_internal_serialized_transfers_size() const {
  return _impl_.serialized_transfers_.size();
}
inline int TPUHostTransferInfoProto::serialized_transfers_size() const {
  return _internal_serialized_transfers_size();
}
inline void TPUHostTransferInfoProto::clear_serialized_transfers() {
  _impl_.serialized_transfers_.Clear();
}
inline std::string* TPUHostTransferInfoProto::add_serialized_transfers() {
  std::string* _s = _internal_add_serialized_transfers();
  // @@protoc_insertion_point(field_add_mutable:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
  return _s;
}
inline const std::string& TPUHostTransferInfoProto::_internal_serialized_transfers(int index) const {
  return _impl_.serialized_transfers_.Get(index);
}
inline const std::string& TPUHostTransferInfoProto::serialized_transfers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
  return _internal_serialized_transfers(index);
}
inline std::string* TPUHostTransferInfoProto::mutable_serialized_transfers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
  return _impl_.serialized_transfers_.Mutable(index);
}
inline void TPUHostTransferInfoProto::set_serialized_transfers(int index, const std::string& value) {
  _impl_.serialized_transfers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
}
inline void TPUHostTransferInfoProto::set_serialized_transfers(int index, std::string&& value) {
  _impl_.serialized_transfers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
}
inline void TPUHostTransferInfoProto::set_serialized_transfers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.serialized_transfers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
}
inline void TPUHostTransferInfoProto::set_serialized_transfers(int index, const void* value, size_t size) {
  _impl_.serialized_transfers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
}
inline std::string* TPUHostTransferInfoProto::_internal_add_serialized_transfers() {
  return _impl_.serialized_transfers_.Add();
}
inline void TPUHostTransferInfoProto::add_serialized_transfers(const std::string& value) {
  _impl_.serialized_transfers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
}
inline void TPUHostTransferInfoProto::add_serialized_transfers(std::string&& value) {
  _impl_.serialized_transfers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
}
inline void TPUHostTransferInfoProto::add_serialized_transfers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.serialized_transfers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
}
inline void TPUHostTransferInfoProto::add_serialized_transfers(const void* value, size_t size) {
  _impl_.serialized_transfers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TPUHostTransferInfoProto::serialized_transfers() const {
  // @@protoc_insertion_point(field_list:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
  return _impl_.serialized_transfers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TPUHostTransferInfoProto::mutable_serialized_transfers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.TPUHostTransferInfoProto.serialized_transfers)
  return &_impl_.serialized_transfers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2ftpu_2fkernels_2ftpu_5fexecutable_5finfo_2eproto
