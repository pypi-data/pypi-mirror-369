// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/tpu/compilation_result.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompilation_5fresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompilation_5fresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xla/service/hlo.pb.h"
#include "tensorflow/core/protobuf/error_codes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompilation_5fresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompilation_5fresult_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompilation_5fresult_2eproto;
namespace tensorflow {
namespace tpu {
class CompilationResultProto;
struct CompilationResultProtoDefaultTypeInternal;
extern CompilationResultProtoDefaultTypeInternal _CompilationResultProto_default_instance_;
}  // namespace tpu
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> ::tensorflow::tpu::CompilationResultProto* Arena::CreateMaybeMessage<::tensorflow::tpu::CompilationResultProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tensorflow {
namespace tpu {

enum CompilationResultProto_ErrorCode : int {
  CompilationResultProto_ErrorCode_UNKNOWN = 0,
  CompilationResultProto_ErrorCode_OUT_OF_MEMORY = 1,
  CompilationResultProto_ErrorCode_CompilationResultProto_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CompilationResultProto_ErrorCode_CompilationResultProto_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CompilationResultProto_ErrorCode_IsValid(int value);
constexpr CompilationResultProto_ErrorCode CompilationResultProto_ErrorCode_ErrorCode_MIN = CompilationResultProto_ErrorCode_UNKNOWN;
constexpr CompilationResultProto_ErrorCode CompilationResultProto_ErrorCode_ErrorCode_MAX = CompilationResultProto_ErrorCode_OUT_OF_MEMORY;
constexpr int CompilationResultProto_ErrorCode_ErrorCode_ARRAYSIZE = CompilationResultProto_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompilationResultProto_ErrorCode_descriptor();
template<typename T>
inline const std::string& CompilationResultProto_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompilationResultProto_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompilationResultProto_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompilationResultProto_ErrorCode_descriptor(), enum_t_value);
}
inline bool CompilationResultProto_ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompilationResultProto_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompilationResultProto_ErrorCode>(
    CompilationResultProto_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class CompilationResultProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tensorflow.tpu.CompilationResultProto) */ {
 public:
  inline CompilationResultProto() : CompilationResultProto(nullptr) {}
  ~CompilationResultProto() override;
  explicit PROTOBUF_CONSTEXPR CompilationResultProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompilationResultProto(const CompilationResultProto& from);
  CompilationResultProto(CompilationResultProto&& from) noexcept
    : CompilationResultProto() {
    *this = ::std::move(from);
  }

  inline CompilationResultProto& operator=(const CompilationResultProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompilationResultProto& operator=(CompilationResultProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompilationResultProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompilationResultProto* internal_default_instance() {
    return reinterpret_cast<const CompilationResultProto*>(
               &_CompilationResultProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CompilationResultProto& a, CompilationResultProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CompilationResultProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompilationResultProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompilationResultProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompilationResultProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompilationResultProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompilationResultProto& from) {
    CompilationResultProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompilationResultProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tensorflow.tpu.CompilationResultProto";
  }
  protected:
  explicit CompilationResultProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CompilationResultProto_ErrorCode ErrorCode;
  static constexpr ErrorCode UNKNOWN =
    CompilationResultProto_ErrorCode_UNKNOWN;
  static constexpr ErrorCode OUT_OF_MEMORY =
    CompilationResultProto_ErrorCode_OUT_OF_MEMORY;
  static inline bool ErrorCode_IsValid(int value) {
    return CompilationResultProto_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    CompilationResultProto_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    CompilationResultProto_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    CompilationResultProto_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return CompilationResultProto_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return CompilationResultProto_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorCode* value) {
    return CompilationResultProto_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHloProtosFieldNumber = 3,
    kStatusErrorMessageFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
    kErrorCodeFieldNumber = 4,
  };
  // repeated .xla.HloProto hlo_protos = 3;
  int hlo_protos_size() const;
  private:
  int _internal_hlo_protos_size() const;
  public:
  void clear_hlo_protos();
  ::xla::HloProto* mutable_hlo_protos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::HloProto >*
      mutable_hlo_protos();
  private:
  const ::xla::HloProto& _internal_hlo_protos(int index) const;
  ::xla::HloProto* _internal_add_hlo_protos();
  public:
  const ::xla::HloProto& hlo_protos(int index) const;
  ::xla::HloProto* add_hlo_protos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::HloProto >&
      hlo_protos() const;

  // string status_error_message = 2;
  void clear_status_error_message();
  const std::string& status_error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_error_message();
  PROTOBUF_NODISCARD std::string* release_status_error_message();
  void set_allocated_status_error_message(std::string* status_error_message);
  private:
  const std::string& _internal_status_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_error_message(const std::string& value);
  std::string* _internal_mutable_status_error_message();
  public:

  // .tensorflow.error.Code status_code = 1;
  void clear_status_code();
  ::tensorflow::error::Code status_code() const;
  void set_status_code(::tensorflow::error::Code value);
  private:
  ::tensorflow::error::Code _internal_status_code() const;
  void _internal_set_status_code(::tensorflow::error::Code value);
  public:

  // .tensorflow.tpu.CompilationResultProto.ErrorCode error_code = 4;
  void clear_error_code();
  ::tensorflow::tpu::CompilationResultProto_ErrorCode error_code() const;
  void set_error_code(::tensorflow::tpu::CompilationResultProto_ErrorCode value);
  private:
  ::tensorflow::tpu::CompilationResultProto_ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::tensorflow::tpu::CompilationResultProto_ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:tensorflow.tpu.CompilationResultProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::HloProto > hlo_protos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_error_message_;
    int status_code_;
    int error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompilation_5fresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompilationResultProto

// .tensorflow.error.Code status_code = 1;
inline void CompilationResultProto::clear_status_code() {
  _impl_.status_code_ = 0;
}
inline ::tensorflow::error::Code CompilationResultProto::_internal_status_code() const {
  return static_cast< ::tensorflow::error::Code >(_impl_.status_code_);
}
inline ::tensorflow::error::Code CompilationResultProto::status_code() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.CompilationResultProto.status_code)
  return _internal_status_code();
}
inline void CompilationResultProto::_internal_set_status_code(::tensorflow::error::Code value) {
  
  _impl_.status_code_ = value;
}
inline void CompilationResultProto::set_status_code(::tensorflow::error::Code value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.CompilationResultProto.status_code)
}

// string status_error_message = 2;
inline void CompilationResultProto::clear_status_error_message() {
  _impl_.status_error_message_.ClearToEmpty();
}
inline const std::string& CompilationResultProto::status_error_message() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.CompilationResultProto.status_error_message)
  return _internal_status_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompilationResultProto::set_status_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.status_error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tensorflow.tpu.CompilationResultProto.status_error_message)
}
inline std::string* CompilationResultProto::mutable_status_error_message() {
  std::string* _s = _internal_mutable_status_error_message();
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.CompilationResultProto.status_error_message)
  return _s;
}
inline const std::string& CompilationResultProto::_internal_status_error_message() const {
  return _impl_.status_error_message_.Get();
}
inline void CompilationResultProto::_internal_set_status_error_message(const std::string& value) {
  
  _impl_.status_error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CompilationResultProto::_internal_mutable_status_error_message() {
  
  return _impl_.status_error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CompilationResultProto::release_status_error_message() {
  // @@protoc_insertion_point(field_release:tensorflow.tpu.CompilationResultProto.status_error_message)
  return _impl_.status_error_message_.Release();
}
inline void CompilationResultProto::set_allocated_status_error_message(std::string* status_error_message) {
  if (status_error_message != nullptr) {
    
  } else {
    
  }
  _impl_.status_error_message_.SetAllocated(status_error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.status_error_message_.IsDefault()) {
    _impl_.status_error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tensorflow.tpu.CompilationResultProto.status_error_message)
}

// repeated .xla.HloProto hlo_protos = 3;
inline int CompilationResultProto::_internal_hlo_protos_size() const {
  return _impl_.hlo_protos_.size();
}
inline int CompilationResultProto::hlo_protos_size() const {
  return _internal_hlo_protos_size();
}
inline ::xla::HloProto* CompilationResultProto::mutable_hlo_protos(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.tpu.CompilationResultProto.hlo_protos)
  return _impl_.hlo_protos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::HloProto >*
CompilationResultProto::mutable_hlo_protos() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.tpu.CompilationResultProto.hlo_protos)
  return &_impl_.hlo_protos_;
}
inline const ::xla::HloProto& CompilationResultProto::_internal_hlo_protos(int index) const {
  return _impl_.hlo_protos_.Get(index);
}
inline const ::xla::HloProto& CompilationResultProto::hlo_protos(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.CompilationResultProto.hlo_protos)
  return _internal_hlo_protos(index);
}
inline ::xla::HloProto* CompilationResultProto::_internal_add_hlo_protos() {
  return _impl_.hlo_protos_.Add();
}
inline ::xla::HloProto* CompilationResultProto::add_hlo_protos() {
  ::xla::HloProto* _add = _internal_add_hlo_protos();
  // @@protoc_insertion_point(field_add:tensorflow.tpu.CompilationResultProto.hlo_protos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::xla::HloProto >&
CompilationResultProto::hlo_protos() const {
  // @@protoc_insertion_point(field_list:tensorflow.tpu.CompilationResultProto.hlo_protos)
  return _impl_.hlo_protos_;
}

// .tensorflow.tpu.CompilationResultProto.ErrorCode error_code = 4;
inline void CompilationResultProto::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline ::tensorflow::tpu::CompilationResultProto_ErrorCode CompilationResultProto::_internal_error_code() const {
  return static_cast< ::tensorflow::tpu::CompilationResultProto_ErrorCode >(_impl_.error_code_);
}
inline ::tensorflow::tpu::CompilationResultProto_ErrorCode CompilationResultProto::error_code() const {
  // @@protoc_insertion_point(field_get:tensorflow.tpu.CompilationResultProto.error_code)
  return _internal_error_code();
}
inline void CompilationResultProto::_internal_set_error_code(::tensorflow::tpu::CompilationResultProto_ErrorCode value) {
  
  _impl_.error_code_ = value;
}
inline void CompilationResultProto::set_error_code(::tensorflow::tpu::CompilationResultProto_ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:tensorflow.tpu.CompilationResultProto.error_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace tpu
}  // namespace tensorflow

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tensorflow::tpu::CompilationResultProto_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::tpu::CompilationResultProto_ErrorCode>() {
  return ::tensorflow::tpu::CompilationResultProto_ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_2fcore_2fprotobuf_2ftpu_2fcompilation_5fresult_2eproto
