# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from ...transcribe.types.transcription_id import TranscriptionId
import pydantic
import typing


class OutlineRequest(UniversalBaseModel):
    transcription_id: TranscriptionId = pydantic.Field()
    """
    ID of the transcription to process end-to-end
    """

    monotone: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If true, each topic is searched after the previous topic's start (with a small backoff)
    """

    conclusion_bias: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If true and a title includes the word "conclusion", search in the last third of the audio
    """

    model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
