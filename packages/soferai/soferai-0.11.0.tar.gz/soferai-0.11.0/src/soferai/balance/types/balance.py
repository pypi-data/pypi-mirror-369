# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing


class Balance(UniversalBaseModel):
    total_balance: int = pydantic.Field()
    """
    The total balance in the account, not subtracting pending charges, represented in cents.
    """

    available_balance: int = pydantic.Field()
    """
    The available balance after accounting for pending charges, represented in cents. This is the amount that can be used for new transcriptions.
    """

    pending_balance: int = pydantic.Field()
    """
    The amount of pending charges from transcriptions that are in progress or queued, represented in cents.
    """

    all_time_deposits: int = pydantic.Field()
    """
    The total amount ever deposited into the account, represented in cents.
    """

    all_time_spend: int = pydantic.Field()
    """
    The total amount ever spent on completed transcriptions, represented in cents.
    """

    model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
