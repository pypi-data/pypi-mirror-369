# Python Project Configuration
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "awesome-project"
version = "1.2.3"
description = "An awesome Python project with great features"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "John Doe", email = "john@example.com"},
    {name = "Jane Smith", email = "jane@example.com"}
]
keywords = ["awesome", "python", "project"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[project.dependencies]
requests = ">=2.28.0"
numpy = ">=1.21.0"
pandas = ">=1.3.0"
click = ">=8.0.0"
pydantic = ">=2.0.0"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
    "sphinx>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "pytest-mock>=3.0.0",
    "faker>=13.0.0",
]

[project.scripts]
awesome-cli = "awesome_project.cli:main"
awesome-server = "awesome_project.server:run"

[project.urls]
Homepage = "https://github.com/example/awesome-project"
Documentation = "https://awesome-project.readthedocs.io"
Repository = "https://github.com/example/awesome-project.git"
Changelog = "https://github.com/example/awesome-project/blob/main/CHANGELOG.md"

[tool.setuptools]
packages = ["awesome_project"]

[tool.setuptools.package-data]
awesome_project = ["data/*.json", "templates/*.html"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["awesome_project"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.ruff]
target-version = "py38"
line-length = 88
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    "build",
    "dist",
]

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W"]
ignore = ["E501"]
fixable = ["ALL"]
unfixable = []

[tool.poetry]
# Alternative package manager configuration
name = "awesome-project"
version = "1.2.3"
description = "An awesome Python project"
authors = ["John Doe <john@example.com>"]

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.28.0"
numpy = "^1.21.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
black = "^22.0.0"