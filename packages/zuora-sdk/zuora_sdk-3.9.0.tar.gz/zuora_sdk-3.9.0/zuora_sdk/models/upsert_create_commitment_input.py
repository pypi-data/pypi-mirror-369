# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).

    The version of the OpenAPI document: 2025-08-12
    Contact: docs@zuora.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import field_validator
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from zuora_sdk.models.action_type import ActionType
from zuora_sdk.models.association_rule import AssociationRule
from zuora_sdk.models.commitment_type_enum import CommitmentTypeEnum
from zuora_sdk.models.cycle_period_type_enum import CyclePeriodTypeEnum
from zuora_sdk.models.proration_option_enum import ProrationOptionEnum
from zuora_sdk.models.upsert_create_commitment_input_all_of_segments import UpsertCreateCommitmentInputAllOfSegments
from typing import Optional, Set
from typing_extensions import Self

class UpsertCreateCommitmentInput(BaseModel):
    """
    create a new Commitment.
    """ # noqa: E501
    # avoid validation
    def __init__(self, **kwargs):
        # Directly assign values without validation using `construct()`
        model = self.construct(**kwargs)
        self.__dict__.update(model.__dict__)

        _dict_all = convert_snake_dict_to_camel(kwargs, self.model_fields, self.__properties)

        _dict = self.to_alias_dict(_dict_all)
        for field_name, field_info in self.model_fields.items():
            alias = field_info.alias or field_name
            if alias in _dict:
                self.__dict__[field_name] = _dict.get(alias)
        self.update_additional_properties(self, _dict_all)
        pass

    def __setattr__(self, name, value):
        # Override setattr to bypass validation when setting attributes
        object.__setattr__(self, name, value)

    commitment_number: Optional[StrictStr] = Field(default=None, alias="commitmentNumber")
    name: StrictStr
    type: CommitmentTypeEnum
    description: Optional[StrictStr] = None
    priority: StrictInt = Field(description="It defines the evaluation order of the commitment, the lower the number, the higher the priority. when two commitments have the same priority, the one with the earlier created one time will be evaluated first.")
    proration_option: ProrationOptionEnum = Field(alias="prorationOption")
    default_association_rule: Optional[AssociationRule] = Field(default=None, alias="defaultAssociationRule")
    custom_fields: Optional[Dict[str, Any]] = Field(default=None, description="Container for custom fields of an commitment object.", alias="customFields")
    cycle_period_type: Optional[CyclePeriodTypeEnum] = Field(default=None, alias="cyclePeriodType")
    specific_cycle_period_length: Optional[StrictInt] = Field(default=None, description="When the cyclePeriodType is SpecificWeeks, SpecificDays or SpecificMonths, this field is required.", alias="specificCyclePeriodLength")
    accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code for the Commitment Segment. ", alias="accountingCode")
    adjustment_liability_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code on the Commitment Segment object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration). ", alias="adjustmentLiabilityAccountingCode")
    adjustment_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code on the Commitment Segment object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration). ", alias="adjustmentRevenueAccountingCode")
    contract_asset_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code on the Commitment Segment object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration). ", alias="contractAssetAccountingCode")
    contract_liability_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code on the Commitment Segment object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration). ", alias="contractLiabilityAccountingCode")
    contract_recognized_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code on the Commitment Segment object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration). ", alias="contractRecognizedRevenueAccountingCode")
    deferred_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The deferred revenue accounting code for the Commitment Segment. ", alias="deferredRevenueAccountingCode")
    exclude_item_billing_from_revenue_accounting: Optional[StrictBool] = Field(default=None, description="The flag to exclude Commitment Segment related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.   **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.  ", alias="excludeItemBillingFromRevenueAccounting")
    exclude_item_booking_from_revenue_accounting: Optional[StrictBool] = Field(default=None, description="The flag to exclude Commitment Segment from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled. ", alias="excludeItemBookingFromRevenueAccounting")
    is_allocation_eligible: Optional[StrictBool] = Field(default=None, description="This field is used to identify if the charge segment is allocation eligible in revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases. ", alias="isAllocationEligible")
    is_unbilled: Optional[StrictBool] = Field(default=None, description="This field is used to dictate how to perform the accounting during revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases. ", alias="isUnbilled")
    recognized_revenue_accounting_code: Optional[StrictStr] = Field(default=None, description="The recognized revenue accounting code for the Commitment Segment. ", alias="recognizedRevenueAccountingCode")
    revenue_recognition_rule: Optional[StrictStr] = Field(default=None, description="The Revenue Recognition rule for the Commitment Segment. ", alias="revenueRecognitionRule")
    unbilled_receivables_accounting_code: Optional[StrictStr] = Field(default=None, description="The accounting code on the Commitment Segment object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration). ", alias="unbilledReceivablesAccountingCode")
    taxable: Optional[StrictBool] = Field(default=None, description="The flag to indicate whether the charge is taxable. If this field is set to true, both the fields `taxCode` and `taxMode` are required. ")
    tax_code_name: Optional[StrictStr] = Field(default=None, description="The taxCode of a charge. This field is available when the field 'taxable' is set to true. ", alias="taxCodeName")
    tax_mode: Optional[StrictStr] = Field(default=None, description="The taxMode of a charge.  Values: * `TaxExclusive` * `TaxInclusive` This field is available when the field 'taxable' is set to true. ", alias="taxMode")
    currency: StrictStr
    segments: List[UpsertCreateCommitmentInputAllOfSegments] = Field(description="The new segments are required when creating a new Commitment.")
    action: ActionType
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["commitmentNumber", "name", "type", "description", "priority", "prorationOption", "defaultAssociationRule", "customFields", "cyclePeriodType", "specificCyclePeriodLength", "accountingCode", "adjustmentLiabilityAccountingCode", "adjustmentRevenueAccountingCode", "contractAssetAccountingCode", "contractLiabilityAccountingCode", "contractRecognizedRevenueAccountingCode", "deferredRevenueAccountingCode", "excludeItemBillingFromRevenueAccounting", "excludeItemBookingFromRevenueAccounting", "isAllocationEligible", "isUnbilled", "recognizedRevenueAccountingCode", "revenueRecognitionRule", "unbilledReceivablesAccountingCode", "taxable", "taxCodeName", "taxMode", "currency", "segments", "action"]

    @field_validator('tax_mode')
    def tax_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TaxInclusive', 'TaxExclusive']):
            raise ValueError("must be one of enum values ('TaxInclusive', 'TaxExclusive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpsertCreateCommitmentInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_association_rule
        if self.default_association_rule:
            _dict['defaultAssociationRule'] = self.default_association_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in segments (list)
        _items = []
        if self.segments:
            for _item_segments in self.segments:
                if _item_segments:
                    _items.append(_item_segments.to_dict())
            _dict['segments'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpsertCreateCommitmentInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        obj = convert_snake_dict_to_camel(obj, cls.model_fields, cls.__properties)

        _obj = cls.model_validate(cls.to_alias_dict(obj))
        return cls.update_additional_properties(_obj, obj)

    @classmethod
    def update_additional_properties(cls, obj, _dict: Optional[Dict[str, Any]]):
        # store additional fields in additional_properties

        # store additional fields in additional_properties
        for _key in _dict.keys():
            if _key not in cls.__properties:
                obj.additional_properties[_key] = _dict.get(_key)


        return obj
        pass

    @classmethod
    def to_alias_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Dict[str, Any]]:

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        return {
            "commitmentNumber": obj.get("commitmentNumber"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "priority": obj.get("priority"),
            "prorationOption": obj.get("prorationOption"),
            "defaultAssociationRule": AssociationRule.from_dict(obj["defaultAssociationRule"]) if obj.get("defaultAssociationRule") is not None else None,
            "customFields": obj.get("customFields"),
            "cyclePeriodType": obj.get("cyclePeriodType"),
            "specificCyclePeriodLength": obj.get("specificCyclePeriodLength"),
            "accountingCode": obj.get("accountingCode"),
            "adjustmentLiabilityAccountingCode": obj.get("adjustmentLiabilityAccountingCode"),
            "adjustmentRevenueAccountingCode": obj.get("adjustmentRevenueAccountingCode"),
            "contractAssetAccountingCode": obj.get("contractAssetAccountingCode"),
            "contractLiabilityAccountingCode": obj.get("contractLiabilityAccountingCode"),
            "contractRecognizedRevenueAccountingCode": obj.get("contractRecognizedRevenueAccountingCode"),
            "deferredRevenueAccountingCode": obj.get("deferredRevenueAccountingCode"),
            "excludeItemBillingFromRevenueAccounting": obj.get("excludeItemBillingFromRevenueAccounting"),
            "excludeItemBookingFromRevenueAccounting": obj.get("excludeItemBookingFromRevenueAccounting"),
            "isAllocationEligible": obj.get("isAllocationEligible"),
            "isUnbilled": obj.get("isUnbilled"),
            "recognizedRevenueAccountingCode": obj.get("recognizedRevenueAccountingCode"),
            "revenueRecognitionRule": obj.get("revenueRecognitionRule"),
            "unbilledReceivablesAccountingCode": obj.get("unbilledReceivablesAccountingCode"),
            "taxable": obj.get("taxable"),
            "taxCodeName": obj.get("taxCodeName"),
            "taxMode": obj.get("taxMode"),
            "currency": obj.get("currency"),
            "segments": [UpsertCreateCommitmentInputAllOfSegments.from_dict(_item) for _item in obj["segments"]] if obj.get("segments") is not None else None,
            "action": obj.get("action")
        }
        return _obj


def convert_snake_dict_to_camel(_dict: dict, model_fields, properties):
    if not isinstance(_dict, dict):
        return _dict
    new_dict = {}
    for k, v in _dict.items():
        if k in model_fields:
            # model_fields: key is attribute name like bill_to_contact,
            alias = model_fields.get(k).alias or k
            new_dict[alias] = v
            pass
        else:
            new_key = snake_to_camel(k)
            if properties is not None and isinstance(properties, list) and new_key in properties:
                new_dict[new_key] = v
            else:
                new_dict[k] = v
    return new_dict
    pass


def snake_to_camel(name):
    if name is None or '_' not in name:
        return name
    components = name.split('_')
    return components[0] + ''.join(x.title() for x in components[1:])
