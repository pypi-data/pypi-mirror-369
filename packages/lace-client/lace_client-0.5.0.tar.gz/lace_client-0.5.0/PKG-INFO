Metadata-Version: 2.4
Name: lace-client
Version: 0.5.0
Summary: Lace: AI Training Transparency Protocol - Prevent copyright lawsuits with cryptographic proof
Home-page: https://github.com/Aegis-Testing-Technologies/aegis-techspike
Author: Aegis Testing Technologies LLC
Author-email: Lace Technologies <support@withlace.ai>
License: Apache-2.0
Project-URL: homepage, https://withlace.ai
Project-URL: documentation, https://docs.withlace.ai
Project-URL: Bug Tracker, https://github.com/lace-ai/lace-client/issues
Project-URL: Get API Key, https://withlace.ai/dashboard
Keywords: ai,copyright,compliance,training,transparency,legal
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Legal Industry
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: LICENSE-README.md
License-File: NOTICE
Requires-Dist: requests>=2.28.0
Requires-Dist: click>=8.0.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-python

# Lace - AI Training Transparency Protocol

[![PyPI version](https://badge.fury.io/py/lace-client.svg)](https://badge.fury.io/py/lace-client)
[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)
[![Python](https://img.shields.io/pypi/pyversions/lace-client.svg)](https://pypi.org/project/lace-client/)

**Prevent copyright lawsuits by proving what you DIDN'T train on.**

Lace provides cryptographic proof of AI training provenance through loss trajectory monitoring. When model outputs resemble copyrighted content, you can prove definitively whether that content was in your training data.

## üöÄ Quick Start

```bash
pip install lace-client
```

```python
import lace

# Before training: Create attestation of your dataset
attestation_id = lace.attest("./training_data")

# During training: One-line integration (zero overhead)
lace.monitor()  # Automatically hooks into PyTorch/TensorFlow

# After training: Verify training relationship
result = lace.verify(attestation_id)
print(f"Correlation: {result['correlation']['score']:.3f}")
print(f"Legal verdict: {result['correlation']['verdict']}")
```

## üîë Get Your API Key

All processing happens in our secure cloud infrastructure for IP protection.

**Get your free API key:** [https://withlace.ai/dashboard](https://withlace.ai/dashboard)

```bash
export LACE_API_KEY=your_api_key_here
```

## üí° How It Works

1. **Attestation**: Before training, Lace creates a cryptographic fingerprint of your dataset
2. **Monitoring**: During training, Lace captures loss trajectories with zero overhead
3. **Correlation**: After training, Lace proves the training relationship through loss curve analysis
4. **Legal Evidence**: Get legally-sufficient evidence for copyright defense

## üìä Integration Examples

### HuggingFace Transformers

```python
from transformers import Trainer
import lace

# Create attestation
attestation_id = lace.attest("./data")

# Train with monitoring
trainer = Trainer(model, args, dataset)
monitor = lace.monitor(attestation_id)
trainer.train()

# Get correlation
result = monitor.finalize()
```

### PyTorch

```python
import torch
import lace

# Start monitoring
lace.monitor()

# Your normal training loop
for epoch in range(epochs):
    for batch in dataloader:
        loss = model(batch)
        loss.backward()  # Automatically captured!
        optimizer.step()
```

### TensorFlow/Keras

```python
import tensorflow as tf
import lace

# Start monitoring
lace.monitor()

# Your normal training
model.fit(x_train, y_train, epochs=10)  # Automatically captured!
```

## üõ°Ô∏è Legal Protection

Lace provides evidence that meets civil legal standards:

- **0.80+ correlation**: Clear and convincing evidence
- **0.65+ correlation**: Substantial evidence  
- **0.50+ correlation**: Preponderance of evidence

When accused of training on copyrighted content, you can prove definitively whether it was in your dataset.

## üè¢ Enterprise Features

- **Unlimited attestations**: No limits on dataset size
- **Priority support**: Direct Slack access to our team
- **SLA guarantees**: 99.9% uptime commitment
- **Custom deployment**: On-premise options available

**Contact:** enterprise@withlace.ai

## üìñ Documentation

- **Docs:** [https://docs.withlace.ai](https://docs.withlace.ai)
- **API Reference:** [https://docs.withlace.ai/api](https://docs.withlace.ai/api)
- **Examples:** [https://github.com/lace-ai/examples](https://github.com/lace-ai/examples)

## ü§ù Support

- **Email:** support@withlace.ai
- **Discord:** [Join our community](https://discord.gg/lace)
- **Issues:** [GitHub Issues](https://github.com/lace-ai/lace-client/issues)

## üìÑ License

Apache 2.0 - See [LICENSE](LICENSE) for details.

---

**Stop worrying about copyright lawsuits. Start building with confidence.**

[Get Started Free ‚Üí](https://withlace.ai/dashboard)
