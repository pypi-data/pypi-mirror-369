[tool.ruff]
line-length = 100
target-version = "py312"
fix = true

[tool.ruff.lint]
unfixable = []
typing-modules = ["pandas._typing"]

select = [
  # pyflakes
  "F",
  # pycodestyle
  "E", "W",
  # flake8-2020
  "YTT",
  # flake8-bugbear
  "B",
  # flake8-quotes
  "Q",
  # flake8-debugger
  "T10",
  # flake8-gettext
  "INT",
  # pylint
  "PL",
  # flake8-pytest-style
  "PT",
  # misc lints
  "PIE",
  # flake8-pyi
  "PYI",
  # tidy imports
  "TID",
  # implicit string concatenation
  "ISC",
  # type-checking imports
  "TCH",
  # comprehensions
  "C4",
  # pygrep-hooks
  "PGH",
  # Ruff-specific rules
  "RUF",
  # flake8-bandit: exec-builtin
  "S102",
  # numpy-legacy-random
  "NPY002",
  # Perflint
  "PERF",
  # flynt
  "FLY",
  # flake8-logging-format
  "G",
  # flake8-future-annotations
  "FA",
  # unconventional-import-alias
  "ICN001",
  # flake8-slots
  "SLOT",
  # flake8-raise
  "RSE"
]

ignore = [
  ### Intentionally disabled
  # module level import not at top of file
  "E402",
  # do not assign a lambda expression, use a def
  "E731",
  # controversial
  "B007",
  # controversial
  "B008",
  # getattr is used to side-step mypy
  "B010",
  # tests use comparisons but not their returned value
  "B015",
  # Function definition does not bind loop variable
  "B023",
  # Only works with python >=3.10
  "B905",
  # Unnecessary `dict()` call (rewrite as a literal)
  "C408",
  # Avoid equality comparisons (conflics with pyspark and pandas)
  "E712",
  # Logging statement uses `str.format`
  "G001",
  # Logging statement uses f-string
  "G004",
  # Replace legacy `np.random.choice` call with `np.random.Generator`
  "NPY002",
  # Too many arguments to function call
  "PLR0913",
  # Too many returns
  "PLR0911",
  # Too many branches
  "PLR0912",
  # Too many statements
  "PLR0915",
  # Redefined loop name
  "PLW2901",
  # Global statements are discouraged
  "PLW0603",
  # Use `typing.NamedTuple` instead of `collections.namedtuple`
  "PYI024",
  # Use of possibly insecure function; consider using ast.literal_eval
  "S307",
  # while int | float can be shortened to float, the former is more explicit
  "PYI041",
  # incorrect-dict-iterator, flags valid Series.items usage
  "PERF102",
  # try-except-in-loop, becomes useless in Python 3.11
  "PERF203",
  # pytest-parametrize-names-wrong-type
  "PT006",
  # pytest-parametrize-values-wrong-type
  "PT007",
  # pytest-patch-with-lambda
  "PT008",
  # pytest-raises-with-multiple-statements
  "PT012",
  # pytest-assert-in-except
  "PT017",
  # pytest-composite-assertion
  "PT018",
  # pytest-fixture-param-without-value
  "PT019",
  # The following rules may cause conflicts when used with the formatter:
  "ISC001",
  # if-stmt-min-max
  "PLR1730",

  ### TODO: Enable gradually
  # Useless statement
  "B018",
  # Magic number
  "PLR2004",
  # comparison-with-itself
  "PLR0124",
  # collection-literal-concatenation
  "RUF005",
  # pairwise-over-zipped (>=PY310 only)
  "RUF007",
  # mutable-class-default
  "RUF012",
  # PEP 484 prohibits implicit `Optional`
  "RUF013",
  # Line too long
  "E501",
  # type-comparison
  "E721",
  # repeated-equality-comparison
  "PLR1714",
  # self-or-cls-assignment
  "PLW0642",
  # literal-membership
  "PLR6201", # 847 errors
  # Method could be a function, class method, or static method
  "PLR6301", # 11411 errors
  # Private name import
  "PLC2701", # 27 errors
  # Too many positional arguments (6/5)
  "PLR0917", # 470 errors
  # compare-to-empty-string
  "PLC1901",
  # `tempfile.NamedTemporaryFile` in text mode without explicit `encoding` argument
  "PLW1514", # 1 error
  # Object does not implement `__hash__` method
  "PLW1641", # 16 errors
  # Bad or misspelled dunder method name
  "PLW3201", # 69 errors, seems to be all false positive
  # Unnecessary lookup of dictionary value by key
  "PLR1733", # 5 errors, it seems like we wannt to ignore these
  # Unnecessary lookup of list item by index
  "PLR1736", # 4 errors, we're currently having inline pylint ignore
  # Unpacking a dictionary in iteration without calling `.items()`
  "PLE1141", # autofixable
  # import-outside-toplevel
  "PLC0415",
  # unnecessary-dunder-call
  "PLC2801",
  # comparison-with-itself
  "PLR0124",
  # too-many-public-methods
  "PLR0904",
  # too-many-return-statements
  "PLR0911",
  # too-many-branches
  "PLR0912",
  # too-many-arguments
  "PLR0913",
  # too-many-locals
  "PLR0914",
  # too-many-statements
  "PLR0915",
  # too-many-boolean-expressions
  "PLR0916",
  # too-many-nested-blocks
  "PLR1702",
  # redefined-argument-from-local
  "PLR1704",
  # unnecessary-lambda
  "PLW0108",
  # global-statement
  "PLW0603",
  # Do not use bare `except`,
  "E722",
  # Within an `except` clause, raise exceptions with `raise ... from err`
  "B904",
]
exclude = [
  ".eggs/*.py",
]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
# numpy.random is banned but np.random is not. Is this intentional?
# "numpy.random".msg = "Do not use numpy.random"
"pytest.warns".msg = "Use tm.assert_produces_warning instead of pytest.warns"
"pytest.xfail".msg = "Use pytest.mark.xfail instead of pytest.xfail"
"conftest".msg = "No direct imports from conftest"
"numpy.testing".msg = "Do not use numpy.testing"
# "numpy.array_equal".msg = "Do not use numpy.array_equal" # Used in pandas/core
"unittest.mock".msg = "use pytest builtin monkeypatch fixture instead"
"os.remove".msg = "Do not use os.remove"


[tool.ruff.lint.per-file-ignores]
# "file/path/*.py" = ["DIRECTIVE"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 100


[tool.pytest.ini_options]
minversion = "7.3.2"
testpaths = "framedisplay/tests"
python_files = [
    "test_*.py",
    "*_test.py",
]
python_functions = [
    "test_*",
    "*_test",
]
addopts = "--strict-markers --strict-config --capture=no --durations=30" # --junitxml=test-data.xml
empty_parameter_set_mark = "fail_at_collect"
xfail_strict = true
doctest_optionflags = [
  "NORMALIZE_WHITESPACE",
  "IGNORE_EXCEPTION_DETAIL",
  "ELLIPSIS",
]
filterwarnings = [
  "error::ResourceWarning",
  "error::pytest.PytestUnraisableExceptionWarning",
  "ignore:More than 20 figures have been opened:RuntimeWarning",
  "ignore:.*urllib3:DeprecationWarning:botocore",
  "ignore:Setuptools is replacing distutils.:UserWarning:_distutils_hack",
]
junit_family = "xunit2"
markers = [
    "asyncio: mark a test as an asyncio coroutine function",
#   "single_cpu: tests that should run on a single cpu only",
#   "slow: mark a test as slow",
]
