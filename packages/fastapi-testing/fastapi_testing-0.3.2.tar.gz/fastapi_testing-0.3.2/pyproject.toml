[project]
name = "fastapi-testing"
version = "0.3.2"
description = "A lightweight, async-first testing framework for FastAPI applications"
authors = [
    { name = "Ove Ranheim", email = "oranheim@gmail.com" }
]
requires-python = ">=3.11"
readme = "README.md"
license = { text = "MIT" }
keywords = ["fastapi", "testing", "async", "pytest", "integration-testing", "test-framework"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "fastapi>=0.116.1",
    "starlette>=0.47.2",
    "uvicorn>=0.35.0",
    "httpx[http2]>=0.28.1",
    "websockets>=15.0.1",
]

[dependency-groups]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.25.2",
    "pytest-cov>=6.0.0",
    "pydantic>=2.10.6",
    "ruff>=0.8.0",
    "restructuredtext-lint>=1.4.0",
    "pygments>=2.19.1",
]

[build-system]
requires = ["hatchling>=1.26.3"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/fastapi_testing"]

[tool.hatch.build]
exclude = [
    "docs/*",
    "examples/*",
    "tests/*",
    ".github/*",
    "*.gif",
    "*.png",
    "dist/*",
    "build/*",
    ".pytest_cache",
    "__pycache__",
    "*.pyc"
]

[project.urls]
Homepage = "https://github.com/descoped/fastapi-testing"
Repository = "https://github.com/descoped/fastapi-testing"
Issues = "https://github.com/descoped/fastapi-testing/issues"

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple/"
publish-url = "https://upload.pypi.org/legacy/"

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/simple/"
publish-url = "https://test.pypi.org/legacy/"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "asyncio: mark test as async",
]

[tool.ruff]
target-version = "py311"
line-length = 120
indent-width = 4
respect-gitignore = true
extend-exclude = [
    "__pycache__",
    ".pytest_cache",
    "build",
    "dist",
    ".venv",
    ".env",
    "htmlcov",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "E741",   # Ambiguous variable name
    "B008",   # Do not perform function calls in argument defaults
    "B017",   # Assert raises on Exception - sometimes needed for testing
    "T201",   # Print found (allow print statements)
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
]

[tool.ruff.lint.isort]
known-first-party = ["fastapi_testing"]
force-single-line = false
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
