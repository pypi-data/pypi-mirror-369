# This file is generated by translate_mathematica.py
# Do not edit this file directly
# Instead, edit amps_mathematica.m and run translate_mathematica.py
# to regenerate this file
#
# This file contains the translation of Mathematica code to Python
# using the sympy library
#
deltaI = Symbol('deltaI')
cG = Symbol('cG')
CoefA = Symbol('CoefA')
kappad = Symbol('kappad')
thetapi = Symbol('thetapi')
thetaprpi = Symbol('thetaprpi')
kappau = Symbol('kappau')
CoefC = Symbol('CoefC')
thpiALP = Symbol('thpiALP')
thetaALP = Symbol('thetaALP')
thetaprALP = Symbol('thetaprALP')
Gammaa0 = Symbol('Gammaa0')
ma0 = Symbol('ma0')
m23 = Symbol('m23')
ma = Symbol('ma')
mpi0 = Symbol('mpi0')
m12 = Symbol('m12')
e = -sqrt(3)*deltaI*(cG*(2*CoefA*(kappad*(sqrt(6)*deltaI*thetapi - 2*sqrt(3)*deltaI*thetaprpi + 6) + kappau*(-sqrt(6)*deltaI*thetapi + 2*sqrt(3)*deltaI*thetaprpi + 6) - 6) + CoefC*(sqrt(3)*deltaI*(kappad - kappau)*(sqrt(2)*thetapi + 4*thetaprpi) + 6)) + sqrt(3)*(2*CoefA*(deltaI*thpiALP*(-sqrt(2)*thetapi + 2*thetaprpi) + sqrt(2)*thetaALP - 2*thetaprALP) + CoefC*(-deltaI*thpiALP*(sqrt(2)*thetapi + 4*thetaprpi) + sqrt(2)*thetaALP + 4*thetaprALP)))*(2*sqrt(2)*CoefA*thetapi - 4*CoefA*thetaprpi + sqrt(2)*CoefC*thetapi + 4*CoefC*thetaprpi)*(-2*Gammaa0**2*ma0**2*(m23**2 - m23*(ma**2 + 3*mpi0**2) + 3*mpi0**2*(ma**2 + mpi0**2)) + I*Gammaa0*ma0*(m23**2*(ma**2 - 4*ma0**2 + 3*mpi0**2) - m23*(ma**2 + 3*mpi0**2)*(ma**2 - 4*ma0**2 + 3*mpi0**2) + 4*mpi0**2*(ma**2 + mpi0**2)*(ma**2 - 3*ma0**2 + 3*mpi0**2)) + m12**2*(-2*Gammaa0**2*ma0**2 + I*Gammaa0*ma0*(ma**2 - 4*ma0**2 + 3*mpi0**2) + m23*(3*I*Gammaa0*ma0 + 2*ma**2 - 3*ma0**2 + 6*mpi0**2) - ma**2*ma0**2 - 2*ma**2*mpi0**2 + 2*ma0**4 - 3*ma0**2*mpi0**2 - 2*mpi0**4) + m12*(m23**2*(3*I*Gammaa0*ma0 + 2*ma**2 - 3*ma0**2 + 6*mpi0**2) - 2*m23*(Gammaa0**2*ma0**2 + I*Gammaa0*(2*ma0**3 + 3*ma0*mpi0**2) + ma**4 + ma**2*(I*Gammaa0*ma0 - ma0**2 + 7*mpi0**2) - ma0**4 - 3*ma0**2*mpi0**2 + 10*mpi0**4) + (ma**2 + 3*mpi0**2)*(2*Gammaa0**2*ma0**2 - I*Gammaa0*ma0*(ma**2 - 4*ma0**2 + 3*mpi0**2) + ma**2*(ma0**2 + 2*mpi0**2) - 2*ma0**4 + 3*ma0**2*mpi0**2 + 2*mpi0**4)) - m23**2*ma**2*ma0**2 - 2*m23**2*ma**2*mpi0**2 + 2*m23**2*ma0**4 - 3*m23**2*ma0**2*mpi0**2 - 2*m23**2*mpi0**4 + m23*ma**4*ma0**2 + 2*m23*ma**4*mpi0**2 - 2*m23*ma**2*ma0**4 + 6*m23*ma**2*ma0**2*mpi0**2 + 8*m23*ma**2*mpi0**4 - 6*m23*ma0**4*mpi0**2 + 9*m23*ma0**2*mpi0**4 + 6*m23*mpi0**6 - 4*ma**4*ma0**2*mpi0**2 + 6*ma**2*ma0**4*mpi0**2 - 16*ma**2*ma0**2*mpi0**4 + 6*ma0**4*mpi0**4 - 12*ma0**2*mpi0**6)/(72*(m12 + I*ma0*(Gammaa0 + I*ma0))*(m23 + I*ma0*(Gammaa0 + I*ma0))*(-I*Gammaa0*ma0 + m12 + m23 - ma**2 + ma0**2 - 3*mpi0**2))