# This file is generated by translate_mathematica.py
# Do not edit this file directly
# Instead, edit amps_mathematica.m and run translate_mathematica.py
# to regenerate this file
#
# This file contains the translation of Mathematica code to Python
# using the sympy library
#
deltaI = Symbol('deltaI')
gT = Symbol('gT')
thetapi = Symbol('thetapi')
thetaprpi = Symbol('thetaprpi')
m23 = Symbol('m23')
mpi0 = Symbol('mpi0')
metap = Symbol('metap')
m12 = Symbol('m12')
ma = Symbol('ma')
mf2 = Symbol('mf2')
cG = Symbol('cG')
kappad = Symbol('kappad')
kappau = Symbol('kappau')
thetaALP = Symbol('thetaALP')
thetaprALP = Symbol('thetaprALP')
thpiALP = Symbol('thpiALP')
Gammaf2 = Symbol('Gammaf2')
UnitStep = Function('UnitStep')
e = -deltaI*gT**2*(-sqrt(2)*thetapi + 2*thetaprpi)*(((m23 - 2*mpi0**2)*(-metap**2*(m12 + m23 - ma**2 + 3*mf2**2 - 5*mpi0**2) + (mf2**2 - mpi0**2)*(m12 + m23 - ma**2 + 3*mf2**2 - mpi0**2)) + (2*mpi0**2*(2*metap**2 - 3*mf2**2) + (metap**2 - mf2**2 + mpi0**2)*(-m12 - m23 + ma**2 + mpi0**2))*(m12 - metap**2 - mpi0**2))*(-m23 + ma**2 + metap**2) + ((m23 - 2*mpi0**2)*(-metap**2*(m12 + m23 - ma**2 + 6*mf2**2 - 5*mpi0**2) + (-mf2**2 + mpi0**2)*(-m12 - m23 + ma**2 + mpi0**2)) + (-metap**2*(m12 + m23 - ma**2 + 3*mf2**2 - 5*mpi0**2) + (mf2**2 - mpi0**2)*(m12 + m23 - ma**2 + 3*mf2**2 - mpi0**2))*(m12 - metap**2 - mpi0**2))*(-m12 + ma**2 + mpi0**2) - (4*metap**2*mpi0**2*(metap**2 - 2*mf2**2 + mpi0**2) + (metap**2 - mf2**2 + mpi0**2)*(m12 + m23 - ma**2 - mpi0**2)**2 + (-m12 - m23 + ma**2 + mpi0**2)*(metap**4 - 3*metap**2*(mf2**2 - 2*mpi0**2) + 2*mf2**4 - 3*mf2**2*mpi0**2 + mpi0**4))*(m12 + m23 - metap**2 - mpi0**2))*(3*cG*(kappad - kappau) + deltaI*thetaALP*(2*thetapi + sqrt(2)*thetaprpi) + deltaI*(sqrt(2)*thetapi + thetaprpi)*(sqrt(3)*cG*(kappad + kappau) + thetaprALP) - 3*thpiALP)*UnitStep(-m12 - m23 + ma**2 + metap**2 + 2*mpi0**2 - (Gammaf2 - mf2)**2)/(432*mf2**4*(I*Gammaf2*mf2 - m12 - m23 + ma**2 + metap**2 - mf2**2 + 2*mpi0**2)) + deltaI*gT**2*(sqrt(2)*thetapi - 2*thetaprpi)*(cG*kappad*(sqrt(3)*deltaI*(sqrt(2)*thetapi + thetaprpi) + 3) + cG*kappau*(sqrt(3)*deltaI*(sqrt(2)*thetapi + thetaprpi) - 3) + deltaI*(2*thetaALP*thetapi + sqrt(2)*thetaALP*thetaprpi + sqrt(2)*thetapi*thetaprALP + thetaprALP*thetaprpi) - 3*thpiALP)*(m12**2*(ma**2 - mf2**2 + mpi0**2)*(metap**2 - mf2**2 + mpi0**2) - m12*(-6*m23*mf2**4 + ma**4*(metap**2 - mf2**2 + mpi0**2) + ma**2*(metap**4 - 2*metap**2*(mf2**2 + 2*mpi0**2) + mf2**4 + 6*mf2**2*mpi0**2 - mpi0**4) + metap**4*(-mf2**2 + mpi0**2) + metap**2*(mf2**4 + 6*mf2**2*mpi0**2 - mpi0**4) + 2*(-mf2**2*mpi0 + mpi0**3)**2) + 6*m23**2*mf2**4 - 6*m23*metap**2*mf2**4 - 6*m23*metap**2*mf2**2*mpi0**2 - 12*m23*mf2**4*mpi0**2 + 6*m23*mf2**2*mpi0**4 + ma**4*(metap**4 - metap**2*(mf2**2 + 2*mpi0**2) + 5*mf2**2*mpi0**2 + mpi0**4) + ma**2*(-6*m23*mf2**2*(-metap**2 + mf2**2 + mpi0**2) - metap**4*(mf2**2 + 2*mpi0**2) + metap**2*(mf2**4 - 8*mf2**2*mpi0**2 + 4*mpi0**4) + 7*mf2**4*mpi0**2 + mf2**2*mpi0**4 - 2*mpi0**6) + 5*metap**4*mf2**2*mpi0**2 + metap**4*mpi0**4 + 7*metap**2*mf2**4*mpi0**2 + metap**2*mf2**2*mpi0**4 - 2*metap**2*mpi0**6 + mf2**4*mpi0**4 - 2*mf2**2*mpi0**6 + mpi0**8)*UnitStep(m12 - (Gammaf2 - mf2)**2)/(432*mf2**4*(-m12 + mf2*(-I*Gammaf2 + mf2))) - gT**2*(m23**2*(mf2**2 - 2*mpi0**2)*(ma**2 + metap**2 - mf2**2) + m23*(-ma**4*(mf2**2 - 2*mpi0**2) + ma**2*(2*metap**2*(mf2**2 - 2*mpi0**2) + mf2**4 + 2*mf2**2*mpi0**2) - metap**4*(mf2**2 - 2*mpi0**2) + metap**2*(mf2**4 + 2*mf2**2*mpi0**2) + 2*mf2**4*(-3*m12 + mpi0**2)) - 2*mf2**2*(3*m12**2*mf2**2 - 3*m12*mf2**2*(ma**2 + metap**2 + 2*mpi0**2) + 2*ma**4*mpi0**2 + ma**2*(metap**2*(3*mf2**2 - 4*mpi0**2) + mf2**2*mpi0**2) + mpi0**2*(2*metap**4 + metap**2*mf2**2 + 3*mf2**2*mpi0**2)))*(cG*kappad*(-3*deltaI*thetaprpi + sqrt(3)) + cG*kappau*(3*deltaI*thetaprpi + sqrt(3)) + 3*deltaI*thetaprpi*thpiALP + sqrt(2)*thetaALP + thetaprALP)*UnitStep(m23 - (Gammaf2 - mf2)**2)/(144*mf2**4*(-m23 + mf2*(-I*Gammaf2 + mf2)))