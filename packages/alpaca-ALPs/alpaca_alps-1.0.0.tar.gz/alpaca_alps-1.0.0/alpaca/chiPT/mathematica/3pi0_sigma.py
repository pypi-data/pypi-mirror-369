# This file is generated by translate_mathematica.py
# Do not edit this file directly
# Instead, edit amps_mathematica.m and run translate_mathematica.py
# to regenerate this file
#
# This file contains the translation of Mathematica code to Python
# using the sympy library
#
CoefB = Symbol('CoefB')
thetas = Symbol('thetas')
CoefA = Symbol('CoefA')
deltaI = Symbol('deltaI')
thetaALP = Symbol('thetaALP')
thetapi = Symbol('thetapi')
thetaprpi = Symbol('thetaprpi')
thetaprALP = Symbol('thetaprALP')
cG = Symbol('cG')
kappad = Symbol('kappad')
kappau = Symbol('kappau')
thpiALP = Symbol('thpiALP')
CoefC = Symbol('CoefC')
CoefD = Symbol('CoefD')
m12 = Symbol('m12')
mpi0 = Symbol('mpi0')
ma = Symbol('ma')
mKplus = Symbol('mKplus')
msigma = Symbol('msigma')
Gammasigma = Symbol('Gammasigma')
m23 = Symbol('m23')
UnitStep = Function('UnitStep')
e = (2*CoefB*sin(thetas) + sqrt(2)*(CoefA - CoefB)*cos(thetas))*((-8*CoefA*deltaI*thetaALP*thetapi + 2*sqrt(2)*CoefA*deltaI*thetaALP*thetaprpi + 2*sqrt(2)*CoefA*deltaI*thetapi*thetaprALP + 8*CoefA*deltaI*thetaprALP*thetaprpi + 4*CoefB*cG*(-sqrt(6)*deltaI*thetapi + 2*sqrt(3)*deltaI*thetaprpi + kappad*(2*sqrt(6)*deltaI*thetapi - sqrt(3)*deltaI*thetaprpi + 3) + kappau*(2*sqrt(6)*deltaI*thetapi - sqrt(3)*deltaI*thetaprpi - 3)) + 12*CoefB*deltaI*thetaALP*thetapi + 12*CoefB*deltaI*thetaprALP*thetaprpi - 12*CoefB*thpiALP + 4*CoefC*deltaI*thetaALP*thetapi + 5*sqrt(2)*CoefC*deltaI*thetaALP*thetaprpi + 5*sqrt(2)*CoefC*deltaI*thetapi*thetaprALP + 8*CoefC*deltaI*thetaprALP*thetaprpi + 4*CoefD*deltaI*thetaALP*thetapi + 8*sqrt(2)*CoefD*deltaI*thetaALP*thetaprpi + 8*sqrt(2)*CoefD*deltaI*thetapi*thetaprALP + 32*CoefD*deltaI*thetaprALP*thetaprpi + sqrt(3)*cG*deltaI*(-2*sqrt(2)*CoefA*thetapi*(3*kappad + 3*kappau - 2) + 4*CoefA*thetaprpi + sqrt(2)*CoefC*thetapi*(kappad + kappau + 2) + 2*CoefC*thetaprpi*(2*kappad + 2*kappau + 1) + 4*CoefD*(sqrt(2)*thetapi + 4*thetaprpi)))*sin(thetas) - 2*(2*sqrt(2)*CoefA*deltaI*thetaALP*thetapi + 2*CoefA*deltaI*thetaALP*thetaprpi + 2*CoefA*deltaI*thetapi*thetaprALP + sqrt(2)*CoefA*deltaI*thetaprALP*thetaprpi + 3*sqrt(2)*CoefA*thpiALP + 3*sqrt(2)*CoefB*deltaI*thetaALP*thetapi + 3*sqrt(2)*CoefB*deltaI*thetaprALP*thetaprpi - 3*sqrt(2)*CoefB*thpiALP - sqrt(2)*CoefC*deltaI*thetaALP*thetapi - CoefC*deltaI*thetaALP*thetaprpi - CoefC*deltaI*thetapi*thetaprALP + 4*sqrt(2)*CoefC*deltaI*thetaprALP*thetaprpi + sqrt(2)*CoefD*deltaI*thetaALP*thetapi + 4*CoefD*deltaI*thetaALP*thetaprpi + 4*CoefD*deltaI*thetapi*thetaprALP + 8*sqrt(2)*CoefD*deltaI*thetaprALP*thetaprpi + cG*(CoefA*(kappad*(2*sqrt(3)*deltaI*thetapi + sqrt(6)*deltaI*thetaprpi - 3*sqrt(2)) + kappau*(2*sqrt(3)*deltaI*thetapi + sqrt(6)*deltaI*thetaprpi + 3*sqrt(2))) - CoefB*(-4*sqrt(3)*deltaI*kappau*thetapi + sqrt(6)*deltaI*kappau*thetaprpi + 2*sqrt(3)*deltaI*thetapi - 2*sqrt(6)*deltaI*thetaprpi + kappad*(-4*sqrt(3)*deltaI*thetapi + sqrt(6)*deltaI*thetaprpi - 3*sqrt(2)) + 3*sqrt(2)*kappau) + sqrt(3)*deltaI*(-CoefC*(kappad*thetapi + 2*sqrt(2)*kappad*thetaprpi + kappau*thetapi + 2*sqrt(2)*kappau*thetaprpi - 3*sqrt(2)*thetaprpi) + 2*CoefD*(thetapi + 2*sqrt(2)*thetaprpi))))*cos(thetas))*((m12 - 2*mpi0**2)*(m12 - ma**2 - mpi0**2)*UnitStep(-m12 + 4*mKplus**2)/(m12 + I*msigma*(Gammasigma + I*msigma)) + (m23 - 2*mpi0**2)*(m23 - ma**2 - mpi0**2)*UnitStep(-m23 + 4*mKplus**2)/(m23 + I*msigma*(Gammasigma + I*msigma)) - (m12 + m23 - 2*mpi0**2)*(m12 + m23 - ma**2 - mpi0**2)*UnitStep(m12 + m23 + 4*mKplus**2 - ma**2 - 3*mpi0**2)/(-I*Gammasigma*msigma + m12 + m23 - ma**2 - 3*mpi0**2 + msigma**2))/24