name: Test, Lint, and Publish to PyPI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  create:
    tags:
      - v*
  release:
    types:
      - published

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    strategy:
      matrix:
        python-version:
          - '3.11'
          - '3.12'
          - '3.13'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        
    - name: Run tests with coverage
      run: |
        python -m pytest --cov=pypi_updater --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: python
        name: python-${{ matrix.python-version }}
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        
    - name: Run linting and formatting checks
      run: |
        python scripts/lint.py

  build:
    name: Test Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Clean up previous build artifacts
      run: |
        rm -rf dist/ build/ *.egg-info
        
    - name: Build package
      run: |
        python -m build --sdist --wheel --outdir dist/
        
    - name: Check distribution
      run: |
        python -m twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-artifacts
        path: dist/

  publish-test:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      id-token: write
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-artifacts
        path: dist/
        
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

    - name: Convert CHANGELOG.md to Debian changelog
      run: |
        pwd
        ls -la .
        python3 scripts/changelog_to_debian.py
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add packaging/debian/changelog
        git commit -m "ci: update debian changelog from CHANGELOG.md" || echo "No changes to commit"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref }}

    - name: Build Debian Package (Test)
      run: |
        sudo apt-get update
        sudo apt-get install -y devscripts build-essential dh-python debhelper-compat python3-all python3-aiohttp python3-setuptools-scm python3-build
        python3 -m build --sdist
        tar -xzf dist/*.tar.gz
        cd pypi_package_updater-*
        cp -r ../packaging/debian .
        dpkg-buildpackage -us -uc

    - name: Build Snap Package (Test)
      run: |
        sudo apt update
        sudo apt install -y snapd
        sudo systemctl start snapd
        sudo systemctl enable snapd
        sudo snap wait system seed.loaded
        sudo snap install core24
        sudo snap install snapcraft --classic
        snapcraft --destructive-mode

  publish-pypi:
    name: Publish to PyPI and Package Managers
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-artifacts
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
    
    - name: Convert CHANGELOG.md to Debian changelog
      run: |
        python3 scripts/changelog_to_debian.py
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git add packaging/debian/changelog
        git commit -m "ci: update debian changelog from CHANGELOG.md" || echo "No changes to commit"
        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref }}
        
    - name: Build Debian Package
      run: |
        sudo apt-get update
        sudo apt-get install -y devscripts build-essential dh-python debhelper-compat python3-all python3-aiohttp python3-setuptools-scm python3-build
        python3 -m build --sdist
        tar -xzf dist/*.tar.gz
        cd pypi_package_updater-*
        cp -r ../packaging/debian .
        dpkg-buildpackage -us -uc

    - name: Build Snap package with dynamic version
      run: |
        sudo apt update
        sudo apt install -y snapd
        sudo systemctl start snapd
        sudo systemctl enable snapd
        sudo snap wait system seed.loaded
        sudo snap install core24
        sudo snap install snapcraft --classic
        snapcraft --destructive-mode

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./pypi-package-updater-0.2.0-x86_64.AppImage
        asset_name: pypi-package-updater-${{ github.event.release.tag_name }}-x86_64.AppImage
        asset_content_type: application/octet-stream
