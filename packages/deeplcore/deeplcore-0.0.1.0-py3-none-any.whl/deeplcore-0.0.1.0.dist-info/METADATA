Metadata-Version: 2.4
Name: deeplcore
Version: 0.0.1.0
Summary: A simple deep learning wrapper for PyTorch (RNN/GRU/LSTM/Transformer/CNN/MLP) with scikit-learn style API.
Home-page: https://github.com/SOCIALPINE/deeplcore
Author: dev_pine
Author-email: soncwnetp@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: torch>=2.8.0
Requires-Dist: numpy>=2.3.2
Requires-Dist: scikit-learn>=1.7.1
Requires-Dist: scipy>=1.16.1
Requires-Dist: filelock>=3.18.0
Requires-Dist: fsspec>=2025.7.0
Requires-Dist: Jinja2>=3.1.6
Requires-Dist: joblib>=1.5.1
Requires-Dist: MarkupSafe>=3.0.2
Requires-Dist: mpmath>=1.3.0
Requires-Dist: networkx>=3.5
Requires-Dist: sympy>=1.14.0
Requires-Dist: threadpoolctl>=3.6.0
Requires-Dist: typing_extensions>=4.14.1
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: jupyter; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# üöÄ DLCore

![Python](https://img.shields.io/badge/python-3.11%2B-blue)
![PyTorch](https://img.shields.io/badge/PyTorch-2.8-green)
![License](https://img.shields.io/badge/license-MIT-orange)

DLCore is a **lightweight, flexible deep learning framework** built on PyTorch.
It allows you to train and evaluate neural networks (RNN, GRU, LSTM, Transformer, CNN) **easily** with minimal boilerplate code. Perfect for **regression** and **classification** tasks.

---

## ‚ú® Features

* ‚úÖ Supports **RNN, GRU, LSTM, CNN, Transformer, Sequential**
* ‚úÖ Compatible with **PyTorch tensors & NumPy arrays**
* ‚úÖ Built-in **training loops, evaluation, metrics**
* ‚úÖ **Early stopping** & checkpoint saving
* ‚úÖ Flexible **metrics**: MSE, MAE, R2, Accuracy, F1
* ‚úÖ Lightweight and **easy to integrate** into existing projects

---

## üì¶ Installation

You can install DLCore via `pip` (after cloning or downloading):

```bash
git clone https://github.com/yourusername/dlcore.git
cd dlcore
pip install -r requirements.txt
```

---

## üèó Quick Start

### Import DLCore

```python
from dlcore.core import DLCore, GRU
import torch
import numpy as np

# Dummy data
X = np.random.rand(100, 10, 5)  # 100 samples, 10 timesteps, 5 features
y = np.random.rand(100, 1)      # Regression target

# Define model
model = GRU(input_size=5, hidden_size=32)

# Create DLCore trainer
trainer = DLCore(model=model, epochs=20, batch_size=16, loss_fn='mse', metrics=['mse', 'r2'])

# Train
trainer.fit(X, y)

# Predict
preds = trainer.predict(X)
print(preds[:5])
```

---

## üìä Supported Metrics

| Metric     | Task           |
| ---------- | -------------- |
| `mse`      | Regression     |
| `mae`      | Regression     |
| `r2`       | Regression     |
| `accuracy` | Classification |
| `f1`       | Classification |

---

## üîß Checkpoints & Early Stopping

DLCore supports:

```python
trainer = DLCore(model=model, early_stopping=True, patience=5, checkpoint_path='best_model.pth')
```

* Saves the **best model automatically**
* Stops training when validation loss **does not improve**

---

## üí° Examples

See the `examples/` folder for ready-to-run examples:

* `rnn_example.py`
* `cnn_example.py`
* `transformer_example.py`

---

## üìÑ License

MIT License ¬© 2025
Feel free to use, modify, and distribute DLCore in your projects.

---

## ‚ù§Ô∏è Support / Contribute

If you enjoy DLCore, give it a ‚≠ê and feel free to submit pull requests or issues!

---

Made with ‚ù§Ô∏è by **dev_pine**
