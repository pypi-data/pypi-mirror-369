name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: "3.13"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
        
      - name: Install dependencies
        run: uv sync
        
      - name: Run tests (if available)
        run: |
          # Add test commands here when tests are implemented
          echo "No tests configured yet"
          
      - name: Validate package build
        run: uv build

  build-artifacts:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
          
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          
      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
        
      - name: Install dependencies
        run: uv sync
        
      - name: Build Python package
        run: uv build
        
      - name: Build DXT package
        run: |
          # Install DXT CLI
          npm install -g @anthropic-ai/dxt
          chmod +x scripts/build_dxt.sh
          scripts/build_dxt.sh
          
      - name: Create source archive
        run: |
          git archive --format=zip --prefix=kion-mcp-${{ steps.version.outputs.version }}/ \
            HEAD > kion-mcp-${{ steps.version.outputs.version }}-source.zip
            
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/
            *.dxt
            *.zip

  publish-pypi:
    needs: [validate, build-artifacts]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # Required for trusted publishing
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  build-docker:
    needs: [validate, build-artifacts]
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_ORG }}/kion-mcp
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  github-release:
    needs: [build-artifacts, publish-pypi, build-docker]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
      
      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.build-artifacts.outputs.version }}"
          # Remove 'v' prefix from version if present
          VERSION_NUMBER="${VERSION#v}"
          
          # Extract the changelog section for this version using sed
          if [[ -f "CHANGELOG.md" ]]; then
            # Escape dots in version number for regex
            ESCAPED_VERSION=$(echo "$VERSION_NUMBER" | sed 's/\./\\./g')
            
            # Use sed to extract the section between the matching version header and the next header
            CHANGELOG_SECTION=$(sed -n "/^## \[$ESCAPED_VERSION\]/,/^## \[/p" CHANGELOG.md | sed '$d')

            if [[ -n "$CHANGELOG_SECTION" ]]; then
              echo "Found changelog section for version $VERSION_NUMBER"
            else
              echo "No changelog section found for version $VERSION_NUMBER, using fallback"
              CHANGELOG_SECTION="Release $VERSION"
            fi
          else
            echo "CHANGELOG.md not found, using fallback"
            CHANGELOG_SECTION="Release $VERSION"
          fi
          
          cat << EOF > RELEASE_NOTES.md
          ${CHANGELOG_SECTION}
          
          ## Installation
          
          ### Python Package
          \`\`\`bash
          pip install kion-mcp
          \`\`\`
          
          ### Docker
          \`\`\`bash
          docker pull ${{ secrets.DOCKERHUB_ORG }}/kion-mcp:${VERSION}
          \`\`\`
          
          ### DXT Package
          Download the \`.dxt\` file from the assets below and install according to your MCP client documentation.
          EOF
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.build-artifacts.outputs.version }}
          name: ${{ needs.build-artifacts.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(needs.build-artifacts.outputs.version, '-') }}
          files: |
            *.dxt
            *.zip
