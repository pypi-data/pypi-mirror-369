---
alwaysApply: true
description: Code documentation, project documentation, and maintenance requirements
---

# Documentation Standards & Maintenance

## Code Documentation
- **Docstrings**: Every public function and class must have comprehensive docstrings
- **Type hints**: Use type annotations for all function parameters and return values
- **Inline comments**: Add comments explaining "why" not just "what" for complex logic
- **API documentation**: Document public APIs clearly for external consumers

## Project Documentation Structure
- **README.md**: Main project overview, installation, and quick start guide
- **docs/requirements.md**: Detailed functional and non-functional requirements
- **docs/usage.md**: Comprehensive usage instructions and examples
- **docs/implementation-status.md**: Current implementation details and technical overview
- **SECURITY.md**: Security policy and vulnerability reporting
- **CONTRIBUTING.md**: Guidelines for contributors and development workflow

## Documentation Quality Standards
- **Clear and concise**: Write documentation that is easy to understand
- **Examples**: Include real-world examples and use cases
- **Up-to-date**: Keep documentation synchronized with code changes
- **Searchable**: Use clear headings and structure for easy navigation

## Code Comments Best Practices
- **Explain intent**: Comment on business logic and complex algorithms
- **Avoid obvious**: Don't comment on what the code does, explain why
- **Keep current**: Update comments when code changes
- **Use consistent style**: Follow project comment formatting conventions

## API Documentation
- **Function signatures**: Document all parameters, types, and return values
- **Examples**: Provide usage examples for common scenarios
- **Error conditions**: Document what errors can occur and when
- **Dependencies**: List any external dependencies or requirements

## Maintenance Requirements
- **Regular updates**: Review and update documentation with each release
- **Version tracking**: Document changes and new features in each version
- **User feedback**: Incorporate user questions and feedback into documentation
- **Code sync**: Ensure documentation matches actual implementation

## Documentation Tools
- **Markdown**: Use Markdown for all documentation files
- **MkDocs**: Consider using MkDocs for generating searchable documentation sites
- **Auto-generation**: Use tools to auto-generate API documentation from code
- **Version control**: Track documentation changes in git alongside code changes
