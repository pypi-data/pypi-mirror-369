[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "claudecraftsman"
dynamic = ["version"]
description = "Artisanal development framework for Claude Code with Python CLI"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    { name = "ClaudeCraftsman Team", email = "craftsman@example.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Code Generators",
    "Environment :: Console",
    "Operating System :: OS Independent",
]

dependencies = [
    "typer>=0.16.0",
    "rich>=13.0.0",
    "shellingham>=1.5.0",  # For typer shell completion
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "gitpython>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "isort>=5.0.0",
    "bandit>=1.7.0",
    "pip-audit>=2.0.0",
    "twine>=4.0.0",
]
watch = [
    "watchdog>=3.0.0",
]

[project.urls]
"Homepage" = "https://github.com/darth-veitcher/claude-craftsman"
"Bug Reports" = "https://github.com/darth-veitcher/claude-craftsman/issues"
"Source" = "https://github.com/darth-veitcher/claude-craftsman"

[project.scripts]
claudecraftsman = "claudecraftsman.cli.app:app"
craft = "claudecraftsman.cli.app:app"  # Short alias

# Hatchling Build Configuration
# This section replaces MANIFEST.in and controls what files are included in the package

[tool.hatch.build.targets.wheel]
packages = ["src/claudecraftsman"]

[tool.hatch.build]
# Include patterns for the wheel distribution
# These files will be available when the package is installed via pip/uv
include = [
    "src/claudecraftsman/**/*.py",      # All Python source files
    "src/claudecraftsman/**/*.md",      # All markdown files (for framework)
    "src/claudecraftsman/**/*.json",    # JSON configs (hooks.json template)
    "src/claudecraftsman/templates/**/*",  # Everything in templates (framework files)
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
# Clean versions from git history
local_scheme = "no-local-version"
# Use post-release versioning to increment from last tag
version_scheme = "post-release"
fallback_version = "0.1.0"

[tool.hatch.build.hooks.vcs]
version-file = "src/claudecraftsman/_version.py"

[tool.hatch.build.targets.sdist]
# Source distribution includes everything needed to build from source
# This is what gets uploaded to PyPI as the .tar.gz file
include = [
    "/src",           # All source code
    "/tests",         # Test suite
    "/.claude",       # Framework files (for development/reference)
    "/README.md",     # Project documentation
    "/LICENSE",       # License file
    "/pyproject.toml", # This build configuration
]

[tool.mypy]
python_version = "3.11"
# Progressively enabling stricter type checking
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
# warn_unreachable = true  # Too many false positives currently
# Still allowing some flexibility during transition
ignore_missing_imports = true
strict = false
disallow_untyped_defs = false
disallow_any_explicit = false
check_untyped_defs = true
# Additional useful checks
no_implicit_optional = true
strict_equality = true

[tool.ruff]
target-version = "py311"
line-length = 100
# Exclude auto-generated files
exclude = [
    "src/claudecraftsman/_version.py",  # Auto-generated by hatch-vcs
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "N",   # pep8-naming
    "RUF", # Ruff-specific rules
    "PLE", # Pylint errors
    "PLW", # Pylint warnings
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "ARG001", # Unused function argument (common in Typer CLI)
    "ARG002", # Unused method argument (common in pytest fixtures)
    "ARG003", # Unused class method argument
    "B008",  # Do not perform function call in argument defaults (needed for Typer)
    "B904",  # Within except clause, use raise ... from (not always needed)
    "SIM108", # Use ternary operator (sometimes if-else is clearer)
    "SIM117", # Use single with statement (nested can be clearer)
    "SIM105", # Use contextlib.suppress (explicit try-except can be clearer)
    "SIM102", # Use a single if statement (nested can be clearer)
    "E402",  # Module level import not at top (needed for conditional imports)
    "E722",  # Do not use bare except (sometimes needed for robustness)
    "F811",  # Redefinition of unused function (happens with test overrides)
    "F841",  # Local variable assigned but never used (sometimes needed for side effects)
    "W291",  # Trailing whitespace (handled by formatter)
    "W292",  # No newline at end of file (handled by formatter)
    "W293",  # Blank line contains whitespace (handled by formatter)
    "N806",  # Variable in function should be lowercase (Mock objects in tests)
    "PLW0603", # Using the global statement (needed in some cases)
    "PLW2901", # Redefined loop name (sometimes clearer)
    "RUF012", # Mutable class defaults (Pydantic handles this)
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "--strict-markers -v"

[tool.coverage.run]
source = ["src/claudecraftsman"]
omit = ["*/tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
]
