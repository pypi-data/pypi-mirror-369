[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "open-agent-spec"
version = "1.2.0"
description = "Open Agent Spec CLI for bootstrapping AI agent projects"
authors = [{ name = "Andrew Whitehouse", email = "andrewswhitehouse@gmail.com" }]
license = { text = "AGPL-3.0-only" }
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "typer[all]>=0.9.0",
    "pyyaml",
    "rich",
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "behavioural-contracts==0.1.2",
    "dacp>=0.3.3",
    "jinja2>=3.0.0",
    "setuptools>=69.0.0",
    "jsonschema>=4.0.0",
    "python-dotenv>=0.19.0",
    "tomli>=1.0.0; python_version < '3.11'"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-html>=3.0.0",
    "pytest-xdist>=3.0.0",
    "allure-pytest>=2.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "build>=1.0.0",
    "twine>=4.0.0",
    "types-PyYAML>=6.0.0",
    "types-setuptools>=69.0.0",
    "types-toml>=0.10.0",
    "types-jsonschema"
]

[project.scripts]
oas = "oas_cli.main:app"

[tool.hatch.build.targets.wheel]
packages = ["oas_cli"]
include = ["oas_cli/templates/*.yaml", "oas_cli/schemas/*.json"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.mypy]
python_version = "3.8"
warn_return_any = false
warn_unused_configs = true
check_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = false
warn_unreachable = false
strict_equality = false
ignore_missing_imports = true
disable_error_code = ["has-type"]

# Ignore missing imports for test files that dynamically create modules
[[tool.mypy.overrides]]
module = "tests.*"
ignore_missing_imports = true

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"  # Use Unix line endings for consistency
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = 100
preview = false  # Use stable formatting rules

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line length violations (handled by Black)
    "W503",  # line break before binary operator (Black compatibility)
    "E203",  # whitespace before ':' (Black compatibility)
    "B008",  # do not perform function calls in argument defaults
    "RUF022",  # __all__ sorting
]
