{{ imports | join('\n') }}

load_dotenv()

log = logging.getLogger(__name__)

ROLE = "{{ agent_name.title() }}"

# Generate output models
{% for model in models %}
{{ model }}

{% endfor %}

# Task functions
{% for task_function in task_functions %}
{{ task_function }}
{% endfor %}

{% if custom_router_loader %}
{{ custom_router_loader }}
{% endif %}

class {{ class_name }}(dacp.Agent):
    def __init__(self, agent_id: str, orchestrator: Orchestrator):
        super().__init__()
        self.agent_id = agent_id
        orchestrator.register_agent(agent_id, self)
        self.model = "{{ config.model }}"

        # Embed YAML config as dict during generation
        {{ embedded_config }}

        # Setup DACP logging FIRST
        self.setup_logging()
{% if custom_router_init %}
        {{ custom_router_init }}
{% endif %}

{{ handle_message_method }}

{{ setup_logging_method }}

{% for class_method in class_methods %}
{{ class_method }}
{% endfor %}

{% for memory_method in memory_methods %}
{{ memory_method }}
{% endfor %}

def main():
    # Example usage - in production, you would get these from your orchestrator setup
    from dacp.orchestrator import Orchestrator

    orchestrator = Orchestrator()
    agent = {{ class_name }}("example-agent-id", orchestrator)
{{ example_task_code }}

if __name__ == "__main__":
    main()