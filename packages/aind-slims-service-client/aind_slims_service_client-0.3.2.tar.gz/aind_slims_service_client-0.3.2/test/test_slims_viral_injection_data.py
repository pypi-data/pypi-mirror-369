# coding: utf-8

"""
    aind-slims-service

     ## aind-slims-service  Service to pull data from SLIMS.  

    The version of the OpenAPI document: 0.3.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_slims_service_client.models.slims_viral_injection_data import SlimsViralInjectionData

class TestSlimsViralInjectionData(unittest.TestCase):
    """SlimsViralInjectionData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SlimsViralInjectionData:
        """Test SlimsViralInjectionData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SlimsViralInjectionData`
        """
        model = SlimsViralInjectionData()
        if include_optional:
            return SlimsViralInjectionData(
                content_category = '',
                content_type = '',
                content_created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                content_modified_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                name = '',
                viral_injection_buffer = '',
                volume = '',
                volume_unit = '',
                labeling_protein = '',
                date_made = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                intake_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                storage_temperature = '',
                special_storage_guidelines = [
                    ''
                    ],
                special_handling_guidelines = [
                    ''
                    ],
                mix_count = 56,
                derivation_count = 56,
                ingredient_count = 56,
                assigned_mice = [
                    ''
                    ],
                requested_for_date = 56,
                planned_injection_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                planned_injection_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                order_created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                viral_materials = [
                    aind_slims_service_client.models.slims_viral_material_data.SlimsViralMaterialData(
                        content_category = '', 
                        content_type = '', 
                        content_created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        content_modified_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        viral_solution_type = '', 
                        virus_name = '', 
                        lot_number = '', 
                        lab_team = '', 
                        virus_type = '', 
                        virus_serotype = '', 
                        virus_plasmid_number = '', 
                        name = '', 
                        dose = '', 
                        dose_unit = '', 
                        titer = '', 
                        titer_unit = '', 
                        volume = '', 
                        volume_unit = '', 
                        date_made = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        intake_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        storage_temperature = '', 
                        special_storage_guidelines = [
                            ''
                            ], 
                        special_handling_guidelines = [
                            ''
                            ], 
                        parent_name = '', 
                        mix_count = 56, 
                        derivation_count = 56, 
                        ingredient_count = 56, )
                    ]
            )
        else:
            return SlimsViralInjectionData(
        )
        """

    def testSlimsViralInjectionData(self):
        """Test SlimsViralInjectionData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
