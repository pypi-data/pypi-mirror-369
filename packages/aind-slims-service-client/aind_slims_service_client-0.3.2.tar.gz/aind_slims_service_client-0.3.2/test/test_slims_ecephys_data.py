# coding: utf-8

"""
    aind-slims-service

     ## aind-slims-service  Service to pull data from SLIMS.  

    The version of the OpenAPI document: 0.3.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from aind_slims_service_client.models.slims_ecephys_data import SlimsEcephysData

class TestSlimsEcephysData(unittest.TestCase):
    """SlimsEcephysData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SlimsEcephysData:
        """Test SlimsEcephysData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SlimsEcephysData`
        """
        model = SlimsEcephysData()
        if include_optional:
            return SlimsEcephysData(
                experiment_run_created_on = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                subject_id = '',
                operator = '',
                instrument = '',
                session_type = '',
                device_calibrations = 56,
                mouse_platform_name = '',
                active_mouse_platform = True,
                session_name = '',
                animal_weight_prior = '',
                animal_weight_after = '',
                animal_weight_unit = '',
                reward_consumed = '',
                reward_consumed_unit = '',
                stimulus_epochs = 56,
                link_to_stimulus_epoch_code = '',
                reward_solution = '',
                other_reward_solution = '',
                reward_spouts = [
                    aind_slims_service_client.models.ecephys_reward_spouts.EcephysRewardSpouts(
                        spout_side = '', 
                        starting_position = '', 
                        variable_position = True, )
                    ],
                stream_modalities = [
                    ''
                    ],
                stream_modules = [
                    aind_slims_service_client.models.ecephys_stream_module.EcephysStreamModule(
                        implant_hole = 56, 
                        assembly_name = '', 
                        probe_name = '', 
                        primary_target_structure = '', 
                        secondary_target_structures = [
                            null
                            ], 
                        arc_angle = '', 
                        module_angle = '', 
                        rotation_angle = '', 
                        coordinate_transform = '', 
                        ccf_coordinate_ap = '', 
                        ccf_coordinate_ml = '', 
                        ccf_coordinate_dv = '', 
                        ccf_coordinate_unit = '', 
                        ccf_version = '', 
                        bregma_target_ap = '', 
                        bregma_target_ml = '', 
                        bregma_target_dv = '', 
                        bregma_target_unit = '', 
                        surface_z = '', 
                        surface_z_unit = '', 
                        manipulator_x = '', 
                        manipulator_y = '', 
                        manipulator_z = '', 
                        manipulator_unit = '', 
                        dye = '', )
                    ],
                daq_names = [
                    ''
                    ],
                camera_names = [
                    ''
                    ]
            )
        else:
            return SlimsEcephysData(
        )
        """

    def testSlimsEcephysData(self):
        """Test SlimsEcephysData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
