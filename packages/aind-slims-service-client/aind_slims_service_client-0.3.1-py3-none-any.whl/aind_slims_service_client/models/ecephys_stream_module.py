# coding: utf-8

"""
    aind-slims-service

     ## aind-slims-service  Service to pull data from SLIMS.  

    The version of the OpenAPI document: 0.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EcephysStreamModule(BaseModel):
    """
    Expected Stream module information from SLIMS
    """ # noqa: E501
    implant_hole: Optional[StrictInt] = None
    assembly_name: Optional[StrictStr] = None
    probe_name: Optional[StrictStr] = None
    primary_target_structure: Optional[StrictStr] = None
    secondary_target_structures: Optional[List[Any]] = None
    arc_angle: Optional[StrictStr] = None
    module_angle: Optional[StrictStr] = None
    rotation_angle: Optional[StrictStr] = None
    coordinate_transform: Optional[StrictStr] = None
    ccf_coordinate_ap: Optional[StrictStr] = None
    ccf_coordinate_ml: Optional[StrictStr] = None
    ccf_coordinate_dv: Optional[StrictStr] = None
    ccf_coordinate_unit: Optional[StrictStr] = None
    ccf_version: Optional[StrictStr] = None
    bregma_target_ap: Optional[StrictStr] = None
    bregma_target_ml: Optional[StrictStr] = None
    bregma_target_dv: Optional[StrictStr] = None
    bregma_target_unit: Optional[StrictStr] = None
    surface_z: Optional[StrictStr] = None
    surface_z_unit: Optional[StrictStr] = None
    manipulator_x: Optional[StrictStr] = None
    manipulator_y: Optional[StrictStr] = None
    manipulator_z: Optional[StrictStr] = None
    manipulator_unit: Optional[StrictStr] = None
    dye: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["implant_hole", "assembly_name", "probe_name", "primary_target_structure", "secondary_target_structures", "arc_angle", "module_angle", "rotation_angle", "coordinate_transform", "ccf_coordinate_ap", "ccf_coordinate_ml", "ccf_coordinate_dv", "ccf_coordinate_unit", "ccf_version", "bregma_target_ap", "bregma_target_ml", "bregma_target_dv", "bregma_target_unit", "surface_z", "surface_z_unit", "manipulator_x", "manipulator_y", "manipulator_z", "manipulator_unit", "dye"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EcephysStreamModule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if implant_hole (nullable) is None
        # and model_fields_set contains the field
        if self.implant_hole is None and "implant_hole" in self.model_fields_set:
            _dict['implant_hole'] = None

        # set to None if assembly_name (nullable) is None
        # and model_fields_set contains the field
        if self.assembly_name is None and "assembly_name" in self.model_fields_set:
            _dict['assembly_name'] = None

        # set to None if probe_name (nullable) is None
        # and model_fields_set contains the field
        if self.probe_name is None and "probe_name" in self.model_fields_set:
            _dict['probe_name'] = None

        # set to None if primary_target_structure (nullable) is None
        # and model_fields_set contains the field
        if self.primary_target_structure is None and "primary_target_structure" in self.model_fields_set:
            _dict['primary_target_structure'] = None

        # set to None if secondary_target_structures (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_target_structures is None and "secondary_target_structures" in self.model_fields_set:
            _dict['secondary_target_structures'] = None

        # set to None if arc_angle (nullable) is None
        # and model_fields_set contains the field
        if self.arc_angle is None and "arc_angle" in self.model_fields_set:
            _dict['arc_angle'] = None

        # set to None if module_angle (nullable) is None
        # and model_fields_set contains the field
        if self.module_angle is None and "module_angle" in self.model_fields_set:
            _dict['module_angle'] = None

        # set to None if rotation_angle (nullable) is None
        # and model_fields_set contains the field
        if self.rotation_angle is None and "rotation_angle" in self.model_fields_set:
            _dict['rotation_angle'] = None

        # set to None if coordinate_transform (nullable) is None
        # and model_fields_set contains the field
        if self.coordinate_transform is None and "coordinate_transform" in self.model_fields_set:
            _dict['coordinate_transform'] = None

        # set to None if ccf_coordinate_ap (nullable) is None
        # and model_fields_set contains the field
        if self.ccf_coordinate_ap is None and "ccf_coordinate_ap" in self.model_fields_set:
            _dict['ccf_coordinate_ap'] = None

        # set to None if ccf_coordinate_ml (nullable) is None
        # and model_fields_set contains the field
        if self.ccf_coordinate_ml is None and "ccf_coordinate_ml" in self.model_fields_set:
            _dict['ccf_coordinate_ml'] = None

        # set to None if ccf_coordinate_dv (nullable) is None
        # and model_fields_set contains the field
        if self.ccf_coordinate_dv is None and "ccf_coordinate_dv" in self.model_fields_set:
            _dict['ccf_coordinate_dv'] = None

        # set to None if ccf_coordinate_unit (nullable) is None
        # and model_fields_set contains the field
        if self.ccf_coordinate_unit is None and "ccf_coordinate_unit" in self.model_fields_set:
            _dict['ccf_coordinate_unit'] = None

        # set to None if ccf_version (nullable) is None
        # and model_fields_set contains the field
        if self.ccf_version is None and "ccf_version" in self.model_fields_set:
            _dict['ccf_version'] = None

        # set to None if bregma_target_ap (nullable) is None
        # and model_fields_set contains the field
        if self.bregma_target_ap is None and "bregma_target_ap" in self.model_fields_set:
            _dict['bregma_target_ap'] = None

        # set to None if bregma_target_ml (nullable) is None
        # and model_fields_set contains the field
        if self.bregma_target_ml is None and "bregma_target_ml" in self.model_fields_set:
            _dict['bregma_target_ml'] = None

        # set to None if bregma_target_dv (nullable) is None
        # and model_fields_set contains the field
        if self.bregma_target_dv is None and "bregma_target_dv" in self.model_fields_set:
            _dict['bregma_target_dv'] = None

        # set to None if bregma_target_unit (nullable) is None
        # and model_fields_set contains the field
        if self.bregma_target_unit is None and "bregma_target_unit" in self.model_fields_set:
            _dict['bregma_target_unit'] = None

        # set to None if surface_z (nullable) is None
        # and model_fields_set contains the field
        if self.surface_z is None and "surface_z" in self.model_fields_set:
            _dict['surface_z'] = None

        # set to None if surface_z_unit (nullable) is None
        # and model_fields_set contains the field
        if self.surface_z_unit is None and "surface_z_unit" in self.model_fields_set:
            _dict['surface_z_unit'] = None

        # set to None if manipulator_x (nullable) is None
        # and model_fields_set contains the field
        if self.manipulator_x is None and "manipulator_x" in self.model_fields_set:
            _dict['manipulator_x'] = None

        # set to None if manipulator_y (nullable) is None
        # and model_fields_set contains the field
        if self.manipulator_y is None and "manipulator_y" in self.model_fields_set:
            _dict['manipulator_y'] = None

        # set to None if manipulator_z (nullable) is None
        # and model_fields_set contains the field
        if self.manipulator_z is None and "manipulator_z" in self.model_fields_set:
            _dict['manipulator_z'] = None

        # set to None if manipulator_unit (nullable) is None
        # and model_fields_set contains the field
        if self.manipulator_unit is None and "manipulator_unit" in self.model_fields_set:
            _dict['manipulator_unit'] = None

        # set to None if dye (nullable) is None
        # and model_fields_set contains the field
        if self.dye is None and "dye" in self.model_fields_set:
            _dict['dye'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EcephysStreamModule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "implant_hole": obj.get("implant_hole"),
            "assembly_name": obj.get("assembly_name"),
            "probe_name": obj.get("probe_name"),
            "primary_target_structure": obj.get("primary_target_structure"),
            "secondary_target_structures": obj.get("secondary_target_structures"),
            "arc_angle": obj.get("arc_angle"),
            "module_angle": obj.get("module_angle"),
            "rotation_angle": obj.get("rotation_angle"),
            "coordinate_transform": obj.get("coordinate_transform"),
            "ccf_coordinate_ap": obj.get("ccf_coordinate_ap"),
            "ccf_coordinate_ml": obj.get("ccf_coordinate_ml"),
            "ccf_coordinate_dv": obj.get("ccf_coordinate_dv"),
            "ccf_coordinate_unit": obj.get("ccf_coordinate_unit"),
            "ccf_version": obj.get("ccf_version"),
            "bregma_target_ap": obj.get("bregma_target_ap"),
            "bregma_target_ml": obj.get("bregma_target_ml"),
            "bregma_target_dv": obj.get("bregma_target_dv"),
            "bregma_target_unit": obj.get("bregma_target_unit"),
            "surface_z": obj.get("surface_z"),
            "surface_z_unit": obj.get("surface_z_unit"),
            "manipulator_x": obj.get("manipulator_x"),
            "manipulator_y": obj.get("manipulator_y"),
            "manipulator_z": obj.get("manipulator_z"),
            "manipulator_unit": obj.get("manipulator_unit"),
            "dye": obj.get("dye")
        })
        return _obj


