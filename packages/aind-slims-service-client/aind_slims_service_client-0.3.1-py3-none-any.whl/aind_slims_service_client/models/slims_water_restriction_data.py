# coding: utf-8

"""
    aind-slims-service

     ## aind-slims-service  Service to pull data from SLIMS.  

    The version of the OpenAPI document: 0.3.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SlimsWaterRestrictionData(BaseModel):
    """
    Expected Model that needs to be extracted from SLIMS.
    """ # noqa: E501
    content_event_created_on: Optional[datetime] = None
    subject_id: Optional[StrictStr] = None
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = None
    assigned_by: Optional[StrictStr] = None
    target_weight_fraction: Optional[StrictStr] = None
    baseline_weight: Optional[StrictStr] = None
    weight_unit: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["content_event_created_on", "subject_id", "start_date", "end_date", "assigned_by", "target_weight_fraction", "baseline_weight", "weight_unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SlimsWaterRestrictionData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if content_event_created_on (nullable) is None
        # and model_fields_set contains the field
        if self.content_event_created_on is None and "content_event_created_on" in self.model_fields_set:
            _dict['content_event_created_on'] = None

        # set to None if subject_id (nullable) is None
        # and model_fields_set contains the field
        if self.subject_id is None and "subject_id" in self.model_fields_set:
            _dict['subject_id'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['start_date'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        # set to None if assigned_by (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_by is None and "assigned_by" in self.model_fields_set:
            _dict['assigned_by'] = None

        # set to None if target_weight_fraction (nullable) is None
        # and model_fields_set contains the field
        if self.target_weight_fraction is None and "target_weight_fraction" in self.model_fields_set:
            _dict['target_weight_fraction'] = None

        # set to None if baseline_weight (nullable) is None
        # and model_fields_set contains the field
        if self.baseline_weight is None and "baseline_weight" in self.model_fields_set:
            _dict['baseline_weight'] = None

        # set to None if weight_unit (nullable) is None
        # and model_fields_set contains the field
        if self.weight_unit is None and "weight_unit" in self.model_fields_set:
            _dict['weight_unit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SlimsWaterRestrictionData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content_event_created_on": obj.get("content_event_created_on"),
            "subject_id": obj.get("subject_id"),
            "start_date": obj.get("start_date"),
            "end_date": obj.get("end_date"),
            "assigned_by": obj.get("assigned_by"),
            "target_weight_fraction": obj.get("target_weight_fraction"),
            "baseline_weight": obj.get("baseline_weight"),
            "weight_unit": obj.get("weight_unit")
        })
        return _obj


