Metadata-Version: 2.4
Name: to-naive-utc
Version: 0.1.2
Summary: Convert any datetime-like object in Python to naive UTC. No timezone - no problems
Author-email: Mark Lidenberg <marklidenberg@gmail.com>
License: MIT
License-File: LICENSE
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.8
Requires-Dist: python-dateutil>=2.9.0.post0
Provides-Extra: dev
Requires-Dist: arrow>=1.3.0; extra == 'dev'
Requires-Dist: build>=1.2.2.post1; extra == 'dev'
Requires-Dist: dony>=0.2.1; extra == 'dev'
Requires-Dist: numpy>=1.24.4; extra == 'dev'
Requires-Dist: pandas>=2.0.3; extra == 'dev'
Requires-Dist: pendulum>=3.0.0; extra == 'dev'
Requires-Dist: twine>=6.1.0; extra == 'dev'
Description-Content-Type: text/markdown

# to-naive-utc

Timezones are error-prone. The safest approach is to store and process datetimes in **naive UTC** and add timezones only at the presentation layer.

* `to_naive_utc`: converts any datetime-like value to a naive UTC `datetime.datetime`
* `to_timedelta`: converts any timedelta-like value to `datetime.timedelta`

```python
def to_naive_utc(value: Union[
    datetime,
    str,
    int,
    float,
    date,
    "pendulum.DateTime" # if pendulum installed
    "pd.Timestamp",   # if pandas installed
    "np.datetime64",  # if numpy installed
    "arrow.Arrow",    # if arrow installed
]) -> datetime: 
    """
      - Numbers are handled as timestamps (try seconds → milliseconds → microseconds)
      - Strings are converted as follows
        1. "now" → current time
        2. Try fixed patterns
          - %Y-%m-%d
          - %Y-%m-%d %H:%M:%S
          - %Y-%m-%dT%H:%M:%S
          - %Y-%m-%dT%H:%M:%SZ
          - %Y-%m-%d %H:%M:%S.%f
          - %Y-%m-%dT%H:%M:%S.%fZ
          - %Y%m%d
          - %Y%m%d%H%M%S
          - %Y-%m-%d %H:%M:%S%z
          - %Y-%m-%dT%H:%M:%S%z
        3. Fallback to dateutil.parser.parse
      - Common datetime-like objects are converted as expected (datetime, date, pd.Timestamp, ...)
    """
    pass

...

def to_timedelta(value: Union[
    list,
    int,
    float,
    str,
    timedelta,
    "pd.Timedelta",   # if pandas installed
    "np.timedelta64", # if numpy installed
    "pendulum.Duration", # if pendulum installed
]) -> timedelta:
    """
    - Numbers: interpreted as seconds.
    - Strings are converted as follows:
      1. Parse compact combo (\d+d\d+h\d+m\d+s, e.g. "3d5h12m40s")  
      2. Parse single-unit (\d+[dhms], e.g. "45m"),  
      3. Parse word form ("2 hours 5 minutes", e.g. "1 day 3 hours")
    - Common timedelta-like objects converted appropriately (timedelta, pd.Timedelta, ...)
    """
    pass

...

from to_naive_utc import to_naive_utc, to_timedelta

to_naive_utc("2024-01-01T15:00:00+03:00")  # -> datetime(2024, 1, 1, 12, 0, 0)
to_naive_utc(1754942420)  # -> datetime(2025, 08, 11, 20, 0, 20)

to_timedelta(120)    # -> timedelta(minutes=2)
to_timedelta("1h30m15s")    # -> timedelta(hours=1, minutes=30, seconds=15)
```