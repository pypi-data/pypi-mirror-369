# Generated by ariadne-codegen
# Source: schema.graphql

from enum import Enum


class LabelTypeType(str, Enum):
    DEFAULT = "DEFAULT"
    TEAM = "TEAM"


class ThreadFieldSchemaType(str, Enum):
    STRING = "STRING"
    BOOL = "BOOL"
    ENUM = "ENUM"


class SortDirection(str, Enum):
    ASC = "ASC"
    DESC = "DESC"


class CustomersSortField(str, Enum):
    FULL_NAME = "FULL_NAME"


class ComponentTextSize(str, Enum):
    S = "S"
    M = "M"
    L = "L"


class ComponentTextColor(str, Enum):
    NORMAL = "NORMAL"
    MUTED = "MUTED"
    SUCCESS = "SUCCESS"
    WARNING = "WARNING"
    ERROR = "ERROR"


class ComponentPlainTextSize(str, Enum):
    S = "S"
    M = "M"
    L = "L"


class ComponentPlainTextColor(str, Enum):
    NORMAL = "NORMAL"
    MUTED = "MUTED"
    SUCCESS = "SUCCESS"
    WARNING = "WARNING"
    ERROR = "ERROR"


class ComponentBadgeColor(str, Enum):
    GREY = "GREY"
    GREEN = "GREEN"
    YELLOW = "YELLOW"
    RED = "RED"
    BLUE = "BLUE"


class ComponentSpacerSize(str, Enum):
    XS = "XS"
    S = "S"
    M = "M"
    L = "L"
    XL = "XL"


class ComponentDividerSpacingSize(str, Enum):
    XS = "XS"
    S = "S"
    M = "M"
    L = "L"
    XL = "XL"


class SentimentType(str, Enum):
    POSITIVE = "POSITIVE"
    NEGATIVE = "NEGATIVE"
    NEUTRAL = "NEUTRAL"


class ServiceLevelAgreementType(str, Enum):
    FIRST_RESPONSE_TIME = "FIRST_RESPONSE_TIME"
    NEXT_RESPONSE_TIME = "NEXT_RESPONSE_TIME"


class ThreadsSortField(str, Enum):
    STATUS_CHANGED_AT = "STATUS_CHANGED_AT"
    CREATED_AT = "CREATED_AT"
    CLOSEST_TO_BREACH_SLA = "CLOSEST_TO_BREACH_SLA"
    LAST_INBOUND_MESSAGE_AT = "LAST_INBOUND_MESSAGE_AT"
    PRIORITY = "PRIORITY"


class MutationErrorType(str, Enum):
    VALIDATION = "VALIDATION"
    FORBIDDEN = "FORBIDDEN"
    INTERNAL = "INTERNAL"


class MutationFieldErrorType(str, Enum):
    VALIDATION = "VALIDATION"
    REQUIRED = "REQUIRED"
    NOT_FOUND = "NOT_FOUND"


class AttachmentType(str, Enum):
    EMAIL = "EMAIL"
    CUSTOM_TIMELINE_ENTRY = "CUSTOM_TIMELINE_ENTRY"
    CHAT = "CHAT"
    SLACK = "SLACK"
    THREAD_DISCUSSION = "THREAD_DISCUSSION"
    MS_TEAMS = "MS_TEAMS"
    DISCORD = "DISCORD"
    NOTE = "NOTE"


class UpsertResult(str, Enum):
    UPDATED = "UPDATED"
    CREATED = "CREATED"
    NOOP = "NOOP"


class KnowledgeSourceType(str, Enum):
    SITEMAP = "SITEMAP"
    URL = "URL"


class DoneStatusDetail(str, Enum):
    IGNORED = "IGNORED"
    DONE_MANUALLY_SET = "DONE_MANUALLY_SET"
    DONE_AUTOMATICALLY_SET = "DONE_AUTOMATICALLY_SET"
    TIMER_EXPIRED = "TIMER_EXPIRED"


class StatusDetailType(str, Enum):
    CREATED = "CREATED"
    IN_PROGRESS = "IN_PROGRESS"
    NEW_REPLY = "NEW_REPLY"
    THREAD_LINK_UPDATED = "THREAD_LINK_UPDATED"
    THREAD_DISCUSSION_RESOLVED = "THREAD_DISCUSSION_RESOLVED"
    WAITING_FOR_CUSTOMER = "WAITING_FOR_CUSTOMER"
    WAITING_FOR_DURATION = "WAITING_FOR_DURATION"
    IGNORED = "IGNORED"
    DONE_MANUALLY_SET = "DONE_MANUALLY_SET"
    DONE_AUTOMATICALLY_SET = "DONE_AUTOMATICALLY_SET"
    TIMER_EXPIRED = "TIMER_EXPIRED"


class TodoStatusDetail(str, Enum):
    CREATED = "CREATED"
    IN_PROGRESS = "IN_PROGRESS"
    NEW_REPLY = "NEW_REPLY"
    THREAD_LINK_UPDATED = "THREAD_LINK_UPDATED"
    THREAD_DISCUSSION_RESOLVED = "THREAD_DISCUSSION_RESOLVED"


class SnoozeStatusDetail(str, Enum):
    WAITING_FOR_CUSTOMER = "WAITING_FOR_CUSTOMER"
    WAITING_FOR_DURATION = "WAITING_FOR_DURATION"


class ThreadStatus(str, Enum):
    TODO = "TODO"
    SNOOZED = "SNOOZED"
    DONE = "DONE"


class MessageSource(str, Enum):
    CHAT = "CHAT"
    EMAIL = "EMAIL"
    API = "API"
    SLACK = "SLACK"
    MS_TEAMS = "MS_TEAMS"
    DISCORD = "DISCORD"


class ThreadChannel(str, Enum):
    EMAIL = "EMAIL"
    SLACK = "SLACK"
    CHAT = "CHAT"
    API = "API"
    MS_TEAMS = "MS_TEAMS"
    DISCORD = "DISCORD"
    IMPORT = "IMPORT"


class ServiceLevelAgreementStatus(str, Enum):
    PENDING = "PENDING"
    IMMINENT_BREACH = "IMMINENT_BREACH"
    BREACHING = "BREACHING"
    BREACHED = "BREACHED"
    ACHIEVED = "ACHIEVED"
    CANCELLED = "CANCELLED"
