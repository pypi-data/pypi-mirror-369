# Generated by ariadne-codegen
# Source: graphql/

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    MutationErrorType,
    MutationFieldErrorType,
    ThreadFieldSchemaType,
    ThreadStatus,
)


class FileSizeParts(BaseModel):
    typename__: str = Field(alias="__typename")
    kilo_bytes: float = Field(alias="kiloBytes")
    mega_bytes: float = Field(alias="megaBytes")


class DateTimeParts(BaseModel):
    typename__: str = Field(alias="__typename")
    iso_8601: str = Field(alias="iso8601")
    unix_timestamp: str = Field(alias="unixTimestamp")


class AttachmentParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    file_name: str = Field(alias="fileName")
    file_size: "AttachmentPartsFileSize" = Field(alias="fileSize")
    file_extension: Optional[str] = Field(alias="fileExtension")
    updated_at: "AttachmentPartsUpdatedAt" = Field(alias="updatedAt")


class AttachmentPartsFileSize(FileSizeParts):
    pass


class AttachmentPartsUpdatedAt(DateTimeParts):
    pass


class AttachmentUploadUrlParts(BaseModel):
    typename__: str = Field(alias="__typename")
    attachment: "AttachmentUploadUrlPartsAttachment"
    upload_form_url: str = Field(alias="uploadFormUrl")
    upload_form_data: List["AttachmentUploadUrlPartsUploadFormData"] = Field(
        alias="uploadFormData"
    )
    expires_at: "AttachmentUploadUrlPartsExpiresAt" = Field(alias="expiresAt")


class AttachmentUploadUrlPartsAttachment(AttachmentParts):
    pass


class AttachmentUploadUrlPartsUploadFormData(BaseModel):
    key: str
    value: str


class AttachmentUploadUrlPartsExpiresAt(DateTimeParts):
    pass


class ChatParts(BaseModel):
    id: str
    text: Optional[str]
    attachments: List["ChatPartsAttachments"]
    created_at: "ChatPartsCreatedAt" = Field(alias="createdAt")
    updated_at: "ChatPartsUpdatedAt" = Field(alias="updatedAt")


class ChatPartsAttachments(BaseModel):
    id: str


class ChatPartsCreatedAt(DateTimeParts):
    pass


class ChatPartsUpdatedAt(DateTimeParts):
    pass


class UserActorParts(BaseModel):
    typename__: str = Field(alias="__typename")
    user_id: str = Field(alias="userId")


class SystemActorParts(BaseModel):
    typename__: str = Field(alias="__typename")
    system_id: str = Field(alias="systemId")


class MachineUserActorParts(BaseModel):
    typename__: str = Field(alias="__typename")
    machine_user_id: str = Field(alias="machineUserId")


class CompanyParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str
    domain_name: str = Field(alias="domainName")
    created_at: "CompanyPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "CompanyPartsCreatedByUserActor",
        "CompanyPartsCreatedBySystemActor",
        "CompanyPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "CompanyPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "CompanyPartsUpdatedByUserActor",
        "CompanyPartsUpdatedBySystemActor",
        "CompanyPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class CompanyPartsCreatedAt(DateTimeParts):
    pass


class CompanyPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CompanyPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CompanyPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CompanyPartsUpdatedAt(DateTimeParts):
    pass


class CompanyPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CompanyPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CompanyPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CompanyTierMembershipParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    created_at: "CompanyTierMembershipPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "CompanyTierMembershipPartsCreatedByUserActor",
        "CompanyTierMembershipPartsCreatedBySystemActor",
        "CompanyTierMembershipPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "CompanyTierMembershipPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "CompanyTierMembershipPartsUpdatedByUserActor",
        "CompanyTierMembershipPartsUpdatedBySystemActor",
        "CompanyTierMembershipPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class CompanyTierMembershipPartsCreatedAt(DateTimeParts):
    pass


class CompanyTierMembershipPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CompanyTierMembershipPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CompanyTierMembershipPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CompanyTierMembershipPartsUpdatedAt(DateTimeParts):
    pass


class CompanyTierMembershipPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CompanyTierMembershipPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CompanyTierMembershipPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CustomerActorParts(BaseModel):
    typename__: str = Field(alias="__typename")
    customer_id: str = Field(alias="customerId")


class CustomerCardConfigParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    title: str
    key: str
    default_time_to_live_seconds: int = Field(alias="defaultTimeToLiveSeconds")
    api_url: str = Field(alias="apiUrl")
    order: int
    api_headers: List["CustomerCardConfigPartsApiHeaders"] = Field(alias="apiHeaders")
    is_enabled: bool = Field(alias="isEnabled")
    created_at: "CustomerCardConfigPartsCreatedAt" = Field(alias="createdAt")
    updated_at: "CustomerCardConfigPartsUpdatedAt" = Field(alias="updatedAt")


class CustomerCardConfigPartsApiHeaders(BaseModel):
    name: str
    value: str


class CustomerCardConfigPartsCreatedAt(DateTimeParts):
    pass


class CustomerCardConfigPartsUpdatedAt(DateTimeParts):
    pass


class DeletedCustomerActorParts(BaseModel):
    typename__: str = Field(alias="__typename")
    customer_id: str = Field(alias="customerId")


class CustomerEventParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    customer_id: str = Field(alias="customerId")
    title: str
    created_at: "CustomerEventPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "CustomerEventPartsCreatedByUserActor",
        "CustomerEventPartsCreatedByCustomerActor",
        "CustomerEventPartsCreatedByDeletedCustomerActor",
        "CustomerEventPartsCreatedBySystemActor",
        "CustomerEventPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "CustomerEventPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "CustomerEventPartsUpdatedByUserActor",
        "CustomerEventPartsUpdatedByCustomerActor",
        "CustomerEventPartsUpdatedByDeletedCustomerActor",
        "CustomerEventPartsUpdatedBySystemActor",
        "CustomerEventPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class CustomerEventPartsCreatedAt(DateTimeParts):
    pass


class CustomerEventPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CustomerEventPartsCreatedByCustomerActor(CustomerActorParts):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class CustomerEventPartsCreatedByDeletedCustomerActor(DeletedCustomerActorParts):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class CustomerEventPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CustomerEventPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CustomerEventPartsUpdatedAt(DateTimeParts):
    pass


class CustomerEventPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CustomerEventPartsUpdatedByCustomerActor(CustomerActorParts):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class CustomerEventPartsUpdatedByDeletedCustomerActor(DeletedCustomerActorParts):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class CustomerEventPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CustomerEventPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CustomerGroupParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str
    key: str
    color: str


class CustomerGroupMembershipParts(BaseModel):
    typename__: str = Field(alias="__typename")
    customer_id: str = Field(alias="customerId")
    created_at: "CustomerGroupMembershipPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "CustomerGroupMembershipPartsCreatedByUserActor",
        "CustomerGroupMembershipPartsCreatedBySystemActor",
        "CustomerGroupMembershipPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "CustomerGroupMembershipPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "CustomerGroupMembershipPartsUpdatedByUserActor",
        "CustomerGroupMembershipPartsUpdatedBySystemActor",
        "CustomerGroupMembershipPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")
    customer_group: "CustomerGroupMembershipPartsCustomerGroup" = Field(
        alias="customerGroup"
    )


class CustomerGroupMembershipPartsCreatedAt(DateTimeParts):
    pass


class CustomerGroupMembershipPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CustomerGroupMembershipPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CustomerGroupMembershipPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CustomerGroupMembershipPartsUpdatedAt(DateTimeParts):
    pass


class CustomerGroupMembershipPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CustomerGroupMembershipPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CustomerGroupMembershipPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CustomerGroupMembershipPartsCustomerGroup(CustomerGroupParts):
    pass


class CustomerParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    full_name: str = Field(alias="fullName")
    short_name: Optional[str] = Field(alias="shortName")
    external_id: Optional[str] = Field(alias="externalId")
    email: "CustomerPartsEmail"
    company: Optional["CustomerPartsCompany"]
    updated_at: "CustomerPartsUpdatedAt" = Field(alias="updatedAt")
    created_at: "CustomerPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "CustomerPartsCreatedByUserActor",
        "CustomerPartsCreatedByCustomerActor",
        "CustomerPartsCreatedByDeletedCustomerActor",
        "CustomerPartsCreatedBySystemActor",
        "CustomerPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    marked_as_spam_at: Optional["CustomerPartsMarkedAsSpamAt"] = Field(
        alias="markedAsSpamAt"
    )


class CustomerPartsEmail(BaseModel):
    email: str
    is_verified: bool = Field(alias="isVerified")
    verified_at: Optional["CustomerPartsEmailVerifiedAt"] = Field(alias="verifiedAt")


class CustomerPartsEmailVerifiedAt(DateTimeParts):
    pass


class CustomerPartsCompany(CompanyParts):
    pass


class CustomerPartsUpdatedAt(DateTimeParts):
    pass


class CustomerPartsCreatedAt(DateTimeParts):
    pass


class CustomerPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CustomerPartsCreatedByCustomerActor(BaseModel):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class CustomerPartsCreatedByDeletedCustomerActor(BaseModel):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class CustomerPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CustomerPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CustomerPartsMarkedAsSpamAt(DateTimeParts):
    pass


class TierParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str
    external_id: Optional[str] = Field(alias="externalId")
    default_thread_priority: int = Field(alias="defaultThreadPriority")
    created_at: "TierPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "TierPartsCreatedByUserActor",
        "TierPartsCreatedBySystemActor",
        "TierPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "TierPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "TierPartsUpdatedByUserActor",
        "TierPartsUpdatedBySystemActor",
        "TierPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class TierPartsCreatedAt(DateTimeParts):
    pass


class TierPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class TierPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class TierPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class TierPartsUpdatedAt(DateTimeParts):
    pass


class TierPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class TierPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class TierPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class TenantParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str
    external_id: str = Field(alias="externalId")
    url: Optional[str]
    tier: Optional["TenantPartsTier"]
    created_at: "TenantPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "TenantPartsCreatedByUserActor",
        "TenantPartsCreatedBySystemActor",
        "TenantPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "TenantPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "TenantPartsUpdatedByUserActor",
        "TenantPartsUpdatedBySystemActor",
        "TenantPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class TenantPartsTier(TierParts):
    pass


class TenantPartsCreatedAt(DateTimeParts):
    pass


class TenantPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class TenantPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class TenantPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class TenantPartsUpdatedAt(DateTimeParts):
    pass


class TenantPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class TenantPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class TenantPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CustomerTenantMembershipParts(BaseModel):
    typename__: str = Field(alias="__typename")
    created_at: "CustomerTenantMembershipPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "CustomerTenantMembershipPartsCreatedByUserActor",
        "CustomerTenantMembershipPartsCreatedBySystemActor",
        "CustomerTenantMembershipPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "CustomerTenantMembershipPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "CustomerTenantMembershipPartsUpdatedByUserActor",
        "CustomerTenantMembershipPartsUpdatedBySystemActor",
        "CustomerTenantMembershipPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")
    tenant: "CustomerTenantMembershipPartsTenant"


class CustomerTenantMembershipPartsCreatedAt(DateTimeParts):
    pass


class CustomerTenantMembershipPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CustomerTenantMembershipPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CustomerTenantMembershipPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CustomerTenantMembershipPartsUpdatedAt(DateTimeParts):
    pass


class CustomerTenantMembershipPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class CustomerTenantMembershipPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class CustomerTenantMembershipPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class CustomerTenantMembershipPartsTenant(TenantParts):
    pass


class EmailParticipantParts(BaseModel):
    typename__: str = Field(alias="__typename")
    name: Optional[str]
    email: str
    email_actor: Optional[
        Annotated[
            Union[
                "EmailParticipantPartsEmailActorCustomerEmailActor",
                "EmailParticipantPartsEmailActorDeletedCustomerEmailActor",
                "EmailParticipantPartsEmailActorUserEmailActor",
                "EmailParticipantPartsEmailActorSupportEmailAddressEmailActor",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="emailActor")


class EmailParticipantPartsEmailActorCustomerEmailActor(BaseModel):
    typename__: Literal["CustomerEmailActor"] = Field(alias="__typename")
    customer_id: str = Field(alias="customerId")


class EmailParticipantPartsEmailActorDeletedCustomerEmailActor(BaseModel):
    typename__: Literal["DeletedCustomerEmailActor"] = Field(alias="__typename")
    customer_id: str = Field(alias="customerId")


class EmailParticipantPartsEmailActorUserEmailActor(BaseModel):
    typename__: Literal["UserEmailActor"] = Field(alias="__typename")
    user_id: str = Field(alias="userId")


class EmailParticipantPartsEmailActorSupportEmailAddressEmailActor(BaseModel):
    typename__: Literal["SupportEmailAddressEmailActor"] = Field(alias="__typename")
    support_email_address: str = Field(alias="supportEmailAddress")


class EmailParts(BaseModel):
    id: str
    in_reply_to_email_id: Optional[str] = Field(alias="inReplyToEmailId")
    from_: "EmailPartsFrom" = Field(alias="from")
    to: "EmailPartsTo"
    additional_recipients: List["EmailPartsAdditionalRecipients"] = Field(
        alias="additionalRecipients"
    )
    hidden_recipients: List["EmailPartsHiddenRecipients"] = Field(
        alias="hiddenRecipients"
    )
    subject: Optional[str]
    text_content: Optional[str] = Field(alias="textContent")
    markdown_content: Optional[str] = Field(alias="markdownContent")
    created_at: "EmailPartsCreatedAt" = Field(alias="createdAt")
    updated_at: "EmailPartsUpdatedAt" = Field(alias="updatedAt")
    attachments: List["EmailPartsAttachments"]


class EmailPartsFrom(EmailParticipantParts):
    pass


class EmailPartsTo(EmailParticipantParts):
    pass


class EmailPartsAdditionalRecipients(EmailParticipantParts):
    pass


class EmailPartsHiddenRecipients(EmailParticipantParts):
    pass


class EmailPartsCreatedAt(DateTimeParts):
    pass


class EmailPartsUpdatedAt(DateTimeParts):
    pass


class EmailPartsAttachments(AttachmentParts):
    pass


class IndexedDocumentParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    url: str
    created_at: "IndexedDocumentPartsCreatedAt" = Field(alias="createdAt")


class IndexedDocumentPartsCreatedAt(DateTimeParts):
    pass


class LabelTypeParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str
    icon: Optional[str]
    is_archived: bool = Field(alias="isArchived")
    archived_at: Optional["LabelTypePartsArchivedAt"] = Field(alias="archivedAt")
    archived_by: Optional[
        Annotated[
            Union[
                "LabelTypePartsArchivedByUserActor",
                "LabelTypePartsArchivedBySystemActor",
                "LabelTypePartsArchivedByMachineUserActor",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="archivedBy")
    created_at: "LabelTypePartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "LabelTypePartsCreatedByUserActor",
        "LabelTypePartsCreatedBySystemActor",
        "LabelTypePartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "LabelTypePartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "LabelTypePartsUpdatedByUserActor",
        "LabelTypePartsUpdatedBySystemActor",
        "LabelTypePartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class LabelTypePartsArchivedAt(DateTimeParts):
    pass


class LabelTypePartsArchivedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class LabelTypePartsArchivedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class LabelTypePartsArchivedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class LabelTypePartsCreatedAt(DateTimeParts):
    pass


class LabelTypePartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class LabelTypePartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class LabelTypePartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class LabelTypePartsUpdatedAt(DateTimeParts):
    pass


class LabelTypePartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class LabelTypePartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class LabelTypePartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class LabelParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    label_type: "LabelPartsLabelType" = Field(alias="labelType")
    created_at: "LabelPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "LabelPartsCreatedByUserActor",
        "LabelPartsCreatedByCustomerActor",
        "LabelPartsCreatedByDeletedCustomerActor",
        "LabelPartsCreatedBySystemActor",
        "LabelPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "LabelPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "LabelPartsUpdatedByUserActor",
        "LabelPartsUpdatedByCustomerActor",
        "LabelPartsUpdatedByDeletedCustomerActor",
        "LabelPartsUpdatedBySystemActor",
        "LabelPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class LabelPartsLabelType(LabelTypeParts):
    pass


class LabelPartsCreatedAt(DateTimeParts):
    pass


class LabelPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class LabelPartsCreatedByCustomerActor(CustomerActorParts):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class LabelPartsCreatedByDeletedCustomerActor(DeletedCustomerActorParts):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class LabelPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class LabelPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class LabelPartsUpdatedAt(DateTimeParts):
    pass


class LabelPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class LabelPartsUpdatedByCustomerActor(CustomerActorParts):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class LabelPartsUpdatedByDeletedCustomerActor(DeletedCustomerActorParts):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class LabelPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class LabelPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class MachineUserParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    full_name: str = Field(alias="fullName")
    public_name: str = Field(alias="publicName")
    description: Optional[str]
    updated_at: "MachineUserPartsUpdatedAt" = Field(alias="updatedAt")


class MachineUserPartsUpdatedAt(DateTimeParts):
    pass


class MutationErrorParts(BaseModel):
    typename__: str = Field(alias="__typename")
    message: str
    type: MutationErrorType
    code: str
    fields: List["MutationErrorPartsFields"]


class MutationErrorPartsFields(BaseModel):
    field: str
    message: str
    type: MutationFieldErrorType


class NoteParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    markdown: Optional[str]
    text: str


class PageInfoParts(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    has_previous_page: bool = Field(alias="hasPreviousPage")
    start_cursor: Optional[str] = Field(alias="startCursor")
    end_cursor: Optional[str] = Field(alias="endCursor")


class SystemParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str


class TenantTierMembershipParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    created_at: "TenantTierMembershipPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "TenantTierMembershipPartsCreatedByUserActor",
        "TenantTierMembershipPartsCreatedBySystemActor",
        "TenantTierMembershipPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "TenantTierMembershipPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "TenantTierMembershipPartsUpdatedByUserActor",
        "TenantTierMembershipPartsUpdatedBySystemActor",
        "TenantTierMembershipPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class TenantTierMembershipPartsCreatedAt(DateTimeParts):
    pass


class TenantTierMembershipPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class TenantTierMembershipPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class TenantTierMembershipPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class TenantTierMembershipPartsUpdatedAt(DateTimeParts):
    pass


class TenantTierMembershipPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class TenantTierMembershipPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class TenantTierMembershipPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class ThreadEventParts(BaseModel):
    id: str
    thread_id: str = Field(alias="threadId")
    title: str
    customer_id: str = Field(alias="customerId")
    created_at: "ThreadEventPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "ThreadEventPartsCreatedByUserActor",
        "ThreadEventPartsCreatedByCustomerActor",
        "ThreadEventPartsCreatedByDeletedCustomerActor",
        "ThreadEventPartsCreatedBySystemActor",
        "ThreadEventPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "ThreadEventPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "ThreadEventPartsUpdatedByUserActor",
        "ThreadEventPartsUpdatedByCustomerActor",
        "ThreadEventPartsUpdatedByDeletedCustomerActor",
        "ThreadEventPartsUpdatedBySystemActor",
        "ThreadEventPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class ThreadEventPartsCreatedAt(DateTimeParts):
    pass


class ThreadEventPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class ThreadEventPartsCreatedByCustomerActor(CustomerActorParts):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class ThreadEventPartsCreatedByDeletedCustomerActor(DeletedCustomerActorParts):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class ThreadEventPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class ThreadEventPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class ThreadEventPartsUpdatedAt(DateTimeParts):
    pass


class ThreadEventPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class ThreadEventPartsUpdatedByCustomerActor(CustomerActorParts):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class ThreadEventPartsUpdatedByDeletedCustomerActor(DeletedCustomerActorParts):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class ThreadEventPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class ThreadEventPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class ThreadFieldParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    key: str
    type: ThreadFieldSchemaType
    thread_id: str = Field(alias="threadId")
    string_value: Optional[str] = Field(alias="stringValue")
    boolean_value: Optional[bool] = Field(alias="booleanValue")
    is_ai_generated: bool = Field(alias="isAiGenerated")
    created_at: "ThreadFieldPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "ThreadFieldPartsCreatedByUserActor",
        "ThreadFieldPartsCreatedByCustomerActor",
        "ThreadFieldPartsCreatedByDeletedCustomerActor",
        "ThreadFieldPartsCreatedBySystemActor",
        "ThreadFieldPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "ThreadFieldPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "ThreadFieldPartsUpdatedByUserActor",
        "ThreadFieldPartsUpdatedByCustomerActor",
        "ThreadFieldPartsUpdatedByDeletedCustomerActor",
        "ThreadFieldPartsUpdatedBySystemActor",
        "ThreadFieldPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class ThreadFieldPartsCreatedAt(DateTimeParts):
    pass


class ThreadFieldPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class ThreadFieldPartsCreatedByCustomerActor(BaseModel):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class ThreadFieldPartsCreatedByDeletedCustomerActor(BaseModel):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class ThreadFieldPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class ThreadFieldPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class ThreadFieldPartsUpdatedAt(DateTimeParts):
    pass


class ThreadFieldPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class ThreadFieldPartsUpdatedByCustomerActor(BaseModel):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class ThreadFieldPartsUpdatedByDeletedCustomerActor(BaseModel):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class ThreadFieldPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class ThreadFieldPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class UserParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    full_name: str = Field(alias="fullName")
    public_name: str = Field(alias="publicName")
    slack_identities: List["UserPartsSlackIdentities"] = Field(alias="slackIdentities")
    email: str
    updated_at: "UserPartsUpdatedAt" = Field(alias="updatedAt")


class UserPartsSlackIdentities(BaseModel):
    slack_team_id: str = Field(alias="slackTeamId")
    slack_user_id: str = Field(alias="slackUserId")


class UserPartsUpdatedAt(DateTimeParts):
    pass


class ThreadParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    ref: str
    external_id: Optional[str] = Field(alias="externalId")
    customer: "ThreadPartsCustomer"
    status: ThreadStatus
    status_detail: Optional[
        Annotated[
            Union[
                "ThreadPartsStatusDetailThreadStatusDetailCreated",
                "ThreadPartsStatusDetailThreadStatusDetailSnoozed",
                "ThreadPartsStatusDetailThreadStatusDetailUnsnoozed",
                "ThreadPartsStatusDetailThreadStatusDetailNewReply",
                "ThreadPartsStatusDetailThreadStatusDetailReplied",
                "ThreadPartsStatusDetailThreadStatusDetailLinearUpdated",
                "ThreadPartsStatusDetailThreadStatusDetailInProgress",
                "ThreadPartsStatusDetailThreadStatusDetailWaitingForCustomer",
                "ThreadPartsStatusDetailThreadStatusDetailWaitingForDuration",
                "ThreadPartsStatusDetailThreadStatusDetailThreadLinkUpdated",
                "ThreadPartsStatusDetailThreadStatusDetailIgnored",
                "ThreadPartsStatusDetailThreadStatusDetailDoneManuallySet",
                "ThreadPartsStatusDetailThreadStatusDetailDoneAutomaticallySet",
                "ThreadPartsStatusDetailThreadStatusDetailThreadDiscussionResolved",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="statusDetail")
    status_changed_at: "ThreadPartsStatusChangedAt" = Field(alias="statusChangedAt")
    title: str
    description: Optional[str]
    preview_text: Optional[str] = Field(alias="previewText")
    priority: int
    tenant: Optional["ThreadPartsTenant"]
    labels: List["ThreadPartsLabels"]
    thread_fields: List["ThreadPartsThreadFields"] = Field(alias="threadFields")
    assigned_at: Optional["ThreadPartsAssignedAt"] = Field(alias="assignedAt")
    assigned_to: Optional[
        Annotated[
            Union[
                "ThreadPartsAssignedToUser",
                "ThreadPartsAssignedToMachineUser",
                "ThreadPartsAssignedToSystem",
            ],
            Field(discriminator="typename__"),
        ]
    ] = Field(alias="assignedTo")
    created_at: "ThreadPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "ThreadPartsCreatedByUserActor",
        "ThreadPartsCreatedByCustomerActor",
        "ThreadPartsCreatedByDeletedCustomerActor",
        "ThreadPartsCreatedBySystemActor",
        "ThreadPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "ThreadPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "ThreadPartsUpdatedByUserActor",
        "ThreadPartsUpdatedByCustomerActor",
        "ThreadPartsUpdatedByDeletedCustomerActor",
        "ThreadPartsUpdatedBySystemActor",
        "ThreadPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")


class ThreadPartsCustomer(BaseModel):
    id: str


class ThreadPartsStatusDetailThreadStatusDetailCreated(BaseModel):
    typename__: Literal["ThreadStatusDetailCreated"] = Field(alias="__typename")
    created_at: "ThreadPartsStatusDetailThreadStatusDetailCreatedCreatedAt" = Field(
        alias="createdAt"
    )


class ThreadPartsStatusDetailThreadStatusDetailCreatedCreatedAt(DateTimeParts):
    pass


class ThreadPartsStatusDetailThreadStatusDetailSnoozed(BaseModel):
    typename__: Literal["ThreadStatusDetailSnoozed"] = Field(alias="__typename")


class ThreadPartsStatusDetailThreadStatusDetailUnsnoozed(BaseModel):
    typename__: Literal["ThreadStatusDetailUnsnoozed"] = Field(alias="__typename")


class ThreadPartsStatusDetailThreadStatusDetailNewReply(BaseModel):
    typename__: Literal["ThreadStatusDetailNewReply"] = Field(alias="__typename")
    typename__: Literal["ThreadStatusDetailNewReply"] = Field(alias="__typename")
    status_changed_at: "ThreadPartsStatusDetailThreadStatusDetailNewReplyStatusChangedAt" = Field(
        alias="statusChangedAt"
    )


class ThreadPartsStatusDetailThreadStatusDetailNewReplyStatusChangedAt(DateTimeParts):
    pass


class ThreadPartsStatusDetailThreadStatusDetailReplied(BaseModel):
    typename__: Literal["ThreadStatusDetailReplied"] = Field(alias="__typename")


class ThreadPartsStatusDetailThreadStatusDetailLinearUpdated(BaseModel):
    typename__: Literal["ThreadStatusDetailLinearUpdated"] = Field(alias="__typename")


class ThreadPartsStatusDetailThreadStatusDetailInProgress(BaseModel):
    typename__: Literal["ThreadStatusDetailInProgress"] = Field(alias="__typename")
    typename__: Literal["ThreadStatusDetailInProgress"] = Field(alias="__typename")
    status_changed_at: "ThreadPartsStatusDetailThreadStatusDetailInProgressStatusChangedAt" = Field(
        alias="statusChangedAt"
    )


class ThreadPartsStatusDetailThreadStatusDetailInProgressStatusChangedAt(DateTimeParts):
    pass


class ThreadPartsStatusDetailThreadStatusDetailWaitingForCustomer(BaseModel):
    typename__: Literal["ThreadStatusDetailWaitingForCustomer"] = Field(
        alias="__typename"
    )
    typename__: Literal["ThreadStatusDetailWaitingForCustomer"] = Field(
        alias="__typename"
    )
    status_changed_at: "ThreadPartsStatusDetailThreadStatusDetailWaitingForCustomerStatusChangedAt" = Field(
        alias="statusChangedAt"
    )


class ThreadPartsStatusDetailThreadStatusDetailWaitingForCustomerStatusChangedAt(
    DateTimeParts
):
    pass


class ThreadPartsStatusDetailThreadStatusDetailWaitingForDuration(BaseModel):
    typename__: Literal["ThreadStatusDetailWaitingForDuration"] = Field(
        alias="__typename"
    )
    typename__: Literal["ThreadStatusDetailWaitingForDuration"] = Field(
        alias="__typename"
    )
    status_changed_at: "ThreadPartsStatusDetailThreadStatusDetailWaitingForDurationStatusChangedAt" = Field(
        alias="statusChangedAt"
    )
    waiting_until: "ThreadPartsStatusDetailThreadStatusDetailWaitingForDurationWaitingUntil" = Field(
        alias="waitingUntil"
    )


class ThreadPartsStatusDetailThreadStatusDetailWaitingForDurationStatusChangedAt(
    DateTimeParts
):
    pass


class ThreadPartsStatusDetailThreadStatusDetailWaitingForDurationWaitingUntil(
    DateTimeParts
):
    pass


class ThreadPartsStatusDetailThreadStatusDetailThreadLinkUpdated(BaseModel):
    typename__: Literal["ThreadStatusDetailThreadLinkUpdated"] = Field(
        alias="__typename"
    )
    typename__: Literal["ThreadStatusDetailThreadLinkUpdated"] = Field(
        alias="__typename"
    )
    status_changed_at: "ThreadPartsStatusDetailThreadStatusDetailThreadLinkUpdatedStatusChangedAt" = Field(
        alias="statusChangedAt"
    )
    linear_issue_id: Optional[str] = Field(alias="linearIssueId")


class ThreadPartsStatusDetailThreadStatusDetailThreadLinkUpdatedStatusChangedAt(
    DateTimeParts
):
    pass


class ThreadPartsStatusDetailThreadStatusDetailIgnored(BaseModel):
    typename__: Literal["ThreadStatusDetailIgnored"] = Field(alias="__typename")
    typename__: Literal["ThreadStatusDetailIgnored"] = Field(alias="__typename")
    status_changed_at: "ThreadPartsStatusDetailThreadStatusDetailIgnoredStatusChangedAt" = Field(
        alias="statusChangedAt"
    )


class ThreadPartsStatusDetailThreadStatusDetailIgnoredStatusChangedAt(DateTimeParts):
    pass


class ThreadPartsStatusDetailThreadStatusDetailDoneManuallySet(BaseModel):
    typename__: Literal["ThreadStatusDetailDoneManuallySet"] = Field(alias="__typename")
    typename__: Literal["ThreadStatusDetailDoneManuallySet"] = Field(alias="__typename")
    status_changed_at: "ThreadPartsStatusDetailThreadStatusDetailDoneManuallySetStatusChangedAt" = Field(
        alias="statusChangedAt"
    )


class ThreadPartsStatusDetailThreadStatusDetailDoneManuallySetStatusChangedAt(
    DateTimeParts
):
    pass


class ThreadPartsStatusDetailThreadStatusDetailDoneAutomaticallySet(BaseModel):
    typename__: Literal["ThreadStatusDetailDoneAutomaticallySet"] = Field(
        alias="__typename"
    )
    typename__: Literal["ThreadStatusDetailDoneAutomaticallySet"] = Field(
        alias="__typename"
    )
    status_changed_at: "ThreadPartsStatusDetailThreadStatusDetailDoneAutomaticallySetStatusChangedAt" = Field(
        alias="statusChangedAt"
    )
    after_seconds: Optional[int] = Field(alias="afterSeconds")


class ThreadPartsStatusDetailThreadStatusDetailDoneAutomaticallySetStatusChangedAt(
    DateTimeParts
):
    pass


class ThreadPartsStatusDetailThreadStatusDetailThreadDiscussionResolved(BaseModel):
    typename__: Literal["ThreadStatusDetailThreadDiscussionResolved"] = Field(
        alias="__typename"
    )
    typename__: Literal["ThreadStatusDetailThreadDiscussionResolved"] = Field(
        alias="__typename"
    )
    thread_discussion_id: Optional[str] = Field(alias="threadDiscussionId")
    status_changed_at: "ThreadPartsStatusDetailThreadStatusDetailThreadDiscussionResolvedStatusChangedAt" = Field(
        alias="statusChangedAt"
    )


class ThreadPartsStatusDetailThreadStatusDetailThreadDiscussionResolvedStatusChangedAt(
    DateTimeParts
):
    pass


class ThreadPartsStatusChangedAt(DateTimeParts):
    pass


class ThreadPartsTenant(TenantParts):
    pass


class ThreadPartsLabels(LabelParts):
    pass


class ThreadPartsThreadFields(ThreadFieldParts):
    pass


class ThreadPartsAssignedAt(DateTimeParts):
    pass


class ThreadPartsAssignedToUser(UserParts):
    typename__: Literal["User"] = Field(alias="__typename")


class ThreadPartsAssignedToMachineUser(MachineUserParts):
    typename__: Literal["MachineUser"] = Field(alias="__typename")


class ThreadPartsAssignedToSystem(SystemParts):
    typename__: Literal["System"] = Field(alias="__typename")


class ThreadPartsCreatedAt(DateTimeParts):
    pass


class ThreadPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class ThreadPartsCreatedByCustomerActor(CustomerActorParts):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class ThreadPartsCreatedByDeletedCustomerActor(DeletedCustomerActorParts):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class ThreadPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class ThreadPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class ThreadPartsUpdatedAt(DateTimeParts):
    pass


class ThreadPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class ThreadPartsUpdatedByCustomerActor(CustomerActorParts):
    typename__: Literal["CustomerActor"] = Field(alias="__typename")


class ThreadPartsUpdatedByDeletedCustomerActor(DeletedCustomerActorParts):
    typename__: Literal["DeletedCustomerActor"] = Field(alias="__typename")


class ThreadPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class ThreadPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class WebhookTargetEventSubscriptionParts(BaseModel):
    typename__: str = Field(alias="__typename")
    event_type: str = Field(alias="eventType")


class WebhookTargetParts(BaseModel):
    id: str
    url: str
    is_enabled: bool = Field(alias="isEnabled")
    description: str
    created_at: "WebhookTargetPartsCreatedAt" = Field(alias="createdAt")
    created_by: Union[
        "WebhookTargetPartsCreatedByUserActor",
        "WebhookTargetPartsCreatedBySystemActor",
        "WebhookTargetPartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    updated_at: "WebhookTargetPartsUpdatedAt" = Field(alias="updatedAt")
    updated_by: Union[
        "WebhookTargetPartsUpdatedByUserActor",
        "WebhookTargetPartsUpdatedBySystemActor",
        "WebhookTargetPartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")
    event_subscriptions: List["WebhookTargetPartsEventSubscriptions"] = Field(
        alias="eventSubscriptions"
    )


class WebhookTargetPartsCreatedAt(DateTimeParts):
    pass


class WebhookTargetPartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class WebhookTargetPartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class WebhookTargetPartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class WebhookTargetPartsUpdatedAt(DateTimeParts):
    pass


class WebhookTargetPartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class WebhookTargetPartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class WebhookTargetPartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class WebhookTargetPartsEventSubscriptions(WebhookTargetEventSubscriptionParts):
    pass


class WorkspaceParts(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str
    public_name: str = Field(alias="publicName")
    is_demo_workspace: bool = Field(alias="isDemoWorkspace")
    created_by: Union[
        "WorkspacePartsCreatedByUserActor",
        "WorkspacePartsCreatedBySystemActor",
        "WorkspacePartsCreatedByMachineUserActor",
    ] = Field(alias="createdBy", discriminator="typename__")
    created_at: "WorkspacePartsCreatedAt" = Field(alias="createdAt")
    updated_by: Union[
        "WorkspacePartsUpdatedByUserActor",
        "WorkspacePartsUpdatedBySystemActor",
        "WorkspacePartsUpdatedByMachineUserActor",
    ] = Field(alias="updatedBy", discriminator="typename__")
    updated_at: "WorkspacePartsUpdatedAt" = Field(alias="updatedAt")


class WorkspacePartsCreatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class WorkspacePartsCreatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class WorkspacePartsCreatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class WorkspacePartsCreatedAt(DateTimeParts):
    pass


class WorkspacePartsUpdatedByUserActor(UserActorParts):
    typename__: Literal["UserActor"] = Field(alias="__typename")


class WorkspacePartsUpdatedBySystemActor(SystemActorParts):
    typename__: Literal["SystemActor"] = Field(alias="__typename")


class WorkspacePartsUpdatedByMachineUserActor(MachineUserActorParts):
    typename__: Literal["MachineUserActor"] = Field(alias="__typename")


class WorkspacePartsUpdatedAt(DateTimeParts):
    pass


FileSizeParts.model_rebuild()
DateTimeParts.model_rebuild()
AttachmentParts.model_rebuild()
AttachmentUploadUrlParts.model_rebuild()
ChatParts.model_rebuild()
UserActorParts.model_rebuild()
SystemActorParts.model_rebuild()
MachineUserActorParts.model_rebuild()
CompanyParts.model_rebuild()
CompanyTierMembershipParts.model_rebuild()
CustomerActorParts.model_rebuild()
CustomerCardConfigParts.model_rebuild()
DeletedCustomerActorParts.model_rebuild()
CustomerEventParts.model_rebuild()
CustomerGroupParts.model_rebuild()
CustomerGroupMembershipParts.model_rebuild()
CustomerParts.model_rebuild()
TierParts.model_rebuild()
TenantParts.model_rebuild()
CustomerTenantMembershipParts.model_rebuild()
EmailParticipantParts.model_rebuild()
EmailParts.model_rebuild()
IndexedDocumentParts.model_rebuild()
LabelTypeParts.model_rebuild()
LabelParts.model_rebuild()
MachineUserParts.model_rebuild()
MutationErrorParts.model_rebuild()
NoteParts.model_rebuild()
PageInfoParts.model_rebuild()
SystemParts.model_rebuild()
TenantTierMembershipParts.model_rebuild()
ThreadEventParts.model_rebuild()
ThreadFieldParts.model_rebuild()
UserParts.model_rebuild()
ThreadParts.model_rebuild()
WebhookTargetEventSubscriptionParts.model_rebuild()
WebhookTargetParts.model_rebuild()
WorkspaceParts.model_rebuild()
