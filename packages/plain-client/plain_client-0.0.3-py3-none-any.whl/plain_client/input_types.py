# Generated by ariadne-codegen
# Source: schema.graphql

from typing import List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AttachmentType,
    ComponentBadgeColor,
    ComponentDividerSpacingSize,
    ComponentPlainTextColor,
    ComponentPlainTextSize,
    ComponentSpacerSize,
    ComponentTextColor,
    ComponentTextSize,
    CustomersSortField,
    DoneStatusDetail,
    KnowledgeSourceType,
    LabelTypeType,
    MessageSource,
    SentimentType,
    ServiceLevelAgreementStatus,
    ServiceLevelAgreementType,
    SnoozeStatusDetail,
    SortDirection,
    StatusDetailType,
    ThreadChannel,
    ThreadFieldSchemaType,
    ThreadsSortField,
    ThreadStatus,
    TodoStatusDetail,
)


class LabelTypeFilter(BaseModel):
    is_archived: Optional[bool] = Field(alias="isArchived", default=None)


class CustomersFilter(BaseModel):
    is_marked_as_spam: Optional[bool] = Field(alias="isMarkedAsSpam", default=None)
    customer_group_ids: Optional[List[str]] = Field(
        alias="customerGroupIds", default=None
    )
    customer_group_keys: Optional[List[str]] = Field(
        alias="customerGroupKeys", default=None
    )
    company_identifiers: Optional[List["CompanyIdentifierInput"]] = Field(
        alias="companyIdentifiers", default=None
    )
    tenant_identifiers: Optional[List["TenantIdentifierInput"]] = Field(
        alias="tenantIdentifiers", default=None
    )


class CustomersSort(BaseModel):
    field: CustomersSortField
    direction: SortDirection


class CustomerGroupMembershipsFilter(BaseModel):
    customer_group_external_ids: Optional[List[str]] = Field(
        alias="customerGroupExternalIds", default=None
    )


class TierIdentifierInput(BaseModel):
    tier_id: Optional[str] = Field(alias="tierId", default=None)
    external_id: Optional[str] = Field(alias="externalId", default=None)


class ThreadFieldFilter(BaseModel):
    key: str
    string_value: Optional[str] = Field(alias="stringValue", default=None)
    boolean_value: Optional[bool] = Field(alias="booleanValue", default=None)


class DatetimeFilter(BaseModel):
    after: Optional[str] = None
    before: Optional[str] = None


class SurveyResponseFilter(BaseModel):
    has_response: Optional[bool] = Field(alias="hasResponse", default=None)
    sentiment: Optional[SentimentType] = None
    rating: Optional[int] = None
    survey_id: Optional[str] = Field(alias="surveyId", default=None)
    response_at: Optional["DatetimeFilter"] = Field(alias="responseAt", default=None)


class ThreadsFilter(BaseModel):
    thread_ids: Optional[List[str]] = Field(alias="threadIds", default=None)
    refs: Optional[List[str]] = None
    label_type_ids: Optional[List[str]] = Field(alias="labelTypeIds", default=None)
    priorities: Optional[List[int]] = None
    customer_ids: Optional[List[str]] = Field(alias="customerIds", default=None)
    is_assigned: Optional[bool] = Field(alias="isAssigned", default=None)
    assigned_to_user: Optional[List[str]] = Field(alias="assignedToUser", default=None)
    is_marked_as_spam: Optional[bool] = Field(alias="isMarkedAsSpam", default=None)
    support_email_addresses: Optional[List[str]] = Field(
        alias="supportEmailAddresses", default=None
    )
    customer_group_identifiers: Optional[List["CustomerGroupIdentifier"]] = Field(
        alias="customerGroupIdentifiers", default=None
    )
    service_level_agreements: Optional["ServiceLevelAgreementFilter"] = Field(
        alias="serviceLevelAgreements", default=None
    )
    tier_identifiers: Optional[List["TierIdentifierInput"]] = Field(
        alias="tierIdentifiers", default=None
    )
    thread_fields: Optional[List["ThreadFieldFilter"]] = Field(
        alias="threadFields", default=None
    )
    tenant_identifiers: Optional[List["TenantIdentifierInput"]] = Field(
        alias="tenantIdentifiers", default=None
    )
    company_identifiers: Optional[List["CompanyIdentifierInput"]] = Field(
        alias="companyIdentifiers", default=None
    )
    message_source: Optional[List[MessageSource]] = Field(
        alias="messageSource", default=None
    )
    participant_ids: Optional[List[str]] = Field(alias="participantIds", default=None)
    status_changed_at: Optional["DatetimeFilter"] = Field(
        alias="statusChangedAt", default=None
    )
    statuses: Optional[List[ThreadStatus]] = None
    status_details: Optional[List[StatusDetailType]] = Field(
        alias="statusDetails", default=None
    )
    thread_link_group_ids: Optional[List[str]] = Field(
        alias="threadLinkGroupIds", default=None
    )
    created_at: Optional["DatetimeFilter"] = Field(alias="createdAt", default=None)
    updated_at: Optional["DatetimeFilter"] = Field(alias="updatedAt", default=None)
    survey_response: Optional["SurveyResponseFilter"] = Field(
        alias="surveyResponse", default=None
    )


class ServiceLevelAgreementFilter(BaseModel):
    types: Optional[List[ServiceLevelAgreementType]] = None
    statuses: Optional[List[ServiceLevelAgreementStatus]] = None
    updated_at: Optional["DatetimeFilter"] = Field(alias="updatedAt", default=None)


class ThreadsSort(BaseModel):
    field: ThreadsSortField
    direction: SortDirection


class StringInput(BaseModel):
    value: str


class IntInput(BaseModel):
    value: int


class BooleanInput(BaseModel):
    value: bool


class OptionalStringInput(BaseModel):
    value: Optional[str] = None


class CreateLabelTypeInput(BaseModel):
    name: str
    icon: Optional[str] = None
    color: Optional[str] = None
    type: Optional[LabelTypeType] = None
    description: Optional[str] = None
    parent_label_type_id: Optional[str] = Field(alias="parentLabelTypeId", default=None)


class ArchiveLabelTypeInput(BaseModel):
    label_type_id: str = Field(alias="labelTypeId")


class AddLabelsInput(BaseModel):
    label_type_ids: List[str] = Field(alias="labelTypeIds")
    thread_id: str = Field(alias="threadId")


class RemoveLabelsInput(BaseModel):
    label_ids: List[str] = Field(alias="labelIds")


class UpsertThreadFieldIdentifier(BaseModel):
    thread_id: str = Field(alias="threadId")
    key: str


class UpsertThreadFieldInput(BaseModel):
    identifier: "UpsertThreadFieldIdentifier"
    type: ThreadFieldSchemaType
    string_value: Optional[str] = Field(alias="stringValue", default=None)
    boolean_value: Optional[bool] = Field(alias="booleanValue", default=None)


class CreateThreadFieldOnThreadInput(BaseModel):
    key: str
    type: ThreadFieldSchemaType
    string_value: Optional[str] = Field(alias="stringValue", default=None)
    boolean_value: Optional[bool] = Field(alias="booleanValue", default=None)


class DeleteThreadFieldIdentifier(BaseModel):
    thread_id: str = Field(alias="threadId")
    key: str


class DeleteThreadFieldInput(BaseModel):
    identifier: "DeleteThreadFieldIdentifier"


class CreateNoteInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    thread_id: Optional[str] = Field(alias="threadId", default=None)
    text: str
    markdown: Optional[str] = None
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)


class SendCustomerChatInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    text: Optional[str] = None
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    thread_id: str = Field(alias="threadId")
    timestamp: Optional[str] = None


class EmailParticipantInput(BaseModel):
    name: Optional[str] = None
    email: str


class SendNewEmailInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    subject: str
    text_content: str = Field(alias="textContent")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    additional_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="additionalRecipients", default=None
    )
    hidden_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="hiddenRecipients", default=None
    )
    from_alternate_support_email: Optional["EmailParticipantInput"] = Field(
        alias="fromAlternateSupportEmail", default=None
    )
    thread_id: Optional[str] = Field(alias="threadId", default=None)


class ReplyToEmailInput(BaseModel):
    customer_id: Optional[str] = Field(alias="customerId", default=None)
    in_reply_to_email_id: str = Field(alias="inReplyToEmailId")
    subject: Optional[str] = None
    text_content: str = Field(alias="textContent")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    additional_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="additionalRecipients", default=None
    )
    hidden_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="hiddenRecipients", default=None
    )
    from_alternate_support_email: Optional["EmailParticipantInput"] = Field(
        alias="fromAlternateSupportEmail", default=None
    )


class CreateAttachmentUploadUrlInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    file_name: str = Field(alias="fileName")
    file_size_bytes: int = Field(alias="fileSizeBytes")
    attachment_type: AttachmentType = Field(alias="attachmentType")


class ComponentTextInput(BaseModel):
    text: str
    text_size: Optional[ComponentTextSize] = Field(alias="textSize", default=None)
    text_color: Optional[ComponentTextColor] = Field(alias="textColor", default=None)
    color: Optional[ComponentTextColor] = None
    size: Optional[ComponentTextSize] = None


class ComponentPlainTextInput(BaseModel):
    plain_text: str = Field(alias="plainText")
    plain_text_size: Optional[ComponentPlainTextSize] = Field(
        alias="plainTextSize", default=None
    )
    plain_text_color: Optional[ComponentPlainTextColor] = Field(
        alias="plainTextColor", default=None
    )


class ComponentLinkButtonInput(BaseModel):
    link_button_url: Optional[str] = Field(alias="linkButtonUrl", default=None)
    link_button_label: Optional[str] = Field(alias="linkButtonLabel", default=None)
    url: Optional[str] = None
    label: Optional[str] = None


class ComponentBadgeInput(BaseModel):
    badge_label: str = Field(alias="badgeLabel")
    badge_color: Optional[ComponentBadgeColor] = Field(alias="badgeColor", default=None)


class ComponentCopyButtonInput(BaseModel):
    copy_button_value: str = Field(alias="copyButtonValue")
    copy_button_tooltip_label: Optional[str] = Field(
        alias="copyButtonTooltipLabel", default=None
    )


class ComponentRowInput(BaseModel):
    row_main_content: List["ComponentRowContentInput"] = Field(alias="rowMainContent")
    row_aside_content: List["ComponentRowContentInput"] = Field(alias="rowAsideContent")


class ComponentContainerInput(BaseModel):
    container_content: List["ComponentContainerContentInput"] = Field(
        alias="containerContent"
    )


class ComponentDividerInput(BaseModel):
    divider_spacing_size: Optional[ComponentDividerSpacingSize] = Field(
        alias="dividerSpacingSize", default=None
    )
    spacing_size: Optional[ComponentDividerSpacingSize] = Field(
        alias="spacingSize", default=None
    )


class ComponentSpacerInput(BaseModel):
    spacer_size: Optional[ComponentSpacerSize] = Field(alias="spacerSize", default=None)
    size: Optional[ComponentSpacerSize] = None


class ComponentContainerContentInput(BaseModel):
    component_text: Optional["ComponentTextInput"] = Field(
        alias="componentText", default=None
    )
    component_plain_text: Optional["ComponentPlainTextInput"] = Field(
        alias="componentPlainText", default=None
    )
    component_divider: Optional["ComponentDividerInput"] = Field(
        alias="componentDivider", default=None
    )
    component_link_button: Optional["ComponentLinkButtonInput"] = Field(
        alias="componentLinkButton", default=None
    )
    component_spacer: Optional["ComponentSpacerInput"] = Field(
        alias="componentSpacer", default=None
    )
    component_badge: Optional["ComponentBadgeInput"] = Field(
        alias="componentBadge", default=None
    )
    component_copy_button: Optional["ComponentCopyButtonInput"] = Field(
        alias="componentCopyButton", default=None
    )
    component_row: Optional["ComponentRowInput"] = Field(
        alias="componentRow", default=None
    )


class ComponentRowContentInput(BaseModel):
    component_text: Optional["ComponentTextInput"] = Field(
        alias="componentText", default=None
    )
    component_plain_text: Optional["ComponentPlainTextInput"] = Field(
        alias="componentPlainText", default=None
    )
    component_divider: Optional["ComponentDividerInput"] = Field(
        alias="componentDivider", default=None
    )
    component_link_button: Optional["ComponentLinkButtonInput"] = Field(
        alias="componentLinkButton", default=None
    )
    component_spacer: Optional["ComponentSpacerInput"] = Field(
        alias="componentSpacer", default=None
    )
    component_badge: Optional["ComponentBadgeInput"] = Field(
        alias="componentBadge", default=None
    )
    component_copy_button: Optional["ComponentCopyButtonInput"] = Field(
        alias="componentCopyButton", default=None
    )


class ComponentInput(BaseModel):
    component_text: Optional["ComponentTextInput"] = Field(
        alias="componentText", default=None
    )
    component_plain_text: Optional["ComponentPlainTextInput"] = Field(
        alias="componentPlainText", default=None
    )
    component_divider: Optional["ComponentDividerInput"] = Field(
        alias="componentDivider", default=None
    )
    component_link_button: Optional["ComponentLinkButtonInput"] = Field(
        alias="componentLinkButton", default=None
    )
    component_spacer: Optional["ComponentSpacerInput"] = Field(
        alias="componentSpacer", default=None
    )
    component_badge: Optional["ComponentBadgeInput"] = Field(
        alias="componentBadge", default=None
    )
    component_copy_button: Optional["ComponentCopyButtonInput"] = Field(
        alias="componentCopyButton", default=None
    )
    component_row: Optional["ComponentRowInput"] = Field(
        alias="componentRow", default=None
    )
    component_container: Optional["ComponentContainerInput"] = Field(
        alias="componentContainer", default=None
    )


class EventComponentInput(BaseModel):
    component_text: Optional["ComponentTextInput"] = Field(
        alias="componentText", default=None
    )
    component_plain_text: Optional["ComponentPlainTextInput"] = Field(
        alias="componentPlainText", default=None
    )
    component_divider: Optional["ComponentDividerInput"] = Field(
        alias="componentDivider", default=None
    )
    component_link_button: Optional["ComponentLinkButtonInput"] = Field(
        alias="componentLinkButton", default=None
    )
    component_spacer: Optional["ComponentSpacerInput"] = Field(
        alias="componentSpacer", default=None
    )
    component_badge: Optional["ComponentBadgeInput"] = Field(
        alias="componentBadge", default=None
    )
    component_copy_button: Optional["ComponentCopyButtonInput"] = Field(
        alias="componentCopyButton", default=None
    )
    component_row: Optional["ComponentRowInput"] = Field(
        alias="componentRow", default=None
    )


class EmailAddressInput(BaseModel):
    email: str
    is_verified: bool = Field(alias="isVerified")


class UpsertCustomerIdentifierInput(BaseModel):
    external_id: Optional[str] = Field(alias="externalId", default=None)
    email_address: Optional[str] = Field(alias="emailAddress", default=None)
    customer_id: Optional[str] = Field(alias="customerId", default=None)


class UpsertCustomerOnCreateInput(BaseModel):
    external_id: Optional[str] = Field(alias="externalId", default=None)
    full_name: str = Field(alias="fullName")
    short_name: Optional[str] = Field(alias="shortName", default=None)
    email: "EmailAddressInput"
    customer_group_identifiers: Optional[List["CustomerGroupIdentifier"]] = Field(
        alias="customerGroupIdentifiers", default=None
    )
    tenant_identifiers: Optional[List["TenantIdentifierInput"]] = Field(
        alias="tenantIdentifiers", default=None
    )


class UpsertCustomerOnUpdateInput(BaseModel):
    external_id: Optional["OptionalStringInput"] = Field(
        alias="externalId", default=None
    )
    full_name: Optional["StringInput"] = Field(alias="fullName", default=None)
    short_name: Optional["OptionalStringInput"] = Field(alias="shortName", default=None)
    email: Optional["EmailAddressInput"] = None


class UpsertCustomerInput(BaseModel):
    identifier: "UpsertCustomerIdentifierInput"
    on_create: "UpsertCustomerOnCreateInput" = Field(alias="onCreate")
    on_update: "UpsertCustomerOnUpdateInput" = Field(alias="onUpdate")


class DeleteCustomerInput(BaseModel):
    customer_id: str = Field(alias="customerId")


class CreateCustomerEventInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    external_id: Optional[str] = Field(alias="externalId", default=None)
    title: str
    components: List["EventComponentInput"]
    timestamp: Optional[str] = None


class CreateThreadEventInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    external_id: Optional[str] = Field(alias="externalId", default=None)
    title: str
    components: List["EventComponentInput"]
    timestamp: Optional[str] = None


class CreateIndexedDocumentInput(BaseModel):
    url: str
    label_type_ids: Optional[List[str]] = Field(alias="labelTypeIds", default=None)
    knowledge_source_id: str = Field(alias="knowledgeSourceId")


class CreateKnowledgeSourceInput(BaseModel):
    url: str
    label_type_ids: Optional[List[str]] = Field(alias="labelTypeIds", default=None)
    type: KnowledgeSourceType


class UpdateCompanyTierInput(BaseModel):
    tier_identifier: Optional["TierIdentifierInput"] = Field(
        alias="tierIdentifier", default=None
    )
    company_identifier: "CompanyIdentifierInput" = Field(alias="companyIdentifier")


class UpdateTenantTierInput(BaseModel):
    tier_identifier: Optional["TierIdentifierInput"] = Field(
        alias="tierIdentifier", default=None
    )
    tenant_identifier: "TenantIdentifierInput" = Field(alias="tenantIdentifier")


class AddMembersToTierInput(BaseModel):
    tier_identifier: "TierIdentifierInput" = Field(alias="tierIdentifier")
    member_identifiers: List["TierMemberIdentifierInput"] = Field(
        alias="memberIdentifiers"
    )


class RemoveMembersFromTierInput(BaseModel):
    member_identifiers: List["TierMemberIdentifierInput"] = Field(
        alias="memberIdentifiers"
    )


class TierMemberIdentifierInput(BaseModel):
    company_id: Optional[str] = Field(alias="companyId", default=None)
    tenant_id: Optional[str] = Field(alias="tenantId", default=None)


class UpsertCompanyInput(BaseModel):
    identifier: "CompanyIdentifierInput"
    name: str
    domain_name: str = Field(alias="domainName")
    contract_value: Optional[int] = Field(alias="contractValue", default=None)
    account_owner_user_id: Optional[str] = Field(
        alias="accountOwnerUserId", default=None
    )


class TenantIdentifierInput(BaseModel):
    tenant_id: Optional[str] = Field(alias="tenantId", default=None)
    external_id: Optional[str] = Field(alias="externalId", default=None)


class UpsertTenantInput(BaseModel):
    identifier: "TenantIdentifierInput"
    name: str
    external_id: str = Field(alias="externalId")
    url: Optional["OptionalStringInput"] = None


class CompanyIdentifierInput(BaseModel):
    company_id: Optional[str] = Field(alias="companyId", default=None)
    company_domain_name: Optional[str] = Field(alias="companyDomainName", default=None)


class UpdateCustomerCompanyInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    company_identifier: Optional["CompanyIdentifierInput"] = Field(
        alias="companyIdentifier", default=None
    )


class CustomerImpersonationInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")


class ImpersonationInput(BaseModel):
    as_customer: "CustomerImpersonationInput" = Field(alias="asCustomer")


class ReplyToThreadEmailChannelSpecificOptionsInput(BaseModel):
    additional_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="additionalRecipients", default=None
    )
    hidden_recipients: Optional[List["EmailParticipantInput"]] = Field(
        alias="hiddenRecipients", default=None
    )


class ReplyToThreadChannelSpecificOptionsInput(BaseModel):
    email: "ReplyToThreadEmailChannelSpecificOptionsInput"


class ReplyToThreadInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    text_content: str = Field(alias="textContent")
    markdown_content: Optional[str] = Field(alias="markdownContent", default=None)
    impersonation: Optional["ImpersonationInput"] = None
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    channel_specific_options: Optional["ReplyToThreadChannelSpecificOptionsInput"] = (
        Field(alias="channelSpecificOptions", default=None)
    )


class MarkThreadAsDoneInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    status_detail: Optional[DoneStatusDetail] = Field(
        alias="statusDetail", default=None
    )


class MarkThreadAsTodoInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    status_detail: Optional[TodoStatusDetail] = Field(
        alias="statusDetail", default=None
    )


class ChangeThreadPriorityInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    priority: int


class SnoozeThreadInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    duration_seconds: Optional[int] = Field(alias="durationSeconds", default=None)
    status_detail: Optional[SnoozeStatusDetail] = Field(
        alias="statusDetail", default=None
    )


class AssignThreadInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    user_id: Optional[str] = Field(alias="userId", default=None)
    machine_user_id: Optional[str] = Field(alias="machineUserId", default=None)


class UnassignThreadInput(BaseModel):
    thread_id: str = Field(alias="threadId")


class SlackThreadChannelDetailsInput(BaseModel):
    slack_channel_id: str = Field(alias="slackChannelId")
    slack_team_id: str = Field(alias="slackTeamId")


class ThreadChannelDetailsInput(BaseModel):
    slack: Optional["SlackThreadChannelDetailsInput"] = None


class CustomerIdentifierInput(BaseModel):
    external_id: Optional[str] = Field(alias="externalId", default=None)
    email_address: Optional[str] = Field(alias="emailAddress", default=None)
    customer_id: Optional[str] = Field(alias="customerId", default=None)


class CreateThreadAssignedToInput(BaseModel):
    user_id: Optional[str] = Field(alias="userId", default=None)
    machine_user_id: Optional[str] = Field(alias="machineUserId", default=None)


class CreateThreadInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    title: Optional[str] = None
    components: Optional[List["ComponentInput"]] = None
    attachment_ids: Optional[List[str]] = Field(alias="attachmentIds", default=None)
    label_type_ids: Optional[List[str]] = Field(alias="labelTypeIds", default=None)
    thread_fields: Optional[List["CreateThreadFieldOnThreadInput"]] = Field(
        alias="threadFields", default=None
    )
    assigned_to: Optional["CreateThreadAssignedToInput"] = Field(
        alias="assignedTo", default=None
    )
    external_id: Optional[str] = Field(alias="externalId", default=None)
    description: Optional[str] = None
    priority: Optional[int] = None
    tenant_identifier: Optional["TenantIdentifierInput"] = Field(
        alias="tenantIdentifier", default=None
    )
    channel: Optional[ThreadChannel] = None
    channel_details: Optional["ThreadChannelDetailsInput"] = Field(
        alias="channelDetails", default=None
    )


class WebhookTargetEventSubscriptionInput(BaseModel):
    event_type: str = Field(alias="eventType")


class CreateWebhookTargetInput(BaseModel):
    url: str
    event_subscriptions: List["WebhookTargetEventSubscriptionInput"] = Field(
        alias="eventSubscriptions"
    )
    is_enabled: bool = Field(alias="isEnabled")
    description: str
    version: Optional[str] = None


class UpdateWebhookTargetInput(BaseModel):
    webhook_target_id: str = Field(alias="webhookTargetId")
    url: Optional["StringInput"] = None
    event_subscriptions: Optional[List["WebhookTargetEventSubscriptionInput"]] = Field(
        alias="eventSubscriptions", default=None
    )
    is_enabled: Optional["BooleanInput"] = Field(alias="isEnabled", default=None)
    description: Optional["StringInput"] = None
    version: Optional["StringInput"] = None


class DeleteWebhookTargetInput(BaseModel):
    webhook_target_id: str = Field(alias="webhookTargetId")


class CustomerCardConfigApiHeaderInput(BaseModel):
    name: str
    value: str


class CreateCustomerCardConfigInput(BaseModel):
    title: str
    key: str
    default_time_to_live_seconds: int = Field(alias="defaultTimeToLiveSeconds")
    api_url: str = Field(alias="apiUrl")
    api_headers: List["CustomerCardConfigApiHeaderInput"] = Field(alias="apiHeaders")


class UpdateCustomerCardConfigInput(BaseModel):
    customer_card_config_id: str = Field(alias="customerCardConfigId")
    order: Optional["IntInput"] = None
    title: Optional["StringInput"] = None
    key: Optional["StringInput"] = None
    default_time_to_live_seconds: Optional["IntInput"] = Field(
        alias="defaultTimeToLiveSeconds", default=None
    )
    api_url: Optional["StringInput"] = Field(alias="apiUrl", default=None)
    api_headers: Optional[List["CustomerCardConfigApiHeaderInput"]] = Field(
        alias="apiHeaders", default=None
    )
    is_enabled: Optional["BooleanInput"] = Field(alias="isEnabled", default=None)


class DeleteCustomerCardConfigInput(BaseModel):
    customer_card_config_id: str = Field(alias="customerCardConfigId")


class CustomerGroupIdentifier(BaseModel):
    customer_group_id: Optional[str] = Field(alias="customerGroupId", default=None)
    customer_group_key: Optional[str] = Field(alias="customerGroupKey", default=None)
    external_id: Optional[str] = Field(alias="externalId", default=None)


class AddCustomerToCustomerGroupsInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    customer_group_identifiers: List["CustomerGroupIdentifier"] = Field(
        alias="customerGroupIdentifiers"
    )


class RemoveCustomerFromCustomerGroupsInput(BaseModel):
    customer_id: str = Field(alias="customerId")
    customer_group_identifiers: List["CustomerGroupIdentifier"] = Field(
        alias="customerGroupIdentifiers"
    )


class CompaniesSearchQuery(BaseModel):
    term: str


class TenantsSearchQuery(BaseModel):
    term: str


class UpdateThreadTenantInput(BaseModel):
    thread_id: str = Field(alias="threadId")
    tenant_identifier: Optional["TenantIdentifierInput"] = Field(
        alias="tenantIdentifier", default=None
    )


class AddCustomerToTenantsInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    tenant_identifiers: List["TenantIdentifierInput"] = Field(alias="tenantIdentifiers")


class RemoveCustomerFromTenantsInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    tenant_identifiers: List["TenantIdentifierInput"] = Field(alias="tenantIdentifiers")


class SetCustomerTenantsInput(BaseModel):
    customer_identifier: "CustomerIdentifierInput" = Field(alias="customerIdentifier")
    tenant_identifiers: List["TenantIdentifierInput"] = Field(alias="tenantIdentifiers")


CustomersFilter.model_rebuild()
SurveyResponseFilter.model_rebuild()
ThreadsFilter.model_rebuild()
ServiceLevelAgreementFilter.model_rebuild()
UpsertThreadFieldInput.model_rebuild()
DeleteThreadFieldInput.model_rebuild()
SendNewEmailInput.model_rebuild()
ReplyToEmailInput.model_rebuild()
ComponentRowInput.model_rebuild()
ComponentContainerInput.model_rebuild()
ComponentContainerContentInput.model_rebuild()
ComponentRowContentInput.model_rebuild()
ComponentInput.model_rebuild()
EventComponentInput.model_rebuild()
UpsertCustomerOnCreateInput.model_rebuild()
UpsertCustomerOnUpdateInput.model_rebuild()
UpsertCustomerInput.model_rebuild()
CreateCustomerEventInput.model_rebuild()
CreateThreadEventInput.model_rebuild()
UpdateCompanyTierInput.model_rebuild()
UpdateTenantTierInput.model_rebuild()
AddMembersToTierInput.model_rebuild()
RemoveMembersFromTierInput.model_rebuild()
UpsertCompanyInput.model_rebuild()
UpsertTenantInput.model_rebuild()
UpdateCustomerCompanyInput.model_rebuild()
CustomerImpersonationInput.model_rebuild()
ImpersonationInput.model_rebuild()
ReplyToThreadEmailChannelSpecificOptionsInput.model_rebuild()
ReplyToThreadChannelSpecificOptionsInput.model_rebuild()
ReplyToThreadInput.model_rebuild()
ThreadChannelDetailsInput.model_rebuild()
CreateThreadInput.model_rebuild()
CreateWebhookTargetInput.model_rebuild()
UpdateWebhookTargetInput.model_rebuild()
CreateCustomerCardConfigInput.model_rebuild()
UpdateCustomerCardConfigInput.model_rebuild()
AddCustomerToCustomerGroupsInput.model_rebuild()
RemoveCustomerFromCustomerGroupsInput.model_rebuild()
UpdateThreadTenantInput.model_rebuild()
AddCustomerToTenantsInput.model_rebuild()
RemoveCustomerFromTenantsInput.model_rebuild()
SetCustomerTenantsInput.model_rebuild()
