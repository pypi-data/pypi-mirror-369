name: Test, Build and Publish

on:
  push:
    branches: [master, main]
    tags: ['v*']
  pull_request:
    branches: [master, main]
  workflow_dispatch:

jobs:
  test_examples:
    name: Test README examples on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y curl autoconf automake libtool python3-dev pkg-config

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install curl autoconf automake libtool pkg-config

    - name: Install libpostal
      run: |
        git clone https://github.com/openvenues/libpostal
        cd libpostal
        ./bootstrap.sh
        if [[ "${{ runner.os }}" == "macOS" && "$(uname -m)" == "arm64" ]]; then
          ./configure --datadir=${{ runner.temp }}/libpostal-data --disable-sse2
        else
          ./configure --datadir=${{ runner.temp }}/libpostal-data
        fi
        make -j$(nproc 2>/dev/null || sysctl -n hw.ncpu)
        sudo make install
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo ldconfig
        fi

    - name: Install our Python package
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test README examples
      run: |
        python test_readme_examples.py

    - name: Test basic imports
      run: |
        python -c "
        from postal.expand import expand_address
        from postal.parser import parse_address
        from postal.normalize import normalize_string
        print('✅ All imports successful')
        print('✅ Basic functionality test passed')
        "

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test_examples  # Only run if examples pass
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')  # Only on version tags
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-14]  # macos-14 is Apple Silicon

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU for ARM64 emulation
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel==2.16.2

    - name: Install libpostal (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install curl autoconf automake libtool pkg-config
        git clone https://github.com/openvenues/libpostal
        cd libpostal
        ./bootstrap.sh
        # Disable SSE2 for Apple Silicon compatibility
        if [[ "$(uname -m)" == "arm64" ]]; then
          ./configure --datadir=/tmp/libpostal-data --disable-sse2
        else
          ./configure --datadir=/tmp/libpostal-data
        fi
        make -j$(sysctl -n hw.ncpu)
        sudo make install


    - name: Build wheels
      run: |
        python -m cibuildwheel --output-dir wheelhouse
      env:
        # Build for multiple Python versions and architectures
        CIBW_BUILD: "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-*"
        CIBW_SKIP: "pp* *-musllinux_* *-win32 *-win_arm64 *-win_amd64"  # Skip PyPy, musl, and all Windows for now
        CIBW_ARCHS_LINUX: "x86_64 aarch64"
        CIBW_ARCHS_MACOS: "arm64"
        # Skip tests that require libpostal data
        CIBW_TEST_SKIP: "*"
        # Install libpostal inside cibuildwheel containers
        CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
        CIBW_MANYLINUX_AARCH64_IMAGE: "manylinux_2_28"
        CIBW_BEFORE_ALL_LINUX: |
          # Use dnf for newer CentOS/AlmaLinux, fallback to yum for older systems
          (dnf install -y --nogpgcheck curl autoconf automake libtool pkgconfig git || yum install -y curl autoconf automake libtool pkgconfig git) && 
          git clone https://github.com/openvenues/libpostal /tmp/libpostal && 
          cd /tmp/libpostal && 
          ./bootstrap.sh && 
          ./configure --datadir=/tmp/libpostal-data && 
          make -j$(nproc) && 
          make install && 
          ldconfig
        CIBW_BEFORE_ALL_MACOS: "echo 'libpostal already installed in previous step'"

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: test_examples  # Only run if examples pass
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')  # Only on version tags
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Build sdist
      run: |
        python -m pip install --upgrade pip build
        python -m build --sdist

    - name: Upload sdist as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  upload_pypi:
    name: Upload to PyPI
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    permissions:
      id-token: write  # for trusted publishing
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  upload_github_release:
    name: Upload to GitHub Release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.whl dist/*.tar.gz
        body: |
          ## pypostal-multiarch ${{ github.ref_name }}
          
          Python bindings to libpostal with multi-architecture support.
          
          ### Download Options
          - **PyPI**: `pip install pypostal-multiarch==${{ github.ref_name }}`
          - **Wheels**: Download platform-specific wheels below
          
          ### Supported Platforms
          - **Linux**: x86_64, aarch64 (ARM64)
          - **macOS**: x86_64 (Intel), arm64 (Apple Silicon) 
          - **Windows**: AMD64
          - **Python**: 3.8, 3.9, 3.10, 3.11, 3.12, 3.13
          
          ### Changes
          See commit history for detailed changes.
        draft: false
        prerelease: false