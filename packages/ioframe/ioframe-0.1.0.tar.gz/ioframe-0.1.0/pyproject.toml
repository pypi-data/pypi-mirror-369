[project]
name = "ioframe"
version = "0.1.0"
description = "Unified API for reading and writing Pandas DataFrames across multiple file formats and engines."
readme = "README.md"
authors = [{ name = "anthonyc", email = "anthony.correia@cern.ch" }]
requires-python = ">=3.11"
dependencies = ["pandas>=2.3.1", "pydantic>=2.11.7"]
keywords = ["pandas", "dataframe", "io", "root", "cern"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
]

[project.optional-dependencies]
fastparquet = ["fastparquet>=2024.11.0"]
uproot = ["awkward-pandas>=2023.8.0", "uproot>=5.6.4"]
pyarrow = ["pyarrow>=21.0.0"]
zstd = ["zstandard>=0.23.0"]
hdf5 = ["tables>=3.10.2"]

[build-system]
requires = ["uv_build>=0.8.2,<0.9.0"]
build-backend = "uv_build"

# ------------------------------------------------------------------------------
# Ruff Configuration
# ------------------------------------------------------------------------------
[tool.ruff]
line-length = 88
include = ["src/**/*.py", "tests/**/*.py", "docs/**/*.ipynb"]

[tool.ruff.lint]
select = ["ALL"]
extend-ignore = [
    "COM812",  # missing-trailing-comma, not compatible with black style
    "RET505",  # superfluous-else-return, clearer without for enum parsing
    "D102",    # undocumented-public-method, because of doc inheritance
    "D203",    # incorrect-blank-line-before-class, preferential
    "D213",    # multi-line-summary-second-line, preferential
    "D413",    # missing-blank-line-after-last-section, preferential
    "S101",    # assert, for quick type-hint checks
    "TID252",  # relative-imports, I like relative imports
    "RET503",  # implicit-return, not compatible with NoReturn functions
    "PLR0913", # too-many-arguments, not always a problem
    "PLR2004", # magic-value-comparison, annoying for testing
    "FBT003",  # boolean-positional-value-in-call, false positives for pandas
    "FIX002",  # line-contain-todo, I like todos
    "D107",    # undocumented-public-init, to be fast
    "ANN201",  # missing-return-type-undocumented-public-function, false positive for doc inheritance
    "ANN401",
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*" = [
    "D100",   # undocumented-public-module, doesn't apply to conftest.py and not so useful for tests
    "D103",   # missing-docstring, not always necessary for tests
    "ANN201", # missing-return-type-undocumented-public-function, not always necessary for tests
    "ANN001", # missing-type-function-argument, not always necessary for tests
    "FBT001", # boolean-type-hint-positional-argument
    "INP001",
    "PD901",
]
"*.ipynb" = ["T201", "T203"] # use of print and pprint

# ------------------------------------------------------------------------------
# Pytest Configuration
# ------------------------------------------------------------------------------
[tool.pytest.ini_options]
# Show print statements in the output
addopts = "-s"
filterwarnings = ["error"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "proxy: marks tests that require a proxy (deselect with '-m \"not proxy\"')",
]
testpaths = ["tests"]
# include the test directory in the Python path
pythonpath = ["."]
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_cli = true
log_cli_level = "INFO"

# ------------------------------------------------------------------------------
# Pytest Coverage Configuration
# ------------------------------------------------------------------------------
[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    # Don't complain about typing.overload
    "@overload",
]

# ------------------------------------------------------------------------------
# Mypy Configuration
# ------------------------------------------------------------------------------
[tool.mypy]
files = ["src", "tests"]
check_untyped_defs = true

[[tool.mypy.overrides]]
module = ["ROOT.*", "fastparquet", "uproot.*", "tables.*"]
ignore_missing_imports = true


# ------------------------------------------------------------------------------
# Codespell Configuration
# ------------------------------------------------------------------------------
[tool.codespell]
skip = "./htmlcov,./docs/build,./.git,./typings,./uv.lock,./pixi.lock"
count = true
quiet-level = 3


# ------------------------------------------------------------------------------
# Pixi Configuration
# ------------------------------------------------------------------------------
[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.pypi-dependencies]
ioframe = { path = ".", editable = true, extras = [
    "fastparquet",
    "uproot",
    "pyarrow",
    "zstd",
    "hdf5",
] }

[tool.pixi.tasks]
_ruff_linter_check = { cmd = ["ruff", "check"] }
_ruff_format_check = { cmd = ["ruff", "format", "--check"] }
_ruff_linter_fix = { cmd = ["ruff", "check", "--fix"] }
_ruff_format_fix = { cmd = ["ruff", "format"] }
_type_check = { cmd = ["mypy"] }
_spell_check = { cmd = ["codespell"] }
_test = { cmd = ["pytest"] }
_coverage = { cmd = [
    "pytest",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term",
    "--cov-report=xml",
] }
_lib_build = { cmd = ["uv", "build"] }
_lib_publish = { cmd = ["uv", "publish"] }
_doc_clean = { cmd = [
    "sphinx-build",
    "-M",
    "clean",
    "docs/source",
    "docs/build",
] }
_generate_io_summary = { cmd = [
    "docs/script/generate_io_summary.py",
    "docs/source/user/_registry.md",
] }
_doc_build = { cmd = [
    "sphinx-build",
    "-b",
    "html",
    "docs/source",
    "docs/build/html",
] }

# wrappers that always run in env "test"
lint_check = { depends-on = [
    { task = "_ruff_linter_check", environment = "lint" },
    { task = "_ruff_format_check", environment = "lint" },
], description = "Check code formatting and linting issues" }
lint_fix = { depends-on = [
    { task = "_ruff_linter_fix", environment = "lint" },
    { task = "_ruff_format_fix", environment = "lint" },
], description = "Automatically fix code formatting and linting issues" }
type_check = { depends-on = [
    { task = "_type_check", environment = "type" },
], description = "Check type annotations" }
spell_check = { depends-on = [
    { task = "_spell_check", environment = "spell" },
], description = "Check spelling errors" }
test = { depends-on = [
    { task = "_test", environment = "test" },
], description = "Run tests" }
coverage = { depends-on = [
    { task = "_coverage", environment = "test" },
], description = "Run tests with coverage" }
lib_build = { depends-on = [
    { task = "_lib_build", environment = "uv" },
], description = "Build the project with uv" }
lib_publish = { depends-on = [
    { task = "_lib_publish", environment = "uv" },
], description = "Publish the project" }
doc_build = { depends-on = [
    { task = "_generate_io_summary", environment = "doc" },
    { task = "_doc_clean", environment = "doc" },
    { task = "_doc_build", environment = "doc" },
], description = "Build the project documentation" }

[tool.pixi.feature.test.dependencies]
pytest = ">=8.4.1,<9"
pytest-cov = ">=6.2.1,<7"

[tool.pixi.feature.spell.dependencies]
codespell = ">=2.4.1,<3"

[tool.pixi.feature.lint.dependencies]
ruff = ">=0.12.8,<0.13"


[tool.pixi.feature.type.dependencies]
mypy = ">=1.17.1,<2"
pandas-stubs = ">=2.3.0.250703,<3"
pyarrow-stubs = ">=20.0.0.20250716,<21"
typing_extensions = ">=4.14.1,<5"
types-psutil = ">=6.1.0.20241221,<7"

[tool.pixi.feature.root.dependencies]
root = ">=6.34.10,<7"

[tool.pixi.feature.uv.dependencies]
uv = ">=0.8.8,<0.9"

[tool.pixi.feature.interactive.dependencies]
ipykernel = ">=6.30.1,<7"

[tool.pixi.feature.sphinx.dependencies]
sphinx = ">=8.2.3,<9"
sphinx-book-theme = ">=1.1.4,<2"
sphinx-copybutton = ">=0.5.2,<0.6"
sphinx-design = ">=0.6.1,<0.7"
tabulate = ">=0.9.0,<0.10"
myst-parser = ">=4.0.1,<5"
nbsphinx = ">=0.9.7,<0.10"
sphinxcontrib-programoutput = ">=0.18,<0.19"
autodoc-pydantic = ">=2.1.0,<3"

[tool.pixi.environments]
test = { features = ["test", "root"], solve-group = "default" }
spell = { features = ["spell"], solve-group = "default" }
type = { features = ["type", "test"], solve-group = "default" }
lint = { features = ["lint"], solve-group = "default" }
uv = { features = ["uv"], solve-group = "default" }
doc = { features = ["interactive", "sphinx"], solve-group = "default" }
dev = { features = [
    "root",
    "test",
    "lint",
    "type",
    "spell",
    "uv",
    "interactive",
    "sphinx",
], solve-group = "default" }
