"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from langcache.types import BaseModel
import pydantic
from typing import Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SetEntryRequestTypedDict(TypedDict):
    r"""Request to add a cache entry to the cache"""

    prompt: str
    r"""The prompt for the entry."""
    response: str
    r"""The response to the prompt for the entry."""
    attributes: NotRequired[Dict[str, str]]
    r"""Key-value pairs of attributes to be associated with the entry. These can be used for filtering when searching for entries. All attribute names that can be associated with an entry must be defined during cache creation."""
    ttl_millis: NotRequired[int]
    r"""The entry's time-to-live, in milliseconds. If not set, the cache's default TTL is used."""


class SetEntryRequest(BaseModel):
    r"""Request to add a cache entry to the cache"""

    prompt: str
    r"""The prompt for the entry."""

    response: str
    r"""The response to the prompt for the entry."""

    attributes: Optional[Dict[str, str]] = None
    r"""Key-value pairs of attributes to be associated with the entry. These can be used for filtering when searching for entries. All attribute names that can be associated with an entry must be defined during cache creation."""

    ttl_millis: Annotated[Optional[int], pydantic.Field(alias="ttlMillis")] = None
    r"""The entry's time-to-live, in milliseconds. If not set, the cache's default TTL is used."""
