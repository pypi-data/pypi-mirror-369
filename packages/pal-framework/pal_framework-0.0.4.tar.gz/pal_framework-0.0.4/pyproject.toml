[project]
name = "pal-framework"
dynamic = ["version"]
description = "Prompt Assembly Language - A framework for managing LLM prompts as versioned, composable software artifacts"
readme = "README.md"
authors = [
    { name = "Nicolas Iglesias", email = "nfiglesias@gmail.com" }
]
license = {file = "LICENSE"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["llm", "prompts", "ai", "gpt", "claude", "prompt-engineering"]
requires-python = ">=3.12"
dependencies = [
    "pydantic>=2.8.0",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.4",
    "click>=8.1.7",
    "httpx>=0.27.0",
    "rich>=13.7.0",
    "structlog>=24.2.0",
    "ruff>=0.12.8",
    "importlib-metadata>=8.7.0",
]

[project.urls]
Homepage = "https://github.com/cyqlelabs/pal"
Documentation = "https://pal-framework.readthedocs.io"
Repository = "https://github.com/cyqlelabs/pal"
Issues = "https://github.com/cyqlelabs/pal/issues"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
    "mypy>=1.11.0",
    "ruff>=0.5.0",
    "pre-commit>=3.7.0",
]
test = [
    "pytest>=8.3.0", 
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=5.0.0",
]
docs = [
    "sphinx>=8.1.0",
    "sphinx-rtd-theme>=3.0.2",
    "sphinx-autodoc-typehints>=2.5.0",
    "myst-parser>=4.0.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-autobuild>=2024.10.0",
    "sphinx-autoapi>=3.3.0",
    "doc8>=1.1.0",
]
openai = ["openai>=1.0.0"]
anthropic = ["anthropic>=0.18.0"]
all = ["openai>=1.0.0", "anthropic>=0.18.0"]

[project.scripts]
pal = "pal.cli:main"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/pal"]

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "W", "C90", "I", "N", "UP", "B", "A", "C4", "PIE", "RET", "SIM"]
ignore = ["E501"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = ["openai", "anthropic"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = "--strict-markers --strict-config --cov=pal --cov-report=term-missing --doctest-modules --doctest-glob='*.md'"
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__init__.py"]

[dependency-groups]
dev = [
    "doc8>=1.1.0",
    "furo>=2024.8.0",
    "hatch-vcs>=0.5.0",
    "mypy>=1.17.1",
    "myst-parser>=4.0.0",
    "pytest>=8.3.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-doctest-custom>=1.0.0",
    "sphinx>=8.1.0",
    "sphinx-autoapi>=3.3.0",
    "sphinx-autobuild>=2024.10.0",
    "sphinx-autodoc-typehints>=2.5.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.6.0",
    "sphinx-lint>=1.0.0",
    "sphinx-pydantic>=0.1.0",
    "sphinx-pytest>=0.2.0",
    "sphinx-rtd-theme>=3.0.2",
    "sphinxcontrib-mermaid>=1.0.0",
    "twine>=6.1.0",
    "types-pyyaml>=6.0.12.20250809",
]
docs = [
    "doc8>=2.0.0",
    "furo>=2025.7.19",
    "myst-parser>=4.0.1",
    "pytest>=8.4.1",
    "pytest-doctest-custom>=1.0.0",
    "sphinx>=8.2.3",
    "sphinx-autoapi>=3.6.0",
    "sphinx-autobuild>=2024.10.3",
    "sphinx-autodoc-typehints>=3.2.0",
    "sphinx-copybutton>=0.5.2",
    "sphinx-design>=0.6.1",
    "sphinx-lint>=1.0.0",
    "sphinx-pydantic>=0.1.1",
    "sphinx-pytest>=0.2.0",
    "sphinx-rtd-theme>=3.0.2",
    "sphinxcontrib-mermaid>=1.0.0",
]
