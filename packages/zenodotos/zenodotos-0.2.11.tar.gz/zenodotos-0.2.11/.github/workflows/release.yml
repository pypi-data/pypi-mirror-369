name: Automated Package Release

on:
  release:
    types: [published]

env:
  PYTHON_VERSION: '3.11'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for tagging

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v2
        with:
          version: latest

      - name: Install dependencies
        run: |
          uv sync
          uv run pip install --upgrade pip

      - name: Get version from release tag
        run: |
          # Extract version from release tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "‚úÖ Version from release tag: $VERSION"

          # Validate version format (semantic versioning)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Error: Version must be in format X.Y.Z (e.g., 0.2.2)"
            exit 1
          fi
          echo "‚úÖ Version format validated: $VERSION"

      - name: Run tests
        run: |
          uv run pytest --cov=zenodotos --cov-report=html
          uv run ruff check .
          uv run ruff format --check .
          uv run ty check

      - name: TestPyPI Release
        run: |
          echo "üöÄ Publishing to TestPyPI..."
          ./scripts/release.sh --testpypi
        env:
          TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}

      - name: PyPI Release
        run: |
          echo "üöÄ Publishing to PyPI..."
          ./scripts/release.sh --pypi
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

      - name: Verify Git tag exists
        run: |
          echo "üè∑Ô∏è Verifying Git tag exists..."
          if git tag --list | grep -q "v$VERSION"; then
            echo "‚úÖ Git tag v$VERSION exists"
          else
            echo "‚ùå Git tag v$VERSION not found"
            exit 1
          fi

      - name: Update GitHub Release
        run: |
          echo "üìù Updating GitHub Release with package information..."

          # Get the release notes from the existing release
          RELEASE_BODY=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION" | \
            jq -r '.body // ""')

          # Create package information using jq to properly escape the JSON
          PACKAGE_INFO=$(cat << 'EOF'

          ## Package Information

          ### Publishing Status
          - ‚úÖ Published to TestPyPI
          - ‚úÖ Published to PyPI

          ### Installation
          ```bash
          pip install zenodotos==$VERSION
          ```

          ### Package Links
          - **PyPI**: https://pypi.org/project/zenodotos/$VERSION/
          - **TestPyPI**: https://test.pypi.org/project/zenodotos/$VERSION/

          ### Testing
          > **Note**: Package installation testing is now handled by a separate workflow.
          >
          > To test the package installation, use the **Test Package Installation** workflow:
          > 1. Go to Actions ‚Üí Test Package Installation
          > 2. Click "Run workflow"
          > 3. Configure the test parameters as needed
          > 4. Run the test to verify installation works correctly
          EOF
          )

          # Combine release body with package info and escape for JSON
          COMBINED_BODY=$(echo "$RELEASE_BODY$PACKAGE_INFO" | jq -Rs .)

          # Update the release
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION" \
            -d "{\"body\":$COMBINED_BODY}"

      - name: Success message
        run: |
          echo "üéâ Release v$VERSION completed successfully!"
          echo ""
          echo "üì¶ Package is available on PyPI:"
          echo "   https://pypi.org/project/zenodotos/$VERSION/"
          echo ""
          echo "üè∑Ô∏è Git tag: v$VERSION"
          echo ""
          echo "üìã Release updated:"
          echo "   https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          echo ""
          echo "üß™ Next Steps:"
          echo "   To test package installation, use the 'Test Package Installation' workflow"
          echo "   This allows for flexible testing with configurable wait times for index propagation."
