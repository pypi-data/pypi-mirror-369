# Cursor Project Rule: Using Pytest for Testing
---
description: |
  All Python tests in the zenodotos project must be written and executed using the `pytest` framework. Pytest provides a powerful, flexible, and user-friendly testing experience, making it easy to write, organize, and run tests across the codebase.

rules:
  - Write all tests using pytest.
  - Always activate the virtual environment before running tests
  - Use "source .venv/bin/activate" on Unix/macOS
  - Use ".venv\\Scripts\\activate" on Windows
  - Run tests with `pytest` before committing changes.
  - Fix all test failures before proceeding.
  - Configure pytest settings in pyproject.toml if needed.
  - Use `pytest-cov` to measure test coverage.
  - Ensure test coverage is at least 80% (enforced via `--cov-fail-under=80`).
  - Generate coverage reports with `--cov-report=term-missing`.
  - Investigate and address uncovered code.

configuration:
  test:
    command: pytest
    options:
      - --cov=zenodotos
      - --cov-report=term-missing
      - --cov-fail-under=80

rationale: |
  Pytest is a modern, feature-rich testing framework for Python. It offers:
  - Simple and intuitive test writing with minimal boilerplate
  - Powerful fixtures and parametrization for flexible test organization
  - Detailed and user-friendly test reports
  - Extensive plugin ecosystem for additional functionality
  - Built-in support for coverage measurement via pytest-cov
  - Enforcing coverage ensures code quality, reduces risk, and increases maintainability

  Using pytest and pytest-cov ensures consistent, maintainable, and comprehensive test coverage throughout the project. Coverage enforcement helps catch untested code and maintain high quality as the codebase evolves.

  The virtual environment ensures that tests run in an isolated environment with the correct dependencies, preventing conflicts with system packages and ensuring consistent test results across different development environments.
