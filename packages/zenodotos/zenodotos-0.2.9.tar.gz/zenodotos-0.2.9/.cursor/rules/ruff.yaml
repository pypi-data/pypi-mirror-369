# Cursor Project Rule: Using Ruff for Linting and Formatting
---
description: |
  All Python code in the zenodotos project must be linted and formatted using the `ruff` tool. Ruff provides fast, reliable linting and formatting capabilities, replacing multiple tools like flake8, black, isort, and more.

rules:
  - Use `ruff check` for linting Python code
  - Use `ruff format` for formatting Python code
  - Run both checks before committing changes
  - Fix all linting and formatting issues before proceeding
  - Configure ruff settings in pyproject.toml

configuration:
  lint:
    command: ruff check .
    fix_command: ruff check --fix .
  format:
    command: ruff format .
    check_command: ruff format --check .

rationale: |
  Ruff is a fast Python linter and formatter written in Rust. It provides:
  - Significantly faster execution compared to traditional Python-based tools
  - Unified interface for linting and formatting
  - Compatible with existing tool configurations
  - Extensive rule set covering style, complexity, and potential bugs
  - Built-in auto-fixing capabilities

  Using Ruff ensures consistent code style and quality across the project while improving development workflow efficiency.
