initialize() {
    setSeed(23);
    if (!exists("TREES_FILE")) defineGlobal("TREES_FILE", "out.trees"); 
    if (!exists("PEDIGREE_FILE")) defineGlobal("PEDIGREE_FILE", "out.pedigree"); 
	defineConstant("L", 1e2);
    initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T, nucleotideBased=T);
    initializeTreeSeq();
	initializeAncestralNucleotides(randomNucleotides(L));
	initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(4e-2));
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(1e-2);
    defineConstant("K", 10);
}

reproduction() {
    subpop.addCrossed(individual, subpop.sampleIndividuals(1));
}

1 early() {
	sim.addSubpop("p1", 10);
}

early() {
    p1.fitnessScaling = K / p1.individualCount;
}

10 late() {
    sim.treeSeqOutput(TREES_FILE);
    catn("Done.");
    sim.simulationFinished();
}

// PEDIGREE OUTPUT
1 first() {
    writeFile(PEDIGREE_FILE,
       paste(c("generation", "stage", "individual", "age", "parent1", "parent2"),
             sep="\t"));
}

1: first() {
    for (pop in sim.subpopulations) {
        for (ind in pop.individuals) {
            age = community.modelType == "nonWF" ? ind.age else -1;
            writeFile(PEDIGREE_FILE,
             paste(c(sim.cycle, community.cycleStage, ind.pedigreeID, age, ind.pedigreeParentIDs),
                   sep='\t'),
             append=T);
        }
    }
}

1: early() {
    for (pop in sim.subpopulations) {
        for (ind in pop.individuals) {
            age = community.modelType == "nonWF" ? ind.age else -1;
            writeFile(PEDIGREE_FILE,
             paste(c(sim.cycle, community.cycleStage, ind.pedigreeID, age, ind.pedigreeParentIDs),
                   sep='\t'),
             append=T);
        }
    }
}

1: late() {
    for (pop in sim.subpopulations) {
        for (ind in pop.individuals) {
            age = community.modelType == "nonWF" ? ind.age else -1;
            writeFile(PEDIGREE_FILE,
             paste(c(sim.cycle, community.cycleStage, ind.pedigreeID, age, ind.pedigreeParentIDs),
                   sep='\t'),
             append=T);
        }
    }
}

