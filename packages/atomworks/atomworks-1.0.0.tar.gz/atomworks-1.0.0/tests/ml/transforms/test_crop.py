import copy
from copy import deepcopy
from functools import cache
from typing import Any

import biotite.structure as struc
import numpy as np
import pytest

from atomworks.io.utils.testing import assert_same_atom_array
from atomworks.ml.datasets.datasets import get_row_and_index_by_example_id
from atomworks.ml.datasets.parsers import InterfacesDFParser, PNUnitsDFParser, load_example_from_metadata_row
from atomworks.ml.encoding_definitions import RF2AA_ATOM36_ENCODING
from atomworks.ml.transforms.atom_array import (
    AddGlobalAtomIdAnnotation,
    atom_id_to_token_idx,
)
from atomworks.ml.transforms.atomize import AtomizeByCCDName
from atomworks.ml.transforms.base import Compose
from atomworks.ml.transforms.covalent_modifications import FlagAndReassignCovalentModifications
from atomworks.ml.transforms.crop import (
    CropContiguousLikeAF3,
    CropSpatialLikeAF3,
    compute_local_hash,
)
from atomworks.ml.transforms.filters import RemoveHydrogens, RemoveTerminalOxygen
from atomworks.ml.utils.rng import create_rng_state_from_seeds, rng_state
from atomworks.ml.utils.testing import cached_parse
from atomworks.ml.utils.token import apply_and_spread_token_wise, get_token_count, get_token_starts

# fmt: off
INTERFACE_EXAMPLES = [
    # Interface examples
    {
        "id": "{['pdb', 'interfaces']}{112m}{1}{['A_1', 'C_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 305,
        "expected_spatial_atom_ids": [103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 127, 128, 129, 130, 131, 132, 133, 134, 135, 144, 145, 146, 147, 148, 149, 150, 151, 163, 164, 165, 166, 167, 168, 169, 179, 180, 181, 182, 183, 184, 185, 186, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 216, 217, 218, 219, 220, 221, 222, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 256, 257, 258, 259, 260, 266, 267, 268, 269, 270, 271, 272, 273, 274, 288, 289, 290, 291, 292, 293, 294, 304, 305, 306, 307, 308, 309, 310, 311, 312, 320, 321, 322, 323, 324, 330, 331, 332, 333, 334, 335, 336, 337, 343, 344, 345, 346, 347, 348, 349, 359, 360, 361, 362, 363, 369, 370, 371, 372, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 394, 395, 396, 397, 401, 402, 403, 404, 405, 406, 407, 408, 409, 418, 419, 420, 421, 422, 423, 424, 425, 431, 432, 433, 434, 435, 436, 437, 438, 450, 451, 452, 453, 454, 455, 456, 457, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1087, 1088, 1089, 1090, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1173, 1174, 1175, 1176, 1177, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1202, 1203, 1204, 1205, 1209, 1210, 1211, 1212, 1213, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1909, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1939, 1940, 1941, 1942, 1943, 1944, 1950, 1951, 1952, 1953, 1954, 1955, 1956, 1957, 1958, 1959, 1960, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2006, 2007, 2008, 2009, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2121, 2122, 2123, 2124, 2125, 2126, 2127, 2128, 2511, 2518, 2525, 2526, 2528, 2529, 2530],
        "expected_contiguous_crop_size": 30,
    },  # protein-ligand, no loi, heme ligand
    {
        "id": "{['pdb', 'interfaces']}{1qk0}{1}{['A_1', 'C_1,O_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 5108,
        "expected_spatial_atom_ids": [272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 304, 305, 306, 308, 314, 315, 316, 317, 318, 319, 320, 321, 322, 330, 331, 332, 333, 334, 335, 336, 346, 357, 358, 359, 360, 361, 368, 369, 370, 371, 372, 373, 374, 375, 387, 388, 389, 390, 391, 435, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4674, 4675, 4676, 4677, 4681, 4682, 4683, 4684, 4688, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4704, 4705, 4706, 4707, 4708, 4709, 4715, 4716, 4717, 4718, 4719, 4720, 4721, 4722, 4728, 4729, 4730, 4731, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 5032, 5033, 5034, 5035, 5036, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5073, 5074, 5075, 5076, 5077, 5083, 5084, 5085, 5086, 5090, 5091, 5092, 5093, 5094, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111, 5112, 5113, 5124, 5125, 5126, 5127, 5128, 5129, 5130, 5131, 5132, 5133, 5134, 5144, 5145, 5146, 5147, 5148, 5149, 5150, 5151, 5152, 5161, 5162, 5163, 5164, 5165, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5178, 5179, 5180, 5181, 5182, 5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202, 5418, 5419, 5420, 5421, 5422, 5423, 5425, 5426, 5427, 5428, 5541, 5542, 5543, 5544, 5545, 5547, 5548, 5549, 5550, 5606, 5607, 5608, 5612, 5615],
        "expected_contiguous_crop_size": 30,
    },  # protein-ligand, involves loi
    {
        "id": "{['pdb', 'interfaces']}{1a3g}{1}{['C_1', 'F_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 10622,
        "expected_spatial_atom_ids": [8564, 8565, 8566, 8567, 8568, 8569, 8570, 8571, 8572, 8580, 8581, 8582, 8583, 8584, 8585, 8591, 8592, 8593, 8594, 8595, 8596, 8597, 8598, 8610, 8611, 8612, 8613, 8614, 8615, 8616, 8617, 8618, 8619, 8620, 8621, 8631, 8632, 8633, 8634, 8635, 8636, 8637, 8638, 8650, 8651, 8652, 8653, 8654, 8660, 8661, 8662, 8663, 8664, 8665, 8666, 8667, 8897, 8898, 8899, 8900, 8901, 8902, 8908, 8909, 8910, 8911, 8912, 8913, 8914, 8924, 8925, 8926, 8927, 8928, 8929, 8930, 8931, 8937, 8938, 8939, 8940, 8944, 8945, 8946, 8947, 8948, 8949, 8950, 8951, 8963, 8964, 8965, 8966, 8967, 8968, 8969, 8970, 8971, 8980, 8981, 8982, 8983, 8984, 8985, 8986, 8996, 8997, 8998, 8999, 9003, 9004, 9005, 9006, 9007, 9008, 9009, 9010, 9011, 10092, 10093, 10094, 10095, 10096, 10097, 10098, 10106, 10107, 10108, 10109, 10110, 10111, 10117, 10118, 10119, 10120, 10121, 10122, 10123, 10133, 10134, 10135, 10136, 10137, 10138, 10139, 10140, 10141, 10142, 10143, 10488, 10489, 10490, 10491, 10492, 10493, 10494, 10495, 10505, 10506, 10507, 10508, 10509, 10510, 10511, 10512, 10513, 10522, 10523, 10524, 10525, 10526, 10527, 10528, 10529, 10530, 10531, 10532, 10546, 10547, 10548, 10549, 10550, 10551, 10552, 10553, 10565, 10566, 10567, 10568, 10569, 10570, 10571, 10572, 10573, 10574, 10583, 10584, 10585, 10586, 10587, 10588, 10589, 10590, 10596, 10597, 10598, 10599, 10600, 10601, 10607, 10608, 10609, 10610, 10611, 10617, 10618, 10619, 10620, 10621, 10622, 10623, 10624, 10625, 10639, 10640, 10641, 10642, 10643, 10644, 10645, 10646, 10658, 10659, 10660, 10661, 10662, 10663, 10664, 10665, 10666, 10667, 10668, 10669, 10679, 10680, 10681, 10682, 10683, 10684, 10685, 10686, 10687, 10688, 10689, 10703, 10704, 10705, 10706, 10707, 10708, 10709, 10710, 10711, 10712, 10713, 10723, 10724, 10725, 10726, 10727, 10728, 10729, 10737, 10738, 10739, 10740, 10741, 10742, 10743, 10753, 10754, 10755, 10756, 10757, 10758, 10764, 10765, 10766, 10767, 10768, 10769, 10770, 10771, 10772, 10781, 10782, 10783, 10784, 10785, 10786, 10792, 10793, 10794, 10795, 10796, 10797, 10798, 10799, 11210, 11211, 11212, 11213, 11214, 11215, 11216, 11217, 11229, 11230, 11231, 11232, 11233, 11234, 11235, 11236, 11237, 11238, 11239, 11249, 11250, 11251, 11252, 11253, 11254, 11255, 11428, 11429, 11430, 11431, 11432, 11433, 11439, 11440, 11441, 11442, 11443, 11444, 11445, 11997, 11998, 11999, 12000, 12001, 12002, 12003, 12011, 12012, 12013, 12014, 12015, 12016, 12017, 12025, 12026, 12027, 12028, 12029, 12035, 12036, 12037, 12038, 12039, 12045, 12046, 12047, 12048, 12049, 12050, 12051, 12067, 12068, 12069, 12070, 12071, 16982, 16983, 16984, 16985, 16986, 16987, 16988, 16989, 17023, 17024, 17025, 17026, 17027, 17028, 17029, 17030, 17042, 17043, 17044, 17045, 17046, 17047, 17048, 17049, 17084, 17085, 17086, 17087, 17088, 17089],
    },  # involves covalent modification, protein-ligand
    {
        "id": "{['pdb', 'interfaces']}{1a2n}{1}{['A_1', 'A_2']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 8363,
        "expected_spatial_atom_ids": [7916, 7917, 7918, 7919, 7920, 7921, 7922, 7923, 7924, 7925, 7926, 7940, 7941, 7942, 7943, 7944, 7950, 7951, 7952, 7953, 7954, 7955, 7961, 7962, 7963, 7964, 7965, 7966, 7967, 7968, 7980, 7981, 7982, 7983, 7984, 7985, 7986, 7987, 7988, 7989, 7990, 7991, 7992, 7993, 8014, 8015, 8016, 8017, 8018, 8019, 8020, 8021, 8191, 8192, 8193, 8194, 8195, 8196, 8197, 8207, 8208, 8209, 8210, 8211, 8212, 8218, 8219, 8220, 8221, 8222, 8223, 8224, 8225, 8237, 8238, 8239, 8240, 8241, 8242, 8243, 8251, 8252, 8253, 8254, 8315, 8316, 8317, 8318, 8319, 8325, 8326, 8327, 8328, 8329, 8330, 8331, 8332, 8333, 8334, 8335, 8349, 8350, 8351, 8352, 8353, 8354, 8355, 8363, 8364, 8365, 8366, 8367, 8368, 8369, 8379, 8380, 8381, 8382, 8383, 8384, 8385, 8386, 8392, 8393, 8394, 8395, 8396, 8397, 8398, 8399, 8411, 8412, 8413, 8414, 8415, 8416, 8417, 8418, 8419, 8420, 8429, 8430, 8431, 8432, 8433, 8434, 8435, 8436, 8448, 8449, 8450, 8451, 8452, 8453, 8459, 8460, 8461, 8462, 8466, 8467, 8468, 8469, 8470, 8471, 8472, 8473, 8568, 8569, 8570, 8571, 8572, 8573, 8574, 8575, 8609, 8610, 8611, 8612, 8613, 8614, 8615, 8616, 8667, 8668, 8669, 8670, 8671, 8672, 8673, 8674, 8675, 8676, 8677, 8678, 8688, 8689, 8690, 8691, 8692, 8693, 8694, 8986, 8987, 8988, 8989, 8990, 8991, 8997, 8998, 8999, 9000, 9001, 9002, 9003, 9013, 9014, 9015, 9016, 9020, 9021, 9022, 9023, 9024, 9030, 9031, 9032, 9033, 9034, 9035, 9036, 9044, 9045, 9046, 9047, 9048, 9049, 9050, 9060, 9061, 9062, 9063, 9064, 9065, 9066, 12925, 12926, 12927, 12928, 12929, 12930, 12931, 12932, 12933, 12934, 12935, 12936, 12937, 12938, 12939, 12940, 12941, 12942, 12943, 12944, 12945, 12946, 12947, 12948, 12949, 12950, 12969],
    },  # protein-protein homomeric interface
    {
        "id": "{['pdb', 'interfaces']}{1a2y}{1}{['B_1', 'C_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 2000,
        "expected_spatial_atom_ids": [1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1937, 1938, 1939, 1940, 1941, 1942, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1962, 1963, 1964, 1965, 1966, 1967, 1968, 1978, 1979, 1980, 1981, 1982, 1983, 1989, 1990, 1991, 1992, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2016, 2017, 2018, 2019, 2020, 2021, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2060, 2061, 2062, 2063, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2088, 2089, 2090, 2091, 2095, 2096, 2097, 2098, 2099, 2100, 2101, 2111, 2112, 2113, 2114, 2115, 2116, 2117, 2118, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2391, 2392, 2393, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2415, 2416, 2417, 2418, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2435, 2436, 2437, 2438, 2675, 2676, 2677, 2678, 2679, 2680, 2681, 2682, 2683, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2724, 2725, 2726, 2727, 2728, 2729, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2757, 2758, 2759, 2760, 2761, 2762, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776, 2785, 2786, 2787, 2788, 2789, 2790, 2791, 2801, 2802, 2803, 2804, 2805, 2806, 2807, 2808, 2809, 2810, 2811, 3071, 3072, 3073, 3074, 3075, 3076, 3082, 3083, 3084, 3085, 3086, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3291, 3292, 3293, 3294, 4953, 4954, 4955, 4956, 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4974, 4975, 4976, 4977, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4998, 4999, 5000, 5001, 5002, 5003, 5004, 5005, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5120, 5121, 5122, 5123, 5124, 5125, 5126, 5127, 5134, 5135, 5136, 5137, 5138, 5139, 5140, 5141, 5142, 5143, 5144, 5158, 5159, 5160, 5161, 5162, 5163, 5169, 5170, 5171, 5172, 5173, 5174, 5175, 5176, 5177, 5191, 5192, 5193, 5194, 5198, 5199, 5200, 5201, 5202, 5203, 5204],
    },  # protein-protein heteromeric interface
    {
        "id": "{['pdb', 'interfaces']}{1bdv}{1}{['B_1', 'C_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 1136,
        "expected_spatial_atom_ids": [201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2377, 2378, 2379, 2380, 2384, 2385, 2386, 2387, 2388, 2389, 2390, 2391, 2401, 2402, 2403, 2404, 2405, 2406, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2451, 2452, 2453, 2454, 2455, 2456, 2457, 2465, 2466, 2467, 2468, 2469, 2470, 2471, 2472, 2473, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2778, 2779, 2780, 2781, 2782, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796, 2834, 2835, 2836, 2837, 2841, 2842, 2843, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2865, 2866, 2867, 2868, 2869, 2870, 2876, 2877, 2878, 2879, 2880, 2881, 2882, 2892, 2893, 2894, 2895, 2896, 2897, 2898, 2899, 2906, 2907, 2908, 2909, 2910, 2911, 2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2933, 2934, 2935, 2936, 2937, 2938, 2939, 2940, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960, 2961, 2962, 2963, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4149, 4150, 4151, 4152, 4156, 4157, 4158, 4159, 4160, 4161, 4162, 4163, 4173, 4174, 4175, 4176, 4177, 4178, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4550, 4551, 4552, 4553, 4554, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4606, 4607, 4608, 4609, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4637, 4638, 4639, 4640, 4641, 4642, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4678, 4679, 4680, 4681, 4682, 4683, 4689, 4690, 4691, 4692, 4693, 4694, 4695, 4696, 4697],
    },  # protein-nucleic acid interface
    {
        "id": "{['pdb', 'interfaces']}{184d}{1}{['A_1', 'C_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 54,
        "expected_spatial_atom_ids": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 466, 467],
    },  # dna strands with MG ions around
]

MOLECULE_EXAMPLES = [
    # Molecule examples
    {
        "id": "{['pdb', 'pn_units']}{4hf4}{1}{['C_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 5180,
        "expected_spatial_atom_ids": [1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1331, 1332, 1333, 1334, 1335, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1387, 1388, 1389, 1390, 1391, 1800, 1801, 1802, 1803, 1804, 1810, 1811, 1812, 1813, 1814, 1815, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1840, 1841, 1842, 1843, 1844, 1845, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1882, 1883, 1884, 1885, 1886, 1887, 1888, 1889, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1956, 1957, 1958, 1959, 1983, 1984, 1985, 1986, 1987, 1988, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2309, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2917, 2918, 2919, 2920, 2921, 2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2946, 2947, 2948, 2949, 2950, 2951, 2952, 2953, 2965, 2966, 2967, 2968, 2969, 2975, 2976, 2977, 2978, 2979, 2980, 2981, 2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3578, 3579, 3580, 3581, 3582, 3583, 3584, 3585, 3595, 3596, 3597, 3598, 3599, 3600, 3601, 3609, 3610, 3611, 3612, 3613, 3619, 3620, 3621, 3622, 3623, 3624, 3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3643, 3644, 3645, 3646, 3647, 3648, 3649, 3650, 3662, 3663, 3664, 3665, 3666, 3667, 3673, 3674, 3675, 3676, 3677, 3678, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 5180, 5181, 5198, 5199, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212, 5213],

    },  # zinc ion
    {
        "id": "{['pdb', 'pn_units']}{4hf4}{1}{['N_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 5187,
        "expected_spatial_atom_ids": [3878, 3879, 3880, 3881, 3882, 3915, 3916, 3917, 3918, 3919, 3920, 3921, 3922, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3955, 3956, 3957, 3958, 3959, 3981, 3982, 3983, 3984, 3985, 3986, 3987, 3988, 3989, 3990, 3991, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4051, 4052, 4053, 4054, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4243, 4244, 4245, 4246, 4247, 4248, 4249, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4398, 4399, 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4414, 4415, 4416, 4417, 4418, 4419, 4420, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4461, 4462, 4463, 4464, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4504, 4505, 4506, 4507, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4566, 4567, 4568, 4569, 4570, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5112, 5113, 5114, 5115, 5116, 5117, 5118, 5119, 5182, 5183, 5184, 5185, 5186, 5187, 5188, 5189, 5190, 5191, 5192, 5193, 5194, 5195, 5196, 5197, 5198, 5199, 5200, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208],

    },  # ligand
    {
        "id": "{['pdb', 'pn_units']}{4hf4}{1}{['A_2']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 7357,
        "expected_spatial_atom_ids": [7171, 7172, 7173, 7174, 7175, 7176, 7177, 7178, 7179, 7180, 7181, 7195, 7196, 7197, 7198, 7202, 7203, 7204, 7205, 7206, 7207, 7208, 7209, 7210, 7211, 7212, 7222, 7223, 7224, 7225, 7226, 7227, 7233, 7234, 7235, 7236, 7237, 7238, 7239, 7240, 7247, 7248, 7249, 7250, 7251, 7252, 7258, 7259, 7260, 7261, 7262, 7263, 7264, 7265, 7266, 7267, 7268, 7269, 7279, 7280, 7281, 7282, 7283, 7284, 7285, 7286, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7305, 7306, 7315, 7316, 7317, 7318, 7319, 7320, 7321, 7322, 7323, 7337, 7338, 7339, 7340, 7341, 7342, 7343, 7344, 7345, 7346, 7347, 7357, 7358, 7359, 7360, 7361, 7362, 7363, 7364, 7370, 7371, 7372, 7373, 7374, 7375, 7376, 7377, 7378, 7379, 7388, 7389, 7390, 7391, 7392, 7393, 7394, 7402, 7403, 7404, 7405, 7406, 7407, 7408, 7409, 7421, 7422, 7423, 7424, 7425, 7431, 7432, 7433, 7434, 7435, 7441, 7442, 7443, 7444, 7445, 7446, 7447, 7448, 7460, 7461, 7462, 7463, 7464, 7465, 7466, 7467, 7468, 7469, 7470, 7471, 7481, 7482, 7483, 7484, 7485, 7486, 7492, 7493, 7494, 7495, 7496, 7497, 7498, 7506, 7507, 7508, 7509, 7510, 7511, 7517, 7518, 7519, 7520, 7521, 7522, 7523, 7531, 7532, 7533, 7534, 7535, 7536, 7537, 7538, 7564, 7565, 7566, 7567, 7568, 7569, 7570, 7571, 7572, 7581, 7582, 7583, 7584, 7585, 7586, 7587, 7588, 7589, 7590, 9274, 9275, 9276, 9277, 9278, 9279, 9280, 9281, 9282, 9290, 9291, 9292, 9293, 9310, 9311, 9312, 9313, 9314, 9315, 9316, 9317, 9318, 9326, 9327, 9328, 9329, 9330, 9331, 9332, 9333, 9343, 9344, 9345, 9346, 9347, 9348, 9349, 9350, 9351, 9365, 9366, 9367, 9368, 9369, 9370, 9371, 9372, 9373, 9387, 9388, 9389, 9390, 9391, 9392, 9393, 9394, 9406, 9407, 9408, 9409, 9413, 9414, 9415, 9416, 9417, 9418, 9419, 9420, 9449, 9450, 9451, 9452, 9453, 9454, 9455, 10657, 10658, 10659, 10660, 10661, 10662, 10663, 10671, 10672, 10673, 10674, 10675, 10676, 10677, 10678, 10690, 10691, 10692, 10693, 10694, 10695, 10696, 10704, 10705, 10706, 10707, 10708, 10709, 10710, 10720, 10721, 10722, 10723, 10724, 10725, 10726, 10727, 10728, 10729, 10730, 10744, 10745, 10746, 10747, 10748, 10749, 10750, 10751, 10763, 10764, 10765, 10766, 10767, 10768, 10774, 10775, 10776, 10777, 10778, 10779, 10780, 10781, 10782, 10796, 10797, 10798, 10799, 10800, 10801, 10802, 10803, 10804, 10812, 10813, 10814, 10815, 10816, 10817, 10818, 10819, 10831, 10832, 10833, 10834, 10835, 10836, 10837, 10838, 10839, 10904, 10905, 10906, 10907, 10908, 10909, 10910, 10911, 10912, 10913, 10914, 10924, 10925, 10926, 10927, 10928, 10929, 10930, 10931, 10937, 10938, 10939, 10940, 10941, 10942, 10943, 10944, 10956, 10957, 10958, 10959, 10963, 10964, 10965, 10966, 10967, 10968, 10969, 10977, 10978, 10979, 10980, 10981, 10982, 10983, 10984, 10985, 10986, 10987, 10997, 10998, 10999, 11000, 11001, 11002, 11003, 11004, 11005, 11013, 11014, 11015, 11016, 11017, 11018, 11019, 11020, 11027, 11028, 11029, 11030, 11031, 11032, 11033, 11034, 11044, 11045, 11046, 11047, 11048, 11049, 11050, 11051, 11052, 11053, 11054, 11055, 11056, 11057, 11082, 11083, 11084, 11085, 11089, 11090, 11091, 11092, 11093, 11094, 11095, 11096, 11144, 11145, 11146, 11147, 11148, 11149, 11150, 11151, 11152, 11153, 11154, 11155],

    },  # protein
    {
        "id": "{['pdb', 'pn_units']}{3lpv}{1}{['B_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 443,
        "expected_spatial_atom_ids": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 790, 791, 792, 797, 798, 801, 802],

    },  # dna
    {
        "id": "{['pdb', 'pn_units']}{2nvz}{1}{['A_1']}",
        "expected_spatial_crop_size": 60,
        "expected_spatial_crop_center_atom_id": 54,
        "expected_spatial_atom_ids": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 2664, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 5579, 5580, 5581, 5582, 5583, 5584, 5585, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5623, 5624, 5625, 5626, 5627, 5628, 5629, 5630, 5631, 5632, 5633, 5647, 5648, 5649, 5650, 5651, 5652, 5653, 5661, 5662, 5663, 5664, 5665, 5666, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5691, 5692, 5693, 5694, 5695, 5696, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5711, 5712, 5722, 5723, 5724, 5725, 5726, 5727, 5728, 5729, 5780, 5781, 5782, 5783, 5784, 5785, 5786, 5787, 5788, 5789, 5790, 5804, 5805, 5806, 5807, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5827, 5828, 5829, 5830, 5831, 5832, 5833, 5834, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 6784, 6785, 6786, 6787, 6788, 6789, 6790, 6800, 6801, 6802, 6803, 6804, 6805, 6806, 6807, 6808, 6833, 6834, 6835, 6836, 6837, 6838, 6839, 6840, 6876, 6877, 6878, 6879, 6880, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896, 6980, 6981, 6982, 6983, 6984, 6985, 6986, 6987, 6988, 6996, 6997, 6998, 6999, 7003, 7004, 7005, 7006, 7007, 7008, 7009, 7010, 7011, 7012, 7013, 7070, 7071, 7072, 7073, 7077, 7078, 7079, 7080, 7081, 7082, 7083, 7084, 7134, 7135, 7136, 7137, 7138, 7139, 7140, 7141, 7142, 7156, 7157, 7158, 7159, 7160, 7161, 7162, 7163, 7164, 7165, 7166, 46525, 46526, 46527, 46528, 46529, 46530, 46531, 46539, 46540, 46541, 46542, 46543, 46544, 46545, 46546, 46556, 46557, 46558, 46559, 46560, 46561, 46562, 46563, 46564, 46573, 46574, 46575, 46576, 46577, 46578, 46579, 46589, 46590, 46591, 46592, 46593, 46594, 46595, 46596, 46608, 46609, 46610, 46611, 46612, 46613, 46614, 46622, 46623, 46624, 46625, 46626, 46627, 46628, 46629, 46630, 46631, 46632, 46646, 46647, 46648, 46649, 46650, 46651, 46652, 46653, 46654, 46663, 46664, 46665, 46666, 46667, 46668, 46669, 46677, 46678, 46679, 46680, 46681, 46682, 46683, 46693, 46694, 46695, 46696, 46697, 46698, 46699, 46700, 46701, 46709, 46710, 46711, 46712, 46716, 46717, 46718, 46719, 46720, 46721, 46722, 46723, 46724, 46725, 46726, 46740, 46741, 46742, 46743, 46744, 46745, 46751, 46752, 46753, 46754, 46755, 46756, 46757, 46758, 46759, 46760, 46761, 46775, 46776, 46777, 46778, 46779, 46780, 46781, 46782, 46788, 46789, 46790, 46791, 46795, 46796, 46797, 46798, 46821, 46822, 46823, 46824, 46825, 46826, 46827, 46828, 46829, 46830, 46831, 47914, 47915, 47916, 47917, 47918, 47919, 47920, 47921, 47922, 47923, 47924, 47925, 47935, 47936, 47937, 47938, 47939, 47977, 47978, 47979, 47980, 47981, 47982, 47983, 47984],

    },  # rna (quite large structure overall)
]
# fmt: on

BENCHMARK_EXAMPLES = INTERFACE_EXAMPLES + MOLECULE_EXAMPLES
BENCHMARK_EXAMPLE_IDS = [example["id"] for example in BENCHMARK_EXAMPLES]


# Cached loading from example to slightly speed up tests
@cache
def _get_example(example_id: str, dataset: Any) -> dict:
    row = get_row_and_index_by_example_id(dataset, example_id)["row"]
    dataset_parser = PNUnitsDFParser() if "pn_units" in example_id else InterfacesDFParser()
    return load_example_from_metadata_row(metadata_row=row, metadata_row_parser=dataset_parser)


def get_example(example_id: str, dataset: Any) -> dict:
    data = _get_example(example_id, dataset)
    return deepcopy(data)


@pytest.mark.parametrize("example_id", BENCHMARK_EXAMPLE_IDS)
def test_af3_like_spatial_crop_transform(
    example_id: str, rf2aa_pdb_dataset: Any, np_seed: int = 1, crop_size: int = 384
):
    prep_pipe = Compose(
        [
            AddGlobalAtomIdAnnotation(),
            RemoveHydrogens(),
            RemoveTerminalOxygen(),
            FlagAndReassignCovalentModifications(),
            AtomizeByCCDName(atomize_by_default=True, res_names_to_ignore=RF2AA_ATOM36_ENCODING.tokens),
        ],
        track_rng_state=False,
    )
    crop_pipe = CropSpatialLikeAF3(crop_size=crop_size)

    with rng_state(create_rng_state_from_seeds(np_seed=np_seed)):
        data = get_example(example_id, rf2aa_pdb_dataset)
        data = prep_pipe(data)
        pre_crop_atom_array = data["atom_array"]
        data = crop_pipe(data)
        post_crop_atom_array = data["atom_array"]

        # Ensure cropping shows up in histroy
        history = [t["name"] for t in data.__transform_history__]
        assert "CropSpatialLikeAF3" in history, f"CropSpatialLikeAF3 not in transform history: {history}"

        # Ensure every query pn_unit is in the crop
        pn_unit_iids = np.unique(post_crop_atom_array.pn_unit_iid)
        assert np.all(
            np.isin(data["query_pn_unit_iids"], pn_unit_iids)
        ), f"Query molecules {data['query_pn_unit_iids']} not in crop {pn_unit_iids}."

        # Eval if no crop was performed
        if not data["crop_info"]["requires_crop"]:
            # ... no crop was performed
            crop_info = data["crop_info"]
            n_atoms = len(pre_crop_atom_array)
            n_tokens = get_token_count(pre_crop_atom_array)
            crop_atom_idxs = crop_info["crop_atom_idxs"]
            crop_token_idxs = crop_info["crop_token_idxs"]
            np.testing.assert_array_equal(
                crop_atom_idxs, np.arange(n_atoms), err_msg="Not all atoms in crop despite not cropping."
            )
            np.testing.assert_array_equal(
                crop_token_idxs, np.arange(n_tokens), err_msg="Not all atoms in crop despite not cropping."
            )
            assert_same_atom_array(pre_crop_atom_array, post_crop_atom_array)
            return

        # Ensure correct, expected token count
        valid_pre_crop_tokens = get_token_count(pre_crop_atom_array[pre_crop_atom_array.occupancy > 0])
        expected_token_count = min(crop_size, valid_pre_crop_tokens)
        assert (
            get_token_count(post_crop_atom_array) == expected_token_count
        ), f"Cropped atom array has {get_token_count(post_crop_atom_array)} tokens but expected {expected_token_count}."

        # Ensure there are no unoccupied atoms in the spatial crop
        assert np.all(
            apply_and_spread_token_wise(post_crop_atom_array, post_crop_atom_array.occupancy > 0, function=np.any)
        ), "Unoccupied atoms in post-crop atom array. This should not happen."

        # Check crop center atom
        crop_center_atom_id = data["crop_info"]["crop_center_atom_id"]
        assert np.isin(
            crop_center_atom_id, pre_crop_atom_array.atom_id
        ), f"Crop center atom {crop_center_atom_id} not in pre-crop atom array."
        assert np.isin(
            crop_center_atom_id, post_crop_atom_array.atom_id
        ), f"Crop center atom {crop_center_atom_id} not in post-crop atom array."
        # ... check that there is only one crop center
        crop_center = post_crop_atom_array[post_crop_atom_array.atom_id == crop_center_atom_id]
        assert len(crop_center) == 1, f"Expected exactly one crop center, got {len(crop_center)}."
        # ... check that crop center is occupied
        assert (
            crop_center.occupancy[0] > 0
        ), f"Crop center atom {crop_center_atom_id} is not occupied in the cropped atom array."
        # ... check that crop center remains unchanged
        assert pre_crop_atom_array[pre_crop_atom_array.atom_id == crop_center_atom_id] == crop_center

        # Check crop center token
        token_start_end_idxs = get_token_starts(post_crop_atom_array, add_exclusive_stop=True)
        token_idx = atom_id_to_token_idx(post_crop_atom_array, crop_center_atom_id)
        post_crop_token = post_crop_atom_array[token_start_end_idxs[token_idx] : token_start_end_idxs[token_idx + 1]]
        # ... ensure atom id is inside token
        assert np.isin(
            crop_center_atom_id, post_crop_token.atom_id
        ), f"Crop center atom {crop_center_atom_id} not in crop center token."
        # ... ensure token is unchanged
        token_start_end_idxs = get_token_starts(pre_crop_atom_array, add_exclusive_stop=True)
        token_idx = atom_id_to_token_idx(pre_crop_atom_array, crop_center_atom_id)
        pre_crop_token = pre_crop_atom_array[token_start_end_idxs[token_idx] : token_start_end_idxs[token_idx + 1]]
        assert (
            pre_crop_token == post_crop_token
        ), f"Crop center token {token_idx} changed: {pre_crop_token} -> {post_crop_token}"


@pytest.mark.parametrize("example_id", BENCHMARK_EXAMPLE_IDS)
def test_af3_like_contiguous_crop_transform(
    example_id: str, af3_pdb_dataset: Any, np_seed: int = 1, crop_size: int = 384
):
    prep_pipe = Compose(
        [
            AddGlobalAtomIdAnnotation(),
            RemoveHydrogens(),
            RemoveTerminalOxygen(),
            FlagAndReassignCovalentModifications(),
            AtomizeByCCDName(atomize_by_default=True, res_names_to_ignore=RF2AA_ATOM36_ENCODING.tokens),
        ],
        track_rng_state=False,
    )

    # Test for contiguous cropping
    crop_pipe = CropContiguousLikeAF3(crop_size=crop_size)

    with rng_state(create_rng_state_from_seeds(np_seed=np_seed)):
        data = get_example(example_id, af3_pdb_dataset)
        data = prep_pipe(data)
        pre_crop_atom_array = data["atom_array"]
        data = crop_pipe(data)
        post_crop_atom_array = data["atom_array"]

        # Ensure cropping shows up in history
        history = [t["name"] for t in data.__transform_history__]
        assert "CropContiguousLikeAF3" in history, f"CropContiguousLikeAF3 not in transform history: {history}"

        # Ensure correct, expected token count (in principle could be lower than 160 if there are fewer than 160 tokens in the full atom array)
        expected_token_count = min(crop_size, get_token_count(pre_crop_atom_array))
        assert (
            get_token_count(post_crop_atom_array) == expected_token_count
        ), f"Cropped atom array has {get_token_count(post_crop_atom_array)} tokens but expected {expected_token_count}."

        if not data["crop_info"]["requires_crop"]:
            # ... no crop was performed
            assert_same_atom_array(pre_crop_atom_array, post_crop_atom_array)
            return

        # Ensure crop is contiguous within each polymer instance
        chain_iids_in_crop = np.unique(post_crop_atom_array.chain_iid)
        for chain_iid in chain_iids_in_crop:
            chain = post_crop_atom_array[post_crop_atom_array.chain_iid == chain_iid]

            if not np.all(chain.is_polymer):
                # for non-polymer molecules, non-contiguity is possible based on AF3's algorithm
                # since it only considers the ordering of the tokens in a linear chain
                continue

            # Check that the molecule is contiguous (=fully connected by covalent bonds)
            submolecules = list(struc.molecule_iter(chain))
            assert (
                len(submolecules) == 1
            ), f"Chain {chain_iid} is not contiguous but has {len(submolecules)} connected components."


@pytest.mark.parametrize("example", BENCHMARK_EXAMPLES)
def regression_test_af3_like_spatial_crop_transform(
    example: dict, af3_pdb_dataset: Any, np_seed: int = 1, crop_size: int = 60
):
    # UNCOMMENT CODE FOR EXAMPLE GENERATION
    # benchiter = iter(BENCHMARK_EXAMPLES)
    # example = next(benchiter)
    prep_pipe = Compose(
        [
            AddGlobalAtomIdAnnotation(),
            RemoveHydrogens(),
            RemoveTerminalOxygen(),
            FlagAndReassignCovalentModifications(),
            AtomizeByCCDName(atomize_by_default=True, res_names_to_ignore=RF2AA_ATOM36_ENCODING.tokens),
        ],
        track_rng_state=False,
    )
    crop_pipe = CropSpatialLikeAF3(crop_size=crop_size)

    example_id = example["id"]

    with rng_state(create_rng_state_from_seeds(np_seed=np_seed)):
        data = get_example(example_id, af3_pdb_dataset)
        data = prep_pipe(data)
        data = crop_pipe(data)
        post_crop_atom_array = data["atom_array"]

        # UNCOMMENT CODE FOR EXAMPLE GENERATION
        # out = """\n"""
        # out += '\t\t"id": "' + example_id + '",\n'
        # out += '\t\t"expected_spatial_crop_size": ' + str(crop_size) + ",\n"
        # out += '\t\t"expected_spatial_crop_center_atom_id": ' + str(data["crop"]["crop_center_atom_id"]) + ",\n"
        # out += '\t\t"expected_spatial_atom_ids": ' + str(post_crop_atom_array.atom_id.tolist()) + ","
        # print(out)
        # view(post_crop_atom_array)

    # Ensure there are no unoccupied atoms in the spatial crop
    assert np.all(
        apply_and_spread_token_wise(post_crop_atom_array, post_crop_atom_array.occupancy > 0, function=np.any)
    ), "Unoccupied atoms in post-crop atom array. This should not happen."
    assert data["crop_info"]["crop_center_atom_id"] == example["expected_spatial_crop_center_atom_id"]
    assert get_token_count(post_crop_atom_array) == example["expected_spatial_crop_size"]
    assert len(post_crop_atom_array) == len(example["expected_spatial_atom_ids"])
    assert post_crop_atom_array.atom_id.tolist() == example["expected_spatial_atom_ids"]


@pytest.mark.parametrize("pdb_id", ["6by7"])
def test_resize_crops_with_too_many_atoms(pdb_id, np_seed=1):
    """
    tests using the parameter that resizes large crops
    this is necessary for cases with many nucleic acids where small crops (in token space) result in large crops (in atom space)
    """
    crop_size = 256
    # Load the example
    prep_pipe = Compose(
        [
            AddGlobalAtomIdAnnotation(),
            RemoveHydrogens(),
            RemoveTerminalOxygen(),
            FlagAndReassignCovalentModifications(),
            AtomizeByCCDName(atomize_by_default=True, res_names_to_ignore=RF2AA_ATOM36_ENCODING.tokens),
        ],
        track_rng_state=False,
    )

    # Test spatial crop
    spatial_crop_pipe = CropSpatialLikeAF3(crop_size=crop_size, max_atoms_in_crop=3000)
    with rng_state(create_rng_state_from_seeds(np_seed=np_seed)):
        data = cached_parse(pdb_id)
        data = prep_pipe(data)
        data = spatial_crop_pipe(data)
        post_crop_atom_array = data["atom_array"]
        assert (
            len(post_crop_atom_array) < 3000
        ), f"Expected spatial crop to be resized to less than 3000 atoms, got {len(post_crop_atom_array)} atoms."

    # Test contiguous crop
    contiguous_crop_pipe = CropContiguousLikeAF3(crop_size=crop_size, max_atoms_in_crop=3000)
    with rng_state(create_rng_state_from_seeds(np_seed=np_seed)):
        data = cached_parse(pdb_id)
        data = prep_pipe(data)
        data = contiguous_crop_pipe(data)
        post_crop_atom_array = data["atom_array"]
        assert (
            len(post_crop_atom_array) < 3000
        ), f"Expected contiguous crop to be resized to less than 3000 atoms, got {len(post_crop_atom_array)} atoms."


def test_compute_local_hash():
    data = cached_parse("6lyz")

    prep_pipe = Compose(
        [
            AddGlobalAtomIdAnnotation(),
            RemoveHydrogens(),
            RemoveTerminalOxygen(),
            FlagAndReassignCovalentModifications(),
            AtomizeByCCDName(atomize_by_default=True, res_names_to_ignore=RF2AA_ATOM36_ENCODING.tokens),
        ],
        track_rng_state=False,
    )

    data = prep_pipe(data)

    # Annotate the pre-crop hash
    pre_crop = data["atom_array"]
    hash_pre = compute_local_hash(pre_crop)
    pre_crop.set_annotation("hash_pre", hash_pre)
    data["atom_array"] = pre_crop

    # Test 1: Effectively no cropping
    crop_pipe = CropSpatialLikeAF3(crop_size=10_000)
    with rng_state(create_rng_state_from_seeds(np_seed=12)):
        data_cropped = crop_pipe(copy.deepcopy(data))

        # Annotate the post-crop hash
        post_crop = data_cropped["atom_array"]
        hash_post = compute_local_hash(post_crop)
        post_crop.set_annotation("hash_post", hash_post)

        assert np.all(
            post_crop.hash_pre == post_crop.hash_post
        ), "Hash mismatch between pre- and post-crop despite not cropping."

    # Test 2: Spatial cropping
    crop_pipe = CropSpatialLikeAF3(crop_size=32)
    with rng_state(create_rng_state_from_seeds(np_seed=12)):
        data_cropped = crop_pipe(copy.deepcopy(data))
        post_crop = data_cropped["atom_array"]
        hash_post = compute_local_hash(post_crop, radius=6.0)
        post_crop.set_annotation("hash_post", hash_post)

        affected_idxs = np.where(post_crop.hash_pre != post_crop.hash_post)[0]

        # fmt: off
        # NOTE: These were manually checked in pymol for a 6 A cut-off radius
        _affected_idxs = np.array([
            0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
            13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
            26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
            39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  53,
            54,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,
            68,  69,  70,  71,  72,  73,  75,  76,  77,  78,  79,  80,  81,
            82,  83,  84,  85,  86,  88,  90,  91,  92,  93,  94,  95,  96,
            97,  98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
            110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
            123, 124, 125, 126, 127, 128, 129, 130, 131, 148, 149, 150, 151,
            152, 158, 159, 160, 161, 162, 163, 164, 165, 166, 215, 226, 228,
            238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
            251, 252, 253, 254, 255
        ])
        # fmt: on

        assert np.all(affected_idxs == _affected_idxs), f"Affected idxs mismatch: {affected_idxs} != {_affected_idxs}"

    # Test 3: Contiguous cropping
    crop_pipe = CropContiguousLikeAF3(crop_size=32)
    with rng_state(create_rng_state_from_seeds(np_seed=12)):
        data_cropped = crop_pipe(copy.deepcopy(data))
        post_crop = data_cropped["atom_array"]
        hash_post = compute_local_hash(post_crop, radius=6.0)
        post_crop.set_annotation("hash_post", hash_post)

        # fmt: off
        # NOTE: These were manually checked in pymol for a 6 A cut-off radius
        _affected_idxs = np.array([
            0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
            13,  14,  15,  16,  17,  18,  19,  20,  22,  23,  24,  25,  26,
            27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  40,  46,  47,
            48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,
            61,  62,  63,  64,  65,  68,  69,  70,  71,  72,  73,  74,  75,
            76,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
            91,  92,  93,  94,  95,  96,  99, 100, 102, 103, 104, 105, 106,
            107, 108, 109, 110, 111, 112, 113, 114, 121, 123, 124, 125, 126,
            127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
            140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
            153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
            166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180,
            181, 187, 188, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
            203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,
            216, 217
        ])
        # fmt: on

        affected_idxs = np.where(post_crop.hash_pre != post_crop.hash_post)[0]

        assert np.all(affected_idxs == _affected_idxs), f"Affected idxs mismatch: {affected_idxs} != {_affected_idxs}"


if __name__ == "__main__":
    pytest.main(["-v", "-x", "--log-cli-level=INFO", __file__])
