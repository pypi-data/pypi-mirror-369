---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/metaclass_forward_ref_wildcard/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
wildcard_pkg = types.SimpleNamespace(__name__='wildcard_pkg')
wildcard_pkg_meta = types.SimpleNamespace(__name__='wildcard_pkg.meta')
wildcard_pkg.meta = wildcard_pkg_meta
@functools.cache
def __cribo_init___cribo_5d409b_wildcard_pkg_base():
    module = types.SimpleNamespace()
    module.__name__ = 'wildcard_pkg.base'
    global WildcardMetaclass

    class WildcardObject(metaclass=WildcardMetaclass):
        """An object with a metaclass"""
        yaml_tag = None

        def __str__(self):
            return f"WildcardObject(tag={self.yaml_tag})"
    module.WildcardObject = WildcardObject
    module.WildcardMetaclass = WildcardMetaclass
    return module
class WildcardMetaclass(type):
    """Metaclass that adds yaml_tag"""

    def __init__(cls, name, bases, kwds):
        super(WildcardMetaclass, cls).__init__(name, bases, kwds)
        if not hasattr(cls, "yaml_tag") or cls.yaml_tag is None:
            cls.yaml_tag = f"!{name}"
WildcardMetaclass.__module__ = 'wildcard_pkg.meta'
wildcard_pkg.base = __cribo_init___cribo_5d409b_wildcard_pkg_base()
WildcardObject = wildcard_pkg.base.WildcardObject
WildcardMetaclass = wildcard_pkg.base.WildcardMetaclass
wildcard_pkg_meta.WildcardMetaclass = WildcardMetaclass
wildcard_pkg.WildcardMetaclass = WildcardMetaclass
wildcard_pkg.WildcardObject = WildcardObject
obj = wildcard_pkg.WildcardObject()
print(f"WildcardObject: {obj}")
print(f"Tag: {obj.yaml_tag}")
print(f"Metaclass: {wildcard_pkg.WildcardMetaclass}")
