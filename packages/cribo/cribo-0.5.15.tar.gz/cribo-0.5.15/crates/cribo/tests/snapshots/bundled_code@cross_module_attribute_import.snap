---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/cross_module_attribute_import/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
mypackage = types.SimpleNamespace(__name__='mypackage')
mypackage_core = types.SimpleNamespace(__name__='mypackage.core')
mypackage.core = mypackage_core
@functools.cache
def __cribo_init___cribo_35f1d1_mypackage_utils():
    module = types.SimpleNamespace()
    module.__name__ = 'mypackage.utils'
    global __version__
    """Utils module that imports from __version__ module and uses it at module level."""
    VERSION_PREFIX = f"v{__version__}"
    module.VERSION_PREFIX = VERSION_PREFIX

    def get_version_info():
        """Return version information using the imported __version__ variable."""
        return module.VERSION_PREFIX
    module.get_version_info = get_version_info
    module.__version__ = __version__
    return module
__version__ = "1.0.0"
def get_full_info():
    """Combine version and processed data."""
    return f"{mypackage.utils.get_version_info()} - {process_data()}"
def process_data():
    """Process some data."""
    return "Processed Data"
"""Package init that creates circular dependency."""
"""Core module that creates circular dependency."""
"""Version information module."""
mypackage___version__ = types.SimpleNamespace(__name__='mypackage.__version__')
mypackage.utils = __cribo_init___cribo_35f1d1_mypackage_utils()
mypackage.get_full_info = get_full_info
mypackage_core.process_data = process_data
mypackage___version__.__version__ = __version__
"""Test cross-module attribute import with circular dependencies that require init functions."""
print(mypackage.get_full_info())
