---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_hoisting_aliases/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import collections
import datetime
import functools
import json
import logging
import pathlib
import sys
import types
def get_current_directory() -> str:
    """Get current directory using aliased os module."""
    fixed_path = "/home/user/project"
    path_obj = pathlib.Path(fixed_path)
    return str(path_obj.name)
def get_mock_file_info() -> dict:
    """Get mock file information using aliased imports."""
    path_obj = pathlib.Path("/home/user/test.txt")
    mod_time = datetime.datetime.fromisoformat("2023-11-14T23:13:20")
    info = {"size": 1024, "name": "test.txt", "parent": "/home/user", "modified": mod_time.isoformat(), "exists": True, "is_absolute": True}
    return json.loads(json.dumps(info))
"""File utilities module - no side effects, uses aliased stdlib imports."""
@functools.cache
def __cribo_init___cribo_60bb0a_logger():
    module = types.SimpleNamespace()
    module.__name__ = 'logger'
    json_stringify = json.dumps
    module.json_stringify = json_stringify
    ODict = collections.OrderedDict
    module.ODict = ODict
    """Logger module - has side effects (print), uses different aliased stdlib imports."""
    print("Initializing logger module...")
    logging.basicConfig(level=logging.INFO, format="%(levelname)s - %(message)s")
    logger = logging.getLogger(module.__name__)
    module.logger = logger

    def log_message(message: str) -> None:
        """Log a message using aliased logging module."""
        module.logger.info(f"[ALIASED LOG] {message}")
        sys.stdout.write(f"[STDOUT] {message}\n")
        sys.stdout.flush()
    module.log_message = log_message

    def get_logger_info() -> str:
        """Get information about the logger configuration."""
        info = collections.OrderedDict([("python_version", "3.12.0"), ("logger_name", logger.name), ("log_level", logging.getLevelName(logger.level)), ("handlers", len(logger.handlers))])
        return json.dumps(info, indent=2)
    module.get_logger_info = get_logger_info
    return module
"""Test stdlib hoisting with aliases and renamed imports."""
logger = __cribo_init___cribo_60bb0a_logger()
log_message = logger.log_message
get_logger_info = logger.get_logger_info
dir_name = get_current_directory()
print(f"Current directory name: {dir_name}")
info = get_mock_file_info()
print(f"Mock file info: {info}")
log_message("Starting application")
logger_info = get_logger_info()
print(f"Logger info: {logger_info}")
print("All tests completed successfully!")
