---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/builtin_types/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
@functools.cache
def __cribo_init___cribo_97f65c_compat_module():
    module = types.SimpleNamespace()
    module.__name__ = 'compat_module'
    """Module with side effects that assigns builtin types to variables.\n\nThis minimal test case reproduces the bug where builtin types are incorrectly\ntransformed to module.str, module.int, etc. when the bundler wraps modules\nwith side effects in init functions.\n"""
    print("Loading compat module...")
    str = __import__('builtins').str
    module.str = str
    int = __import__('builtins').int
    module.int = int
    bytes = __import__('builtins').bytes
    module.bytes = bytes
    builtin_str = __import__('builtins').str
    module.builtin_str = builtin_str
    builtin_int = __import__('builtins').int
    module.builtin_int = builtin_int
    builtin_bytes = __import__('builtins').bytes
    module.builtin_bytes = builtin_bytes
    basestring = __import__('builtins').str, __import__('builtins').bytes
    module.basestring = basestring
    numeric_types = __import__('builtins').int, float
    module.numeric_types = numeric_types
    return module
"""Test that builtin type assignments work in modules with side effects."""
compat_module = __cribo_init___cribo_97f65c_compat_module()
builtin_str = compat_module.builtin_str
builtin_int = compat_module.builtin_int
basestring = compat_module.basestring
numeric_types = compat_module.numeric_types
assert builtin_str is str
assert builtin_int is int
assert builtin_str("test") == "test"
assert builtin_int("42") == 42
assert basestring == (str, bytes)
assert numeric_types == (int, float)
print("All tests passed!")
