---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/all_variable_handling/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import types
nested_package = types.SimpleNamespace(__name__='nested_package')
nested_package_submodule = types.SimpleNamespace(__name__='nested_package.submodule')
nested_package.submodule = nested_package_submodule
nested_package_utils = types.SimpleNamespace(__name__='nested_package.utils')
nested_package.utils = nested_package_utils
message_1 = "from conflict_module"
SUB_CONSTANT = "submodule_value"
CONSTANT = 42
def sub_function():
    """Function from submodule"""
    return "Hello from submodule"
def exported_from_init():
    """Function exported from package __init__.py"""
    return f"From init, using helper: {helper_func()}"
def helper_func():
    """Helper function used by other modules"""
    return "helper result"
def public_func():
    """A public function that should be exported."""
    return "Hello from public_func"
simple_module = types.SimpleNamespace(__name__='simple_module', CONSTANT=CONSTANT, public_func=public_func)
nested_package_submodule.SUB_CONSTANT = SUB_CONSTANT
nested_package_submodule.sub_function = sub_function
nested_package.exported_from_init = exported_from_init
nested_package_utils.helper_func = helper_func
message = message_1
print("Testing simple module exports:")
print(f"public_func() = {public_func()}")
print(f"CONSTANT = {CONSTANT}")
print("\nTesting nested package exports:")
print(f"exported_from_init() = {exported_from_init()}")
print(f"sub_function() = {sub_function()}")
print("\nTesting conflict resolution:")
print(f"message = {message}")
simple_module.__all__ = ['public_func', 'CONSTANT']
print(f"\n'public_func' in simple_module.__all__ = {'public_func' in simple_module.__all__}")
print(f"'CONSTANT' in simple_module.__all__ = {'CONSTANT' in simple_module.__all__}")
sub = types.SimpleNamespace()
sub.__all__ = ['sub_function', 'SUB_CONSTANT']
sub.sub_function = sub_function
sub.SUB_CONSTANT = SUB_CONSTANT
print(f"\n'sub_function' in submodule.__all__ = {'sub_function' in sub.__all__}")
