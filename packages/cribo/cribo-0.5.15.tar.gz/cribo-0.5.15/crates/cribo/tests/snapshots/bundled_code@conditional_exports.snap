---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/conditional_exports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import sys
import types
class BaseError(Exception):
    """Base error class."""
    pass
BaseError.__module__ = 'exceptions_module'
"""Module that uses imports from compat_module (like requests.exceptions)."""
exceptions_module = types.SimpleNamespace(__name__='exceptions_module', BaseError=BaseError)
@functools.cache
def __cribo_init___cribo_244765_compat_module():
    module = types.SimpleNamespace()
    module.__name__ = 'compat_module'
    """\nModule that mimics requests.compat structure.\nNo __all__ defined, so all non-underscore symbols should be exported.\n"""
    _ver = sys.version_info
    module._ver = _ver
    is_py2 = _ver[0] == 2
    module.is_py2 = is_py2
    is_py3 = _ver[0] == 3
    module.is_py3 = is_py3
    has_simplejson = False
    module.has_simplejson = has_simplejson
    try:
        import simplejson as json
        module.json = json
        has_simplejson = True
        module.has_simplejson = has_simplejson
    except ImportError:
        import json
        module.json = json
    if module.has_simplejson:
        from simplejson import JSONDecodeError
        module.JSONDecodeError = JSONDecodeError
    else:
        from json import JSONDecodeError
        module.JSONDecodeError = JSONDecodeError

    def _resolve_char_detection():
        """Find supported character detection libraries."""
        chardet = None
        for lib in ("chardet", "charset_normalizer"):
            if chardet is None:
                try:
                    chardet = __import__(lib)
                except ImportError:
                    pass
        return chardet
    module._resolve_char_detection = _resolve_char_detection
    chardet = _resolve_char_detection()
    module.chardet = chardet
    builtin_str = str
    module.builtin_str = builtin_str
    basestring = str, bytes
    module.basestring = basestring
    _internal_cache = {}
    module._internal_cache = _internal_cache

    def get_encoding_from_headers(headers):
        """Dummy function to test function exports."""
        return "utf-8"
    module.get_encoding_from_headers = get_encoding_from_headers
    return module
"""Test conditional imports and exports without explicit __all__."""
compat_module = __cribo_init___cribo_244765_compat_module()
print("compat_module has JSONDecodeError:", hasattr(compat_module, "JSONDecodeError"))
if hasattr(compat_module, "JSONDecodeError"):
    print("✓ Can access compat_module.JSONDecodeError")
else:
    print("✗ Cannot access compat_module.JSONDecodeError")
try:

    class CustomJSONError(exceptions_module.BaseError, compat_module.JSONDecodeError):
        """Custom JSON error that inherits from both base error and JSONDecodeError."""
        pass
    print("✓ Successfully created class inheriting from compat_module.JSONDecodeError")
except AttributeError as e:
    print(f"✗ Failed to create class: {e}")
expected_exports = ["json", "JSONDecodeError", "builtin_str", "is_py3", "chardet"]
for export in expected_exports:
    if hasattr(compat_module, export):
        print(f"✓ {export} is accessible")
    else:
        print(f"✗ {export} is NOT accessible")
