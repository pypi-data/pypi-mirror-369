---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/submodule_imports_parent_function/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
pkg = types.SimpleNamespace(__name__='pkg')
base_value = "base"
def get_base():
    return base_value
def get_result():
    pkg.submodule = __cribo_init___cribo_dca395_pkg_submodule()
    return pkg.submodule.process()
"""Package __init__ that gets inlined (not wrapped)."""
@functools.cache
def __cribo_init___cribo_dca395_pkg_submodule():
    module = types.SimpleNamespace()
    module.__name__ = 'pkg.submodule'
    global get_base
    """Submodule that becomes a wrapper module due to module-level import from parent."""
    computed_value = f"computed: {get_base()}"
    module.computed_value = computed_value

    def process():
        return module.computed_value
    module.process = process
    module.get_base = get_base
    return module
pkg.base_value = base_value
pkg.get_base = get_base
pkg.get_result = get_result
"""Test where submodule imports function from parent package.\n\nThis test works in Python but fails when bundled because:\n1. pkg.submodule imports get_base from parent at module level\n2. pkg.submodule uses the imported function at module level\n3. The bundler fails to properly initialize pkg.submodule\n4. When get_result() tries to access pkg.submodule.process(), it fails\n"""
print(pkg.get_result())
