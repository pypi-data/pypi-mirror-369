---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/future_imports_basic/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

from __future__ import annotations
import functools
import types
import typing
mypackage = types.SimpleNamespace(__name__='mypackage')
mypackage_submodule = types.SimpleNamespace(__name__='mypackage.submodule')
mypackage.submodule = mypackage_submodule
"""Submodule with future imports."""
"""Package initialization with future import."""
@functools.cache
def __cribo_init___cribo_c3d681_mypackage_submodule_utils():
    module = types.SimpleNamespace()
    module.__name__ = 'mypackage.submodule.utils'
    Dict = typing.Dict
    module.Dict = Dict
    Any = typing.Any
    module.Any = Any
    Union = typing.Union
    module.Union = Union

    def validate_input(data: InputData) -> bool:
        """Validate input data structure.\n\n    Uses forward reference that requires future import.\n    """
        if not isinstance(data, dict):
            return False
        return "key" in data and isinstance(data.get("numbers"), list)
    module.validate_input = validate_input

    def format_output(data: typing.Any) -> FormattedOutput:
        """Format data for output."""
        return f"Formatted: {data}"
    module.format_output = format_output
    InputData = typing.Dict[str, typing.Any]
    module.InputData = InputData
    FormattedOutput = typing.Union[str, typing.Dict[str, typing.Any]]
    module.FormattedOutput = FormattedOutput
    return module
@functools.cache
def __cribo_init___cribo_41d36f_mypackage_core():
    module = types.SimpleNamespace()
    module.__name__ = 'mypackage.core'
    Dict = typing.Dict
    module.Dict = Dict
    List = typing.List
    module.List = List
    Any = typing.Any
    module.Any = Any

    def process_data(data: typing.Dict[str, typing.Any]) -> typing.Dict[str, typing.Any]:
        """Process input data and return results.\n\n    This function uses forward references in type hints.\n    """
        result: ProcessingResult = {"input": data, "processed": True, "output": _transform_data(data)}
        return result
    module.process_data = process_data

    def _transform_data(data: typing.Dict[str, typing.Any]) -> typing.List[str]:
        """Transform data into list format."""
        return [f"{k}={v}" for k, v in data.items()]
    module._transform_data = _transform_data
    ProcessingResult = typing.Dict[str, typing.Any]
    module.ProcessingResult = ProcessingResult
    return module
mypackage.core = __cribo_init___cribo_41d36f_mypackage_core()
process_data = mypackage.core.process_data
mypackage.submodule.utils = __cribo_init___cribo_c3d681_mypackage_submodule_utils()
validate_input = mypackage.submodule.utils.validate_input
def main() -> None:
    """Main function with type annotations that require future import."""
    data = {"key": "value", "numbers": [1, 2, 3]}
    if validate_input(data):
        result = process_data(data)
        print(f"Processing result: {result}")
    else:
        print("Invalid input data")
if __name__ == "__main__":
    main()
