---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/xfail_module_shadowing/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
@functools.cache
def __cribo_init___cribo_b061eb_pandera():
    module = types.SimpleNamespace()
    module.__name__ = 'pandera'
    """First-party module that shadows the third-party pandera package."""
    print("Loading first-party pandera module")
    __version__ = "0.0.1-local"
    module.__version__ = __version__

    def local_function():
        return "This is from the local pandera module"
    module.local_function = local_function
    return module
@functools.cache
def __cribo_init___cribo_2a6a8f_test_import():
    module = types.SimpleNamespace()
    module.__name__ = 'test_import'
    """Test module that tries to import pandera.polars.\n\nThis demonstrates what happens when we have a local 'pandera' module\nthat shadows the third-party pandera package, and we try to import\na submodule that only exists in the third-party package.\n"""
    print("Starting test_import.py")
    try:
        import pandera.polars as pa
        module.pa = pa
        print("Successfully imported pandera.polars")
        print(f"pandera.polars module: {pa.__name__}")
    except ImportError as e:
        print(f"ImportError: {e}")
    except AttributeError as e:
        print(f"AttributeError: {e}")
    try:
        pandera = __cribo_init___cribo_b061eb_pandera()
        module.pandera = pandera
        print("\nImported pandera successfully")
        print(f"pandera.__version__: {pandera.__version__}")
        if hasattr(pandera, "local_function"):
            print(f"This is the local pandera module: {pandera.local_function()}")
        else:
            print("This is the third-party pandera module")
    except ImportError as e:
        print(f"\nFailed to import pandera: {e}")
    return module
"""Main entry point that imports test_import to demonstrate module shadowing behavior."""
print("=== Module Shadowing Test ===")
print("This test demonstrates Python's behavior when a first-party module")
print("shadows a third-party package name.\n")
print("\n=== Test Complete ===")
