---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/importlib_static_renaming/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import importlib
import types
VERSION = "1.0.0"
MESSAGE = "This is foo module"
class Calculator:

    def add(self, a, b):
        return a + b

    def multiply(self, a, b):
        return a * b
def process(data):
    return f"Processed: {data}"
def greet(name):
    return f"Hello, {name}!"
def get_value():
    return 42
Calculator.__module__ = 'bar'
im = importlib.import_module
foo = types.SimpleNamespace(MESSAGE=MESSAGE, greet=greet, get_value=get_value)
bar_module = types.SimpleNamespace(VERSION=VERSION, Calculator=Calculator, process=process)
also_foo = types.SimpleNamespace(MESSAGE=MESSAGE, greet=greet, get_value=get_value)
also_bar = types.SimpleNamespace(VERSION=VERSION, Calculator=Calculator, process=process)
print(f"foo.greet('World'): {greet('World')}")
print(f"foo.get_value(): {get_value()}")
print(f"foo.MESSAGE: {MESSAGE}")
print(f"\nbar_module.process('data'): {process('data')}")
print(f"bar_module.VERSION: {VERSION}")
calc = Calculator()
print(f"calc.add(5, 3): {calc.add(5, 3)}")
print(f"calc.multiply(4, 7): {calc.multiply(4, 7)}")
print(f"\nfoo has greet: {hasattr(foo, 'greet')}")
print(f"also_foo has greet: {hasattr(also_foo, 'greet')}")
print(f"bar_module has process: {hasattr(bar_module, 'process')}")
print(f"also_bar has process: {hasattr(also_bar, 'process')}")
print(f"\nalso_foo.greet('Python'): {greet('Python')}")
print(f"also_bar.process('test'): {process('test')}")
print("\nAll importlib renaming patterns work correctly!")
