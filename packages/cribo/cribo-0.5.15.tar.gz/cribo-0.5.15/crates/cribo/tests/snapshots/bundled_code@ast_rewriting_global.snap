---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/ast_rewriting_global/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
foo_3 = "module1_foo"
def get_foo():
    """Get the module's global foo value."""
    return foo_3
def modify_foo():
    """Modify the module's global foo using global keyword."""
    global foo_3
    foo_3 = "module1_foo_modified"
"""Module demonstrating global keyword usage."""
module_global_keyword = types.SimpleNamespace(__name__='module_global_keyword', foo=foo_3, get_foo=get_foo, modify_foo=modify_foo)
_cribo_module_mixed_patterns_foo = None
_cribo_module_mixed_patterns_counter = None
@functools.cache
def __cribo_init___cribo_c75306_module_mixed_patterns():
    module = types.SimpleNamespace()
    module.__name__ = 'module_mixed_patterns'
    """Module demonstrating mixed global access patterns."""
    foo = "module3_foo"
    module.foo = foo
    bar = "module3_bar"
    module.bar = bar
    counter = 0
    module.counter = counter

    def get_values():
        """Get module globals using different methods."""
        direct_foo = module.foo
        dict_bar = module.__dict__["bar"]
        counter_val = module.__dict__.get("counter", -1)
        return {"foo": direct_foo, "bar": dict_bar, "counter": counter_val}
    module.get_values = get_values

    def modify_all():
        """Modify globals using different patterns."""
        global _cribo_module_mixed_patterns_foo, _cribo_module_mixed_patterns_counter
        _cribo_module_mixed_patterns_foo = "module3_foo_modified"
        module.foo = _cribo_module_mixed_patterns_foo
        _cribo_module_mixed_patterns_counter += 1
        module.counter = _cribo_module_mixed_patterns_counter
        module.__dict__["bar"] = "module3_bar_modified"
        module.__dict__["new_var"] = "dynamically_added"
    module.modify_all = modify_all

    def complex_global_usage():
        """Demonstrate complex global usage patterns."""
        global _cribo_module_mixed_patterns_counter
        original = _cribo_module_mixed_patterns_counter
        for i in range(3):
            _cribo_module_mixed_patterns_counter += 1

        def increment():
            global _cribo_module_mixed_patterns_counter
            _cribo_module_mixed_patterns_counter += 1
            module.counter = _cribo_module_mixed_patterns_counter
            return _cribo_module_mixed_patterns_counter
        global_keys = [k for k in globals() if not k.startswith("_")]
        return {"original": original, "after_loop": _cribo_module_mixed_patterns_counter, "increment_func": increment, "global_count": len(global_keys)}
    module.complex_global_usage = complex_global_usage
    module.__dict__["initialized_via_globals"] = True
    exec("exec_created_var = 'created_via_exec'", module.__dict__)
    global _cribo_module_mixed_patterns_foo
    _cribo_module_mixed_patterns_foo = foo
    global _cribo_module_mixed_patterns_counter
    _cribo_module_mixed_patterns_counter = counter
    return module
@functools.cache
def __cribo_init___cribo_5101f4_module_globals_dict():
    module = types.SimpleNamespace()
    module.__name__ = 'module_globals_dict'
    """Module demonstrating globals() dictionary access."""
    bar = "module2_bar"
    module.bar = bar
    baz = 42
    module.baz = baz

    def get_bar():
        """Get bar using globals() dict."""
        return module.__dict__["bar"]
    module.get_bar = get_bar

    def modify_bar():
        """Modify bar using globals() dict."""
        module.__dict__["bar"] = "module2_bar_modified"
    module.modify_bar = modify_bar

    def set_dynamic_global(name, value):
        """Set a global variable dynamically using globals()."""
        module.__dict__[name] = value
    module.set_dynamic_global = set_dynamic_global

    def get_dynamic_global(name, default=None):
        """Get a global variable dynamically."""
        return module.__dict__.get(name, default)
    module.get_dynamic_global = get_dynamic_global

    def list_module_globals():
        """List all non-built-in globals in this module."""
        return {k: v for k, v in globals().items() if not k.startswith("__") and k not in ["get_bar", "modify_bar", "set_dynamic_global", "get_dynamic_global", "list_module_globals"]}
    module.list_module_globals = list_module_globals
    set_dynamic_global("dynamic1", "created_via_globals")
    set_dynamic_global("dynamic2", [1, 2, 3])
    return module
"""Test global namespace isolation between modules."""
foo_1 = "main_foo"
foo = foo_1
bar_1 = "main_bar"
bar = bar_1
module_globals_dict = __cribo_init___cribo_5101f4_module_globals_dict()
module_mixed_patterns = __cribo_init___cribo_c75306_module_mixed_patterns()
assert foo_1 == "main_foo"
assert bar_1 == "main_bar"
print("Module with global keyword:", module_global_keyword.get_foo())
print("Module with globals() dict:", module_globals_dict.get_bar())
print("Module with mixed patterns:", module_mixed_patterns.get_values())
module_global_keyword.modify_foo()
module_globals_dict.modify_bar()
module_mixed_patterns.modify_all()
print("\nAfter modifications:")
print("Module with global keyword:", module_global_keyword.get_foo())
print("Module with globals() dict:", module_globals_dict.get_bar())
print("Module with mixed patterns:", module_mixed_patterns.get_values())
assert foo_1 == "main_foo"
assert bar_1 == "main_bar"
print("\nMain's globals remain unchanged:")
print(f"foo = {foo_1}")
print(f"bar = {bar_1}")
