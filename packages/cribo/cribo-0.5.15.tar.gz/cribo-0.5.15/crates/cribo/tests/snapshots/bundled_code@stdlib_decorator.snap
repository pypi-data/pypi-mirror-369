---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_decorator/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import contextlib
import functools
import os
import tempfile
import types
mypackage = types.SimpleNamespace(__name__='mypackage')
@functools.cache
def __cribo_init___cribo_7c69fc_mypackage_utils():
    module = types.SimpleNamespace()
    module.__name__ = 'mypackage.utils'
    """Utils module with contextlib decorator.\n\nThis module must have side effects to become a wrapper module,\nand uses contextlib as a decorator which should be preserved in\nthe init function but currently isn't.\n"""
    print("Loading utils module")

    @contextlib.contextmanager
    def atomic_open(filename):
        """Write a file atomically using contextlib decorator."""
        print(f"Opening {filename}")
        tmp_descriptor, tmp_name = tempfile.mkstemp(dir=os.path.dirname(filename))
        try:
            with os.fdopen(tmp_descriptor, "wb") as tmp_handler:
                yield tmp_handler
            os.replace(tmp_name, filename)
        except BaseException:
            os.remove(tmp_name)
            raise
    module.atomic_open = atomic_open
    return module
@functools.cache
def __cribo_init___cribo_41b947_mypackage():
    module = types.SimpleNamespace()
    module.__name__ = 'mypackage'
    """Package init file."""
    print("Loading mypackage")
    return module
"""Test contextlib import missing in wrapper module init functions.\n\nThis test reproduces the bug found when bundling requests where contextlib\nis used as @contextlib.contextmanager decorator but not imported in the\ngenerated init function for wrapper modules with side effects.\n"""
mypackage.utils = __cribo_init___cribo_7c69fc_mypackage_utils()
__cribo_init_result = __cribo_init___cribo_41b947_mypackage()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypackage, attr, getattr(__cribo_init_result, attr))
utils = mypackage.utils
with utils.atomic_open("test.txt") as f:
    f.write(b"test")
print("Success")
