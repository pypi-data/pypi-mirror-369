---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_module_name_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import abc
import enum
import importlib.machinery
import types
mypkg = types.SimpleNamespace(__name__='mypkg')
mypkg_abc = types.SimpleNamespace(__name__='mypkg.abc')
mypkg.abc = mypkg_abc
mypkg_console = types.SimpleNamespace(__name__='mypkg.console')
mypkg.console = mypkg_console
class MyBaseClass(abc.ABC):
    """Base class using stdlib ABC."""
    pass
def test_function():
    """Test function using imports."""
    if abc.ABC:
        my_list: typing.List[str] = ["test"]
        TestEnum = enum.Enum("TestEnum", ["A", "B"])
        obj = local_abc.create_object()
        loader = importlib.machinery.SourceFileLoader
        return f"Success with {my_list} and {TestEnum.A} and {loader.__name__}"
    return "Failed"
def create_object():
    """Create an object for testing."""

    class TestObject(MyBaseClass):
        pass
    return TestObject()
"""Package with modules including one named 'abc' (same as stdlib)."""
"""Console module that imports various stdlib modules."""
MyBaseClass.__module__ = 'mypkg.abc'
"""Local 'abc' module that imports from stdlib 'abc'."""
console = mypkg_console
local_abc = mypkg_abc
mypkg_abc.MyBaseClass = MyBaseClass
mypkg_abc.create_object = create_object
mypkg_console.test_function = test_function
"""Test that triggers stdlib import collision bug when bundling packages."""
result = mypkg.console.test_function()
print(f"Result: {result}")
obj = mypkg.abc.create_object()
print(f"Object type: {type(obj).__name__}")
print("Test completed successfully")
