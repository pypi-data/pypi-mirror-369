---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_name_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import types
mypackage = types.SimpleNamespace(__name__='mypackage')
mypackage_abc = types.SimpleNamespace(__name__='mypackage.abc')
mypackage.abc = mypackage_abc
mypackage_pretty = types.SimpleNamespace(__name__='mypackage.pretty')
mypackage.pretty = mypackage_pretty
class MyClass:
    """A class defined in the local abc module."""

    def __init__(self):
        self.value = "local_abc_class"

    def __str__(self):
        return f"MyClass({self.value})"
def format_object(obj: MyClass) -> str:
    """Format an object from the local abc module."""
    return f"Formatted: {obj}"
"""Module that imports from local abc module."""
MyClass.__module__ = 'mypackage.abc'
"""Local module named 'abc' - should not be confused with stdlib abc."""
mypackage_pretty.format_object = format_object
mypackage_abc.MyClass = MyClass
"""Test case for modules with same name as stdlib modules."""
result = format_object(MyClass())
print(f"Result: {result}")
