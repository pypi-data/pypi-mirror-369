---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/conditional_imports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import sys
import types
@functools.cache
def __cribo_init___cribo_17f1ec_try_except_module():
    module = types.SimpleNamespace()
    module.__name__ = 'try_except_module'
    """Module with imports inside try/except blocks."""
    etree = None
    module.etree = etree
    ETREE_VERSION = None
    module.ETREE_VERSION = ETREE_VERSION
    try:
        from lxml import etree
        module.etree = etree
        ETREE_VERSION = "lxml"
        module.ETREE_VERSION = ETREE_VERSION
    except ImportError:
        try:
            import xml.etree.ElementTree as etree
            module.etree = etree
            ETREE_VERSION = "stdlib"
            module.ETREE_VERSION = ETREE_VERSION
        except ImportError:
            etree = None
            module.etree = etree
            ETREE_VERSION = None
            module.ETREE_VERSION = ETREE_VERSION
    parser_backend = None
    module.parser_backend = parser_backend
    try:
        import cElementTree as ET
        module.ET = ET
        parser_backend = "cElementTree"
        module.parser_backend = parser_backend
    except ImportError:
        try:
            import xml.etree.ElementTree as ET
            module.ET = ET
            parser_backend = "ElementTree"
            module.parser_backend = parser_backend
        except ImportError:
            ET = None
            module.ET = ET
            parser_backend = None
            module.parser_backend = parser_backend

    def parse_xml(xml_string):
        """Parse XML using available parser."""
        if etree is not None:
            return module.etree.fromstring(xml_string)
        elif ET is not None:
            return ET.fromstring(xml_string)
        else:
            raise ImportError("No XML parser available")
    module.parse_xml = parse_xml
    return module
@functools.cache
def __cribo_init___cribo_e43fad_conditional_module():
    module = types.SimpleNamespace()
    module.__name__ = 'conditional_module'
    """Module with conditional imports inside if/else blocks."""
    has_simplejson = False
    module.has_simplejson = has_simplejson
    try:
        import simplejson as json
        module.json = json
        has_simplejson = True
        module.has_simplejson = has_simplejson
    except ImportError:
        import json
        module.json = json
    if module.has_simplejson:
        from simplejson import JSONDecodeError
        module.JSONDecodeError = JSONDecodeError
    else:
        from json import JSONDecodeError
        module.JSONDecodeError = JSONDecodeError
    if sys.version_info[0] >= 3:
        builtin_str = str
        module.builtin_str = builtin_str
        my_str = str
        module.my_str = my_str
    else:
        builtin_str = str
        module.builtin_str = builtin_str
        my_str = unicode
        module.my_str = my_str
    basestring = str, bytes
    module.basestring = basestring
    if module.has_simplejson:
        if hasattr(json, "JSONDecodeError"):
            pass
        else:
            JSONDecodeError = ValueError
            module.JSONDecodeError = JSONDecodeError
    else:
        pass

    def decode_json(text):
        """Decode JSON using the conditionally imported decoder."""
        try:
            return json.loads(text)
        except JSONDecodeError as e:
            return None
    module.decode_json = decode_json
    return module
"""Test conditional imports in if/else and try/except blocks."""
conditional_module = __cribo_init___cribo_e43fad_conditional_module()
try_except_module = __cribo_init___cribo_17f1ec_try_except_module()
print("If/else import - JSONDecodeError:", hasattr(conditional_module, "JSONDecodeError"))
print("If/else import - json:", hasattr(conditional_module, "json"))
print("If/else import - builtin_str:", hasattr(conditional_module, "builtin_str"))
try:
    raise conditional_module.JSONDecodeError("test", "doc", 0)
except conditional_module.JSONDecodeError as e:
    print("Successfully caught JSONDecodeError from conditional import")
print("Try/except import - etree:", hasattr(try_except_module, "etree"))
print("Try/except import - ETREE_VERSION:", hasattr(try_except_module, "ETREE_VERSION"))
if try_except_module.etree is not None:
    print("Successfully imported etree module")
else:
    print("etree module is None (not available)")
expected_attrs = ["JSONDecodeError", "json", "builtin_str", "basestring", "has_simplejson"]
for attr in expected_attrs:
    if hasattr(conditional_module, attr):
        print(f"✓ {attr} is accessible")
    else:
        print(f"✗ {attr} is NOT accessible")
