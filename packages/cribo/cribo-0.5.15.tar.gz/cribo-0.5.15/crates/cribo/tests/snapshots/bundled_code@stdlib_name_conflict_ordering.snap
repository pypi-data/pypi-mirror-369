---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/stdlib_name_conflict_ordering/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import abc
import types
import typing
complex_pkg = types.SimpleNamespace(__name__='complex_pkg')
complex_pkg_abc = types.SimpleNamespace(__name__='complex_pkg.abc')
complex_pkg.abc = complex_pkg_abc
complex_pkg_console = types.SimpleNamespace(__name__='complex_pkg.console')
complex_pkg.console = complex_pkg_console
abstractmethod = abc.abstractmethod
class Base(abc.ABC):
    """Base class like rich.abc.RichRenderable"""

    @abstractmethod
    def render(self):
        pass

    @classmethod
    def __subclasshook__(cls, other):
        return hasattr(other, "render")
class Console(Base):
    """Console class similar to rich.console.Console"""

    def __init__(self):
        self.buffer: typing.List[str] = []

    def render(self):
        return "\n".join(self.buffer)

    def print(self, *args: typing.Any):
        self.buffer.append(" ".join(str(arg) for arg in args))
        print(*args)
def main():
    console = Console()
    console.print("Testing")
Console.__module__ = 'complex_pkg.console'
Base.__module__ = 'complex_pkg.abc'
complex_pkg.main = main
complex_pkg_console.Console = Console
complex_pkg_abc.abstractmethod = abstractmethod
complex_pkg_abc.Base = Base
main()
