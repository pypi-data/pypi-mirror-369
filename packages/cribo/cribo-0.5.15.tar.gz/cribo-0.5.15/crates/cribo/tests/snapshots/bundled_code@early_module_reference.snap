---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/early_module_reference/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import types
mypkg = types.SimpleNamespace(__name__='mypkg')
mypkg_api = types.SimpleNamespace(__name__='mypkg.api')
mypkg.api = mypkg_api
mypkg_sessions = types.SimpleNamespace(__name__='mypkg.sessions')
mypkg.sessions = mypkg_sessions
class Session:
    """A simple session class."""

    def __init__(self):
        self.headers = {}
        self.cookies = {}

    def request(self, method, url, **kwargs):
        """Make a request."""
        return f"Mock response for {method} {url}"

    def __enter__(self):
        """Context manager entry."""
        return self

    def __exit__(self, *args):
        """Context manager exit."""
        pass
def session():
    """Create a new session."""
    return Session()
def request(method, url, **kwargs):
    """Make a request using the session."""
    with session_ref.Session() as session:
        return session.request(method=method, url=url, **kwargs)
"""Package that demonstrates early module reference issue."""
Session.__module__ = 'mypkg.sessions'
"""Sessions module with Session class."""
"""API module that references sessions module early.\n\nThis reproduces the issue where a module-level variable references\nanother module before it's fully initialized.\n"""
sessions = mypkg_sessions
session_ref = sessions
mypkg_sessions.Session = Session
mypkg_sessions.session = session
mypkg_api.request = request
mypkg_api.session_ref = session_ref
"""Test case for early module reference before initialization.\n\nThis reproduces the issue where a module tries to reference another module\nbefore it has been fully initialized through its init function.\n"""
response = mypkg.api.request("GET", "https://example.com")
print(f"Response: {response}")
