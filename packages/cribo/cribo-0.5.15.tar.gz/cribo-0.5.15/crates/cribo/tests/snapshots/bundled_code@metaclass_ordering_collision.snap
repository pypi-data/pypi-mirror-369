---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/metaclass_ordering_collision/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
@functools.cache
def __cribo_init___cribo_276673_module_b():
    module = types.SimpleNamespace()
    module.__name__ = 'module_b'
    """Second module with same-named metaclass and class - will get renamed."""

    class YAMLObjectMetaclass(type):
        """Another metaclass with the same name."""

        def __init__(cls, name, bases, kwds):
            super(YAMLObjectMetaclass, cls).__init__(name, bases, kwds)
            if "yaml_tag" in kwds and kwds["yaml_tag"] is not None:
                cls._registered_b = True
    module.YAMLObjectMetaclass = YAMLObjectMetaclass

    class YAMLObject(metaclass=YAMLObjectMetaclass):
        """Another class with the same name but different metaclass."""
        yaml_tag = None

        def __init__(self):
            pass
    module.YAMLObject = YAMLObject
    return module
@functools.cache
def __cribo_init___cribo_12d4a8_module_a():
    module = types.SimpleNamespace()
    module.__name__ = 'module_a'
    """First module with metaclass and class - will have original names."""

    class YAMLObjectMetaclass(type):
        """The metaclass for YAMLObject."""

        def __init__(cls, name, bases, kwds):
            super(YAMLObjectMetaclass, cls).__init__(name, bases, kwds)
            if "yaml_tag" in kwds and kwds["yaml_tag"] is not None:
                cls._registered_a = True
    module.YAMLObjectMetaclass = YAMLObjectMetaclass

    class YAMLObject(metaclass=YAMLObjectMetaclass):
        """An object with metaclass from module_a."""
        yaml_tag = None

        def __init__(self):
            pass
    module.YAMLObject = YAMLObject
    return module
"""Test that demonstrates metaclass ordering issue with name collisions."""
module_a = __cribo_init___cribo_12d4a8_module_a()
YAMLObject = module_a.YAMLObject
module_b = __cribo_init___cribo_276673_module_b()
YAMLObjectB = module_b.YAMLObject
def test_both_classes():
    """Test that both metaclass-based classes work."""

    class MyObjectA(YAMLObject):
        yaml_tag = "!myobject_a"

        def __init__(self, value):
            self.value = value
    obj_a = MyObjectA(42)
    assert obj_a.value == 42
    assert MyObjectA.yaml_tag == "!myobject_a"

    class MyObjectB(YAMLObjectB):
        yaml_tag = "!myobject_b"

        def __init__(self, value):
            self.value = value * 2
    obj_b = MyObjectB(21)
    assert obj_b.value == 42
    assert MyObjectB.yaml_tag == "!myobject_b"
    print("Both metaclass tests passed")
if __name__ == "__main__":
    test_both_classes()
