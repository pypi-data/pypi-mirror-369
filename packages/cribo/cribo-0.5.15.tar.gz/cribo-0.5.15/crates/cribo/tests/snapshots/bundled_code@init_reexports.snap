---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/init_reexports/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import os
import types
mypackage = types.SimpleNamespace(__name__='mypackage')
mypackage_data_processor = types.SimpleNamespace(__name__='mypackage.data_processor')
mypackage.data_processor = mypackage_data_processor
mypackage_formatter = types.SimpleNamespace(__name__='mypackage.formatter')
mypackage.formatter = mypackage_formatter
mypackage_utils = types.SimpleNamespace(__name__='mypackage.utils')
mypackage.utils = mypackage_utils
mypackage_utils_constants = types.SimpleNamespace(__name__='mypackage.utils.constants')
mypackage_utils.constants = mypackage_utils_constants
mypackage_utils_helper = types.SimpleNamespace(__name__='mypackage.utils.helper')
mypackage_utils.helper = mypackage_utils_helper
def helper_function(data):
    """Helper function for processing data."""
    return f"Helped: {data}"
def format_data(data):
    """Format the processed data."""
    return f"Formatted: {data}"
def process_data(data):
    """Process the input data."""
    processed = data.copy()
    processed["processed"] = True
    return processed
"""Utils subpackage with re-exports."""
"""Constants module."""
"""Helper utilities."""
"""Data formatting module."""
"""Data processing module."""
@functools.cache
def __cribo_init___cribo_de6c46_mypackage_config():
    module = types.SimpleNamespace()
    module.__name__ = 'mypackage.config'
    """Configuration module."""

    class Config:
        """Configuration class."""

        def __init__(self):
            self.DEBUG = os.environ.get("DEBUG", "false").lower() == "true"
            self.LOG_LEVEL = os.environ.get("LOG_LEVEL", "INFO")
    module.Config = Config
    config = Config()
    module.config = config
    return module
@functools.cache
def __cribo_init___cribo_a81151_mypackage():
    module = types.SimpleNamespace()
    module.__name__ = 'mypackage'
    global format_data, helper_function, process_data
    """\nPackage initialization with re-exports.\n\nThis __init__.py demonstrates the pattern where imports are made but not directly used\nwithin this file - they are re-exports for the package interface.\nThese imports should NOT be stripped as unused, even though they don't appear\nto be used within this file itself.\n"""
    mypackage.config = __cribo_init___cribo_de6c46_mypackage_config()
    config = mypackage.config.config
    module.config = config
    __version__ = "1.0.0"
    module.__version__ = __version__
    DEBUG_MODE = config.DEBUG
    module.DEBUG_MODE = DEBUG_MODE
    module.utils = mypackage_utils
    module.formatter = mypackage_formatter
    module.data_processor = mypackage_data_processor
    module.process_data = process_data
    module.format_data = format_data
    module.helper_function = helper_function
    return module
mypackage.config = __cribo_init___cribo_de6c46_mypackage_config()
__cribo_init_result = __cribo_init___cribo_a81151_mypackage()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypackage, attr, getattr(__cribo_init_result, attr))
mypackage_utils.helper_function = helper_function
mypackage_utils_helper.helper_function = helper_function
'''\nTest script demonstrating __init__.py re-export preservation.\n\nThis fixture tests that imports in __init__.py files are preserved even if they\nappear "unused" within that file, as they are typically re-exports for the package interface.\n'''
__cribo_init_result = __cribo_init___cribo_a81151_mypackage()
for attr in dir(__cribo_init_result):
    if not attr.startswith('_'):
        setattr(mypackage, attr, getattr(__cribo_init_result, attr))
format_data = format_data
process_data = process_data
config = mypackage.config
def main():
    """Main function demonstrating usage of re-exported functions."""
    data = {"name": "test", "value": 42}
    processed = process_data(data)
    formatted = format_data(processed)
    result = helper_function(formatted)
    if config.DEBUG:
        print(f"Debug: {result}")
    else:
        print(result)
if __name__ == "__main__":
    main()
