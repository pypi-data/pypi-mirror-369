---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/metaclass_renamed_forward_ref/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
@functools.cache
def __cribo_init___cribo_c0fc3d_other():
    module = types.SimpleNamespace()
    module.__name__ = 'other'
    """Another module with similar class names to trigger renaming."""

    class MyMetaclass(type):
        """Another metaclass with the same name."""

        def __init__(cls, name, bases, kwds):
            super(MyMetaclass, cls).__init__(name, bases, kwds)
            cls.other_attr = "from other"
    module.MyMetaclass = MyMetaclass

    class MyObject(metaclass=MyMetaclass):
        """Another class with the same name."""

        def __repr__(self):
            return f"OtherMyObject(other_attr={self.other_attr})"
    module.MyObject = MyObject
    return module
@functools.cache
def __cribo_init___cribo_a6386c_base():
    module = types.SimpleNamespace()
    module.__name__ = 'base'
    """Base module with metaclass definitions."""

    class MyMetaclass(type):
        """A metaclass that adds attributes."""

        def __init__(cls, name, bases, kwds):
            super(MyMetaclass, cls).__init__(name, bases, kwds)
            cls.base_attr = "from base"
    module.MyMetaclass = MyMetaclass

    class MyObject(metaclass=MyMetaclass):
        """A class using the metaclass."""

        def __repr__(self):
            return f"MyObject(base_attr={self.base_attr})"
    module.MyObject = MyObject
    return module
"""\nTest fixture for metaclass forward reference with renaming issue.\n\nThis reproduces the bug where class renaming causes forward references\nto metaclasses, similar to what happens with PyYAML.\n"""
base = __cribo_init___cribo_a6386c_base()
MyMetaclass = base.MyMetaclass
MyObject = base.MyObject
other = __cribo_init___cribo_c0fc3d_other()
OtherMeta = other.MyMetaclass
OtherObject = other.MyObject
obj1 = MyObject()
print(f"Object 1 created: {obj1}")
obj2 = OtherObject()
print(f"Object 2 created: {obj2}")
print("Test passed!")
