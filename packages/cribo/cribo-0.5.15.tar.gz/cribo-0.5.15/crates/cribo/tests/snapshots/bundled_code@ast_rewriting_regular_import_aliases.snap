---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/ast_rewriting_regular_import_aliases/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import collections.abc
import json
import math
import random
import types
import urllib.parse
import xml.etree.ElementTree
utils = types.SimpleNamespace(__name__='utils')
utils_config = types.SimpleNamespace(__name__='utils.config')
utils.config = utils_config
utils_helpers = types.SimpleNamespace(__name__='utils.helpers')
utils.helpers = utils_helpers
DEFAULT_CONFIG = {"debug": True, "timeout": 30}
class UtilityClass:
    """A simple utility class."""

    def __init__(self, value):
        self.value = value

    def get_value(self):
        return self.value
def get_config():
    """Get the default configuration."""
    return DEFAULT_CONFIG.copy()
def helper_function():
    """A simple helper function."""
    return "helper_result"
"""Configuration module for testing regular import aliases."""
UtilityClass.__module__ = 'utils.helpers'
"""Utility module for testing regular import aliases."""
utils_config.DEFAULT_CONFIG = DEFAULT_CONFIG
utils_config.get_config = get_config
utils_helpers.UtilityClass = UtilityClass
utils_helpers.helper_function = helper_function
'''\nTest fixture for regular import statements with aliases (non-"from" imports).\nThis exercises the code path in ast_rewriter.rs around lines 216-228.\n'''
helper_utils = types.SimpleNamespace()
helper_utils.UtilityClass = UtilityClass
helper_utils.helper_function = helper_function
config_module = types.SimpleNamespace()
config_module.DEFAULT_CONFIG = DEFAULT_CONFIG
config_module.get_config = get_config
def main():
    """Test function that uses the imported modules with aliases."""
    print("Current working directory: /test/working/directory")
    data = {"test": "value"}
    json_str = json.dumps(data)
    print("JSON string:", json_str)
    print("Python version: sys.version_info(major=3, minor=13, micro=3, releaselevel='final', serial=0)")
    print("ABC module available:", hasattr(collections.abc, "ABC"))
    parsed_url = urllib.parse.urlparse("https://example.com/path")
    print("Parsed URL:", parsed_url.netloc)
    root = xml.etree.ElementTree.Element("root")
    xml.etree.ElementTree.SubElement(root, "child")
    print("XML element tag:", root.tag)
    result = helper_utils.helper_function()
    print("Helper result:", result)
    util_obj = helper_utils.UtilityClass("test_value")
    print("Utility value:", util_obj.get_value())
    config = config_module.get_config()
    print("Config debug:", config["debug"])
    print("Pi value:", math.pi)
    random.seed(42)
    print("Random number:", random.randint(1, 100))
    return "regular_import_aliases_test_complete"
if __name__ == "__main__":
    result = main()
    print(result)
