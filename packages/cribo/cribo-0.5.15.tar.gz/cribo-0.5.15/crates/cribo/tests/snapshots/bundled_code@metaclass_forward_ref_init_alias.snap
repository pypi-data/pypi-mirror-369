---
source: crates/cribo/tests/test_bundling_snapshots.rs
input_file: crates/cribo/tests/fixtures/metaclass_forward_ref_init_alias/main.py
---
#!/usr/bin/env python3
# Generated by Cribo - Python Source Bundler
# https://github.com/ophidiarium/cribo

import functools
import types
yaml_pkg = types.SimpleNamespace(__name__='yaml_pkg')
yaml_pkg_meta = types.SimpleNamespace(__name__='yaml_pkg.meta')
yaml_pkg.meta = yaml_pkg_meta
@functools.cache
def __cribo_init___cribo_6d74f2_yaml_pkg_base():
    module = types.SimpleNamespace()
    module.__name__ = 'yaml_pkg.base'
    global YAMLObjectMetaclass

    class YAMLObject(metaclass=YAMLObjectMetaclass):
        """An object with a metaclass"""
        yaml_tag = None

        def __str__(self):
            return f"YAMLObject(tag={self.yaml_tag})"
    module.YAMLObject = YAMLObject
    module.YAMLObjectMetaclass = YAMLObjectMetaclass
    return module
class YAMLObjectMetaclass(type):
    """Metaclass that adds yaml_tag"""

    def __init__(cls, name, bases, kwds):
        super(YAMLObjectMetaclass, cls).__init__(name, bases, kwds)
        if not hasattr(cls, "yaml_tag") or cls.yaml_tag is None:
            cls.yaml_tag = f"!{name}"
YAMLObjectMetaclass.__module__ = 'yaml_pkg.meta'
yaml_pkg.base = __cribo_init___cribo_6d74f2_yaml_pkg_base()
yaml_pkg.YO = yaml_pkg.base.YAMLObject
yaml_pkg_meta.YAMLObjectMetaclass = YAMLObjectMetaclass
obj = yaml_pkg.YO()
print(f"YO object: {obj}")
print(f"Tag: {obj.yaml_tag}")
