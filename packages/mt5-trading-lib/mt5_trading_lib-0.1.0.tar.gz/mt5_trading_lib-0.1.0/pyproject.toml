[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mt5-trading-lib"
version = "0.1.0"
description = "Современная Python-библиотека для взаимодействия с MetaTrader5"
authors = [{name = "Павел Садовенко", email = "mtrfrgm@gmail.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8"
keywords = ["trading", "metatrader5", "forex", "finance"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
]

dependencies = [
    "MetaTrader5",
    "pandas",
    "pydantic",
    "pydantic-settings",
    "cachetools",
    "redis",
    "tenacity",
    "pybreaker",
    "python-dotenv",
    "cryptography",
    "structlog",
    "asyncio-mqtt",
    "aioredis",
    "prometheus-client",
]

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "mypy",
    "black",
    "flake8",
    "isort",
    "pre-commit",
    "build",
    "twine",
    "bumpver",
]

docs = [
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-rtd-theme",
]

test = [
    "factory-boy",
    "faker",
    "responses",
]

[project.urls]
Homepage = "https://github.com/paxelcool/MT5_trading_lib_project"
Repository = "https://github.com/paxelcool/MT5_trading_lib_project"
Documentation = "https://github.com/paxelcool/MT5_trading_lib_project/blob/main/README.md"
"Bug Tracker" = "https://github.com/paxelcool/MT5_trading_lib_project/issues"

[tool.setuptools.packages.find]
include = ["mt5_trading_lib*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mt5_trading_lib"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "MetaTrader5",
    "redis",
    "pybreaker",
    "prometheus_client",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "load: marks tests as load tests",
]

[tool.coverage.run]
source = ["mt5_trading_lib"]
omit = [
    "tests/*",
    "setup.py",
    "mt5_trading_lib/__init__.py",
    "mt5_trading_lib/logging_config.py",
    "mt5_trading_lib/connector.py",
    "mt5_trading_lib/event_bus.py",
    "mt5_trading_lib/middleware.py",
    "mt5_trading_lib/metrics_collector.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bumpver]
current_version = "0.1.0"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "chore(release): bump version {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'version = "{version}"',
]
"mt5_trading_lib/__init__.py" = [
    '__version__ = "{version}"',
]
