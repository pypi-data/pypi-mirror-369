"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from lambdadb.types import BaseModel
import pydantic
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class TypeObject(str, Enum):
    OBJECT = "object"


class IndexConfigsObjectTypedDict(TypedDict):
    type: TypeObject
    object_index_configs: Dict[str, Any]


class IndexConfigsObject(BaseModel):
    type: TypeObject

    object_index_configs: Annotated[
        Dict[str, Any], pydantic.Field(alias="objectIndexConfigs")
    ]


class Type(str, Enum):
    KEYWORD = "keyword"
    LONG = "long"
    DOUBLE = "double"
    DATETIME = "datetime"
    BOOLEAN = "boolean"
    SPARSE_VECTOR = "sparseVector"


class IndexConfigsTypedDict(TypedDict):
    r"""Types that do not need additional parameters."""

    type: Type


class IndexConfigs(BaseModel):
    r"""Types that do not need additional parameters."""

    type: Type


class TypeVector(str, Enum):
    VECTOR = "vector"


class Similarity(str, Enum):
    r"""Vector similarity metric."""

    COSINE = "cosine"
    EUCLIDEAN = "euclidean"
    DOT_PRODUCT = "dot_product"
    MAX_INNER_PRODUCT = "max_inner_product"


class IndexConfigsVectorTypedDict(TypedDict):
    type: TypeVector
    dimensions: int
    r"""Vector dimensions."""
    similarity: NotRequired[Similarity]
    r"""Vector similarity metric."""


class IndexConfigsVector(BaseModel):
    type: TypeVector

    dimensions: int
    r"""Vector dimensions."""

    similarity: Optional[Similarity] = Similarity.COSINE
    r"""Vector similarity metric."""


class TypeText(str, Enum):
    TEXT = "text"


class Analyzer(str, Enum):
    STANDARD = "standard"
    KOREAN = "korean"
    JAPANESE = "japanese"
    ENGLISH = "english"


class IndexConfigsTextTypedDict(TypedDict):
    type: TypeText
    analyzers: NotRequired[List[Analyzer]]
    r"""Analyzers."""


class IndexConfigsText(BaseModel):
    type: TypeText

    analyzers: Optional[List[Analyzer]] = None
    r"""Analyzers."""


IndexConfigsUnionTypedDict = TypeAliasType(
    "IndexConfigsUnionTypedDict",
    Union[
        IndexConfigsTypedDict,
        IndexConfigsTextTypedDict,
        IndexConfigsObjectTypedDict,
        IndexConfigsVectorTypedDict,
    ],
)


IndexConfigsUnion = TypeAliasType(
    "IndexConfigsUnion",
    Union[IndexConfigs, IndexConfigsText, IndexConfigsObject, IndexConfigsVector],
)
