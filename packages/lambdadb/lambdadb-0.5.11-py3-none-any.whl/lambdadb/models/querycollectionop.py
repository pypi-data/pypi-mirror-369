"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from lambdadb.types import BaseModel
from lambdadb.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class QueryCollectionRequestBodyTypedDict(TypedDict):
    query: Dict[str, Any]
    r"""Query object."""
    size: NotRequired[int]
    r"""Number of documents to return. Note that the maximum number of documents is 100."""
    consistent_read: NotRequired[bool]
    r"""If your application requires a strongly consistent read, set consistentRead to true. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value."""
    include_vectors: NotRequired[bool]
    r"""If your application need to include vector values in the response, set includeVectors to true."""
    sort: NotRequired[List[Dict[str, Any]]]
    r"""List of field name, sort direction pairs."""
    fields: NotRequired[List[str]]
    r"""List of field name to include in results"""


class QueryCollectionRequestBody(BaseModel):
    query: Dict[str, Any]
    r"""Query object."""

    size: Optional[int] = None
    r"""Number of documents to return. Note that the maximum number of documents is 100."""

    consistent_read: Annotated[
        Optional[bool], pydantic.Field(alias="consistentRead")
    ] = False
    r"""If your application requires a strongly consistent read, set consistentRead to true. Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value."""

    include_vectors: Annotated[
        Optional[bool], pydantic.Field(alias="includeVectors")
    ] = False
    r"""If your application need to include vector values in the response, set includeVectors to true."""

    sort: Optional[List[Dict[str, Any]]] = None
    r"""List of field name, sort direction pairs."""

    fields: Optional[List[str]] = None
    r"""List of field name to include in results"""


class QueryCollectionRequestTypedDict(TypedDict):
    collection_name: str
    r"""Collection name."""
    request_body: QueryCollectionRequestBodyTypedDict


class QueryCollectionRequest(BaseModel):
    collection_name: Annotated[
        str,
        pydantic.Field(alias="collectionName"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Collection name."""

    request_body: Annotated[
        QueryCollectionRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]


class QueryCollectionDocTypedDict(TypedDict):
    collection: str
    r"""Collection name."""
    doc: Dict[str, Any]
    score: NotRequired[float]
    r"""Document similarity score."""


class QueryCollectionDoc(BaseModel):
    collection: str
    r"""Collection name."""

    doc: Dict[str, Any]

    score: Optional[float] = None
    r"""Document similarity score."""


class QueryCollectionResponseTypedDict(TypedDict):
    r"""Documents selected by query."""

    took: int
    r"""Elapsed time in milliseconds."""
    total: int
    r"""Total number of documents returned."""
    docs: List[QueryCollectionDocTypedDict]
    r"""List of documents."""
    max_score: NotRequired[float]
    r"""Maximum score."""


class QueryCollectionResponse(BaseModel):
    r"""Documents selected by query."""

    took: int
    r"""Elapsed time in milliseconds."""

    total: int
    r"""Total number of documents returned."""

    docs: List[QueryCollectionDoc]
    r"""List of documents."""

    max_score: Annotated[Optional[float], pydantic.Field(alias="maxScore")] = None
    r"""Maximum score."""
