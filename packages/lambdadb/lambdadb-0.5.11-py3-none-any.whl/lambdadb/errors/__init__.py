"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module
import builtins

if TYPE_CHECKING:
    from .apierror import APIError
    from .badrequest_error import BadRequestError, BadRequestErrorData
    from .internalservererror import InternalServerError, InternalServerErrorData
    from .lambdadberror import LambdaDBError
    from .no_response_error import NoResponseError
    from .resourcealreadyexists_error import (
        ResourceAlreadyExistsError,
        ResourceAlreadyExistsErrorData,
    )
    from .resourcenotfound_error import ResourceNotFoundError, ResourceNotFoundErrorData
    from .responsevalidationerror import ResponseValidationError
    from .toomanyrequests_error import TooManyRequestsError, TooManyRequestsErrorData
    from .unauthenticated_error import UnauthenticatedError, UnauthenticatedErrorData

__all__ = [
    "APIError",
    "BadRequestError",
    "BadRequestErrorData",
    "InternalServerError",
    "InternalServerErrorData",
    "LambdaDBError",
    "NoResponseError",
    "ResourceAlreadyExistsError",
    "ResourceAlreadyExistsErrorData",
    "ResourceNotFoundError",
    "ResourceNotFoundErrorData",
    "ResponseValidationError",
    "TooManyRequestsError",
    "TooManyRequestsErrorData",
    "UnauthenticatedError",
    "UnauthenticatedErrorData",
]

_dynamic_imports: dict[str, str] = {
    "APIError": ".apierror",
    "BadRequestError": ".badrequest_error",
    "BadRequestErrorData": ".badrequest_error",
    "InternalServerError": ".internalservererror",
    "InternalServerErrorData": ".internalservererror",
    "LambdaDBError": ".lambdadberror",
    "NoResponseError": ".no_response_error",
    "ResourceAlreadyExistsError": ".resourcealreadyexists_error",
    "ResourceAlreadyExistsErrorData": ".resourcealreadyexists_error",
    "ResourceNotFoundError": ".resourcenotfound_error",
    "ResourceNotFoundErrorData": ".resourcenotfound_error",
    "ResponseValidationError": ".responsevalidationerror",
    "TooManyRequestsError": ".toomanyrequests_error",
    "TooManyRequestsErrorData": ".toomanyrequests_error",
    "UnauthenticatedError": ".unauthenticated_error",
    "UnauthenticatedErrorData": ".unauthenticated_error",
}


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = builtins.list(_dynamic_imports.keys())
    return builtins.sorted(lazy_attrs)
