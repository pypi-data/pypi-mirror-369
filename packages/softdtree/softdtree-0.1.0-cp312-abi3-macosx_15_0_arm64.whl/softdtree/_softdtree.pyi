from typing import Annotated

import numpy
from numpy.typing import ArrayLike


class Node:
    def __init__(self) -> None: ...

    @property
    def id(self) -> int: ...

    @id.setter
    def id(self, arg: int, /) -> None: ...

    @property
    def parent_id(self) -> int: ...

    @parent_id.setter
    def parent_id(self, arg: int, /) -> None: ...

    @property
    def left_child_id(self) -> int: ...

    @left_child_id.setter
    def left_child_id(self, arg: int, /) -> None: ...

    @property
    def right_child_id(self) -> int: ...

    @right_child_id.setter
    def right_child_id(self, arg: int, /) -> None: ...

    @property
    def depth(self) -> int: ...

    @depth.setter
    def depth(self, arg: int, /) -> None: ...

    @property
    def is_leaf(self) -> bool: ...

    @is_leaf.setter
    def is_leaf(self, arg: bool, /) -> None: ...

    @property
    def is_left(self) -> bool: ...

    @is_left.setter
    def is_left(self, arg: bool, /) -> None: ...

    @property
    def weight(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]: ...

    @weight.setter
    def weight(self, arg: Annotated[ArrayLike, dict(dtype='float64', shape=(None))], /) -> None: ...

    @property
    def bias(self) -> float: ...

    @bias.setter
    def bias(self, arg: float, /) -> None: ...

    @property
    def response(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]: ...

    @response.setter
    def response(self, arg: Annotated[ArrayLike, dict(dtype='float64', shape=(None))], /) -> None: ...

    @property
    def feature_ids(self) -> "std::__1::vector<unsigned int, std::__1::allocator<unsigned int>>": ...

    @property
    def has_parent(self) -> bool: ...

class BaseSoftDecisionTree:
    def __init__(self, max_depth: int = 8, max_features: float = 1.0, max_epoch: int = 50, batch_size: int = 1, eta: float = 0.01, beta1: float = 0.9, beta2: float = 0.999, epsilon: float = 1e-08, tol: float = 0.0001, verbose: int = 0, random_seed: int = -1) -> None: ...

    def decision_function(self, x: numpy.typing.NDArray[numpy.float64]) -> numpy.typing.NDArray[numpy.float64]: ...

class BaseSoftDecisionTreeClassifier(BaseSoftDecisionTree):
    def __init__(self, max_depth: int = 8, max_features: float = 1.0, max_epoch: int = 50, batch_size: int = 1, eta: float = 0.01, beta1: float = 0.9, beta2: float = 0.999, epsilon: float = 1e-08, tol: float = 0.0001, verbose: int = 0, random_seed: int = -1) -> None: ...

    def fit(self, arg0: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None))], arg1: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None))], /) -> None: ...

class BaseSoftDecisionTreeRegressor(BaseSoftDecisionTree):
    def __init__(self, max_depth: int = 8, max_features: float = 1.0, max_epoch: int = 50, batch_size: int = 1, eta: float = 0.01, beta1: float = 0.9, beta2: float = 0.999, epsilon: float = 1e-08, tol: float = 0.0001, verbose: int = 0, random_seed: int = -1) -> None: ...

    def fit(self, arg0: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None))], arg1: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None))], /) -> None: ...
