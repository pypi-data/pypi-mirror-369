def_module_params('sls', 
                  export=True,
                  description='Stochastic Local Search Solver (invoked by sls-qfbv and sls-smt tactics or enabled by smt.sls.enable=true)',
                  params=(max_memory_param(),
                        ('max_restarts', UINT, UINT_MAX, 'maximum number of restarts'),
                        ('max_repairs', UINT, 1000, 'maximum number of repairs before restart'),
                        ('walksat', BOOL, 1, 'use walksat assertion selection (instead of gsat)'),
                        ('walksat_ucb', BOOL, 1, 'use bandit heuristic for walksat assertion selection (instead of random)'),
                        ('walksat_ucb_constant', DOUBLE, 20.0, 'the ucb constant c in the term score + c * f(touched)'),
                        ('walksat_ucb_init', BOOL, 0, 'initialize total ucb touched to formula size'),
                        ('walksat_ucb_forget', DOUBLE, 1.0, 'scale touched by this factor every base restart interval'),
                        ('walksat_ucb_noise', DOUBLE, 0.0002, 'add noise 0 <= 256 * ucb_noise to ucb score for assertion selection'),
                        ('walksat_repick', BOOL, 1, 'repick assertion if randomizing in local minima'),
                        ('scale_unsat', DOUBLE, 0.5, 'scale score of unsat expressions by this factor'),
                        ('paws_init', UINT, 40, 'initial/minimum assertion weights'),
                        ('paws_sp', UINT, 52, 'smooth assertion weights with probability paws_sp / 1024'),
                        ('wp', UINT, 100, 'random walk with probability wp / 1024'),
                        ('vns_mc', UINT, 0, 'in local minima, try Monte Carlo sampling vns_mc many 2-bit-flips per bit'),
                        ('vns_repick', BOOL, 0, 'in local minima, try picking a different assertion (only for walksat)'),
                        ('restart_base', UINT, 100, 'base restart interval given by moves per run'),
                        ('restart_init', BOOL, 0, 'initialize to 0 or random value (= 1) after restart'),
                        ('early_prune', BOOL, 1, 'use early pruning for score prediction'),
                        ('random_offset', BOOL, 1, 'use random offset for candidate evaluation'),
                        ('rescore', BOOL, 1, 'rescore/normalize top-level score every base restart interval'),
                        ('dt_axiomatic', BOOL, True, 'use axiomatic mode or model reduction for datatype solver'),
                        ('track_unsat', BOOL, 0, 'keep a list of unsat assertions as done in SAT - currently disabled internally'),
                        ('random_seed', UINT, 0, 'random seed'),
                        ('arith_use_lookahead', BOOL, True, 'use lookahead solver for NIRA'),
                        ('arith_allow_plateau', BOOL, False, 'allow plateau moves during NIRA solving'),
                        ('arith_use_clausal_lookahead', BOOL, False, 'use clause based lookahead for NIRA'),
                        ('bv_use_top_level_assertions', BOOL, True, 'use top-level assertions for BV lookahead solver'),
                        ('bv_use_lookahead', BOOL, True, 'use lookahead solver for BV'),
                        ('bv_allow_rotation', BOOL, True, 'allow model rotation when repairing literal assignment'),
                        ('str_update_strategy', UINT, 2, 'string update candidate selection: 0 - single character based update, 1 - subsequence based update, 2 - combined')
              ))
