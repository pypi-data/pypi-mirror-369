Metadata-Version: 2.4
Name: django-eose
Version: 0.2.2b1
Summary: Django Encrypted Object Search Engine.
Author-email: Paulo Otávio Castoldi <paulootavio343@outlook.com>
License: MIT
Project-URL: Homepage, https://github.com/paulootaviodev/django-eose
Keywords: django,search,multiprocessing,decrypted,cache
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Framework :: Django
Classifier: Framework :: Django :: 5
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: Django==5.2.5
Requires-Dist: sqlparse==0.5.3
Requires-Dist: asgiref==3.9.1
Requires-Dist: psutil==7.0.0
Provides-Extra: dev
Requires-Dist: setuptools>=78.1.1; extra == "dev"
Requires-Dist: wheel>=0.45.1; extra == "dev"
Dynamic: license-file

# Django EOSE

**Django Encrypted Object Search Engine**  
An efficient search engine for encrypted or derived fields in Django querysets, with support for parallel processing, smart batching, and result caching.

`django-eose` is ideal for scenarios where you need to search data that is encrypted in the database or derived from other fields, providing high performance even on large datasets.

---

## Key Features

- **Parallel Search:** supports execution using processes, threads, or synchronous mode.  
- **Smart Batching:** batch size automatically adapts to available memory.  
- **Related Field Search:** search can be performed on fields of related objects, e.g., `order__client`.  
- **Result Caching:** frequently searched results are cached for faster repeated queries.  
- **Optimized for Large Datasets:** particularly useful for large datasets and encrypted fields.

---

## Installation

Install easily via `pip`:

```bash
pip install django-eose
```

## Requirements

- Python 3.10 or higher
- Django 5.2.5
- sqlparse==0.5.3
- asgiref==3.9.1
- psutil==7.0.0

## Model Configuration

To use django-eose, your encrypted fields must provide Getters so the package can access the decrypted data.

Example model using Fernet encryption:

```python
from django.db import models
from cryptography.fernet import Fernet

AES_KEY = b"<your_key_here>"

class Client(models.Model):
    _encrypted_name = models.BinaryField()
    _encrypted_email = models.BinaryField()

    # Method to decrypt
    def _decrypt_field(self, encrypted_value):
        return Fernet(AES_KEY).decrypt(encrypted_value).decode()

    # Method to encrypt
    def _encrypt_field(self, value):
        return Fernet(AES_KEY).encrypt(value.encode())
    
    # Creates properties that handle encryption/decryption
    @staticmethod
    def _property(field_name):
        def getter(self):
            return self._decrypt_field(getattr(self, field_name))
        
        def setter(self, value):
            setattr(self, field_name, self._encrypt_field(value))

        return property(getter, setter)
    
    # Fields accessible as normal attributes
    name = _property('_encrypted_name')
    email = _property('_encrypted_email')

```
⚠️ You interact with name and email like regular fields, while encryption/decryption happens transparently.

## Usage

Import the search_queryset function and perform searches:

```python
from django_eose import search_queryset
from orders.models import OrderItem

# Example: search for "john" in related client fields
results = search_queryset(
    search="john",
    queryset=OrderItem.objects.all(),
    related_field="order__client",
    fields=("name", "email"),
    only_fields=("_encrypted_name", "_encrypted_email"),
    executor="processes",
    max_batch_size=1_000_000
)
```

## `search_queryset` Parameters

- search: search term (case-insensitive).
- queryset: Django queryset to search in.
- related_field: path to a related object using __ notation.
- fields: fields of the related object to inspect.
- only_fields: fields to load with .only() for optimization (optional).
- executor: "processes", "threads", or "sync" (default: "processes").
- cache_timeout: cache duration in seconds (default: 600).
- imap_chunksize: chunk size per worker (default: 10240).
- memory_fraction: fraction of available memory for batching (default: 0.60).
- avg_obj_size_bytes: estimated average object size in bytes (optional).
- max_workers: maximum number of parallel workers (optional).
- max_batch_size: maximum number of objects per batch.

Refer to `search_queryset` for full parameter details.

## Default Settings

`django-eose` defines default settings in `django_eose/settings.py`:

- MEMORY_FRACTION
- IMAP_CHUNKSIZE
- EXECUTOR
- CACHE_TIMEOUT
- AVG_OBJ_SIZE_FALLBACK
- MIN_BATCH_SIZE
- MAX_BATCH_SIZE

## License

MIT © 2025 Paulo Otávio Castoldi

## Links

[Source](https://github.com/paulootaviodev/django-eose)
