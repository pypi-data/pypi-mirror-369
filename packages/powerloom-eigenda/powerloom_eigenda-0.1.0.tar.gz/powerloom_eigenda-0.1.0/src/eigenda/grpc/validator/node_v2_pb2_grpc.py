# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

from eigenda.grpc.validator import node_v2_pb2 as validator_dot_node__v2__pb2

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in validator/node_v2_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class DispersalStub(object):
    """The EigenDA Validator Node implements two services, Dispersal and Retrieval, as defined below,
    for better security and separation of concerns.

    Dispersal is utilized to disperse chunk data.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreChunks = channel.unary_unary(
            "/validator.Dispersal/StoreChunks",
            request_serializer=validator_dot_node__v2__pb2.StoreChunksRequest.SerializeToString,
            response_deserializer=validator_dot_node__v2__pb2.StoreChunksReply.FromString,
            _registered_method=True,
        )
        self.GetNodeInfo = channel.unary_unary(
            "/validator.Dispersal/GetNodeInfo",
            request_serializer=validator_dot_node__v2__pb2.GetNodeInfoRequest.SerializeToString,
            response_deserializer=validator_dot_node__v2__pb2.GetNodeInfoReply.FromString,
            _registered_method=True,
        )


class DispersalServicer(object):
    """The EigenDA Validator Node implements two services, Dispersal and Retrieval, as defined below,
    for better security and separation of concerns.

    Dispersal is utilized to disperse chunk data.
    """

    def StoreChunks(self, request, context):
        """StoreChunks instructs the validator to store a batch of chunks. This call blocks until the validator
        either acquires the chunks or the validator determines that it is unable to acquire the chunks. If
        the validator is able to acquire and validate the chunks, it returns a signature over the batch header.
        This RPC describes which chunks the validator should store but does not contain that chunk data. The validator
        is expected to fetch the chunk data from one of the relays that is in possession of the chunk.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNodeInfo(self, request, context):
        """GetNodeInfo fetches metadata about the node."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DispersalServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StoreChunks": grpc.unary_unary_rpc_method_handler(
            servicer.StoreChunks,
            request_deserializer=validator_dot_node__v2__pb2.StoreChunksRequest.FromString,
            response_serializer=validator_dot_node__v2__pb2.StoreChunksReply.SerializeToString,
        ),
        "GetNodeInfo": grpc.unary_unary_rpc_method_handler(
            servicer.GetNodeInfo,
            request_deserializer=validator_dot_node__v2__pb2.GetNodeInfoRequest.FromString,
            response_serializer=validator_dot_node__v2__pb2.GetNodeInfoReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "validator.Dispersal", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("validator.Dispersal", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Dispersal(object):
    """The EigenDA Validator Node implements two services, Dispersal and Retrieval, as defined below,
    for better security and separation of concerns.

    Dispersal is utilized to disperse chunk data.
    """

    @staticmethod
    def StoreChunks(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/validator.Dispersal/StoreChunks",
            validator_dot_node__v2__pb2.StoreChunksRequest.SerializeToString,
            validator_dot_node__v2__pb2.StoreChunksReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetNodeInfo(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/validator.Dispersal/GetNodeInfo",
            validator_dot_node__v2__pb2.GetNodeInfoRequest.SerializeToString,
            validator_dot_node__v2__pb2.GetNodeInfoReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class RetrievalStub(object):
    """Retrieval is utilized to retrieve chunk data."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetChunks = channel.unary_unary(
            "/validator.Retrieval/GetChunks",
            request_serializer=validator_dot_node__v2__pb2.GetChunksRequest.SerializeToString,
            response_deserializer=validator_dot_node__v2__pb2.GetChunksReply.FromString,
            _registered_method=True,
        )
        self.GetNodeInfo = channel.unary_unary(
            "/validator.Retrieval/GetNodeInfo",
            request_serializer=validator_dot_node__v2__pb2.GetNodeInfoRequest.SerializeToString,
            response_deserializer=validator_dot_node__v2__pb2.GetNodeInfoReply.FromString,
            _registered_method=True,
        )


class RetrievalServicer(object):
    """Retrieval is utilized to retrieve chunk data."""

    def GetChunks(self, request, context):
        """GetChunks retrieves the chunks for a blob custodied at the Node. Note that where possible, it is generally
        faster to retrieve chunks from the relay service if that service is available.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetNodeInfo(self, request, context):
        """Retrieve node info metadata"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RetrievalServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetChunks": grpc.unary_unary_rpc_method_handler(
            servicer.GetChunks,
            request_deserializer=validator_dot_node__v2__pb2.GetChunksRequest.FromString,
            response_serializer=validator_dot_node__v2__pb2.GetChunksReply.SerializeToString,
        ),
        "GetNodeInfo": grpc.unary_unary_rpc_method_handler(
            servicer.GetNodeInfo,
            request_deserializer=validator_dot_node__v2__pb2.GetNodeInfoRequest.FromString,
            response_serializer=validator_dot_node__v2__pb2.GetNodeInfoReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "validator.Retrieval", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("validator.Retrieval", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Retrieval(object):
    """Retrieval is utilized to retrieve chunk data."""

    @staticmethod
    def GetChunks(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/validator.Retrieval/GetChunks",
            validator_dot_node__v2__pb2.GetChunksRequest.SerializeToString,
            validator_dot_node__v2__pb2.GetChunksReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def GetNodeInfo(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/validator.Retrieval/GetNodeInfo",
            validator_dot_node__v2__pb2.GetNodeInfoRequest.SerializeToString,
            validator_dot_node__v2__pb2.GetNodeInfoReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
