# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

from eigenda.grpc.retriever.v2 import retriever_v2_pb2 as retriever_dot_v2_dot_retriever__v2__pb2

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in retriever/v2/retriever_v2_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class RetrieverStub(object):
    """The Retriever is a service for retrieving chunks corresponding to a blob from
    the EigenDA operator nodes and reconstructing the original blob from the chunks.
    This is a client-side library that the users are supposed to operationalize.

    Note: Users generally have two ways to retrieve a blob from EigenDA V2:
    1) Retrieve from the relay that the blob is assigned to: the API
    is Relay.GetBlob() as defined in api/proto/relay/relay.proto
    2) Retrieve directly from the EigenDA Nodes, which is supported by this Retriever.

    The Relay.GetBlob() (the 1st approach) is generally faster and cheaper as the
    relay manages the blobs that it has processed, whereas the Retriever.RetrieveBlob()
    (the 2nd approach here) removes the need to trust the relay, with the downside of
    worse cost and performance.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RetrieveBlob = channel.unary_unary(
            "/retriever.v2.Retriever/RetrieveBlob",
            request_serializer=retriever_dot_v2_dot_retriever__v2__pb2.BlobRequest.SerializeToString,
            response_deserializer=retriever_dot_v2_dot_retriever__v2__pb2.BlobReply.FromString,
            _registered_method=True,
        )


class RetrieverServicer(object):
    """The Retriever is a service for retrieving chunks corresponding to a blob from
    the EigenDA operator nodes and reconstructing the original blob from the chunks.
    This is a client-side library that the users are supposed to operationalize.

    Note: Users generally have two ways to retrieve a blob from EigenDA V2:
    1) Retrieve from the relay that the blob is assigned to: the API
    is Relay.GetBlob() as defined in api/proto/relay/relay.proto
    2) Retrieve directly from the EigenDA Nodes, which is supported by this Retriever.

    The Relay.GetBlob() (the 1st approach) is generally faster and cheaper as the
    relay manages the blobs that it has processed, whereas the Retriever.RetrieveBlob()
    (the 2nd approach here) removes the need to trust the relay, with the downside of
    worse cost and performance.
    """

    def RetrieveBlob(self, request, context):
        """This fans out request to EigenDA Nodes to retrieve the chunks and returns the
        reconstructed original blob in response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RetrieverServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RetrieveBlob": grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveBlob,
            request_deserializer=retriever_dot_v2_dot_retriever__v2__pb2.BlobRequest.FromString,
            response_serializer=retriever_dot_v2_dot_retriever__v2__pb2.BlobReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "retriever.v2.Retriever", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("retriever.v2.Retriever", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Retriever(object):
    """The Retriever is a service for retrieving chunks corresponding to a blob from
    the EigenDA operator nodes and reconstructing the original blob from the chunks.
    This is a client-side library that the users are supposed to operationalize.

    Note: Users generally have two ways to retrieve a blob from EigenDA V2:
    1) Retrieve from the relay that the blob is assigned to: the API
    is Relay.GetBlob() as defined in api/proto/relay/relay.proto
    2) Retrieve directly from the EigenDA Nodes, which is supported by this Retriever.

    The Relay.GetBlob() (the 1st approach) is generally faster and cheaper as the
    relay manages the blobs that it has processed, whereas the Retriever.RetrieveBlob()
    (the 2nd approach here) removes the need to trust the relay, with the downside of
    worse cost and performance.
    """

    @staticmethod
    def RetrieveBlob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/retriever.v2.Retriever/RetrieveBlob",
            retriever_dot_v2_dot_retriever__v2__pb2.BlobRequest.SerializeToString,
            retriever_dot_v2_dot_retriever__v2__pb2.BlobReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
