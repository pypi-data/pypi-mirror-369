[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "alomancy"
dynamic = ["version"]
description = "Active Learning framework for atomistic simulations with flexible workflows and HPC submission."
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Julian Holland", email = "holland@fhi.mpg.de"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.9"
dependencies = [
    "ase>=3.22.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "pyyaml>=6.0",
    "tqdm>=4.60.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "wfl==0.3.3",
    "expyre-wfl==0.1.6",
    "seaborn>=0.11.0",
    "mace-torch>=0.3.0",
]
# dependencies = [
#     "ase>=3.22.0",
#     "numpy>=1.21.0",
#     "pandas>=1.3.0",
#     "matplotlib>=3.5.0",
#     "scipy>=1.7.0",
#     "wfl",
#     "expyre",  # Let wfl pull in the correct expyre version
#     "mace-torch",
# ]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-xdist>=3.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
docs = [
        "sphinx>=6.0",
    "sphinx-rtd-theme>=1.2",
    "myst-parser>=0.18",
    "sphinxcontrib-napoleon>=0.7",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "pytest-xdist>=3.0",
]

# [project.scripts]
# alomancy = "alomancy.cli.main:main"

[project.urls]
Homepage = "https://github.com/julianholland/ALomancy"
Repository = "https://github.com/julianholland/ALomancy"
Documentation = "https://alomancy.readthedocs.io"

[tool.setuptools_scm]
write_to = "src/alomancy/version.py"
version_scheme = "post-release"
local_scheme = "no-local-version"

# Add setuptools configuration for src layout
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=alomancy",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_external: marks tests that require external dependencies (MACE, QE, etc.)",
]


[tool.ruff]
target-version = "py39"
line-length = 88
src = ["src", "tests"]

# Enable linting rules
[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "B905",  # zip() without an explicit strict= parameter
    "UP007", # Use X | Y for type annotations (Python 3.10+)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101"]  # Allow unused arguments and assert statements in tests
"__init__.py" = ["F401"]     # Allow unused imports in __init__.py files

[tool.ruff.lint.isort]
known-first-party = ["alomancy"]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# MyPy configuration (keep as is)
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ase.*",
    "mace.*",
    "wfl.*",
    "expyre.*",
    "tqdm.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "src/alomancy/version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
