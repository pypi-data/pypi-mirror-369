# generated by datamodel-codegen:
#   filename:  run.schema.json

from __future__ import annotations

from typing import Annotated, Dict, Optional, Union
from uuid import UUID

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class SemVer(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description=(
                'Semantic version (lenient). Examples: 0.0.5, 1.2.3-alpha.1+build.9'
            ),
            pattern='^\\d+\\.\\d+\\.\\d+(?:[-+][A-Za-z0-9.-]+)?$',
        ),
    ]


class GitSha(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description='Git commit SHA (short or full). Lowercase hex.',
            pattern='^[0-9a-f]{7,40}$',
        ),
    ]


class PkgName(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description=(
                'PEP 503 normalized name (lowercase; -, _, . allowed as separators).'
            ),
            pattern='^[a-z0-9]+(?:[._-][a-z0-9]+)*$',
        ),
    ]


class Run(BaseModel):
    """
    Environment and build metadata captured at generation time (useful for provenance, debugging, and reproducibility).
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    run_id: Annotated[UUID, Field(description='Unique ID for this generation run.')]
    git_commit: Annotated[
        Optional[GitSha], Field(description='Associated Git commit SHA, if available.')
    ] = None
    sim_version: Annotated[
        Union[SemVer, str],
        Field(description='Version of the simulator/tooling producing outputs.'),
    ]
    python_version: Annotated[
        str,
        Field(
            description='Python runtime version.',
            pattern='^\\d+\\.\\d+(?:\\.\\d+)?(?:[A-Za-z0-9.+-]+)?$',
        ),
    ]
    platform: Annotated[
        str,
        Field(description='Platform identifier (e.g., sys.platform, OS/arch combo).'),
    ]
    host: Annotated[
        str,
        Field(
            description='Hostname of the machine (if captured).',
            pattern='^[A-Za-z0-9](?:[A-Za-z0-9-]{0,61}[A-Za-z0-9])?(?:\\.[A-Za-z0-9](?:[A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$',
        ),
    ]
    executed_at: Annotated[
        Optional[AwareDatetime],
        Field(
            description='Timestamp the run started or completed (UTC, ISO 8601).',
            examples=['2026-02-07T00:00:00Z'],
        ),
    ] = None
    libs: Annotated[
        Dict[str, str],
        Field(
            description=(
                'Dependency versions used in this run (keys are package names; values'
                ' are version strings).'
            ),
            examples=[{'pydantic': '2.7.0', 'jsonschema': '4.22.0', 'numpy': '2.0.1'}],
        ),
    ]
