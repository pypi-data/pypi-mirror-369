# generated by datamodel-codegen:
#   filename:  scenario.schema.json

from __future__ import annotations

from enum import Enum
from typing import Annotated, Dict, List, Optional

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field, RootModel


class ActiveHour(RootModel[int]):
    root: Annotated[int, Field(ge=0, le=23)]


class AcctAgeDay(RootModel[int]):
    root: Annotated[int, Field(ge=0)]


class AcctType(Enum):
    person = 'person'
    org = 'org'
    media = 'media'
    public_official = 'public_official'
    unverified = 'unverified'
    declared_automation = 'declared_automation'


class AcctAge(Enum):
    field_0_7d = '0-7d'
    field_8_30d = '8-30d'
    field_1_6m = '1-6m'
    field_6_24m = '6-24m'
    field_24m_ = '24m+'


class AutomationFlag(Enum):
    manual = 'manual'
    scheduled = 'scheduled'
    api_client = 'api_client'
    declared_bot = 'declared_bot'


class PostKind(Enum):
    original = 'original'
    reshare = 'reshare'
    quote = 'quote'
    reply = 'reply'


class ClientFamily(Enum):
    web = 'web'
    mobile = 'mobile'
    third_party_api = 'third_party_api'


class MediaProvenance(Enum):
    c2pa_present = 'c2pa_present'
    hash_only = 'hash_only'
    none = 'none'


class ISO3166CountryOrSubdivision(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description=(
                'Uppercase ISO-3166-1 alpha-2 country code, optionally with ISO-3166-2'
                ' subdivision (e.g., US or US-CA).'
            ),
            pattern='^[A-Z]{2}(-[A-Z]{2})?$',
        ),
    ]


class HexHash8to64(RootModel[str]):
    root: Annotated[
        str,
        Field(
            description=(
                'Lowercase hex, 8–64 chars (rolling hash identifier for identical'
                ' media/text content).'
            ),
            max_length=64,
            min_length=8,
            pattern='^[a-f0-9]{8,64}$',
        ),
    ]


class Window(BaseModel):
    """
    Inclusive UTC time window for the scenario.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    start: Annotated[AwareDatetime, Field(description='Window start (UTC, ISO 8601).')]
    end: Annotated[AwareDatetime, Field(description='Window end (UTC, ISO 8601).')]


class EventKind(Enum):
    burst = 'burst'
    synchrony_wave = 'synchrony_wave'


class ThreatType(Enum):
    benign = 'benign'
    malicious = 'malicious'
    mixed = 'mixed'


class Persona(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Annotated[
        str, Field(description='Persona label for reporting/debugging.', min_length=1)
    ]
    count: Annotated[
        int, Field(description='Number of accounts represented by this persona.', ge=1)
    ]
    acct_type: Annotated[AcctType, Field(description='Declared account type.')]
    automation_flag: Annotated[
        AutomationFlag, Field(description='Posting method / automation status.')
    ]
    post_rate_per_hour: Annotated[
        float,
        Field(description='Average posts per hour per account (non-negative).', ge=0.0),
    ]
    active_hours: Annotated[
        List[ActiveHour],
        Field(
            description='Active hours-of-day in UTC (0–23). Unique values only.',
            max_length=24,
            min_length=1,
        ),
    ]
    acct_age_days: Annotated[
        List[AcctAgeDay],
        Field(
            description='Two integers: [min_days, max_days].',
            max_length=2,
            min_length=2,
        ),
    ]
    reshare_prob: Annotated[
        Optional[float],
        Field(description='Probability that a post is a reshare.', ge=0.0, le=1.0),
    ] = None
    c2pa_prob: Annotated[
        Optional[float],
        Field(
            description='Probability that attached media carries C2PA.', ge=0.0, le=1.0
        ),
    ] = None
    client_family_weights: Annotated[
        Optional[Dict[str, float]],
        Field(
            description=(
                'Weights (non-negative) by client family; consumers may normalize.'
            )
        ),
    ] = None


class Event(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kind: Annotated[EventKind, Field(description='Event category.')]
    start: Annotated[
        Optional[AwareDatetime], Field(description='Event start (UTC, ISO 8601).')
    ] = None
    end: Annotated[
        Optional[AwareDatetime], Field(description='Event end (UTC, ISO 8601).')
    ] = None
    center: Annotated[
        Optional[AwareDatetime], Field(description='Event center/peak (UTC, ISO 8601).')
    ] = None
    span_minutes: Annotated[
        Optional[int], Field(description='Event duration span in minutes.', ge=1)
    ] = None
    participation_rate: Annotated[
        Optional[float],
        Field(
            description='Fraction of persona population participating.', ge=0.0, le=1.0
        ),
    ] = None


class Scenario(BaseModel):
    """
    Input scenario used to drive simulations or aggregation runs: topic, window, personas, and optional events.
    """

    model_config = ConfigDict(
        extra='forbid',
    )
    topic: Annotated[
        str,
        Field(
            description='Human-readable topic key (e.g., hashtag) for this scenario.',
            min_length=1,
        ),
    ]
    threat_type: Annotated[
        Optional[ThreatType],
        Field(description='Optional qualitative label for the scenario.'),
    ] = None
    threat_notes: Annotated[
        Optional[str],
        Field(description='Optional free-text notes supporting the threat_type label.'),
    ] = None
    window: Window
    notes: Annotated[Optional[str], Field(description='Optional free-form notes.')] = (
        None
    )
    personas: Annotated[
        List[Persona],
        Field(
            description=(
                'One or more persona groups contributing activity to the scenario.'
            ),
            min_length=1,
        ),
    ]
    events: Annotated[
        Optional[List[Event]],
        Field(
            description='Optional list of events to inject or expect during the window.'
        ),
    ] = None
