# generated by datamodel-codegen:
#   filename:  provenance_tag.schema.json
from __future__ import annotations
from enum import Enum
from typing import Annotated, Optional
from pydantic import BaseModel, ConfigDict, Field
class AcctAge(Enum):
    field_0_7d = '0-7d'
    field_8_30d = '8-30d'
    field_1_6m = '1-6m'
    field_6_24m = '6-24m'
    field_24m_ = '24m+'
class AcctType(Enum):
    person = 'person'
    org = 'org'
    media = 'media'
    public_official = 'public_official'
    unverified = 'unverified'
    declared_automation = 'declared_automation'
class AutomationFlag(Enum):
    manual = 'manual'
    scheduled = 'scheduled'
    api_client = 'api_client'
    declared_bot = 'declared_bot'
class PostKind(Enum):
    original = 'original'
    reshare = 'reshare'
    quote = 'quote'
    reply = 'reply'
class ClientFamily(Enum):
    web = 'web'
    mobile = 'mobile'
    third_party_api = 'third_party_api'
class MediaProvenance(Enum):
    c2pa_present = 'c2pa_present'
    hash_only = 'hash_only'
    none = 'none'
class ProvenanceTag(BaseModel):
    """
    Per-post provenance tags in the Civic Transparency standard. Values are bucketed/categoricalâ€”no PII or direct identifiers.
    """
    model_config = ConfigDict(
        extra='forbid',
    )
    acct_age_bucket: Annotated[
        AcctAge, Field(description='Account age bucket relative to post time.')
    ]
    acct_type: Annotated[AcctType, Field(description='Declared account type.')]
    automation_flag: Annotated[
        AutomationFlag, Field(description='Automation status or posting method.')
    ]
    post_kind: Annotated[
        PostKind, Field(description='Kind of post relative to original content.')
    ]
    client_family: Annotated[
        ClientFamily, Field(description='Broad class of client application.')
    ]
    media_provenance: Annotated[
        MediaProvenance,
        Field(description='Level of media provenance information attached.'),
    ]
    origin_hint: Annotated[
        Optional[str],
        Field(
            description=(
                'Broad location bucket where content was first observed (if lawful).'
            ),
            pattern='^[A-Z]{2}(-[A-Z]{2})?$',
        ),
    ] = None
    dedup_hash: Annotated[
        str,
        Field(
            description=(
                'Rolling hash identifier used to detect recycled/duplicate content.'
            ),
            max_length=64,
            min_length=8,
            pattern='^[a-f0-9]{8,64}$',
        ),
    ]