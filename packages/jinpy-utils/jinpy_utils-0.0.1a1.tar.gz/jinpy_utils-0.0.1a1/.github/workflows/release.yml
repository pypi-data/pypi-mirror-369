name: Release

on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches-ignore:
      - 'release/**'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  release:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' && !startsWith(github.event.workflow_run.head_branch, 'release/')) }}
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: src
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - name: Determine release mode
        id: mode
        run: |
          # Default to prerelease; switch to stable when commit message contains 'release: stable' or tag pattern is x.y.z
          MODE=prerelease
          echo "mode=$MODE" >> $GITHUB_OUTPUT
      - name: Create release branch
        id: relbranch
        run: |
          set -euo pipefail
          MODE="${{ steps.mode.outputs.mode }}"
          BR="release/${MODE}-${GITHUB_RUN_ID}"
          git switch -c "$BR"
          git push -u origin "$BR"
          echo "name=$BR" >> $GITHUB_OUTPUT
      - name: Semantic Release (alpha prerelease)
        if: ${{ steps.mode.outputs.mode == 'prerelease' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          uvx python-semantic-release version --prerelease --prerelease-token alpha
          uvx python-semantic-release changelog
          # Commit changelog changes on the release branch through PR (no direct push to main)
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          if ! git diff --cached --quiet; then
            git commit -m "chore(release): update changelog"
            git push
          fi
      - name: Create GitHub prerelease from latest tag
        if: ${{ steps.mode.outputs.mode == 'prerelease' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
          if [ -z "${TAG}" ]; then
            TAG=$(git tag -l 'v*' --sort=-v:refname | head -n1 || true)
          fi
          if [ -z "${TAG}" ]; then
            TAG="v0.0.1-alpha.1"
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi
          gh release create "$TAG" --generate-notes --prerelease || true
      - name: Semantic Release (stable)
        if: ${{ steps.mode.outputs.mode == 'stable' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          uvx python-semantic-release version
          uvx python-semantic-release changelog
          # Commit changelog changes on the release branch through PR (no direct push to main)
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          if ! git diff --cached --quiet; then
            git commit -m "chore(release): update changelog"
            git push
          fi
      - name: Create GitHub release from latest tag
        if: ${{ steps.mode.outputs.mode == 'stable' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || true)
          if [ -z "${TAG}" ]; then
            TAG=$(git tag -l 'v*' --sort=-v:refname | head -n1 || true)
          fi
          if [ -z "${TAG}" ]; then
            echo "No tags found; skipping stable release creation." && exit 0
          fi
          gh release create "$TAG" --generate-notes || true
      - name: Open PR to main with changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          BR="${{ steps.relbranch.outputs.name }}"
          if [ -n "${BR}" ]; then
            # Create or reuse PR from release branch to main
            gh pr create --title "chore(release): merge changelog for ${BR}" \
              --body "Automated release PR created by Release workflow." \
              --base main --head "${BR}" || true
          fi
