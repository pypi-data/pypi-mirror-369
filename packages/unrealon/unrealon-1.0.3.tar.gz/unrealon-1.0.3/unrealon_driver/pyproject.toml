[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "unrealon-driver"
version = "3.0.0"
description = "Revolutionary web automation framework with zero configuration and AI-first design"
authors = ["UnrealOn Team <team@unrealon.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/unrealon/unrealon-driver"
repository = "https://github.com/unrealon/unrealon-driver"
documentation = "https://docs.unrealon.com/driver"
keywords = ["web-automation", "parsing", "ai", "websocket", "daemon", "zero-config"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: Browsers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "*", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"

# Core dependencies
pydantic = "^2.0.0"
asyncio-extras = "^1.3.0"
pathlib2 = "^2.3.0"
click = "^8.1.0"


# Optional dependencies for enhanced features
httpx = {version = "^0.23.0", optional = true}
websockets = {version = "^12.0.0", optional = true}
prometheus-client = {version = "^0.17.0", optional = true}

[tool.poetry.group.dev.dependencies]
# Testing framework (enterprise-grade)
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-benchmark = "^4.0.0"
pytest-mock = "^3.11.0"
pytest-xdist = "^3.3.0"
pytest-timeout = "^2.1.0"

# Code quality
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
pre-commit = "^3.3.0"

# Security and performance monitoring
bandit = "^1.7.5"
safety = "^2.3.0"
psutil = "^5.9.0"
memory-profiler = "^0.61.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.1.0"
mkdocs-mermaid2-plugin = "^1.1.0"

[tool.poetry.extras]
full = ["httpx", "websockets", "prometheus-client"]
http = ["httpx"]
websockets = ["websockets"] 
monitoring = ["prometheus-client"]

[tool.poetry.scripts]
unrealon-driver = "src.cli.main:main"

# CLI entry points for different modes
unrealon-test = "src.cli.test:main"
unrealon-daemon = "src.cli.daemon:main"
unrealon-schedule = "src.cli.schedule:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "browser: marks tests that require browser automation",
    "llm: marks tests that require LLM integration",
    "websocket: marks tests that require WebSocket connectivity",
]
asyncio_mode = "auto"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "unrealon_browser.*",
    "unrealon_llm.*", 
    "unrealon_sdk.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
