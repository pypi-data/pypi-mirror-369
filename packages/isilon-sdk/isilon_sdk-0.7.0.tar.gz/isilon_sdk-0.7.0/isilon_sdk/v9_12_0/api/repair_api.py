# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from isilon_sdk.v9_12_0.api_client import ApiClient


class RepairApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_repair_action(self, repair_action, **kwargs):  # noqa: E501
        """create_repair_action  # noqa: E501

        Install a repair action package.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repair_action(repair_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepairActionCreateParams repair_action: (required)
        :param bool skip_conflict_check: Bypass conflict checks. Defaults to false.
        :param bool skip_dependency_check: Bypass dependency checks. Defaults to false.
        :param bool skip_restricted_check: Bypass restricted checks. Defaults to false.
        :param bool skip_version_check: Bypass version checks. Defaults to false.
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_repair_action_with_http_info(repair_action, **kwargs)  # noqa: E501
        else:
            (data) = self.create_repair_action_with_http_info(repair_action, **kwargs)  # noqa: E501
            return data

    def create_repair_action_with_http_info(self, repair_action, **kwargs):  # noqa: E501
        """create_repair_action  # noqa: E501

        Install a repair action package.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repair_action_with_http_info(repair_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepairActionCreateParams repair_action: (required)
        :param bool skip_conflict_check: Bypass conflict checks. Defaults to false.
        :param bool skip_dependency_check: Bypass dependency checks. Defaults to false.
        :param bool skip_restricted_check: Bypass restricted checks. Defaults to false.
        :param bool skip_version_check: Bypass version checks. Defaults to false.
        :return: CreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repair_action', 'skip_conflict_check', 'skip_dependency_check', 'skip_restricted_check', 'skip_version_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repair_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repair_action' is set
        if ('repair_action' not in params or
                params['repair_action'] is None):
            raise ValueError("Missing the required parameter `repair_action` when calling `create_repair_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip_conflict_check' in params:
            query_params.append(('skip_conflict_check', params['skip_conflict_check']))  # noqa: E501
        if 'skip_dependency_check' in params:
            query_params.append(('skip_dependency_check', params['skip_dependency_check']))  # noqa: E501
        if 'skip_restricted_check' in params:
            query_params.append(('skip_restricted_check', params['skip_restricted_check']))  # noqa: E501
        if 'skip_version_check' in params:
            query_params.append(('skip_version_check', params['skip_version_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'repair_action' in params:
            body_params = params['repair_action']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/repair/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_repair_request(self, repair_request, **kwargs):  # noqa: E501
        """create_repair_request  # noqa: E501

        Request a repair.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repair_request(repair_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepairRequest repair_request: (required)
        :return: CreateRepairRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_repair_request_with_http_info(repair_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_repair_request_with_http_info(repair_request, **kwargs)  # noqa: E501
            return data

    def create_repair_request_with_http_info(self, repair_request, **kwargs):  # noqa: E501
        """create_repair_request  # noqa: E501

        Request a repair.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repair_request_with_http_info(repair_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepairRequest repair_request: (required)
        :return: CreateRepairRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repair_request']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repair_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repair_request' is set
        if ('repair_request' not in params or
                params['repair_request'] is None):
            raise ValueError("Missing the required parameter `repair_request` when calling `create_repair_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'repair_request' in params:
            body_params = params['repair_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/repair/requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateRepairRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_repair_action(self, repair_action_id, **kwargs):  # noqa: E501
        """delete_repair_action  # noqa: E501

        Uninstall a repair-action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_repair_action(repair_action_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repair_action_id: Uninstall a repair-action. (required)
        :param str process_type: Process type can be 'simultaneous', 'rolling', or 'parallel'
        :param bool skip_conflict_check: Bypass conflict checks. Defaults to false.
        :param bool skip_dependency_check: Bypass dependency checks. Defaults to false.
        :param bool skip_restricted_check: Bypass restricted checks. Defaults to false.
        :param bool skip_version_check: Bypass version checks. Defaults to false.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_repair_action_with_http_info(repair_action_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_repair_action_with_http_info(repair_action_id, **kwargs)  # noqa: E501
            return data

    def delete_repair_action_with_http_info(self, repair_action_id, **kwargs):  # noqa: E501
        """delete_repair_action  # noqa: E501

        Uninstall a repair-action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_repair_action_with_http_info(repair_action_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repair_action_id: Uninstall a repair-action. (required)
        :param str process_type: Process type can be 'simultaneous', 'rolling', or 'parallel'
        :param bool skip_conflict_check: Bypass conflict checks. Defaults to false.
        :param bool skip_dependency_check: Bypass dependency checks. Defaults to false.
        :param bool skip_restricted_check: Bypass restricted checks. Defaults to false.
        :param bool skip_version_check: Bypass version checks. Defaults to false.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repair_action_id', 'process_type', 'skip_conflict_check', 'skip_dependency_check', 'skip_restricted_check', 'skip_version_check']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_repair_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repair_action_id' is set
        if ('repair_action_id' not in params or
                params['repair_action_id'] is None):
            raise ValueError("Missing the required parameter `repair_action_id` when calling `delete_repair_action`")  # noqa: E501

        if ('process_type' in params and
                len(params['process_type']) > 255):
            raise ValueError("Invalid value for parameter `process_type` when calling `delete_repair_action`, length must be less than or equal to `255`")  # noqa: E501
        if ('process_type' in params and
                len(params['process_type']) < 6):
            raise ValueError("Invalid value for parameter `process_type` when calling `delete_repair_action`, length must be greater than or equal to `6`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'repair_action_id' in params:
            path_params['RepairActionId'] = params['repair_action_id']  # noqa: E501

        query_params = []
        if 'process_type' in params:
            query_params.append(('process_type', params['process_type']))  # noqa: E501
        if 'skip_conflict_check' in params:
            query_params.append(('skip_conflict_check', params['skip_conflict_check']))  # noqa: E501
        if 'skip_dependency_check' in params:
            query_params.append(('skip_dependency_check', params['skip_dependency_check']))  # noqa: E501
        if 'skip_restricted_check' in params:
            query_params.append(('skip_restricted_check', params['skip_restricted_check']))  # noqa: E501
        if 'skip_version_check' in params:
            query_params.append(('skip_version_check', params['skip_version_check']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/repair/actions/{RepairActionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_repair_action(self, repair_action_id, **kwargs):  # noqa: E501
        """get_repair_action  # noqa: E501

        View a single repair-action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repair_action(repair_action_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repair_action_id: View a single repair-action. (required)
        :param bool local: View repair-action information on local node only.
        :param str location: Path location of repair-action file.
        :return: RepairActions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_repair_action_with_http_info(repair_action_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_repair_action_with_http_info(repair_action_id, **kwargs)  # noqa: E501
            return data

    def get_repair_action_with_http_info(self, repair_action_id, **kwargs):  # noqa: E501
        """get_repair_action  # noqa: E501

        View a single repair-action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repair_action_with_http_info(repair_action_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repair_action_id: View a single repair-action. (required)
        :param bool local: View repair-action information on local node only.
        :param str location: Path location of repair-action file.
        :return: RepairActions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repair_action_id', 'local', 'location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repair_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repair_action_id' is set
        if ('repair_action_id' not in params or
                params['repair_action_id'] is None):
            raise ValueError("Missing the required parameter `repair_action_id` when calling `get_repair_action`")  # noqa: E501

        if ('location' in params and
                len(params['location']) > 4096):
            raise ValueError("Invalid value for parameter `location` when calling `get_repair_action`, length must be less than or equal to `4096`")  # noqa: E501
        if ('location' in params and
                len(params['location']) < 0):
            raise ValueError("Invalid value for parameter `location` when calling `get_repair_action`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'repair_action_id' in params:
            path_params['RepairActionId'] = params['repair_action_id']  # noqa: E501

        query_params = []
        if 'local' in params:
            query_params.append(('local', params['local']))  # noqa: E501
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/repair/actions/{RepairActionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepairActions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_repair_request(self, repair_request_id, **kwargs):  # noqa: E501
        """get_repair_request  # noqa: E501

        Retrieve the repair.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repair_request(repair_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repair_request_id: Retrieve the repair. (required)
        :return: RepairRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_repair_request_with_http_info(repair_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_repair_request_with_http_info(repair_request_id, **kwargs)  # noqa: E501
            return data

    def get_repair_request_with_http_info(self, repair_request_id, **kwargs):  # noqa: E501
        """get_repair_request  # noqa: E501

        Retrieve the repair.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repair_request_with_http_info(repair_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repair_request_id: Retrieve the repair. (required)
        :return: RepairRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repair_request_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repair_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repair_request_id' is set
        if ('repair_request_id' not in params or
                params['repair_request_id'] is None):
            raise ValueError("Missing the required parameter `repair_request_id` when calling `get_repair_request`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repair_request_id' in params:
            path_params['RepairRequestId'] = params['repair_request_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/repair/requests/{RepairRequestId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepairRequests',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_repair_settings(self, **kwargs):  # noqa: E501
        """get_repair_settings  # noqa: E501

        List the repair settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repair_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RepairSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_repair_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_repair_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_repair_settings_with_http_info(self, **kwargs):  # noqa: E501
        """get_repair_settings  # noqa: E501

        List the repair settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_repair_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: RepairSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_repair_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/repair/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepairSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_repair_actions(self, **kwargs):  # noqa: E501
        """list_repair_actions  # noqa: E501

        List all repair actions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repair_actions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dir: The direction of the sort.
        :param int limit: Return no more than this many results at once (see resume).
        :param bool local: View repair actions on the local node only.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str sort: The field that will be used for sorting.
        :return: RepairActionsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_repair_actions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_repair_actions_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_repair_actions_with_http_info(self, **kwargs):  # noqa: E501
        """list_repair_actions  # noqa: E501

        List all repair actions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repair_actions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dir: The direction of the sort.
        :param int limit: Return no more than this many results at once (see resume).
        :param bool local: View repair actions on the local node only.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str sort: The field that will be used for sorting.
        :return: RepairActionsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dir', 'limit', 'local', 'resume', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_repair_actions" % key
                )
            params[key] = val
        del params['kwargs']

        if ('dir' in params and
                len(params['dir']) < 0):
            raise ValueError("Invalid value for parameter `dir` when calling `list_repair_actions`, length must be greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_repair_actions`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_repair_actions`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('resume' in params and
                len(params['resume']) > 8192):
            raise ValueError("Invalid value for parameter `resume` when calling `list_repair_actions`, length must be less than or equal to `8192`")  # noqa: E501
        if ('resume' in params and
                len(params['resume']) < 0):
            raise ValueError("Invalid value for parameter `resume` when calling `list_repair_actions`, length must be greater than or equal to `0`")  # noqa: E501
        if ('sort' in params and
                len(params['sort']) > 255):
            raise ValueError("Invalid value for parameter `sort` when calling `list_repair_actions`, length must be less than or equal to `255`")  # noqa: E501
        if ('sort' in params and
                len(params['sort']) < 0):
            raise ValueError("Invalid value for parameter `sort` when calling `list_repair_actions`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dir' in params:
            query_params.append(('dir', params['dir']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'local' in params:
            query_params.append(('local', params['local']))  # noqa: E501
        if 'resume' in params:
            query_params.append(('resume', params['resume']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/repair/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepairActionsExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_repair_requests(self, **kwargs):  # noqa: E501
        """list_repair_requests  # noqa: E501

        Get repair results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repair_requests(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dir: The direction of the sort.
        :param bool latest: Returns only the latest repair.
        :param int limit: Return no more than this many results at once (see resume).
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str sort: The field that will be used for sorting.
        :return: RepairRequestsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_repair_requests_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_repair_requests_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_repair_requests_with_http_info(self, **kwargs):  # noqa: E501
        """list_repair_requests  # noqa: E501

        Get repair results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repair_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dir: The direction of the sort.
        :param bool latest: Returns only the latest repair.
        :param int limit: Return no more than this many results at once (see resume).
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str sort: The field that will be used for sorting.
        :return: RepairRequestsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dir', 'latest', 'limit', 'resume', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_repair_requests" % key
                )
            params[key] = val
        del params['kwargs']

        if ('dir' in params and
                len(params['dir']) < 0):
            raise ValueError("Invalid value for parameter `dir` when calling `list_repair_requests`, length must be greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_repair_requests`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_repair_requests`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('resume' in params and
                len(params['resume']) > 8192):
            raise ValueError("Invalid value for parameter `resume` when calling `list_repair_requests`, length must be less than or equal to `8192`")  # noqa: E501
        if ('resume' in params and
                len(params['resume']) < 0):
            raise ValueError("Invalid value for parameter `resume` when calling `list_repair_requests`, length must be greater than or equal to `0`")  # noqa: E501
        if ('sort' in params and
                len(params['sort']) > 255):
            raise ValueError("Invalid value for parameter `sort` when calling `list_repair_requests`, length must be less than or equal to `255`")  # noqa: E501
        if ('sort' in params and
                len(params['sort']) < 0):
            raise ValueError("Invalid value for parameter `sort` when calling `list_repair_requests`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dir' in params:
            query_params.append(('dir', params['dir']))  # noqa: E501
        if 'latest' in params:
            query_params.append(('latest', params['latest']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'resume' in params:
            query_params.append(('resume', params['resume']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/repair/requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepairRequestsExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_repair_settings(self, repair_settings, **kwargs):  # noqa: E501
        """update_repair_settings  # noqa: E501

        Update one or more repair settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repair_settings(repair_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepairSettings repair_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_repair_settings_with_http_info(repair_settings, **kwargs)  # noqa: E501
        else:
            (data) = self.update_repair_settings_with_http_info(repair_settings, **kwargs)  # noqa: E501
            return data

    def update_repair_settings_with_http_info(self, repair_settings, **kwargs):  # noqa: E501
        """update_repair_settings  # noqa: E501

        Update one or more repair settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repair_settings_with_http_info(repair_settings, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RepairSettings repair_settings: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repair_settings']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repair_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repair_settings' is set
        if ('repair_settings' not in params or
                params['repair_settings'] is None):
            raise ValueError("Missing the required parameter `repair_settings` when calling `update_repair_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'repair_settings' in params:
            body_params = params['repair_settings']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/repair/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
