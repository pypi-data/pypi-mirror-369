# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MpaTrustAnchorsCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_name': 'str',
        'cert_type': 'str',
        'expiry_date': 'int',
        'issued_by': 'str',
        'issued_date': 'int',
        'serial_number': 'str'
    }

    attribute_map = {
        'cert_name': 'cert_name',
        'cert_type': 'cert_type',
        'expiry_date': 'expiry_date',
        'issued_by': 'issued_by',
        'issued_date': 'issued_date',
        'serial_number': 'serial_number'
    }

    def __init__(self, cert_name=None, cert_type=None, expiry_date=None, issued_by=None, issued_date=None, serial_number=None):  # noqa: E501
        """MpaTrustAnchorsCertificate - a model defined in Swagger"""  # noqa: E501

        self._cert_name = None
        self._cert_type = None
        self._expiry_date = None
        self._issued_by = None
        self._issued_date = None
        self._serial_number = None
        self.discriminator = None

        if cert_name is not None:
            self.cert_name = cert_name
        self.cert_type = cert_type
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if issued_by is not None:
            self.issued_by = issued_by
        if issued_date is not None:
            self.issued_date = issued_date
        if serial_number is not None:
            self.serial_number = serial_number

    @property
    def cert_name(self):
        """Gets the cert_name of this MpaTrustAnchorsCertificate.  # noqa: E501

        Name of trusted root CA certificate.  # noqa: E501

        :return: The cert_name of this MpaTrustAnchorsCertificate.  # noqa: E501
        :rtype: str
        """
        return self._cert_name

    @cert_name.setter
    def cert_name(self, cert_name):
        """Sets the cert_name of this MpaTrustAnchorsCertificate.

        Name of trusted root CA certificate.  # noqa: E501

        :param cert_name: The cert_name of this MpaTrustAnchorsCertificate.  # noqa: E501
        :type: str
        """
        if cert_name is not None and len(cert_name) > 255:
            raise ValueError("Invalid value for `cert_name`, length must be less than or equal to `255`")  # noqa: E501
        if cert_name is not None and len(cert_name) < 1:
            raise ValueError("Invalid value for `cert_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._cert_name = cert_name

    @property
    def cert_type(self):
        """Gets the cert_type of this MpaTrustAnchorsCertificate.  # noqa: E501

        Type of trust anchor certificate.  # noqa: E501

        :return: The cert_type of this MpaTrustAnchorsCertificate.  # noqa: E501
        :rtype: str
        """
        return self._cert_type

    @cert_type.setter
    def cert_type(self, cert_type):
        """Sets the cert_type of this MpaTrustAnchorsCertificate.

        Type of trust anchor certificate.  # noqa: E501

        :param cert_type: The cert_type of this MpaTrustAnchorsCertificate.  # noqa: E501
        :type: str
        """
        if cert_type is None:
            raise ValueError("Invalid value for `cert_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Digital_Sign"]  # noqa: E501
        if cert_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cert_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cert_type, allowed_values)
            )

        self._cert_type = cert_type

    @property
    def expiry_date(self):
        """Gets the expiry_date of this MpaTrustAnchorsCertificate.  # noqa: E501

        Unix epoch time format.  # noqa: E501

        :return: The expiry_date of this MpaTrustAnchorsCertificate.  # noqa: E501
        :rtype: int
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this MpaTrustAnchorsCertificate.

        Unix epoch time format.  # noqa: E501

        :param expiry_date: The expiry_date of this MpaTrustAnchorsCertificate.  # noqa: E501
        :type: int
        """
        if expiry_date is not None and expiry_date > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `expiry_date`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if expiry_date is not None and expiry_date < 0:  # noqa: E501
            raise ValueError("Invalid value for `expiry_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._expiry_date = expiry_date

    @property
    def issued_by(self):
        """Gets the issued_by of this MpaTrustAnchorsCertificate.  # noqa: E501

        Issuer of the trusted root CA certificate.  # noqa: E501

        :return: The issued_by of this MpaTrustAnchorsCertificate.  # noqa: E501
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by):
        """Sets the issued_by of this MpaTrustAnchorsCertificate.

        Issuer of the trusted root CA certificate.  # noqa: E501

        :param issued_by: The issued_by of this MpaTrustAnchorsCertificate.  # noqa: E501
        :type: str
        """
        if issued_by is not None and len(issued_by) > 255:
            raise ValueError("Invalid value for `issued_by`, length must be less than or equal to `255`")  # noqa: E501
        if issued_by is not None and len(issued_by) < 1:
            raise ValueError("Invalid value for `issued_by`, length must be greater than or equal to `1`")  # noqa: E501

        self._issued_by = issued_by

    @property
    def issued_date(self):
        """Gets the issued_date of this MpaTrustAnchorsCertificate.  # noqa: E501

        Unix epoch time format.  # noqa: E501

        :return: The issued_date of this MpaTrustAnchorsCertificate.  # noqa: E501
        :rtype: int
        """
        return self._issued_date

    @issued_date.setter
    def issued_date(self, issued_date):
        """Sets the issued_date of this MpaTrustAnchorsCertificate.

        Unix epoch time format.  # noqa: E501

        :param issued_date: The issued_date of this MpaTrustAnchorsCertificate.  # noqa: E501
        :type: int
        """
        if issued_date is not None and issued_date > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `issued_date`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if issued_date is not None and issued_date < 0:  # noqa: E501
            raise ValueError("Invalid value for `issued_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._issued_date = issued_date

    @property
    def serial_number(self):
        """Gets the serial_number of this MpaTrustAnchorsCertificate.  # noqa: E501

        Serial Number of the Uploaded certificate.  # noqa: E501

        :return: The serial_number of this MpaTrustAnchorsCertificate.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this MpaTrustAnchorsCertificate.

        Serial Number of the Uploaded certificate.  # noqa: E501

        :param serial_number: The serial_number of this MpaTrustAnchorsCertificate.  # noqa: E501
        :type: str
        """
        if serial_number is not None and len(serial_number) > 255:
            raise ValueError("Invalid value for `serial_number`, length must be less than or equal to `255`")  # noqa: E501
        if serial_number is not None and len(serial_number) < 1:
            raise ValueError("Invalid value for `serial_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._serial_number = serial_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpaTrustAnchorsCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpaTrustAnchorsCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
