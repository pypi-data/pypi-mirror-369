# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PackagePackageFilelistItemFilechecksumlistItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_checksum': 'str',
        'file_checksum_type': 'str'
    }

    attribute_map = {
        'file_checksum': 'fileChecksum',
        'file_checksum_type': 'fileChecksumType'
    }

    def __init__(self, file_checksum=None, file_checksum_type=None):  # noqa: E501
        """PackagePackageFilelistItemFilechecksumlistItem - a model defined in Swagger"""  # noqa: E501

        self._file_checksum = None
        self._file_checksum_type = None
        self.discriminator = None

        self.file_checksum = file_checksum
        self.file_checksum_type = file_checksum_type

    @property
    def file_checksum(self):
        """Gets the file_checksum of this PackagePackageFilelistItemFilechecksumlistItem.  # noqa: E501

        The file hash digest value of the upgrade package.  # noqa: E501

        :return: The file_checksum of this PackagePackageFilelistItemFilechecksumlistItem.  # noqa: E501
        :rtype: str
        """
        return self._file_checksum

    @file_checksum.setter
    def file_checksum(self, file_checksum):
        """Sets the file_checksum of this PackagePackageFilelistItemFilechecksumlistItem.

        The file hash digest value of the upgrade package.  # noqa: E501

        :param file_checksum: The file_checksum of this PackagePackageFilelistItemFilechecksumlistItem.  # noqa: E501
        :type: str
        """
        if file_checksum is None:
            raise ValueError("Invalid value for `file_checksum`, must not be `None`")  # noqa: E501
        if file_checksum is not None and len(file_checksum) > 255:
            raise ValueError("Invalid value for `file_checksum`, length must be less than or equal to `255`")  # noqa: E501
        if file_checksum is not None and len(file_checksum) < 1:
            raise ValueError("Invalid value for `file_checksum`, length must be greater than or equal to `1`")  # noqa: E501

        self._file_checksum = file_checksum

    @property
    def file_checksum_type(self):
        """Gets the file_checksum_type of this PackagePackageFilelistItemFilechecksumlistItem.  # noqa: E501

        The file hash digest type of the upgrade package.  # noqa: E501

        :return: The file_checksum_type of this PackagePackageFilelistItemFilechecksumlistItem.  # noqa: E501
        :rtype: str
        """
        return self._file_checksum_type

    @file_checksum_type.setter
    def file_checksum_type(self, file_checksum_type):
        """Sets the file_checksum_type of this PackagePackageFilelistItemFilechecksumlistItem.

        The file hash digest type of the upgrade package.  # noqa: E501

        :param file_checksum_type: The file_checksum_type of this PackagePackageFilelistItemFilechecksumlistItem.  # noqa: E501
        :type: str
        """
        if file_checksum_type is None:
            raise ValueError("Invalid value for `file_checksum_type`, must not be `None`")  # noqa: E501
        if file_checksum_type is not None and len(file_checksum_type) > 255:
            raise ValueError("Invalid value for `file_checksum_type`, length must be less than or equal to `255`")  # noqa: E501
        if file_checksum_type is not None and len(file_checksum_type) < 1:
            raise ValueError("Invalid value for `file_checksum_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._file_checksum_type = file_checksum_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackagePackageFilelistItemFilechecksumlistItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackagePackageFilelistItemFilechecksumlistItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
