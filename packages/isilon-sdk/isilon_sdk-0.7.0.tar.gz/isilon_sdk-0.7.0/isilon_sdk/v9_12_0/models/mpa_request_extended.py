# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MpaRequestExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'action_payload': 'list[MpaRequestActionPayloadItem]',
        'approvals': 'list[MpaRequestApproval]',
        'cluster_guid': 'str',
        'created_by': 'str',
        'creation_time': 'int',
        'id': 'str',
        'last_update_time': 'int',
        'request_for': 'str',
        'resource_ids': 'list[str]',
        'resource_type': 'str',
        'service': 'str',
        'status': 'str',
        'system_created': 'bool',
        'zone_id': 'int'
    }

    attribute_map = {
        'action': 'action',
        'action_payload': 'action_payload',
        'approvals': 'approvals',
        'cluster_guid': 'cluster_guid',
        'created_by': 'created_by',
        'creation_time': 'creation_time',
        'id': 'id',
        'last_update_time': 'last_update_time',
        'request_for': 'request_for',
        'resource_ids': 'resource_ids',
        'resource_type': 'resource_type',
        'service': 'service',
        'status': 'status',
        'system_created': 'system_created',
        'zone_id': 'zone_id'
    }

    def __init__(self, action=None, action_payload=None, approvals=None, cluster_guid=None, created_by=None, creation_time=None, id=None, last_update_time=None, request_for=None, resource_ids=None, resource_type=None, service=None, status=None, system_created=None, zone_id=None):  # noqa: E501
        """MpaRequestExtended - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._action_payload = None
        self._approvals = None
        self._cluster_guid = None
        self._created_by = None
        self._creation_time = None
        self._id = None
        self._last_update_time = None
        self._request_for = None
        self._resource_ids = None
        self._resource_type = None
        self._service = None
        self._status = None
        self._system_created = None
        self._zone_id = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if action_payload is not None:
            self.action_payload = action_payload
        if approvals is not None:
            self.approvals = approvals
        self.cluster_guid = cluster_guid
        if created_by is not None:
            self.created_by = created_by
        if creation_time is not None:
            self.creation_time = creation_time
        if id is not None:
            self.id = id
        if last_update_time is not None:
            self.last_update_time = last_update_time
        if request_for is not None:
            self.request_for = request_for
        if resource_ids is not None:
            self.resource_ids = resource_ids
        if resource_type is not None:
            self.resource_type = resource_type
        if service is not None:
            self.service = service
        if status is not None:
            self.status = status
        self.system_created = system_created
        self.zone_id = zone_id

    @property
    def action(self):
        """Gets the action of this MpaRequestExtended.  # noqa: E501

        Name of privileged action  # noqa: E501

        :return: The action of this MpaRequestExtended.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this MpaRequestExtended.

        Name of privileged action  # noqa: E501

        :param action: The action of this MpaRequestExtended.  # noqa: E501
        :type: str
        """
        if action is not None and len(action) > 255:
            raise ValueError("Invalid value for `action`, length must be less than or equal to `255`")  # noqa: E501
        if action is not None and len(action) < 1:
            raise ValueError("Invalid value for `action`, length must be greater than or equal to `1`")  # noqa: E501
        if action is not None and not re.search('^[a-zA-Z0-9_-]+$', action):  # noqa: E501
            raise ValueError(r"Invalid value for `action`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501

        self._action = action

    @property
    def action_payload(self):
        """Gets the action_payload of this MpaRequestExtended.  # noqa: E501

        set of key/value pairs for privileged action payload  # noqa: E501

        :return: The action_payload of this MpaRequestExtended.  # noqa: E501
        :rtype: list[MpaRequestActionPayloadItem]
        """
        return self._action_payload

    @action_payload.setter
    def action_payload(self, action_payload):
        """Sets the action_payload of this MpaRequestExtended.

        set of key/value pairs for privileged action payload  # noqa: E501

        :param action_payload: The action_payload of this MpaRequestExtended.  # noqa: E501
        :type: list[MpaRequestActionPayloadItem]
        """

        self._action_payload = action_payload

    @property
    def approvals(self):
        """Gets the approvals of this MpaRequestExtended.  # noqa: E501


        :return: The approvals of this MpaRequestExtended.  # noqa: E501
        :rtype: list[MpaRequestApproval]
        """
        return self._approvals

    @approvals.setter
    def approvals(self, approvals):
        """Sets the approvals of this MpaRequestExtended.


        :param approvals: The approvals of this MpaRequestExtended.  # noqa: E501
        :type: list[MpaRequestApproval]
        """

        self._approvals = approvals

    @property
    def cluster_guid(self):
        """Gets the cluster_guid of this MpaRequestExtended.  # noqa: E501

        Cluster GUID.  # noqa: E501

        :return: The cluster_guid of this MpaRequestExtended.  # noqa: E501
        :rtype: str
        """
        return self._cluster_guid

    @cluster_guid.setter
    def cluster_guid(self, cluster_guid):
        """Sets the cluster_guid of this MpaRequestExtended.

        Cluster GUID.  # noqa: E501

        :param cluster_guid: The cluster_guid of this MpaRequestExtended.  # noqa: E501
        :type: str
        """
        if cluster_guid is None:
            raise ValueError("Invalid value for `cluster_guid`, must not be `None`")  # noqa: E501

        self._cluster_guid = cluster_guid

    @property
    def created_by(self):
        """Gets the created_by of this MpaRequestExtended.  # noqa: E501


        :return: The created_by of this MpaRequestExtended.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MpaRequestExtended.


        :param created_by: The created_by of this MpaRequestExtended.  # noqa: E501
        :type: str
        """
        if created_by is not None and len(created_by) > 255:
            raise ValueError("Invalid value for `created_by`, length must be less than or equal to `255`")  # noqa: E501
        if created_by is not None and len(created_by) < 1:
            raise ValueError("Invalid value for `created_by`, length must be greater than or equal to `1`")  # noqa: E501
        if created_by is not None and not re.search('^[^]\"\/\\[\\:;|=,+*?<>$]+', created_by):  # noqa: E501
            raise ValueError(r"Invalid value for `created_by`, must be a follow pattern or equal to `/^[^]\"\/\\[\\:;|=,+*?<>$]+/`")  # noqa: E501

        self._created_by = created_by

    @property
    def creation_time(self):
        """Gets the creation_time of this MpaRequestExtended.  # noqa: E501

        Unix epoch time format.  # noqa: E501

        :return: The creation_time of this MpaRequestExtended.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this MpaRequestExtended.

        Unix epoch time format.  # noqa: E501

        :param creation_time: The creation_time of this MpaRequestExtended.  # noqa: E501
        :type: int
        """
        if creation_time is not None and creation_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `creation_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if creation_time is not None and creation_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `creation_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def id(self):
        """Gets the id of this MpaRequestExtended.  # noqa: E501

        Unique ID of MPA request.  # noqa: E501

        :return: The id of this MpaRequestExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MpaRequestExtended.

        Unique ID of MPA request.  # noqa: E501

        :param id: The id of this MpaRequestExtended.  # noqa: E501
        :type: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def last_update_time(self):
        """Gets the last_update_time of this MpaRequestExtended.  # noqa: E501

        Unix epoch time format.  # noqa: E501

        :return: The last_update_time of this MpaRequestExtended.  # noqa: E501
        :rtype: int
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this MpaRequestExtended.

        Unix epoch time format.  # noqa: E501

        :param last_update_time: The last_update_time of this MpaRequestExtended.  # noqa: E501
        :type: int
        """
        if last_update_time is not None and last_update_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `last_update_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if last_update_time is not None and last_update_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `last_update_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._last_update_time = last_update_time

    @property
    def request_for(self):
        """Gets the request_for of this MpaRequestExtended.  # noqa: E501


        :return: The request_for of this MpaRequestExtended.  # noqa: E501
        :rtype: str
        """
        return self._request_for

    @request_for.setter
    def request_for(self, request_for):
        """Sets the request_for of this MpaRequestExtended.


        :param request_for: The request_for of this MpaRequestExtended.  # noqa: E501
        :type: str
        """
        if request_for is not None and len(request_for) > 255:
            raise ValueError("Invalid value for `request_for`, length must be less than or equal to `255`")  # noqa: E501
        if request_for is not None and len(request_for) < 1:
            raise ValueError("Invalid value for `request_for`, length must be greater than or equal to `1`")  # noqa: E501
        if request_for is not None and not re.search('^[^]\"\/\\[\\:;|=,+*?<>$]+', request_for):  # noqa: E501
            raise ValueError(r"Invalid value for `request_for`, must be a follow pattern or equal to `/^[^]\"\/\\[\\:;|=,+*?<>$]+/`")  # noqa: E501

        self._request_for = request_for

    @property
    def resource_ids(self):
        """Gets the resource_ids of this MpaRequestExtended.  # noqa: E501

        List of resources IDs requested for approval; optional.  # noqa: E501

        :return: The resource_ids of this MpaRequestExtended.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this MpaRequestExtended.

        List of resources IDs requested for approval; optional.  # noqa: E501

        :param resource_ids: The resource_ids of this MpaRequestExtended.  # noqa: E501
        :type: list[str]
        """

        self._resource_ids = resource_ids

    @property
    def resource_type(self):
        """Gets the resource_type of this MpaRequestExtended.  # noqa: E501

        Type of resource requested for approval; optional.  # noqa: E501

        :return: The resource_type of this MpaRequestExtended.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MpaRequestExtended.

        Type of resource requested for approval; optional.  # noqa: E501

        :param resource_type: The resource_type of this MpaRequestExtended.  # noqa: E501
        :type: str
        """
        if resource_type is not None and len(resource_type) > 255:
            raise ValueError("Invalid value for `resource_type`, length must be less than or equal to `255`")  # noqa: E501
        if resource_type is not None and len(resource_type) < 1:
            raise ValueError("Invalid value for `resource_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def service(self):
        """Gets the service of this MpaRequestExtended.  # noqa: E501

        Name of service or component in system that owns the privileged action  # noqa: E501

        :return: The service of this MpaRequestExtended.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this MpaRequestExtended.

        Name of service or component in system that owns the privileged action  # noqa: E501

        :param service: The service of this MpaRequestExtended.  # noqa: E501
        :type: str
        """
        if service is not None and len(service) > 255:
            raise ValueError("Invalid value for `service`, length must be less than or equal to `255`")  # noqa: E501
        if service is not None and len(service) < 1:
            raise ValueError("Invalid value for `service`, length must be greater than or equal to `1`")  # noqa: E501
        if service is not None and not re.search('^[a-zA-Z0-9_-]+$', service):  # noqa: E501
            raise ValueError(r"Invalid value for `service`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501

        self._service = service

    @property
    def status(self):
        """Gets the status of this MpaRequestExtended.  # noqa: E501

        status of MPA request  # noqa: E501

        :return: The status of this MpaRequestExtended.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MpaRequestExtended.

        status of MPA request  # noqa: E501

        :param status: The status of this MpaRequestExtended.  # noqa: E501
        :type: str
        """
        allowed_values = ["approved", "cancelled", "completed", "pending", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def system_created(self):
        """Gets the system_created of this MpaRequestExtended.  # noqa: E501

        A privileged action approval request was created by the system.  # noqa: E501

        :return: The system_created of this MpaRequestExtended.  # noqa: E501
        :rtype: bool
        """
        return self._system_created

    @system_created.setter
    def system_created(self, system_created):
        """Sets the system_created of this MpaRequestExtended.

        A privileged action approval request was created by the system.  # noqa: E501

        :param system_created: The system_created of this MpaRequestExtended.  # noqa: E501
        :type: bool
        """
        if system_created is None:
            raise ValueError("Invalid value for `system_created`, must not be `None`")  # noqa: E501

        self._system_created = system_created

    @property
    def zone_id(self):
        """Gets the zone_id of this MpaRequestExtended.  # noqa: E501

        Zone id of MPA request created.  # noqa: E501

        :return: The zone_id of this MpaRequestExtended.  # noqa: E501
        :rtype: int
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this MpaRequestExtended.

        Zone id of MPA request created.  # noqa: E501

        :param zone_id: The zone_id of this MpaRequestExtended.  # noqa: E501
        :type: int
        """
        if zone_id is None:
            raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501
        if zone_id is not None and zone_id > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `zone_id`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if zone_id is not None and zone_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `zone_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._zone_id = zone_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpaRequestExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpaRequestExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
