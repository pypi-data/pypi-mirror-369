# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class S3ObjectsObjectData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'commit_date': 'int',
        'domain_id': 'int',
        'domain_path': 'str',
        'immutable': 'bool',
        'retention_date': 'int',
        'worm_committed': 'bool'
    }

    attribute_map = {
        'commit_date': 'commit_date',
        'domain_id': 'domain_id',
        'domain_path': 'domain_path',
        'immutable': 'immutable',
        'retention_date': 'retention_date',
        'worm_committed': 'worm_committed'
    }

    def __init__(self, commit_date=None, domain_id=None, domain_path=None, immutable=None, retention_date=None, worm_committed=None):  # noqa: E501
        """S3ObjectsObjectData - a model defined in Swagger"""  # noqa: E501

        self._commit_date = None
        self._domain_id = None
        self._domain_path = None
        self._immutable = None
        self._retention_date = None
        self._worm_committed = None
        self.discriminator = None

        if commit_date is not None:
            self.commit_date = commit_date
        if domain_id is not None:
            self.domain_id = domain_id
        if domain_path is not None:
            self.domain_path = domain_path
        if immutable is not None:
            self.immutable = immutable
        if retention_date is not None:
            self.retention_date = retention_date
        if worm_committed is not None:
            self.worm_committed = worm_committed

    @property
    def commit_date(self):
        """Gets the commit_date of this S3ObjectsObjectData.  # noqa: E501

        Date (in seconds) when the file was locked.  # noqa: E501

        :return: The commit_date of this S3ObjectsObjectData.  # noqa: E501
        :rtype: int
        """
        return self._commit_date

    @commit_date.setter
    def commit_date(self, commit_date):
        """Sets the commit_date of this S3ObjectsObjectData.

        Date (in seconds) when the file was locked.  # noqa: E501

        :param commit_date: The commit_date of this S3ObjectsObjectData.  # noqa: E501
        :type: int
        """
        if commit_date is not None and commit_date > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `commit_date`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if commit_date is not None and commit_date < 0:  # noqa: E501
            raise ValueError("Invalid value for `commit_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._commit_date = commit_date

    @property
    def domain_id(self):
        """Gets the domain_id of this S3ObjectsObjectData.  # noqa: E501

        Domain ID of the OBJLOCK domain.  # noqa: E501

        :return: The domain_id of this S3ObjectsObjectData.  # noqa: E501
        :rtype: int
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this S3ObjectsObjectData.

        Domain ID of the OBJLOCK domain.  # noqa: E501

        :param domain_id: The domain_id of this S3ObjectsObjectData.  # noqa: E501
        :type: int
        """
        if domain_id is not None and domain_id > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `domain_id`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if domain_id is not None and domain_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `domain_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._domain_id = domain_id

    @property
    def domain_path(self):
        """Gets the domain_path of this S3ObjectsObjectData.  # noqa: E501

        Specifies the S3 objlock domain path.  # noqa: E501

        :return: The domain_path of this S3ObjectsObjectData.  # noqa: E501
        :rtype: str
        """
        return self._domain_path

    @domain_path.setter
    def domain_path(self, domain_path):
        """Sets the domain_path of this S3ObjectsObjectData.

        Specifies the S3 objlock domain path.  # noqa: E501

        :param domain_path: The domain_path of this S3ObjectsObjectData.  # noqa: E501
        :type: str
        """
        if domain_path is not None and len(domain_path) > 4096:
            raise ValueError("Invalid value for `domain_path`, length must be less than or equal to `4096`")  # noqa: E501
        if domain_path is not None and len(domain_path) < 1:
            raise ValueError("Invalid value for `domain_path`, length must be greater than or equal to `1`")  # noqa: E501

        self._domain_path = domain_path

    @property
    def immutable(self):
        """Gets the immutable of this S3ObjectsObjectData.  # noqa: E501

        Indicates whether domain is Bucket Locked.  # noqa: E501

        :return: The immutable of this S3ObjectsObjectData.  # noqa: E501
        :rtype: bool
        """
        return self._immutable

    @immutable.setter
    def immutable(self, immutable):
        """Sets the immutable of this S3ObjectsObjectData.

        Indicates whether domain is Bucket Locked.  # noqa: E501

        :param immutable: The immutable of this S3ObjectsObjectData.  # noqa: E501
        :type: bool
        """

        self._immutable = immutable

    @property
    def retention_date(self):
        """Gets the retention_date of this S3ObjectsObjectData.  # noqa: E501

        Date (in seconds) until when the file will be locked.  # noqa: E501

        :return: The retention_date of this S3ObjectsObjectData.  # noqa: E501
        :rtype: int
        """
        return self._retention_date

    @retention_date.setter
    def retention_date(self, retention_date):
        """Sets the retention_date of this S3ObjectsObjectData.

        Date (in seconds) until when the file will be locked.  # noqa: E501

        :param retention_date: The retention_date of this S3ObjectsObjectData.  # noqa: E501
        :type: int
        """
        if retention_date is not None and retention_date > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `retention_date`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if retention_date is not None and retention_date < 0:  # noqa: E501
            raise ValueError("Invalid value for `retention_date`, must be a value greater than or equal to `0`")  # noqa: E501

        self._retention_date = retention_date

    @property
    def worm_committed(self):
        """Gets the worm_committed of this S3ObjectsObjectData.  # noqa: E501

        True if the file is locked or committed  # noqa: E501

        :return: The worm_committed of this S3ObjectsObjectData.  # noqa: E501
        :rtype: bool
        """
        return self._worm_committed

    @worm_committed.setter
    def worm_committed(self, worm_committed):
        """Sets the worm_committed of this S3ObjectsObjectData.

        True if the file is locked or committed  # noqa: E501

        :param worm_committed: The worm_committed of this S3ObjectsObjectData.  # noqa: E501
        :type: bool
        """

        self._worm_committed = worm_committed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(S3ObjectsObjectData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S3ObjectsObjectData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
