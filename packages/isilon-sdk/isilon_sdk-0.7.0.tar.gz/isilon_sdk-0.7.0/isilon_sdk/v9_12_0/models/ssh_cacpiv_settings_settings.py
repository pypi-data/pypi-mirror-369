# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SshCacpivSettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_identity_types': 'str',
        'crl_url': 'str',
        'ignore_ocsp_crl_failures': 'bool',
        'ocsp_url': 'str',
        'validation_resources': 'str'
    }

    attribute_map = {
        'allowed_identity_types': 'allowed_identity_types',
        'crl_url': 'crl_url',
        'ignore_ocsp_crl_failures': 'ignore_ocsp_crl_failures',
        'ocsp_url': 'ocsp_url',
        'validation_resources': 'validation_resources'
    }

    def __init__(self, allowed_identity_types=None, crl_url=None, ignore_ocsp_crl_failures=None, ocsp_url=None, validation_resources=None):  # noqa: E501
        """SshCacpivSettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._allowed_identity_types = None
        self._crl_url = None
        self._ignore_ocsp_crl_failures = None
        self._ocsp_url = None
        self._validation_resources = None
        self.discriminator = None

        if allowed_identity_types is not None:
            self.allowed_identity_types = allowed_identity_types
        if crl_url is not None:
            self.crl_url = crl_url
        if ignore_ocsp_crl_failures is not None:
            self.ignore_ocsp_crl_failures = ignore_ocsp_crl_failures
        if ocsp_url is not None:
            self.ocsp_url = ocsp_url
        if validation_resources is not None:
            self.validation_resources = validation_resources

    @property
    def allowed_identity_types(self):
        """Gets the allowed_identity_types of this SshCacpivSettingsSettings.  # noqa: E501

        User identity types allowed for SSH CAC/PIV authentication.  # noqa: E501

        :return: The allowed_identity_types of this SshCacpivSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._allowed_identity_types

    @allowed_identity_types.setter
    def allowed_identity_types(self, allowed_identity_types):
        """Sets the allowed_identity_types of this SshCacpivSettingsSettings.

        User identity types allowed for SSH CAC/PIV authentication.  # noqa: E501

        :param allowed_identity_types: The allowed_identity_types of this SshCacpivSettingsSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["CN", "UPN", "CN_UPN"]  # noqa: E501
        if allowed_identity_types not in allowed_values:
            raise ValueError(
                "Invalid value for `allowed_identity_types` ({0}), must be one of {1}"  # noqa: E501
                .format(allowed_identity_types, allowed_values)
            )

        self._allowed_identity_types = allowed_identity_types

    @property
    def crl_url(self):
        """Gets the crl_url of this SshCacpivSettingsSettings.  # noqa: E501

        Specifies URL of CRL for checking certificate revocation status.  # noqa: E501

        :return: The crl_url of this SshCacpivSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._crl_url

    @crl_url.setter
    def crl_url(self, crl_url):
        """Sets the crl_url of this SshCacpivSettingsSettings.

        Specifies URL of CRL for checking certificate revocation status.  # noqa: E501

        :param crl_url: The crl_url of this SshCacpivSettingsSettings.  # noqa: E501
        :type: str
        """
        if crl_url is not None and len(crl_url) > 2048:
            raise ValueError("Invalid value for `crl_url`, length must be less than or equal to `2048`")  # noqa: E501
        if crl_url is not None and len(crl_url) < 0:
            raise ValueError("Invalid value for `crl_url`, length must be greater than or equal to `0`")  # noqa: E501

        self._crl_url = crl_url

    @property
    def ignore_ocsp_crl_failures(self):
        """Gets the ignore_ocsp_crl_failures of this SshCacpivSettingsSettings.  # noqa: E501

        Ignore failures (unreachable or unknown responses) from OCSP/CRL.  # noqa: E501

        :return: The ignore_ocsp_crl_failures of this SshCacpivSettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_ocsp_crl_failures

    @ignore_ocsp_crl_failures.setter
    def ignore_ocsp_crl_failures(self, ignore_ocsp_crl_failures):
        """Sets the ignore_ocsp_crl_failures of this SshCacpivSettingsSettings.

        Ignore failures (unreachable or unknown responses) from OCSP/CRL.  # noqa: E501

        :param ignore_ocsp_crl_failures: The ignore_ocsp_crl_failures of this SshCacpivSettingsSettings.  # noqa: E501
        :type: bool
        """

        self._ignore_ocsp_crl_failures = ignore_ocsp_crl_failures

    @property
    def ocsp_url(self):
        """Gets the ocsp_url of this SshCacpivSettingsSettings.  # noqa: E501

        Specifies URL of OCSP server for checking certificate revocation status.  # noqa: E501

        :return: The ocsp_url of this SshCacpivSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._ocsp_url

    @ocsp_url.setter
    def ocsp_url(self, ocsp_url):
        """Sets the ocsp_url of this SshCacpivSettingsSettings.

        Specifies URL of OCSP server for checking certificate revocation status.  # noqa: E501

        :param ocsp_url: The ocsp_url of this SshCacpivSettingsSettings.  # noqa: E501
        :type: str
        """
        if ocsp_url is not None and len(ocsp_url) > 2048:
            raise ValueError("Invalid value for `ocsp_url`, length must be less than or equal to `2048`")  # noqa: E501
        if ocsp_url is not None and len(ocsp_url) < 0:
            raise ValueError("Invalid value for `ocsp_url`, length must be greater than or equal to `0`")  # noqa: E501

        self._ocsp_url = ocsp_url

    @property
    def validation_resources(self):
        """Gets the validation_resources of this SshCacpivSettingsSettings.  # noqa: E501

        Validation resources to be used for revocation checking during SSH CAC/PIV authentication.  # noqa: E501

        :return: The validation_resources of this SshCacpivSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._validation_resources

    @validation_resources.setter
    def validation_resources(self, validation_resources):
        """Sets the validation_resources of this SshCacpivSettingsSettings.

        Validation resources to be used for revocation checking during SSH CAC/PIV authentication.  # noqa: E501

        :param validation_resources: The validation_resources of this SshCacpivSettingsSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["OCSP", "CRL", "OCSP_CRL", "NONE"]  # noqa: E501
        if validation_resources not in allowed_values:
            raise ValueError(
                "Invalid value for `validation_resources` ({0}), must be one of {1}"  # noqa: E501
                .format(validation_resources, allowed_values)
            )

        self._validation_resources = validation_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SshCacpivSettingsSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SshCacpivSettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
