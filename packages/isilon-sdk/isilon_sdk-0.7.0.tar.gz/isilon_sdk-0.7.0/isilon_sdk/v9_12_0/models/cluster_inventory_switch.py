# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterInventorySwitch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'firmware': 'str',
        'model': 'str',
        'network': 'str',
        'node_id': 'str',
        'ports': 'list[ClusterInventorySwitchPort]',
        'serial_number': 'str',
        'speed': 'str',
        'status': 'ClusterInventorySwitchStatus',
        'timestamp': 'str'
    }

    attribute_map = {
        'firmware': 'firmware',
        'model': 'model',
        'network': 'network',
        'node_id': 'node_id',
        'ports': 'ports',
        'serial_number': 'serial_number',
        'speed': 'speed',
        'status': 'status',
        'timestamp': 'timestamp'
    }

    def __init__(self, firmware=None, model=None, network=None, node_id=None, ports=None, serial_number=None, speed=None, status=None, timestamp=None):  # noqa: E501
        """ClusterInventorySwitch - a model defined in Swagger"""  # noqa: E501

        self._firmware = None
        self._model = None
        self._network = None
        self._node_id = None
        self._ports = None
        self._serial_number = None
        self._speed = None
        self._status = None
        self._timestamp = None
        self.discriminator = None

        if firmware is not None:
            self.firmware = firmware
        if model is not None:
            self.model = model
        if network is not None:
            self.network = network
        if node_id is not None:
            self.node_id = node_id
        if ports is not None:
            self.ports = ports
        if serial_number is not None:
            self.serial_number = serial_number
        if speed is not None:
            self.speed = speed
        if status is not None:
            self.status = status
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def firmware(self):
        """Gets the firmware of this ClusterInventorySwitch.  # noqa: E501

        The switch firmware version.  # noqa: E501

        :return: The firmware of this ClusterInventorySwitch.  # noqa: E501
        :rtype: str
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this ClusterInventorySwitch.

        The switch firmware version.  # noqa: E501

        :param firmware: The firmware of this ClusterInventorySwitch.  # noqa: E501
        :type: str
        """
        if firmware is not None and len(firmware) > 255:
            raise ValueError("Invalid value for `firmware`, length must be less than or equal to `255`")  # noqa: E501
        if firmware is not None and len(firmware) < 0:
            raise ValueError("Invalid value for `firmware`, length must be greater than or equal to `0`")  # noqa: E501

        self._firmware = firmware

    @property
    def model(self):
        """Gets the model of this ClusterInventorySwitch.  # noqa: E501

        The switch model.  # noqa: E501

        :return: The model of this ClusterInventorySwitch.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ClusterInventorySwitch.

        The switch model.  # noqa: E501

        :param model: The model of this ClusterInventorySwitch.  # noqa: E501
        :type: str
        """
        if model is not None and len(model) > 255:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `255`")  # noqa: E501
        if model is not None and len(model) < 0:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `0`")  # noqa: E501

        self._model = model

    @property
    def network(self):
        """Gets the network of this ClusterInventorySwitch.  # noqa: E501

        Logical network interface name.  # noqa: E501

        :return: The network of this ClusterInventorySwitch.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ClusterInventorySwitch.

        Logical network interface name.  # noqa: E501

        :param network: The network of this ClusterInventorySwitch.  # noqa: E501
        :type: str
        """
        if network is not None and len(network) > 255:
            raise ValueError("Invalid value for `network`, length must be less than or equal to `255`")  # noqa: E501
        if network is not None and len(network) < 0:
            raise ValueError("Invalid value for `network`, length must be greater than or equal to `0`")  # noqa: E501

        self._network = network

    @property
    def node_id(self):
        """Gets the node_id of this ClusterInventorySwitch.  # noqa: E501

        Switch name / ID.  # noqa: E501

        :return: The node_id of this ClusterInventorySwitch.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this ClusterInventorySwitch.

        Switch name / ID.  # noqa: E501

        :param node_id: The node_id of this ClusterInventorySwitch.  # noqa: E501
        :type: str
        """
        if node_id is not None and len(node_id) > 255:
            raise ValueError("Invalid value for `node_id`, length must be less than or equal to `255`")  # noqa: E501
        if node_id is not None and len(node_id) < 0:
            raise ValueError("Invalid value for `node_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._node_id = node_id

    @property
    def ports(self):
        """Gets the ports of this ClusterInventorySwitch.  # noqa: E501

        List of ports on the switch  # noqa: E501

        :return: The ports of this ClusterInventorySwitch.  # noqa: E501
        :rtype: list[ClusterInventorySwitchPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ClusterInventorySwitch.

        List of ports on the switch  # noqa: E501

        :param ports: The ports of this ClusterInventorySwitch.  # noqa: E501
        :type: list[ClusterInventorySwitchPort]
        """

        self._ports = ports

    @property
    def serial_number(self):
        """Gets the serial_number of this ClusterInventorySwitch.  # noqa: E501

        Serial number of the switch  # noqa: E501

        :return: The serial_number of this ClusterInventorySwitch.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ClusterInventorySwitch.

        Serial number of the switch  # noqa: E501

        :param serial_number: The serial_number of this ClusterInventorySwitch.  # noqa: E501
        :type: str
        """
        if serial_number is not None and len(serial_number) > 255:
            raise ValueError("Invalid value for `serial_number`, length must be less than or equal to `255`")  # noqa: E501
        if serial_number is not None and len(serial_number) < 0:
            raise ValueError("Invalid value for `serial_number`, length must be greater than or equal to `0`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def speed(self):
        """Gets the speed of this ClusterInventorySwitch.  # noqa: E501

        Max supported port speed.  # noqa: E501

        :return: The speed of this ClusterInventorySwitch.  # noqa: E501
        :rtype: str
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this ClusterInventorySwitch.

        Max supported port speed.  # noqa: E501

        :param speed: The speed of this ClusterInventorySwitch.  # noqa: E501
        :type: str
        """
        if speed is not None and len(speed) > 255:
            raise ValueError("Invalid value for `speed`, length must be less than or equal to `255`")  # noqa: E501
        if speed is not None and len(speed) < 0:
            raise ValueError("Invalid value for `speed`, length must be greater than or equal to `0`")  # noqa: E501

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this ClusterInventorySwitch.  # noqa: E501

        The status of the switch  # noqa: E501

        :return: The status of this ClusterInventorySwitch.  # noqa: E501
        :rtype: ClusterInventorySwitchStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterInventorySwitch.

        The status of the switch  # noqa: E501

        :param status: The status of this ClusterInventorySwitch.  # noqa: E501
        :type: ClusterInventorySwitchStatus
        """

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this ClusterInventorySwitch.  # noqa: E501

        Time of last inventory query.  # noqa: E501

        :return: The timestamp of this ClusterInventorySwitch.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ClusterInventorySwitch.

        Time of last inventory query.  # noqa: E501

        :param timestamp: The timestamp of this ClusterInventorySwitch.  # noqa: E501
        :type: str
        """
        if timestamp is not None and len(timestamp) > 255:
            raise ValueError("Invalid value for `timestamp`, length must be less than or equal to `255`")  # noqa: E501
        if timestamp is not None and len(timestamp) < 0:
            raise ValueError("Invalid value for `timestamp`, length must be greater than or equal to `0`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInventorySwitch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInventorySwitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
