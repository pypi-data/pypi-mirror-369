# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MpaApprovalId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approval_valid_before': 'int',
        'approved': 'bool',
        'comment': 'str',
        'totp_code': 'str'
    }

    attribute_map = {
        'approval_valid_before': 'approval_valid_before',
        'approved': 'approved',
        'comment': 'comment',
        'totp_code': 'totp_code'
    }

    def __init__(self, approval_valid_before=None, approved=None, comment=None, totp_code=None):  # noqa: E501
        """MpaApprovalId - a model defined in Swagger"""  # noqa: E501

        self._approval_valid_before = None
        self._approved = None
        self._comment = None
        self._totp_code = None
        self.discriminator = None

        if approval_valid_before is not None:
            self.approval_valid_before = approval_valid_before
        self.approved = approved
        self.comment = comment
        self.totp_code = totp_code

    @property
    def approval_valid_before(self):
        """Gets the approval_valid_before of this MpaApprovalId.  # noqa: E501

        An MPA request approval is valid up to the specified time.  The value is expressed in UTC seconds from Unix epoch.  # noqa: E501

        :return: The approval_valid_before of this MpaApprovalId.  # noqa: E501
        :rtype: int
        """
        return self._approval_valid_before

    @approval_valid_before.setter
    def approval_valid_before(self, approval_valid_before):
        """Sets the approval_valid_before of this MpaApprovalId.

        An MPA request approval is valid up to the specified time.  The value is expressed in UTC seconds from Unix epoch.  # noqa: E501

        :param approval_valid_before: The approval_valid_before of this MpaApprovalId.  # noqa: E501
        :type: int
        """
        if approval_valid_before is not None and approval_valid_before > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `approval_valid_before`, must be a value less than or equal to `4294967295`")  # noqa: E501

        self._approval_valid_before = approval_valid_before

    @property
    def approved(self):
        """Gets the approved of this MpaApprovalId.  # noqa: E501

        approval decision  # noqa: E501

        :return: The approved of this MpaApprovalId.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this MpaApprovalId.

        approval decision  # noqa: E501

        :param approved: The approved of this MpaApprovalId.  # noqa: E501
        :type: bool
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")  # noqa: E501

        self._approved = approved

    @property
    def comment(self):
        """Gets the comment of this MpaApprovalId.  # noqa: E501

        Comment for approval decision.  # noqa: E501

        :return: The comment of this MpaApprovalId.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this MpaApprovalId.

        Comment for approval decision.  # noqa: E501

        :param comment: The comment of this MpaApprovalId.  # noqa: E501
        :type: str
        """
        if comment is None:
            raise ValueError("Invalid value for `comment`, must not be `None`")  # noqa: E501
        if comment is not None and len(comment) > 8192:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `8192`")  # noqa: E501
        if comment is not None and len(comment) < 1:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `1`")  # noqa: E501

        self._comment = comment

    @property
    def totp_code(self):
        """Gets the totp_code of this MpaApprovalId.  # noqa: E501

        TOTP token.  # noqa: E501

        :return: The totp_code of this MpaApprovalId.  # noqa: E501
        :rtype: str
        """
        return self._totp_code

    @totp_code.setter
    def totp_code(self, totp_code):
        """Sets the totp_code of this MpaApprovalId.

        TOTP token.  # noqa: E501

        :param totp_code: The totp_code of this MpaApprovalId.  # noqa: E501
        :type: str
        """
        if totp_code is None:
            raise ValueError("Invalid value for `totp_code`, must not be `None`")  # noqa: E501
        if totp_code is not None and len(totp_code) > 6:
            raise ValueError("Invalid value for `totp_code`, length must be less than or equal to `6`")  # noqa: E501
        if totp_code is not None and len(totp_code) < 6:
            raise ValueError("Invalid value for `totp_code`, length must be greater than or equal to `6`")  # noqa: E501

        self._totp_code = totp_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpaApprovalId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpaApprovalId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
