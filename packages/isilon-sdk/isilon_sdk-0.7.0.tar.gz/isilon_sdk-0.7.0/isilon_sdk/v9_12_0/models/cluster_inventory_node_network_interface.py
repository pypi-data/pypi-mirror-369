# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterInventoryNodeNetworkInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'firmware': 'str',
        'ip_addrs': 'list[str]',
        'ipv4_gateway': 'str',
        'ipv6_gateway': 'str',
        'mac_address': 'str',
        'name': 'str',
        'port': 'str',
        'role': 'str',
        'speed': 'int',
        'status': 'str',
        'switch_connection': 'ClusterInventoryNodeNetworkInterfaceSwitchConnection',
        'vendor': 'str'
    }

    attribute_map = {
        'firmware': 'firmware',
        'ip_addrs': 'ip_addrs',
        'ipv4_gateway': 'ipv4_gateway',
        'ipv6_gateway': 'ipv6_gateway',
        'mac_address': 'mac_address',
        'name': 'name',
        'port': 'port',
        'role': 'role',
        'speed': 'speed',
        'status': 'status',
        'switch_connection': 'switch_connection',
        'vendor': 'vendor'
    }

    def __init__(self, firmware=None, ip_addrs=None, ipv4_gateway=None, ipv6_gateway=None, mac_address=None, name=None, port=None, role=None, speed=None, status=None, switch_connection=None, vendor=None):  # noqa: E501
        """ClusterInventoryNodeNetworkInterface - a model defined in Swagger"""  # noqa: E501

        self._firmware = None
        self._ip_addrs = None
        self._ipv4_gateway = None
        self._ipv6_gateway = None
        self._mac_address = None
        self._name = None
        self._port = None
        self._role = None
        self._speed = None
        self._status = None
        self._switch_connection = None
        self._vendor = None
        self.discriminator = None

        if firmware is not None:
            self.firmware = firmware
        if ip_addrs is not None:
            self.ip_addrs = ip_addrs
        if ipv4_gateway is not None:
            self.ipv4_gateway = ipv4_gateway
        if ipv6_gateway is not None:
            self.ipv6_gateway = ipv6_gateway
        if mac_address is not None:
            self.mac_address = mac_address
        if name is not None:
            self.name = name
        if port is not None:
            self.port = port
        if role is not None:
            self.role = role
        if speed is not None:
            self.speed = speed
        if status is not None:
            self.status = status
        if switch_connection is not None:
            self.switch_connection = switch_connection
        if vendor is not None:
            self.vendor = vendor

    @property
    def firmware(self):
        """Gets the firmware of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        Firmware version of the network interface.  # noqa: E501

        :return: The firmware of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this ClusterInventoryNodeNetworkInterface.

        Firmware version of the network interface.  # noqa: E501

        :param firmware: The firmware of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: str
        """
        if firmware is not None and len(firmware) > 255:
            raise ValueError("Invalid value for `firmware`, length must be less than or equal to `255`")  # noqa: E501
        if firmware is not None and len(firmware) < 0:
            raise ValueError("Invalid value for `firmware`, length must be greater than or equal to `0`")  # noqa: E501

        self._firmware = firmware

    @property
    def ip_addrs(self):
        """Gets the ip_addrs of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        List of IP addresses assigned to the interface.  # noqa: E501

        :return: The ip_addrs of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: list[str]
        """
        return self._ip_addrs

    @ip_addrs.setter
    def ip_addrs(self, ip_addrs):
        """Sets the ip_addrs of this ClusterInventoryNodeNetworkInterface.

        List of IP addresses assigned to the interface.  # noqa: E501

        :param ip_addrs: The ip_addrs of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: list[str]
        """

        self._ip_addrs = ip_addrs

    @property
    def ipv4_gateway(self):
        """Gets the ipv4_gateway of this ClusterInventoryNodeNetworkInterface.  # noqa: E501


        :return: The ipv4_gateway of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_gateway

    @ipv4_gateway.setter
    def ipv4_gateway(self, ipv4_gateway):
        """Sets the ipv4_gateway of this ClusterInventoryNodeNetworkInterface.


        :param ipv4_gateway: The ipv4_gateway of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: str
        """
        if ipv4_gateway is not None and len(ipv4_gateway) > 16:
            raise ValueError("Invalid value for `ipv4_gateway`, length must be less than or equal to `16`")  # noqa: E501
        if ipv4_gateway is not None and len(ipv4_gateway) < 1:
            raise ValueError("Invalid value for `ipv4_gateway`, length must be greater than or equal to `1`")  # noqa: E501
        if ipv4_gateway is not None and not re.search('^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$', ipv4_gateway):  # noqa: E501
            raise ValueError(r"Invalid value for `ipv4_gateway`, must be a follow pattern or equal to `/^([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])){3}$/`")  # noqa: E501

        self._ipv4_gateway = ipv4_gateway

    @property
    def ipv6_gateway(self):
        """Gets the ipv6_gateway of this ClusterInventoryNodeNetworkInterface.  # noqa: E501


        :return: The ipv6_gateway of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_gateway

    @ipv6_gateway.setter
    def ipv6_gateway(self, ipv6_gateway):
        """Sets the ipv6_gateway of this ClusterInventoryNodeNetworkInterface.


        :param ipv6_gateway: The ipv6_gateway of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: str
        """
        if ipv6_gateway is not None and len(ipv6_gateway) > 40:
            raise ValueError("Invalid value for `ipv6_gateway`, length must be less than or equal to `40`")  # noqa: E501
        if ipv6_gateway is not None and len(ipv6_gateway) < 1:
            raise ValueError("Invalid value for `ipv6_gateway`, length must be greater than or equal to `1`")  # noqa: E501
        if ipv6_gateway is not None and not re.search('^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$', ipv6_gateway):  # noqa: E501
            raise ValueError(r"Invalid value for `ipv6_gateway`, must be a follow pattern or equal to `/^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5}::([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){0,5})?$|^[0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7}$/`")  # noqa: E501

        self._ipv6_gateway = ipv6_gateway

    @property
    def mac_address(self):
        """Gets the mac_address of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        MAC address  # noqa: E501

        :return: The mac_address of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this ClusterInventoryNodeNetworkInterface.

        MAC address  # noqa: E501

        :param mac_address: The mac_address of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def name(self):
        """Gets the name of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        Name of the network interface.  # noqa: E501

        :return: The name of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterInventoryNodeNetworkInterface.

        Name of the network interface.  # noqa: E501

        :param name: The name of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 32:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def port(self):
        """Gets the port of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        The port of the interface, e.g., 1:200gige-1, 3:int-a,  # noqa: E501

        :return: The port of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ClusterInventoryNodeNetworkInterface.

        The port of the interface, e.g., 1:200gige-1, 3:int-a,  # noqa: E501

        :param port: The port of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: str
        """
        if port is not None and len(port) > 255:
            raise ValueError("Invalid value for `port`, length must be less than or equal to `255`")  # noqa: E501
        if port is not None and len(port) < 0:
            raise ValueError("Invalid value for `port`, length must be greater than or equal to `0`")  # noqa: E501

        self._port = port

    @property
    def role(self):
        """Gets the role of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        Indicates if the interface is associated with an external or internal network.  # noqa: E501

        :return: The role of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ClusterInventoryNodeNetworkInterface.

        Indicates if the interface is associated with an external or internal network.  # noqa: E501

        :param role: The role of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: str
        """
        allowed_values = ["external", "internal"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def speed(self):
        """Gets the speed of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        The negotiated speed of the interface, in Mbps.  # noqa: E501

        :return: The speed of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: int
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this ClusterInventoryNodeNetworkInterface.

        The negotiated speed of the interface, in Mbps.  # noqa: E501

        :param speed: The speed of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: int
        """
        if speed is not None and speed > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `speed`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if speed is not None and speed < 0:  # noqa: E501
            raise ValueError("Invalid value for `speed`, must be a value greater than or equal to `0`")  # noqa: E501

        self._speed = speed

    @property
    def status(self):
        """Gets the status of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        The status of the interface.  # noqa: E501

        :return: The status of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterInventoryNodeNetworkInterface.

        The status of the interface.  # noqa: E501

        :param status: The status of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: str
        """
        allowed_values = ["up", "no_carrier", "active", "inactive", "disabled", "unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def switch_connection(self):
        """Gets the switch_connection of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        Information related to switch connection.  # noqa: E501

        :return: The switch_connection of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: ClusterInventoryNodeNetworkInterfaceSwitchConnection
        """
        return self._switch_connection

    @switch_connection.setter
    def switch_connection(self, switch_connection):
        """Sets the switch_connection of this ClusterInventoryNodeNetworkInterface.

        Information related to switch connection.  # noqa: E501

        :param switch_connection: The switch_connection of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: ClusterInventoryNodeNetworkInterfaceSwitchConnection
        """

        self._switch_connection = switch_connection

    @property
    def vendor(self):
        """Gets the vendor of this ClusterInventoryNodeNetworkInterface.  # noqa: E501

        Vendor of the network interface.  # noqa: E501

        :return: The vendor of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ClusterInventoryNodeNetworkInterface.

        Vendor of the network interface.  # noqa: E501

        :param vendor: The vendor of this ClusterInventoryNodeNetworkInterface.  # noqa: E501
        :type: str
        """
        if vendor is not None and len(vendor) > 255:
            raise ValueError("Invalid value for `vendor`, length must be less than or equal to `255`")  # noqa: E501
        if vendor is not None and len(vendor) < 0:
            raise ValueError("Invalid value for `vendor`, length must be greater than or equal to `0`")  # noqa: E501

        self._vendor = vendor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInventoryNodeNetworkInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInventoryNodeNetworkInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
