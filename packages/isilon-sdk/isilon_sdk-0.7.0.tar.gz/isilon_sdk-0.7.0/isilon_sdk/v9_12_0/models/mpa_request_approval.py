# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MpaRequestApproval(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approval_valid_before': 'int',
        'approved': 'bool',
        'approver_id': 'str',
        'comments': 'str'
    }

    attribute_map = {
        'approval_valid_before': 'approval_valid_before',
        'approved': 'approved',
        'approver_id': 'approver_id',
        'comments': 'comments'
    }

    def __init__(self, approval_valid_before=None, approved=None, approver_id=None, comments=None):  # noqa: E501
        """MpaRequestApproval - a model defined in Swagger"""  # noqa: E501

        self._approval_valid_before = None
        self._approved = None
        self._approver_id = None
        self._comments = None
        self.discriminator = None

        if approval_valid_before is not None:
            self.approval_valid_before = approval_valid_before
        self.approved = approved
        self.approver_id = approver_id
        if comments is not None:
            self.comments = comments

    @property
    def approval_valid_before(self):
        """Gets the approval_valid_before of this MpaRequestApproval.  # noqa: E501

        Unix epoch time format.  # noqa: E501

        :return: The approval_valid_before of this MpaRequestApproval.  # noqa: E501
        :rtype: int
        """
        return self._approval_valid_before

    @approval_valid_before.setter
    def approval_valid_before(self, approval_valid_before):
        """Sets the approval_valid_before of this MpaRequestApproval.

        Unix epoch time format.  # noqa: E501

        :param approval_valid_before: The approval_valid_before of this MpaRequestApproval.  # noqa: E501
        :type: int
        """
        if approval_valid_before is not None and approval_valid_before > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `approval_valid_before`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if approval_valid_before is not None and approval_valid_before < 0:  # noqa: E501
            raise ValueError("Invalid value for `approval_valid_before`, must be a value greater than or equal to `0`")  # noqa: E501

        self._approval_valid_before = approval_valid_before

    @property
    def approved(self):
        """Gets the approved of this MpaRequestApproval.  # noqa: E501


        :return: The approved of this MpaRequestApproval.  # noqa: E501
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this MpaRequestApproval.


        :param approved: The approved of this MpaRequestApproval.  # noqa: E501
        :type: bool
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")  # noqa: E501

        self._approved = approved

    @property
    def approver_id(self):
        """Gets the approver_id of this MpaRequestApproval.  # noqa: E501

        id of user who approved MPA request  # noqa: E501

        :return: The approver_id of this MpaRequestApproval.  # noqa: E501
        :rtype: str
        """
        return self._approver_id

    @approver_id.setter
    def approver_id(self, approver_id):
        """Sets the approver_id of this MpaRequestApproval.

        id of user who approved MPA request  # noqa: E501

        :param approver_id: The approver_id of this MpaRequestApproval.  # noqa: E501
        :type: str
        """
        if approver_id is None:
            raise ValueError("Invalid value for `approver_id`, must not be `None`")  # noqa: E501
        if approver_id is not None and len(approver_id) > 255:
            raise ValueError("Invalid value for `approver_id`, length must be less than or equal to `255`")  # noqa: E501
        if approver_id is not None and len(approver_id) < 1:
            raise ValueError("Invalid value for `approver_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._approver_id = approver_id

    @property
    def comments(self):
        """Gets the comments of this MpaRequestApproval.  # noqa: E501

        comment for approval decision.  # noqa: E501

        :return: The comments of this MpaRequestApproval.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this MpaRequestApproval.

        comment for approval decision.  # noqa: E501

        :param comments: The comments of this MpaRequestApproval.  # noqa: E501
        :type: str
        """
        if comments is not None and len(comments) > 255:
            raise ValueError("Invalid value for `comments`, length must be less than or equal to `255`")  # noqa: E501

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpaRequestApproval, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpaRequestApproval):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
