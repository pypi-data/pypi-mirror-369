# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterInventorySwitchStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fans': 'list[ClusterInventorySwitchStatusFan]',
        'power_state': 'str',
        'psus': 'list[ClusterInventorySwitchStatusPsu]',
        'status': 'ClusterInventorySwitchStatusFanStatus',
        'temperatures': 'list[ClusterInventorySwitchStatusTemperature]'
    }

    attribute_map = {
        'fans': 'fans',
        'power_state': 'power_state',
        'psus': 'psus',
        'status': 'status',
        'temperatures': 'temperatures'
    }

    def __init__(self, fans=None, power_state=None, psus=None, status=None, temperatures=None):  # noqa: E501
        """ClusterInventorySwitchStatus - a model defined in Swagger"""  # noqa: E501

        self._fans = None
        self._power_state = None
        self._psus = None
        self._status = None
        self._temperatures = None
        self.discriminator = None

        if fans is not None:
            self.fans = fans
        if power_state is not None:
            self.power_state = power_state
        if psus is not None:
            self.psus = psus
        if status is not None:
            self.status = status
        if temperatures is not None:
            self.temperatures = temperatures

    @property
    def fans(self):
        """Gets the fans of this ClusterInventorySwitchStatus.  # noqa: E501

        Information about switch fans.  # noqa: E501

        :return: The fans of this ClusterInventorySwitchStatus.  # noqa: E501
        :rtype: list[ClusterInventorySwitchStatusFan]
        """
        return self._fans

    @fans.setter
    def fans(self, fans):
        """Sets the fans of this ClusterInventorySwitchStatus.

        Information about switch fans.  # noqa: E501

        :param fans: The fans of this ClusterInventorySwitchStatus.  # noqa: E501
        :type: list[ClusterInventorySwitchStatusFan]
        """

        self._fans = fans

    @property
    def power_state(self):
        """Gets the power_state of this ClusterInventorySwitchStatus.  # noqa: E501

        Switch power state.  # noqa: E501

        :return: The power_state of this ClusterInventorySwitchStatus.  # noqa: E501
        :rtype: str
        """
        return self._power_state

    @power_state.setter
    def power_state(self, power_state):
        """Sets the power_state of this ClusterInventorySwitchStatus.

        Switch power state.  # noqa: E501

        :param power_state: The power_state of this ClusterInventorySwitchStatus.  # noqa: E501
        :type: str
        """
        if power_state is not None and len(power_state) > 255:
            raise ValueError("Invalid value for `power_state`, length must be less than or equal to `255`")  # noqa: E501
        if power_state is not None and len(power_state) < 0:
            raise ValueError("Invalid value for `power_state`, length must be greater than or equal to `0`")  # noqa: E501

        self._power_state = power_state

    @property
    def psus(self):
        """Gets the psus of this ClusterInventorySwitchStatus.  # noqa: E501

        Information about switch power supply units.  # noqa: E501

        :return: The psus of this ClusterInventorySwitchStatus.  # noqa: E501
        :rtype: list[ClusterInventorySwitchStatusPsu]
        """
        return self._psus

    @psus.setter
    def psus(self, psus):
        """Sets the psus of this ClusterInventorySwitchStatus.

        Information about switch power supply units.  # noqa: E501

        :param psus: The psus of this ClusterInventorySwitchStatus.  # noqa: E501
        :type: list[ClusterInventorySwitchStatusPsu]
        """

        self._psus = psus

    @property
    def status(self):
        """Gets the status of this ClusterInventorySwitchStatus.  # noqa: E501

        Status.  # noqa: E501

        :return: The status of this ClusterInventorySwitchStatus.  # noqa: E501
        :rtype: ClusterInventorySwitchStatusFanStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterInventorySwitchStatus.

        Status.  # noqa: E501

        :param status: The status of this ClusterInventorySwitchStatus.  # noqa: E501
        :type: ClusterInventorySwitchStatusFanStatus
        """

        self._status = status

    @property
    def temperatures(self):
        """Gets the temperatures of this ClusterInventorySwitchStatus.  # noqa: E501

        Information about switch temperatures.  # noqa: E501

        :return: The temperatures of this ClusterInventorySwitchStatus.  # noqa: E501
        :rtype: list[ClusterInventorySwitchStatusTemperature]
        """
        return self._temperatures

    @temperatures.setter
    def temperatures(self, temperatures):
        """Sets the temperatures of this ClusterInventorySwitchStatus.

        Information about switch temperatures.  # noqa: E501

        :param temperatures: The temperatures of this ClusterInventorySwitchStatus.  # noqa: E501
        :type: list[ClusterInventorySwitchStatusTemperature]
        """

        self._temperatures = temperatures

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInventorySwitchStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInventorySwitchStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
