# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RepairRequests(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_trigger': 'bool',
        'end_time': 'int',
        'error': 'str',
        'item_id': 'str',
        'nodes': 'list[RepairRequestsNode]',
        'queue_time': 'int',
        'repair_id': 'str',
        'result': 'str',
        'scope': 'str',
        'source_id': 'str',
        'source_type': 'str',
        'start_time': 'int',
        'status': 'str',
        'task_id': 'str'
    }

    attribute_map = {
        'auto_trigger': 'auto_trigger',
        'end_time': 'end_time',
        'error': 'error',
        'item_id': 'item_id',
        'nodes': 'nodes',
        'queue_time': 'queue_time',
        'repair_id': 'repair_id',
        'result': 'result',
        'scope': 'scope',
        'source_id': 'source_id',
        'source_type': 'source_type',
        'start_time': 'start_time',
        'status': 'status',
        'task_id': 'task_id'
    }

    def __init__(self, auto_trigger=None, end_time=None, error=None, item_id=None, nodes=None, queue_time=None, repair_id=None, result=None, scope=None, source_id=None, source_type=None, start_time=None, status=None, task_id=None):  # noqa: E501
        """RepairRequests - a model defined in Swagger"""  # noqa: E501

        self._auto_trigger = None
        self._end_time = None
        self._error = None
        self._item_id = None
        self._nodes = None
        self._queue_time = None
        self._repair_id = None
        self._result = None
        self._scope = None
        self._source_id = None
        self._source_type = None
        self._start_time = None
        self._status = None
        self._task_id = None
        self.discriminator = None

        self.auto_trigger = auto_trigger
        if end_time is not None:
            self.end_time = end_time
        if error is not None:
            self.error = error
        self.item_id = item_id
        if nodes is not None:
            self.nodes = nodes
        self.queue_time = queue_time
        self.repair_id = repair_id
        if result is not None:
            self.result = result
        if scope is not None:
            self.scope = scope
        self.source_id = source_id
        self.source_type = source_type
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if task_id is not None:
            self.task_id = task_id

    @property
    def auto_trigger(self):
        """Gets the auto_trigger of this RepairRequests.  # noqa: E501

        If the repair action should be automatically triggered upon a failure.  # noqa: E501

        :return: The auto_trigger of this RepairRequests.  # noqa: E501
        :rtype: bool
        """
        return self._auto_trigger

    @auto_trigger.setter
    def auto_trigger(self, auto_trigger):
        """Sets the auto_trigger of this RepairRequests.

        If the repair action should be automatically triggered upon a failure.  # noqa: E501

        :param auto_trigger: The auto_trigger of this RepairRequests.  # noqa: E501
        :type: bool
        """
        if auto_trigger is None:
            raise ValueError("Invalid value for `auto_trigger`, must not be `None`")  # noqa: E501

        self._auto_trigger = auto_trigger

    @property
    def end_time(self):
        """Gets the end_time of this RepairRequests.  # noqa: E501

        The time in seconds since the UNIX epoch at which request was completed.  # noqa: E501

        :return: The end_time of this RepairRequests.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this RepairRequests.

        The time in seconds since the UNIX epoch at which request was completed.  # noqa: E501

        :param end_time: The end_time of this RepairRequests.  # noqa: E501
        :type: int
        """
        if end_time is not None and end_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if end_time is not None and end_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this RepairRequests.  # noqa: E501

        Error message for a failed repair.  # noqa: E501

        :return: The error of this RepairRequests.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this RepairRequests.

        Error message for a failed repair.  # noqa: E501

        :param error: The error of this RepairRequests.  # noqa: E501
        :type: str
        """
        if error is not None and len(error) > 8192:
            raise ValueError("Invalid value for `error`, length must be less than or equal to `8192`")  # noqa: E501
        if error is not None and len(error) < 0:
            raise ValueError("Invalid value for `error`, length must be greater than or equal to `0`")  # noqa: E501

        self._error = error

    @property
    def item_id(self):
        """Gets the item_id of this RepairRequests.  # noqa: E501

        The ID of the healthcheck item.  # noqa: E501

        :return: The item_id of this RepairRequests.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this RepairRequests.

        The ID of the healthcheck item.  # noqa: E501

        :param item_id: The item_id of this RepairRequests.  # noqa: E501
        :type: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501
        if item_id is not None and len(item_id) > 255:
            raise ValueError("Invalid value for `item_id`, length must be less than or equal to `255`")  # noqa: E501
        if item_id is not None and len(item_id) < 1:
            raise ValueError("Invalid value for `item_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._item_id = item_id

    @property
    def nodes(self):
        """Gets the nodes of this RepairRequests.  # noqa: E501


        :return: The nodes of this RepairRequests.  # noqa: E501
        :rtype: list[RepairRequestsNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this RepairRequests.


        :param nodes: The nodes of this RepairRequests.  # noqa: E501
        :type: list[RepairRequestsNode]
        """

        self._nodes = nodes

    @property
    def queue_time(self):
        """Gets the queue_time of this RepairRequests.  # noqa: E501

        The time in seconds since the UNIX epoch at which request was queued.  # noqa: E501

        :return: The queue_time of this RepairRequests.  # noqa: E501
        :rtype: int
        """
        return self._queue_time

    @queue_time.setter
    def queue_time(self, queue_time):
        """Sets the queue_time of this RepairRequests.

        The time in seconds since the UNIX epoch at which request was queued.  # noqa: E501

        :param queue_time: The queue_time of this RepairRequests.  # noqa: E501
        :type: int
        """
        if queue_time is None:
            raise ValueError("Invalid value for `queue_time`, must not be `None`")  # noqa: E501
        if queue_time is not None and queue_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `queue_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if queue_time is not None and queue_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `queue_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._queue_time = queue_time

    @property
    def repair_id(self):
        """Gets the repair_id of this RepairRequests.  # noqa: E501

        The ID of the repair request.  # noqa: E501

        :return: The repair_id of this RepairRequests.  # noqa: E501
        :rtype: str
        """
        return self._repair_id

    @repair_id.setter
    def repair_id(self, repair_id):
        """Sets the repair_id of this RepairRequests.

        The ID of the repair request.  # noqa: E501

        :param repair_id: The repair_id of this RepairRequests.  # noqa: E501
        :type: str
        """
        if repair_id is None:
            raise ValueError("Invalid value for `repair_id`, must not be `None`")  # noqa: E501
        if repair_id is not None and len(repair_id) > 255:
            raise ValueError("Invalid value for `repair_id`, length must be less than or equal to `255`")  # noqa: E501
        if repair_id is not None and len(repair_id) < 1:
            raise ValueError("Invalid value for `repair_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._repair_id = repair_id

    @property
    def result(self):
        """Gets the result of this RepairRequests.  # noqa: E501

        The result of a repair.  # noqa: E501

        :return: The result of this RepairRequests.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this RepairRequests.

        The result of a repair.  # noqa: E501

        :param result: The result of this RepairRequests.  # noqa: E501
        :type: str
        """
        allowed_values = ["pass", "fail", "partial_fail", "skipped", "pending"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def scope(self):
        """Gets the scope of this RepairRequests.  # noqa: E501

        The scope of the repair.  # noqa: E501

        :return: The scope of this RepairRequests.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this RepairRequests.

        The scope of the repair.  # noqa: E501

        :param scope: The scope of this RepairRequests.  # noqa: E501
        :type: str
        """
        if scope is not None and len(scope) > 255:
            raise ValueError("Invalid value for `scope`, length must be less than or equal to `255`")  # noqa: E501
        if scope is not None and len(scope) < 1:
            raise ValueError("Invalid value for `scope`, length must be greater than or equal to `1`")  # noqa: E501

        self._scope = scope

    @property
    def source_id(self):
        """Gets the source_id of this RepairRequests.  # noqa: E501

        The ID of the source of the request.  # noqa: E501

        :return: The source_id of this RepairRequests.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this RepairRequests.

        The ID of the source of the request.  # noqa: E501

        :param source_id: The source_id of this RepairRequests.  # noqa: E501
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501
        if source_id is not None and len(source_id) > 255:
            raise ValueError("Invalid value for `source_id`, length must be less than or equal to `255`")  # noqa: E501
        if source_id is not None and len(source_id) < 1:
            raise ValueError("Invalid value for `source_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this RepairRequests.  # noqa: E501

        The source type of the request.  # noqa: E501

        :return: The source_type of this RepairRequests.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this RepairRequests.

        The source type of the request.  # noqa: E501

        :param source_type: The source_type of this RepairRequests.  # noqa: E501
        :type: str
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501
        allowed_values = ["HEALTHCHECK"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def start_time(self):
        """Gets the start_time of this RepairRequests.  # noqa: E501

        The time in seconds since the UNIX epoch at which request was started.  # noqa: E501

        :return: The start_time of this RepairRequests.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RepairRequests.

        The time in seconds since the UNIX epoch at which request was started.  # noqa: E501

        :param start_time: The start_time of this RepairRequests.  # noqa: E501
        :type: int
        """
        if start_time is not None and start_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if start_time is not None and start_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this RepairRequests.  # noqa: E501

        Status of a particular repair.  # noqa: E501

        :return: The status of this RepairRequests.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RepairRequests.

        Status of a particular repair.  # noqa: E501

        :param status: The status of this RepairRequests.  # noqa: E501
        :type: str
        """
        allowed_values = ["queued", "running", "complete", "stopped", "ready"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def task_id(self):
        """Gets the task_id of this RepairRequests.  # noqa: E501

        The ID of the repair task.  # noqa: E501

        :return: The task_id of this RepairRequests.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this RepairRequests.

        The ID of the repair task.  # noqa: E501

        :param task_id: The task_id of this RepairRequests.  # noqa: E501
        :type: str
        """
        if task_id is not None and len(task_id) > 255:
            raise ValueError("Invalid value for `task_id`, length must be less than or equal to `255`")  # noqa: E501
        if task_id is not None and len(task_id) < 0:
            raise ValueError("Invalid value for `task_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._task_id = task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepairRequests, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepairRequests):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
