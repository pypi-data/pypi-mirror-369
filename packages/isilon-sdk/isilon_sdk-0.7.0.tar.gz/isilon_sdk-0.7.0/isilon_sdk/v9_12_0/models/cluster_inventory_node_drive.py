# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterInventoryNodeDrive(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bay_number': 'int',
        'firmware': 'str',
        'model': 'str',
        'serial': 'str',
        'size': 'str',
        'size_gb': 'int',
        'status': 'str'
    }

    attribute_map = {
        'bay_number': 'bay_number',
        'firmware': 'firmware',
        'model': 'model',
        'serial': 'serial',
        'size': 'size',
        'size_gb': 'size_gb',
        'status': 'status'
    }

    def __init__(self, bay_number=None, firmware=None, model=None, serial=None, size=None, size_gb=None, status=None):  # noqa: E501
        """ClusterInventoryNodeDrive - a model defined in Swagger"""  # noqa: E501

        self._bay_number = None
        self._firmware = None
        self._model = None
        self._serial = None
        self._size = None
        self._size_gb = None
        self._status = None
        self.discriminator = None

        if bay_number is not None:
            self.bay_number = bay_number
        if firmware is not None:
            self.firmware = firmware
        if model is not None:
            self.model = model
        if serial is not None:
            self.serial = serial
        if size is not None:
            self.size = size
        if size_gb is not None:
            self.size_gb = size_gb
        if status is not None:
            self.status = status

    @property
    def bay_number(self):
        """Gets the bay_number of this ClusterInventoryNodeDrive.  # noqa: E501

        Numerical representation of this drive's bay.  # noqa: E501

        :return: The bay_number of this ClusterInventoryNodeDrive.  # noqa: E501
        :rtype: int
        """
        return self._bay_number

    @bay_number.setter
    def bay_number(self, bay_number):
        """Sets the bay_number of this ClusterInventoryNodeDrive.

        Numerical representation of this drive's bay.  # noqa: E501

        :param bay_number: The bay_number of this ClusterInventoryNodeDrive.  # noqa: E501
        :type: int
        """
        if bay_number is not None and bay_number > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `bay_number`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if bay_number is not None and bay_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `bay_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bay_number = bay_number

    @property
    def firmware(self):
        """Gets the firmware of this ClusterInventoryNodeDrive.  # noqa: E501

        Drive firmware information.  # noqa: E501

        :return: The firmware of this ClusterInventoryNodeDrive.  # noqa: E501
        :rtype: str
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this ClusterInventoryNodeDrive.

        Drive firmware information.  # noqa: E501

        :param firmware: The firmware of this ClusterInventoryNodeDrive.  # noqa: E501
        :type: str
        """
        if firmware is not None and len(firmware) > 255:
            raise ValueError("Invalid value for `firmware`, length must be less than or equal to `255`")  # noqa: E501
        if firmware is not None and len(firmware) < 0:
            raise ValueError("Invalid value for `firmware`, length must be greater than or equal to `0`")  # noqa: E501

        self._firmware = firmware

    @property
    def model(self):
        """Gets the model of this ClusterInventoryNodeDrive.  # noqa: E501

        This drive's manufacturer and model.  # noqa: E501

        :return: The model of this ClusterInventoryNodeDrive.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ClusterInventoryNodeDrive.

        This drive's manufacturer and model.  # noqa: E501

        :param model: The model of this ClusterInventoryNodeDrive.  # noqa: E501
        :type: str
        """
        if model is not None and len(model) > 255:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `255`")  # noqa: E501
        if model is not None and len(model) < 0:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `0`")  # noqa: E501

        self._model = model

    @property
    def serial(self):
        """Gets the serial of this ClusterInventoryNodeDrive.  # noqa: E501

        Serial number of the drive.  # noqa: E501

        :return: The serial of this ClusterInventoryNodeDrive.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this ClusterInventoryNodeDrive.

        Serial number of the drive.  # noqa: E501

        :param serial: The serial of this ClusterInventoryNodeDrive.  # noqa: E501
        :type: str
        """
        if serial is not None and len(serial) > 255:
            raise ValueError("Invalid value for `serial`, length must be less than or equal to `255`")  # noqa: E501
        if serial is not None and len(serial) < 0:
            raise ValueError("Invalid value for `serial`, length must be greater than or equal to `0`")  # noqa: E501

        self._serial = serial

    @property
    def size(self):
        """Gets the size of this ClusterInventoryNodeDrive.  # noqa: E501

        The drive's advertised capacity as a string, which may beGB, TB, or even PB depending on the magnitude, e.g.'1920GB'.  # noqa: E501

        :return: The size of this ClusterInventoryNodeDrive.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ClusterInventoryNodeDrive.

        The drive's advertised capacity as a string, which may beGB, TB, or even PB depending on the magnitude, e.g.'1920GB'.  # noqa: E501

        :param size: The size of this ClusterInventoryNodeDrive.  # noqa: E501
        :type: str
        """
        if size is not None and len(size) > 255:
            raise ValueError("Invalid value for `size`, length must be less than or equal to `255`")  # noqa: E501
        if size is not None and len(size) < 0:
            raise ValueError("Invalid value for `size`, length must be greater than or equal to `0`")  # noqa: E501

        self._size = size

    @property
    def size_gb(self):
        """Gets the size_gb of this ClusterInventoryNodeDrive.  # noqa: E501

        The drive's advertised capacity in GB.  # noqa: E501

        :return: The size_gb of this ClusterInventoryNodeDrive.  # noqa: E501
        :rtype: int
        """
        return self._size_gb

    @size_gb.setter
    def size_gb(self, size_gb):
        """Sets the size_gb of this ClusterInventoryNodeDrive.

        The drive's advertised capacity in GB.  # noqa: E501

        :param size_gb: The size_gb of this ClusterInventoryNodeDrive.  # noqa: E501
        :type: int
        """
        if size_gb is not None and size_gb > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `size_gb`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if size_gb is not None and size_gb < 0:  # noqa: E501
            raise ValueError("Invalid value for `size_gb`, must be a value greater than or equal to `0`")  # noqa: E501

        self._size_gb = size_gb

    @property
    def status(self):
        """Gets the status of this ClusterInventoryNodeDrive.  # noqa: E501

        Drive status (e.g., HEALTHY, SUSPENDED, EMPTY).  # noqa: E501

        :return: The status of this ClusterInventoryNodeDrive.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterInventoryNodeDrive.

        Drive status (e.g., HEALTHY, SUSPENDED, EMPTY).  # noqa: E501

        :param status: The status of this ClusterInventoryNodeDrive.  # noqa: E501
        :type: str
        """
        if status is not None and len(status) > 255:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `255`")  # noqa: E501
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `0`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInventoryNodeDrive, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInventoryNodeDrive):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
