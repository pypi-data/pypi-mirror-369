# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterInventorySwitchStatusTemperature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_id': 'object',
        'reading_celsius': 'object',
        'status': 'ClusterInventorySwitchStatusFanStatus'
    }

    attribute_map = {
        'member_id': 'member_id',
        'reading_celsius': 'reading_celsius',
        'status': 'status'
    }

    def __init__(self, member_id=None, reading_celsius=None, status=None):  # noqa: E501
        """ClusterInventorySwitchStatusTemperature - a model defined in Swagger"""  # noqa: E501

        self._member_id = None
        self._reading_celsius = None
        self._status = None
        self.discriminator = None

        if member_id is not None:
            self.member_id = member_id
        if reading_celsius is not None:
            self.reading_celsius = reading_celsius
        if status is not None:
            self.status = status

    @property
    def member_id(self):
        """Gets the member_id of this ClusterInventorySwitchStatusTemperature.  # noqa: E501

        Member ID.  # noqa: E501

        :return: The member_id of this ClusterInventorySwitchStatusTemperature.  # noqa: E501
        :rtype: object
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this ClusterInventorySwitchStatusTemperature.

        Member ID.  # noqa: E501

        :param member_id: The member_id of this ClusterInventorySwitchStatusTemperature.  # noqa: E501
        :type: object
        """

        self._member_id = member_id

    @property
    def reading_celsius(self):
        """Gets the reading_celsius of this ClusterInventorySwitchStatusTemperature.  # noqa: E501

        Temperature in Celsius.  # noqa: E501

        :return: The reading_celsius of this ClusterInventorySwitchStatusTemperature.  # noqa: E501
        :rtype: object
        """
        return self._reading_celsius

    @reading_celsius.setter
    def reading_celsius(self, reading_celsius):
        """Sets the reading_celsius of this ClusterInventorySwitchStatusTemperature.

        Temperature in Celsius.  # noqa: E501

        :param reading_celsius: The reading_celsius of this ClusterInventorySwitchStatusTemperature.  # noqa: E501
        :type: object
        """

        self._reading_celsius = reading_celsius

    @property
    def status(self):
        """Gets the status of this ClusterInventorySwitchStatusTemperature.  # noqa: E501

        Status.  # noqa: E501

        :return: The status of this ClusterInventorySwitchStatusTemperature.  # noqa: E501
        :rtype: ClusterInventorySwitchStatusFanStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterInventorySwitchStatusTemperature.

        Status.  # noqa: E501

        :param status: The status of this ClusterInventorySwitchStatusTemperature.  # noqa: E501
        :type: ClusterInventorySwitchStatusFanStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInventorySwitchStatusTemperature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInventorySwitchStatusTemperature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
