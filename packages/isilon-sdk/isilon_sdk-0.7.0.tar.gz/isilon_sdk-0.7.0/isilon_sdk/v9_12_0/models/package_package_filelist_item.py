# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PackagePackageFilelistItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_checksum_list': 'list[PackagePackageFilelistItemFilechecksumlistItem]',
        'file_path': 'str',
        'file_size': 'int',
        'filename': 'str'
    }

    attribute_map = {
        'file_checksum_list': 'fileChecksumList',
        'file_path': 'filePath',
        'file_size': 'fileSize',
        'filename': 'filename'
    }

    def __init__(self, file_checksum_list=None, file_path=None, file_size=None, filename=None):  # noqa: E501
        """PackagePackageFilelistItem - a model defined in Swagger"""  # noqa: E501

        self._file_checksum_list = None
        self._file_path = None
        self._file_size = None
        self._filename = None
        self.discriminator = None

        self.file_checksum_list = file_checksum_list
        self.file_path = file_path
        self.file_size = file_size
        self.filename = filename

    @property
    def file_checksum_list(self):
        """Gets the file_checksum_list of this PackagePackageFilelistItem.  # noqa: E501


        :return: The file_checksum_list of this PackagePackageFilelistItem.  # noqa: E501
        :rtype: list[PackagePackageFilelistItemFilechecksumlistItem]
        """
        return self._file_checksum_list

    @file_checksum_list.setter
    def file_checksum_list(self, file_checksum_list):
        """Sets the file_checksum_list of this PackagePackageFilelistItem.


        :param file_checksum_list: The file_checksum_list of this PackagePackageFilelistItem.  # noqa: E501
        :type: list[PackagePackageFilelistItemFilechecksumlistItem]
        """
        if file_checksum_list is None:
            raise ValueError("Invalid value for `file_checksum_list`, must not be `None`")  # noqa: E501

        self._file_checksum_list = file_checksum_list

    @property
    def file_path(self):
        """Gets the file_path of this PackagePackageFilelistItem.  # noqa: E501

        The file path of the upgrade package.  # noqa: E501

        :return: The file_path of this PackagePackageFilelistItem.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this PackagePackageFilelistItem.

        The file path of the upgrade package.  # noqa: E501

        :param file_path: The file_path of this PackagePackageFilelistItem.  # noqa: E501
        :type: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501
        if file_path is not None and len(file_path) > 4096:
            raise ValueError("Invalid value for `file_path`, length must be less than or equal to `4096`")  # noqa: E501
        if file_path is not None and len(file_path) < 0:
            raise ValueError("Invalid value for `file_path`, length must be greater than or equal to `0`")  # noqa: E501

        self._file_path = file_path

    @property
    def file_size(self):
        """Gets the file_size of this PackagePackageFilelistItem.  # noqa: E501

        The file size of the upgrade package.  # noqa: E501

        :return: The file_size of this PackagePackageFilelistItem.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this PackagePackageFilelistItem.

        The file size of the upgrade package.  # noqa: E501

        :param file_size: The file_size of this PackagePackageFilelistItem.  # noqa: E501
        :type: int
        """
        if file_size is None:
            raise ValueError("Invalid value for `file_size`, must not be `None`")  # noqa: E501
        if file_size is not None and file_size > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `file_size`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if file_size is not None and file_size < 1:  # noqa: E501
            raise ValueError("Invalid value for `file_size`, must be a value greater than or equal to `1`")  # noqa: E501

        self._file_size = file_size

    @property
    def filename(self):
        """Gets the filename of this PackagePackageFilelistItem.  # noqa: E501

        The file name of the upgrade package.  # noqa: E501

        :return: The filename of this PackagePackageFilelistItem.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this PackagePackageFilelistItem.

        The file name of the upgrade package.  # noqa: E501

        :param filename: The filename of this PackagePackageFilelistItem.  # noqa: E501
        :type: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")  # noqa: E501
        if filename is not None and len(filename) > 255:
            raise ValueError("Invalid value for `filename`, length must be less than or equal to `255`")  # noqa: E501
        if filename is not None and len(filename) < 1:
            raise ValueError("Invalid value for `filename`, length must be greater than or equal to `1`")  # noqa: E501

        self._filename = filename

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackagePackageFilelistItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackagePackageFilelistItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
