# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PackagePackageExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'criticality': 'str',
        'id': 'str',
        'lts': 'str',
        'name': 'str',
        'release_date': 'str',
        'status': 'str',
        'type': 'str',
        'version': 'str'
    }

    attribute_map = {
        'criticality': 'criticality',
        'id': 'id',
        'lts': 'lts',
        'name': 'name',
        'release_date': 'releaseDate',
        'status': 'status',
        'type': 'type',
        'version': 'version'
    }

    def __init__(self, criticality=None, id=None, lts=None, name=None, release_date=None, status=None, type=None, version=None):  # noqa: E501
        """PackagePackageExtended - a model defined in Swagger"""  # noqa: E501

        self._criticality = None
        self._id = None
        self._lts = None
        self._name = None
        self._release_date = None
        self._status = None
        self._type = None
        self._version = None
        self.discriminator = None

        if criticality is not None:
            self.criticality = criticality
        self.id = id
        if lts is not None:
            self.lts = lts
        self.name = name
        self.release_date = release_date
        self.status = status
        self.type = type
        self.version = version

    @property
    def criticality(self):
        """Gets the criticality of this PackagePackageExtended.  # noqa: E501

        The importance of the upgrade package.  # noqa: E501

        :return: The criticality of this PackagePackageExtended.  # noqa: E501
        :rtype: str
        """
        return self._criticality

    @criticality.setter
    def criticality(self, criticality):
        """Sets the criticality of this PackagePackageExtended.

        The importance of the upgrade package.  # noqa: E501

        :param criticality: The criticality of this PackagePackageExtended.  # noqa: E501
        :type: str
        """

        self._criticality = criticality

    @property
    def id(self):
        """Gets the id of this PackagePackageExtended.  # noqa: E501

        The ID of the upgrade package.  # noqa: E501

        :return: The id of this PackagePackageExtended.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PackagePackageExtended.

        The ID of the upgrade package.  # noqa: E501

        :param id: The id of this PackagePackageExtended.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def lts(self):
        """Gets the lts of this PackagePackageExtended.  # noqa: E501

        The Long Term Support version of the upgrade package.  # noqa: E501

        :return: The lts of this PackagePackageExtended.  # noqa: E501
        :rtype: str
        """
        return self._lts

    @lts.setter
    def lts(self, lts):
        """Sets the lts of this PackagePackageExtended.

        The Long Term Support version of the upgrade package.  # noqa: E501

        :param lts: The lts of this PackagePackageExtended.  # noqa: E501
        :type: str
        """
        if lts is not None and len(lts) > 255:
            raise ValueError("Invalid value for `lts`, length must be less than or equal to `255`")  # noqa: E501
        if lts is not None and len(lts) < 0:
            raise ValueError("Invalid value for `lts`, length must be greater than or equal to `0`")  # noqa: E501

        self._lts = lts

    @property
    def name(self):
        """Gets the name of this PackagePackageExtended.  # noqa: E501

        The name of the upgrade package.  # noqa: E501

        :return: The name of this PackagePackageExtended.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PackagePackageExtended.

        The name of the upgrade package.  # noqa: E501

        :param name: The name of this PackagePackageExtended.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def release_date(self):
        """Gets the release_date of this PackagePackageExtended.  # noqa: E501

        The release date of the upgrade package  # noqa: E501

        :return: The release_date of this PackagePackageExtended.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this PackagePackageExtended.

        The release date of the upgrade package  # noqa: E501

        :param release_date: The release_date of this PackagePackageExtended.  # noqa: E501
        :type: str
        """
        if release_date is None:
            raise ValueError("Invalid value for `release_date`, must not be `None`")  # noqa: E501
        if release_date is not None and len(release_date) > 255:
            raise ValueError("Invalid value for `release_date`, length must be less than or equal to `255`")  # noqa: E501
        if release_date is not None and len(release_date) < 1:
            raise ValueError("Invalid value for `release_date`, length must be greater than or equal to `1`")  # noqa: E501

        self._release_date = release_date

    @property
    def status(self):
        """Gets the status of this PackagePackageExtended.  # noqa: E501

        The status of the upgrade package.  # noqa: E501

        :return: The status of this PackagePackageExtended.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PackagePackageExtended.

        The status of the upgrade package.  # noqa: E501

        :param status: The status of this PackagePackageExtended.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Available", "Downloading", "Downloaded", "Download Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this PackagePackageExtended.  # noqa: E501

        The type of the upgrade package.  # noqa: E501

        :return: The type of this PackagePackageExtended.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PackagePackageExtended.

        The type of the upgrade package.  # noqa: E501

        :param type: The type of this PackagePackageExtended.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if type is not None and len(type) > 255:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `255`")  # noqa: E501
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def version(self):
        """Gets the version of this PackagePackageExtended.  # noqa: E501

        The release version of the upgrade package.  # noqa: E501

        :return: The version of this PackagePackageExtended.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PackagePackageExtended.

        The release version of the upgrade package.  # noqa: E501

        :param version: The version of this PackagePackageExtended.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if version is not None and len(version) > 255:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `255`")  # noqa: E501
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackagePackageExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackagePackageExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
