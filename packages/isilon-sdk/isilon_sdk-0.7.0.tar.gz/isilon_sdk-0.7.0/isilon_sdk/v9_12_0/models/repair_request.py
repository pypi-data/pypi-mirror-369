# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RepairRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_trigger': 'bool',
        'item_id': 'str',
        'source_id': 'str',
        'source_type': 'str',
        'task_id': 'str'
    }

    attribute_map = {
        'auto_trigger': 'auto_trigger',
        'item_id': 'item_id',
        'source_id': 'source_id',
        'source_type': 'source_type',
        'task_id': 'task_id'
    }

    def __init__(self, auto_trigger=None, item_id=None, source_id=None, source_type=None, task_id=None):  # noqa: E501
        """RepairRequest - a model defined in Swagger"""  # noqa: E501

        self._auto_trigger = None
        self._item_id = None
        self._source_id = None
        self._source_type = None
        self._task_id = None
        self.discriminator = None

        if auto_trigger is not None:
            self.auto_trigger = auto_trigger
        self.item_id = item_id
        if source_id is not None:
            self.source_id = source_id
        self.source_type = source_type
        if task_id is not None:
            self.task_id = task_id

    @property
    def auto_trigger(self):
        """Gets the auto_trigger of this RepairRequest.  # noqa: E501

        If the repair action should be automatically triggered upon a failure.  # noqa: E501

        :return: The auto_trigger of this RepairRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_trigger

    @auto_trigger.setter
    def auto_trigger(self, auto_trigger):
        """Sets the auto_trigger of this RepairRequest.

        If the repair action should be automatically triggered upon a failure.  # noqa: E501

        :param auto_trigger: The auto_trigger of this RepairRequest.  # noqa: E501
        :type: bool
        """

        self._auto_trigger = auto_trigger

    @property
    def item_id(self):
        """Gets the item_id of this RepairRequest.  # noqa: E501

        The ID of the healthcheck item.  # noqa: E501

        :return: The item_id of this RepairRequest.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this RepairRequest.

        The ID of the healthcheck item.  # noqa: E501

        :param item_id: The item_id of this RepairRequest.  # noqa: E501
        :type: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501
        if item_id is not None and len(item_id) > 255:
            raise ValueError("Invalid value for `item_id`, length must be less than or equal to `255`")  # noqa: E501
        if item_id is not None and len(item_id) < 1:
            raise ValueError("Invalid value for `item_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._item_id = item_id

    @property
    def source_id(self):
        """Gets the source_id of this RepairRequest.  # noqa: E501

        The ID of the source of the request.                 e.g. In case of healthcheck evaluation ID.  # noqa: E501

        :return: The source_id of this RepairRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this RepairRequest.

        The ID of the source of the request.                 e.g. In case of healthcheck evaluation ID.  # noqa: E501

        :param source_id: The source_id of this RepairRequest.  # noqa: E501
        :type: str
        """
        if source_id is not None and len(source_id) > 255:
            raise ValueError("Invalid value for `source_id`, length must be less than or equal to `255`")  # noqa: E501
        if source_id is not None and len(source_id) < 1:
            raise ValueError("Invalid value for `source_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this RepairRequest.  # noqa: E501

        The source type of the request.  # noqa: E501

        :return: The source_type of this RepairRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this RepairRequest.

        The source type of the request.  # noqa: E501

        :param source_type: The source_type of this RepairRequest.  # noqa: E501
        :type: str
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501
        allowed_values = ["HEALTHCHECK"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def task_id(self):
        """Gets the task_id of this RepairRequest.  # noqa: E501

        The ID of the repair task.  # noqa: E501

        :return: The task_id of this RepairRequest.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this RepairRequest.

        The ID of the repair task.  # noqa: E501

        :param task_id: The task_id of this RepairRequest.  # noqa: E501
        :type: str
        """
        if task_id is not None and len(task_id) > 255:
            raise ValueError("Invalid value for `task_id`, length must be less than or equal to `255`")  # noqa: E501
        if task_id is not None and len(task_id) < 1:
            raise ValueError("Invalid value for `task_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._task_id = task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepairRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepairRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
