# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MpaTrustAnchor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_data': 'str',
        'cert_name': 'str',
        'cert_type': 'str'
    }

    attribute_map = {
        'cert_data': 'cert_data',
        'cert_name': 'cert_name',
        'cert_type': 'cert_type'
    }

    def __init__(self, cert_data=None, cert_name=None, cert_type=None):  # noqa: E501
        """MpaTrustAnchor - a model defined in Swagger"""  # noqa: E501

        self._cert_data = None
        self._cert_name = None
        self._cert_type = None
        self.discriminator = None

        self.cert_data = cert_data
        if cert_name is not None:
            self.cert_name = cert_name
        self.cert_type = cert_type

    @property
    def cert_data(self):
        """Gets the cert_data of this MpaTrustAnchor.  # noqa: E501

        Base64 encoded certificate.  # noqa: E501

        :return: The cert_data of this MpaTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._cert_data

    @cert_data.setter
    def cert_data(self, cert_data):
        """Sets the cert_data of this MpaTrustAnchor.

        Base64 encoded certificate.  # noqa: E501

        :param cert_data: The cert_data of this MpaTrustAnchor.  # noqa: E501
        :type: str
        """
        if cert_data is None:
            raise ValueError("Invalid value for `cert_data`, must not be `None`")  # noqa: E501
        if cert_data is not None and len(cert_data) > 8192:
            raise ValueError("Invalid value for `cert_data`, length must be less than or equal to `8192`")  # noqa: E501
        if cert_data is not None and len(cert_data) < 1:
            raise ValueError("Invalid value for `cert_data`, length must be greater than or equal to `1`")  # noqa: E501

        self._cert_data = cert_data

    @property
    def cert_name(self):
        """Gets the cert_name of this MpaTrustAnchor.  # noqa: E501

        Name of trusted root CA certificate.  # noqa: E501

        :return: The cert_name of this MpaTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._cert_name

    @cert_name.setter
    def cert_name(self, cert_name):
        """Sets the cert_name of this MpaTrustAnchor.

        Name of trusted root CA certificate.  # noqa: E501

        :param cert_name: The cert_name of this MpaTrustAnchor.  # noqa: E501
        :type: str
        """
        if cert_name is not None and len(cert_name) > 255:
            raise ValueError("Invalid value for `cert_name`, length must be less than or equal to `255`")  # noqa: E501
        if cert_name is not None and len(cert_name) < 1:
            raise ValueError("Invalid value for `cert_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._cert_name = cert_name

    @property
    def cert_type(self):
        """Gets the cert_type of this MpaTrustAnchor.  # noqa: E501

        Type of trust anchor certificate.  # noqa: E501

        :return: The cert_type of this MpaTrustAnchor.  # noqa: E501
        :rtype: str
        """
        return self._cert_type

    @cert_type.setter
    def cert_type(self, cert_type):
        """Sets the cert_type of this MpaTrustAnchor.

        Type of trust anchor certificate.  # noqa: E501

        :param cert_type: The cert_type of this MpaTrustAnchor.  # noqa: E501
        :type: str
        """
        if cert_type is None:
            raise ValueError("Invalid value for `cert_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Digital_Sign"]  # noqa: E501
        if cert_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cert_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cert_type, allowed_values)
            )

        self._cert_type = cert_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpaTrustAnchor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpaTrustAnchor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
