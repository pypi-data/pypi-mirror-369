# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RepairSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repair_behavior': 'str',
        'repair_enabled': 'bool'
    }

    attribute_map = {
        'repair_behavior': 'repair_behavior',
        'repair_enabled': 'repair_enabled'
    }

    def __init__(self, repair_behavior=None, repair_enabled=None):  # noqa: E501
        """RepairSettings - a model defined in Swagger"""  # noqa: E501

        self._repair_behavior = None
        self._repair_enabled = None
        self.discriminator = None

        if repair_behavior is not None:
            self.repair_behavior = repair_behavior
        if repair_enabled is not None:
            self.repair_enabled = repair_enabled

    @property
    def repair_behavior(self):
        """Gets the repair_behavior of this RepairSettings.  # noqa: E501

        A string used to identify the repair behavior.  # noqa: E501

        :return: The repair_behavior of this RepairSettings.  # noqa: E501
        :rtype: str
        """
        return self._repair_behavior

    @repair_behavior.setter
    def repair_behavior(self, repair_behavior):
        """Sets the repair_behavior of this RepairSettings.

        A string used to identify the repair behavior.  # noqa: E501

        :param repair_behavior: The repair_behavior of this RepairSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["auto", "manual"]  # noqa: E501
        if repair_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `repair_behavior` ({0}), must be one of {1}"  # noqa: E501
                .format(repair_behavior, allowed_values)
            )

        self._repair_behavior = repair_behavior

    @property
    def repair_enabled(self):
        """Gets the repair_enabled of this RepairSettings.  # noqa: E501

        A True value indicates the repair is currently enabled on the cluster.  # noqa: E501

        :return: The repair_enabled of this RepairSettings.  # noqa: E501
        :rtype: bool
        """
        return self._repair_enabled

    @repair_enabled.setter
    def repair_enabled(self, repair_enabled):
        """Sets the repair_enabled of this RepairSettings.

        A True value indicates the repair is currently enabled on the cluster.  # noqa: E501

        :param repair_enabled: The repair_enabled of this RepairSettings.  # noqa: E501
        :type: bool
        """

        self._repair_enabled = repair_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepairSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepairSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
