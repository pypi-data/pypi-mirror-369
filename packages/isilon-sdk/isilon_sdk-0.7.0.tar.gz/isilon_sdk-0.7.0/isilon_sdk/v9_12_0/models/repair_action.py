# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RepairAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'conflicts': 'list[str]',
        'dependencies': 'list[str]',
        'deprecated': 'list[str]',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'no_propagation': 'str',
        'nodes': 'list[int]',
        'pkgnumber': 'str',
        'pkgtype': 'str',
        'services': 'list[HealthcheckDefinitionService]',
        'signature': 'str',
        'status': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'conflicts': 'conflicts',
        'dependencies': 'dependencies',
        'deprecated': 'deprecated',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'no_propagation': 'no propagation',
        'nodes': 'nodes',
        'pkgnumber': 'pkgnumber',
        'pkgtype': 'pkgtype',
        'services': 'services',
        'signature': 'signature',
        'status': 'status'
    }

    def __init__(self, comment=None, conflicts=None, dependencies=None, deprecated=None, description=None, id=None, name=None, no_propagation=None, nodes=None, pkgnumber=None, pkgtype=None, services=None, signature=None, status=None):  # noqa: E501
        """RepairAction - a model defined in Swagger"""  # noqa: E501

        self._comment = None
        self._conflicts = None
        self._dependencies = None
        self._deprecated = None
        self._description = None
        self._id = None
        self._name = None
        self._no_propagation = None
        self._nodes = None
        self._pkgnumber = None
        self._pkgtype = None
        self._services = None
        self._signature = None
        self._status = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if conflicts is not None:
            self.conflicts = conflicts
        if dependencies is not None:
            self.dependencies = dependencies
        if deprecated is not None:
            self.deprecated = deprecated
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if no_propagation is not None:
            self.no_propagation = no_propagation
        if nodes is not None:
            self.nodes = nodes
        if pkgnumber is not None:
            self.pkgnumber = pkgnumber
        if pkgtype is not None:
            self.pkgtype = pkgtype
        if services is not None:
            self.services = services
        if signature is not None:
            self.signature = signature
        if status is not None:
            self.status = status

    @property
    def comment(self):
        """Gets the comment of this RepairAction.  # noqa: E501

        A long comment about the repair action.  # noqa: E501

        :return: The comment of this RepairAction.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this RepairAction.

        A long comment about the repair action.  # noqa: E501

        :param comment: The comment of this RepairAction.  # noqa: E501
        :type: str
        """
        if comment is not None and len(comment) > 8192:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `8192`")  # noqa: E501
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")  # noqa: E501

        self._comment = comment

    @property
    def conflicts(self):
        """Gets the conflicts of this RepairAction.  # noqa: E501

        Other repair actions that this repair action conflicts with.  # noqa: E501

        :return: The conflicts of this RepairAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._conflicts

    @conflicts.setter
    def conflicts(self, conflicts):
        """Sets the conflicts of this RepairAction.

        Other repair actions that this repair action conflicts with.  # noqa: E501

        :param conflicts: The conflicts of this RepairAction.  # noqa: E501
        :type: list[str]
        """

        self._conflicts = conflicts

    @property
    def dependencies(self):
        """Gets the dependencies of this RepairAction.  # noqa: E501

        Other repair actions that this repair action depends on.  # noqa: E501

        :return: The dependencies of this RepairAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this RepairAction.

        Other repair actions that this repair action depends on.  # noqa: E501

        :param dependencies: The dependencies of this RepairAction.  # noqa: E501
        :type: list[str]
        """

        self._dependencies = dependencies

    @property
    def deprecated(self):
        """Gets the deprecated of this RepairAction.  # noqa: E501

        List of deprecated repair actions.  # noqa: E501

        :return: The deprecated of this RepairAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this RepairAction.

        List of deprecated repair actions.  # noqa: E501

        :param deprecated: The deprecated of this RepairAction.  # noqa: E501
        :type: list[str]
        """

        self._deprecated = deprecated

    @property
    def description(self):
        """Gets the description of this RepairAction.  # noqa: E501

        A short description of the repair action.  # noqa: E501

        :return: The description of this RepairAction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RepairAction.

        A short description of the repair action.  # noqa: E501

        :param description: The description of this RepairAction.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def id(self):
        """Gets the id of this RepairAction.  # noqa: E501

        A unique identifier for the repair action.  # noqa: E501

        :return: The id of this RepairAction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepairAction.

        A unique identifier for the repair action.  # noqa: E501

        :param id: The id of this RepairAction.  # noqa: E501
        :type: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if id is not None and len(id) < 0:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `0`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this RepairAction.  # noqa: E501

        The name of the repair action.  # noqa: E501

        :return: The name of this RepairAction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepairAction.

        The name of the repair action.  # noqa: E501

        :param name: The name of this RepairAction.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def no_propagation(self):
        """Gets the no_propagation of this RepairAction.  # noqa: E501

        PKG MCP Propagation.  # noqa: E501

        :return: The no_propagation of this RepairAction.  # noqa: E501
        :rtype: str
        """
        return self._no_propagation

    @no_propagation.setter
    def no_propagation(self, no_propagation):
        """Sets the no_propagation of this RepairAction.

        PKG MCP Propagation.  # noqa: E501

        :param no_propagation: The no_propagation of this RepairAction.  # noqa: E501
        :type: str
        """
        if no_propagation is not None and len(no_propagation) > 255:
            raise ValueError("Invalid value for `no_propagation`, length must be less than or equal to `255`")  # noqa: E501
        if no_propagation is not None and len(no_propagation) < 0:
            raise ValueError("Invalid value for `no_propagation`, length must be greater than or equal to `0`")  # noqa: E501

        self._no_propagation = no_propagation

    @property
    def nodes(self):
        """Gets the nodes of this RepairAction.  # noqa: E501

        The nodes that this repair action is installed on.  # noqa: E501

        :return: The nodes of this RepairAction.  # noqa: E501
        :rtype: list[int]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this RepairAction.

        The nodes that this repair action is installed on.  # noqa: E501

        :param nodes: The nodes of this RepairAction.  # noqa: E501
        :type: list[int]
        """

        self._nodes = nodes

    @property
    def pkgnumber(self):
        """Gets the pkgnumber of this RepairAction.  # noqa: E501

        Package number.  # noqa: E501

        :return: The pkgnumber of this RepairAction.  # noqa: E501
        :rtype: str
        """
        return self._pkgnumber

    @pkgnumber.setter
    def pkgnumber(self, pkgnumber):
        """Sets the pkgnumber of this RepairAction.

        Package number.  # noqa: E501

        :param pkgnumber: The pkgnumber of this RepairAction.  # noqa: E501
        :type: str
        """
        if pkgnumber is not None and len(pkgnumber) > 255:
            raise ValueError("Invalid value for `pkgnumber`, length must be less than or equal to `255`")  # noqa: E501
        if pkgnumber is not None and len(pkgnumber) < 0:
            raise ValueError("Invalid value for `pkgnumber`, length must be greater than or equal to `0`")  # noqa: E501

        self._pkgnumber = pkgnumber

    @property
    def pkgtype(self):
        """Gets the pkgtype of this RepairAction.  # noqa: E501

        Type of package.  # noqa: E501

        :return: The pkgtype of this RepairAction.  # noqa: E501
        :rtype: str
        """
        return self._pkgtype

    @pkgtype.setter
    def pkgtype(self, pkgtype):
        """Sets the pkgtype of this RepairAction.

        Type of package.  # noqa: E501

        :param pkgtype: The pkgtype of this RepairAction.  # noqa: E501
        :type: str
        """
        if pkgtype is not None and len(pkgtype) > 255:
            raise ValueError("Invalid value for `pkgtype`, length must be less than or equal to `255`")  # noqa: E501
        if pkgtype is not None and len(pkgtype) < 0:
            raise ValueError("Invalid value for `pkgtype`, length must be greater than or equal to `0`")  # noqa: E501

        self._pkgtype = pkgtype

    @property
    def services(self):
        """Gets the services of this RepairAction.  # noqa: E501

        The services affected during the repair-action deployment  # noqa: E501

        :return: The services of this RepairAction.  # noqa: E501
        :rtype: list[HealthcheckDefinitionService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this RepairAction.

        The services affected during the repair-action deployment  # noqa: E501

        :param services: The services of this RepairAction.  # noqa: E501
        :type: list[HealthcheckDefinitionService]
        """

        self._services = services

    @property
    def signature(self):
        """Gets the signature of this RepairAction.  # noqa: E501

        Signature of file.  # noqa: E501

        :return: The signature of this RepairAction.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this RepairAction.

        Signature of file.  # noqa: E501

        :param signature: The signature of this RepairAction.  # noqa: E501
        :type: str
        """
        if signature is not None and len(signature) > 8192:
            raise ValueError("Invalid value for `signature`, length must be less than or equal to `8192`")  # noqa: E501
        if signature is not None and len(signature) < 0:
            raise ValueError("Invalid value for `signature`, length must be greater than or equal to `0`")  # noqa: E501

        self._signature = signature

    @property
    def status(self):
        """Gets the status of this RepairAction.  # noqa: E501

        The installation status of this repair action on the cluster.  # noqa: E501

        :return: The status of this RepairAction.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RepairAction.

        The installation status of this repair action on the cluster.  # noqa: E501

        :param status: The status of this RepairAction.  # noqa: E501
        :type: str
        """
        if status is not None and len(status) > 255:
            raise ValueError("Invalid value for `status`, length must be less than or equal to `255`")  # noqa: E501
        if status is not None and len(status) < 0:
            raise ValueError("Invalid value for `status`, length must be greater than or equal to `0`")  # noqa: E501

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepairAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepairAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
