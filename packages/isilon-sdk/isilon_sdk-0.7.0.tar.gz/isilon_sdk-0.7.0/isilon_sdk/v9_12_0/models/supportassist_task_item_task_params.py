# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportassistTaskItemTaskParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exclude_modules': 'list[str]',
        'include_modules': 'list[str]',
        'lacs': 'list[str]',
        'only_modules': 'list[str]',
        'sub_task': 'str'
    }

    attribute_map = {
        'exclude_modules': 'exclude_modules',
        'include_modules': 'include_modules',
        'lacs': 'lacs',
        'only_modules': 'only_modules',
        'sub_task': 'sub_task'
    }

    def __init__(self, exclude_modules=None, include_modules=None, lacs=None, only_modules=None, sub_task=None):  # noqa: E501
        """SupportassistTaskItemTaskParams - a model defined in Swagger"""  # noqa: E501

        self._exclude_modules = None
        self._include_modules = None
        self._lacs = None
        self._only_modules = None
        self._sub_task = None
        self.discriminator = None

        if exclude_modules is not None:
            self.exclude_modules = exclude_modules
        if include_modules is not None:
            self.include_modules = include_modules
        if lacs is not None:
            self.lacs = lacs
        if only_modules is not None:
            self.only_modules = only_modules
        self.sub_task = sub_task

    @property
    def exclude_modules(self):
        """Gets the exclude_modules of this SupportassistTaskItemTaskParams.  # noqa: E501

        Licensable modules to exclude from activation  # noqa: E501

        :return: The exclude_modules of this SupportassistTaskItemTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclude_modules

    @exclude_modules.setter
    def exclude_modules(self, exclude_modules):
        """Sets the exclude_modules of this SupportassistTaskItemTaskParams.

        Licensable modules to exclude from activation  # noqa: E501

        :param exclude_modules: The exclude_modules of this SupportassistTaskItemTaskParams.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CLOUDPOOLS", "HARDENING", "HDFS", "ONEFS", "SMARTCONNECT_ADVANCED", "SMARTDEDUPE", "SMARTLOCK", "SMARTPOOLS", "SMARTQUOTAS", "SNAPSHOTIQ", "SYNCIQ"]  # noqa: E501
        if not set(exclude_modules).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `exclude_modules` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(exclude_modules) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._exclude_modules = exclude_modules

    @property
    def include_modules(self):
        """Gets the include_modules of this SupportassistTaskItemTaskParams.  # noqa: E501

        Licensable modules to include in activation  # noqa: E501

        :return: The include_modules of this SupportassistTaskItemTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._include_modules

    @include_modules.setter
    def include_modules(self, include_modules):
        """Sets the include_modules of this SupportassistTaskItemTaskParams.

        Licensable modules to include in activation  # noqa: E501

        :param include_modules: The include_modules of this SupportassistTaskItemTaskParams.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CLOUDPOOLS", "HARDENING", "HDFS", "ONEFS", "SMARTCONNECT_ADVANCED", "SMARTDEDUPE", "SMARTLOCK", "SMARTPOOLS", "SMARTQUOTAS", "SNAPSHOTIQ", "SYNCIQ"]  # noqa: E501
        if not set(include_modules).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `include_modules` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(include_modules) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._include_modules = include_modules

    @property
    def lacs(self):
        """Gets the lacs of this SupportassistTaskItemTaskParams.  # noqa: E501

        An array of license activation codes  # noqa: E501

        :return: The lacs of this SupportassistTaskItemTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._lacs

    @lacs.setter
    def lacs(self, lacs):
        """Sets the lacs of this SupportassistTaskItemTaskParams.

        An array of license activation codes  # noqa: E501

        :param lacs: The lacs of this SupportassistTaskItemTaskParams.  # noqa: E501
        :type: list[str]
        """

        self._lacs = lacs

    @property
    def only_modules(self):
        """Gets the only_modules of this SupportassistTaskItemTaskParams.  # noqa: E501

        Activate only these licensable modules  # noqa: E501

        :return: The only_modules of this SupportassistTaskItemTaskParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._only_modules

    @only_modules.setter
    def only_modules(self, only_modules):
        """Sets the only_modules of this SupportassistTaskItemTaskParams.

        Activate only these licensable modules  # noqa: E501

        :param only_modules: The only_modules of this SupportassistTaskItemTaskParams.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["CLOUDPOOLS", "HARDENING", "HDFS", "ONEFS", "SMARTCONNECT_ADVANCED", "SMARTDEDUPE", "SMARTLOCK", "SMARTPOOLS", "SMARTQUOTAS", "SNAPSHOTIQ", "SYNCIQ"]  # noqa: E501
        if not set(only_modules).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `only_modules` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(only_modules) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._only_modules = only_modules

    @property
    def sub_task(self):
        """Gets the sub_task of this SupportassistTaskItemTaskParams.  # noqa: E501


        :return: The sub_task of this SupportassistTaskItemTaskParams.  # noqa: E501
        :rtype: str
        """
        return self._sub_task

    @sub_task.setter
    def sub_task(self, sub_task):
        """Sets the sub_task of this SupportassistTaskItemTaskParams.


        :param sub_task: The sub_task of this SupportassistTaskItemTaskParams.  # noqa: E501
        :type: str
        """
        if sub_task is None:
            raise ValueError("Invalid value for `sub_task`, must not be `None`")  # noqa: E501
        allowed_values = ["license"]  # noqa: E501
        if sub_task not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_task` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_task, allowed_values)
            )

        self._sub_task = sub_task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportassistTaskItemTaskParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportassistTaskItemTaskParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
