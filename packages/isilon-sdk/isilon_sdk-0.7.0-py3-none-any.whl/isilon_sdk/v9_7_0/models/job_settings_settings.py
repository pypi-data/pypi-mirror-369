# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 18
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobSettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parallel_restriper_mode': 'str'
    }

    attribute_map = {
        'parallel_restriper_mode': 'parallel_restriper_mode'
    }

    def __init__(self, parallel_restriper_mode=None):  # noqa: E501
        """JobSettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._parallel_restriper_mode = None
        self.discriminator = None

        if parallel_restriper_mode is not None:
            self.parallel_restriper_mode = parallel_restriper_mode

    @property
    def parallel_restriper_mode(self):
        """Gets the parallel_restriper_mode of this JobSettingsSettings.  # noqa: E501

        Specify how restriper exclusion in the job engine is relaxed. Off means not relaxed. Partial keeps FlexProtect family jobs running alone from other restriper jobs. All relaxes all exclusions between restriper jobs.  # noqa: E501

        :return: The parallel_restriper_mode of this JobSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._parallel_restriper_mode

    @parallel_restriper_mode.setter
    def parallel_restriper_mode(self, parallel_restriper_mode):
        """Sets the parallel_restriper_mode of this JobSettingsSettings.

        Specify how restriper exclusion in the job engine is relaxed. Off means not relaxed. Partial keeps FlexProtect family jobs running alone from other restriper jobs. All relaxes all exclusions between restriper jobs.  # noqa: E501

        :param parallel_restriper_mode: The parallel_restriper_mode of this JobSettingsSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["Off", "Partial", "All"]  # noqa: E501
        if parallel_restriper_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `parallel_restriper_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(parallel_restriper_mode, allowed_values)
            )

        self._parallel_restriper_mode = parallel_restriper_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobSettingsSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
