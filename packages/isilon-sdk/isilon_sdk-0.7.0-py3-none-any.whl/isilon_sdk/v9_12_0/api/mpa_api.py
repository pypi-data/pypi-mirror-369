# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from isilon_sdk.v9_12_0.api_client import ApiClient


class MpaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_mpa_approval_by_id(self, mpa_approval_id, mpa_approval_id2, **kwargs):  # noqa: E501
        """create_mpa_approval_by_id  # noqa: E501

        MPA request approval decision.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mpa_approval_by_id(mpa_approval_id, mpa_approval_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaApprovalId mpa_approval_id: (required)
        :param str mpa_approval_id2: MPA request approval decision. (required)
        :param str zone: Specifies which access zone to use.
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_mpa_approval_by_id_with_http_info(mpa_approval_id, mpa_approval_id2, **kwargs)  # noqa: E501
        else:
            (data) = self.create_mpa_approval_by_id_with_http_info(mpa_approval_id, mpa_approval_id2, **kwargs)  # noqa: E501
            return data

    def create_mpa_approval_by_id_with_http_info(self, mpa_approval_id, mpa_approval_id2, **kwargs):  # noqa: E501
        """create_mpa_approval_by_id  # noqa: E501

        MPA request approval decision.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mpa_approval_by_id_with_http_info(mpa_approval_id, mpa_approval_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaApprovalId mpa_approval_id: (required)
        :param str mpa_approval_id2: MPA request approval decision. (required)
        :param str zone: Specifies which access zone to use.
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpa_approval_id', 'mpa_approval_id2', 'zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mpa_approval_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpa_approval_id' is set
        if ('mpa_approval_id' not in params or
                params['mpa_approval_id'] is None):
            raise ValueError("Missing the required parameter `mpa_approval_id` when calling `create_mpa_approval_by_id`")  # noqa: E501
        # verify the required parameter 'mpa_approval_id2' is set
        if ('mpa_approval_id2' not in params or
                params['mpa_approval_id2'] is None):
            raise ValueError("Missing the required parameter `mpa_approval_id2` when calling `create_mpa_approval_by_id`")  # noqa: E501

        if ('zone' in params and
                len(params['zone']) > 255):
            raise ValueError("Invalid value for parameter `zone` when calling `create_mpa_approval_by_id`, length must be less than or equal to `255`")  # noqa: E501
        if ('zone' in params and
                len(params['zone']) < 0):
            raise ValueError("Invalid value for parameter `zone` when calling `create_mpa_approval_by_id`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'mpa_approval_id2' in params:
            path_params['MpaApprovalId'] = params['mpa_approval_id2']  # noqa: E501

        query_params = []
        if 'zone' in params:
            query_params.append(('zone', params['zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mpa_approval_id' in params:
            body_params = params['mpa_approval_id']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/approval/{MpaApprovalId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_mpa_initiate_registration_item(self, mpa_initiate_registration_item, **kwargs):  # noqa: E501
        """create_mpa_initiate_registration_item  # noqa: E501

        Specifies the properties to initiate approver registration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mpa_initiate_registration_item(mpa_initiate_registration_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Empty mpa_initiate_registration_item: (required)
        :param bool force: Flag to force approver registration re-initiation.
        :return: CreateMpaInitiateRegistrationItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_mpa_initiate_registration_item_with_http_info(mpa_initiate_registration_item, **kwargs)  # noqa: E501
        else:
            (data) = self.create_mpa_initiate_registration_item_with_http_info(mpa_initiate_registration_item, **kwargs)  # noqa: E501
            return data

    def create_mpa_initiate_registration_item_with_http_info(self, mpa_initiate_registration_item, **kwargs):  # noqa: E501
        """create_mpa_initiate_registration_item  # noqa: E501

        Specifies the properties to initiate approver registration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mpa_initiate_registration_item_with_http_info(mpa_initiate_registration_item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Empty mpa_initiate_registration_item: (required)
        :param bool force: Flag to force approver registration re-initiation.
        :return: CreateMpaInitiateRegistrationItemResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpa_initiate_registration_item', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mpa_initiate_registration_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpa_initiate_registration_item' is set
        if ('mpa_initiate_registration_item' not in params or
                params['mpa_initiate_registration_item'] is None):
            raise ValueError("Missing the required parameter `mpa_initiate_registration_item` when calling `create_mpa_initiate_registration_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mpa_initiate_registration_item' in params:
            body_params = params['mpa_initiate_registration_item']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/initiate-registration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateMpaInitiateRegistrationItemResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_mpa_request(self, mpa_request, **kwargs):  # noqa: E501
        """create_mpa_request  # noqa: E501

        Create a new MPA Request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mpa_request(mpa_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaRequestCreateParams mpa_request: (required)
        :param str zone: Specifies which access zone to use.
        :return: CreateMpaRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_mpa_request_with_http_info(mpa_request, **kwargs)  # noqa: E501
        else:
            (data) = self.create_mpa_request_with_http_info(mpa_request, **kwargs)  # noqa: E501
            return data

    def create_mpa_request_with_http_info(self, mpa_request, **kwargs):  # noqa: E501
        """create_mpa_request  # noqa: E501

        Create a new MPA Request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mpa_request_with_http_info(mpa_request, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaRequestCreateParams mpa_request: (required)
        :param str zone: Specifies which access zone to use.
        :return: CreateMpaRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpa_request', 'zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mpa_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpa_request' is set
        if ('mpa_request' not in params or
                params['mpa_request'] is None):
            raise ValueError("Missing the required parameter `mpa_request` when calling `create_mpa_request`")  # noqa: E501

        if ('zone' in params and
                len(params['zone']) > 255):
            raise ValueError("Invalid value for parameter `zone` when calling `create_mpa_request`, length must be less than or equal to `255`")  # noqa: E501
        if ('zone' in params and
                len(params['zone']) < 0):
            raise ValueError("Invalid value for parameter `zone` when calling `create_mpa_request`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'zone' in params:
            query_params.append(('zone', params['zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mpa_request' in params:
            body_params = params['mpa_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/requests', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateMpaRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_mpa_trust_anchor(self, mpa_trust_anchor, **kwargs):  # noqa: E501
        """create_mpa_trust_anchor  # noqa: E501

        Upload trusted root CA for MPA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mpa_trust_anchor(mpa_trust_anchor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaTrustAnchor mpa_trust_anchor: (required)
        :param bool force: Flag to force upload trust anchor.
        :return: CreateMpaTrustAnchorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_mpa_trust_anchor_with_http_info(mpa_trust_anchor, **kwargs)  # noqa: E501
        else:
            (data) = self.create_mpa_trust_anchor_with_http_info(mpa_trust_anchor, **kwargs)  # noqa: E501
            return data

    def create_mpa_trust_anchor_with_http_info(self, mpa_trust_anchor, **kwargs):  # noqa: E501
        """create_mpa_trust_anchor  # noqa: E501

        Upload trusted root CA for MPA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_mpa_trust_anchor_with_http_info(mpa_trust_anchor, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaTrustAnchor mpa_trust_anchor: (required)
        :param bool force: Flag to force upload trust anchor.
        :return: CreateMpaTrustAnchorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpa_trust_anchor', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_mpa_trust_anchor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpa_trust_anchor' is set
        if ('mpa_trust_anchor' not in params or
                params['mpa_trust_anchor'] is None):
            raise ValueError("Missing the required parameter `mpa_trust_anchor` when calling `create_mpa_trust_anchor`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mpa_trust_anchor' in params:
            body_params = params['mpa_trust_anchor']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/trust-anchors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateMpaTrustAnchorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mpa_approver(self, mpa_approver_id, **kwargs):  # noqa: E501
        """get_mpa_approver  # noqa: E501

        Get information of an MPA approver.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mpa_approver(mpa_approver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpa_approver_id: Get information of an MPA approver. (required)
        :return: MpaApprovers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mpa_approver_with_http_info(mpa_approver_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mpa_approver_with_http_info(mpa_approver_id, **kwargs)  # noqa: E501
            return data

    def get_mpa_approver_with_http_info(self, mpa_approver_id, **kwargs):  # noqa: E501
        """get_mpa_approver  # noqa: E501

        Get information of an MPA approver.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mpa_approver_with_http_info(mpa_approver_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpa_approver_id: Get information of an MPA approver. (required)
        :return: MpaApprovers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpa_approver_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mpa_approver" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpa_approver_id' is set
        if ('mpa_approver_id' not in params or
                params['mpa_approver_id'] is None):
            raise ValueError("Missing the required parameter `mpa_approver_id` when calling `get_mpa_approver`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mpa_approver_id' in params:
            path_params['MpaApproverId'] = params['mpa_approver_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/approvers/{MpaApproverId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MpaApprovers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mpa_approvers(self, **kwargs):  # noqa: E501
        """get_mpa_approvers  # noqa: E501

        List MPA approvers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mpa_approvers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_status: Registration status of a MPA approver.
        :return: MpaApprovers
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mpa_approvers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_mpa_approvers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_mpa_approvers_with_http_info(self, **kwargs):  # noqa: E501
        """get_mpa_approvers  # noqa: E501

        List MPA approvers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mpa_approvers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registration_status: Registration status of a MPA approver.
        :return: MpaApprovers
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registration_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mpa_approvers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'registration_status' in params:
            query_params.append(('registration_status', params['registration_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/approvers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MpaApprovers',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mpa_request(self, mpa_request_id, **kwargs):  # noqa: E501
        """get_mpa_request  # noqa: E501

        Get information for given MPA request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mpa_request(mpa_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpa_request_id: Get information for given MPA request. (required)
        :param str zone: Specifies which access zone to use.
        :return: MpaRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mpa_request_with_http_info(mpa_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mpa_request_with_http_info(mpa_request_id, **kwargs)  # noqa: E501
            return data

    def get_mpa_request_with_http_info(self, mpa_request_id, **kwargs):  # noqa: E501
        """get_mpa_request  # noqa: E501

        Get information for given MPA request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mpa_request_with_http_info(mpa_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mpa_request_id: Get information for given MPA request. (required)
        :param str zone: Specifies which access zone to use.
        :return: MpaRequests
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpa_request_id', 'zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mpa_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpa_request_id' is set
        if ('mpa_request_id' not in params or
                params['mpa_request_id'] is None):
            raise ValueError("Missing the required parameter `mpa_request_id` when calling `get_mpa_request`")  # noqa: E501

        if ('zone' in params and
                len(params['zone']) > 255):
            raise ValueError("Invalid value for parameter `zone` when calling `get_mpa_request`, length must be less than or equal to `255`")  # noqa: E501
        if ('zone' in params and
                len(params['zone']) < 0):
            raise ValueError("Invalid value for parameter `zone` when calling `get_mpa_request`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'mpa_request_id' in params:
            path_params['MpaRequestId'] = params['mpa_request_id']  # noqa: E501

        query_params = []
        if 'zone' in params:
            query_params.append(('zone', params['zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/requests/{MpaRequestId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MpaRequests',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_settings_config_request_lifecycle(self, **kwargs):  # noqa: E501
        """get_settings_config_request_lifecycle  # noqa: E501

        GET MPA request lifecycle configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_config_request_lifecycle(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsConfigRequestLifecycle
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_settings_config_request_lifecycle_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_settings_config_request_lifecycle_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_settings_config_request_lifecycle_with_http_info(self, **kwargs):  # noqa: E501
        """get_settings_config_request_lifecycle  # noqa: E501

        GET MPA request lifecycle configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_config_request_lifecycle_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsConfigRequestLifecycle
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_config_request_lifecycle" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/settings/config/request-lifecycle', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingsConfigRequestLifecycle',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_settings_global(self, **kwargs):  # noqa: E501
        """get_settings_global  # noqa: E501

        Multi party authorization global configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_global(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsGlobalExtendedExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_settings_global_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_settings_global_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_settings_global_with_http_info(self, **kwargs):  # noqa: E501
        """get_settings_global  # noqa: E501

        Multi party authorization global configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_global_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SettingsGlobalExtendedExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_global" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/settings/global', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingsGlobalExtendedExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_settings_privilege_action_metadata(self, **kwargs):  # noqa: E501
        """get_settings_privilege_action_metadata  # noqa: E501

        Get MPA privileged action metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_privilege_action_metadata(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: Name of privileged action
        :param bool manual: Flag indicates privileged action MPA request allow manual creation via UI or MPA CLI/API.
        :param str service: Name of service or component in system that owns the privileged action
        :return: SettingsPrivilegeActionMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_settings_privilege_action_metadata_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_settings_privilege_action_metadata_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_settings_privilege_action_metadata_with_http_info(self, **kwargs):  # noqa: E501
        """get_settings_privilege_action_metadata  # noqa: E501

        Get MPA privileged action metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_settings_privilege_action_metadata_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: Name of privileged action
        :param bool manual: Flag indicates privileged action MPA request allow manual creation via UI or MPA CLI/API.
        :param str service: Name of service or component in system that owns the privileged action
        :return: SettingsPrivilegeActionMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action', 'manual', 'service']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_settings_privilege_action_metadata" % key
                )
            params[key] = val
        del params['kwargs']

        if ('action' in params and
                len(params['action']) > 255):
            raise ValueError("Invalid value for parameter `action` when calling `get_settings_privilege_action_metadata`, length must be less than or equal to `255`")  # noqa: E501
        if ('action' in params and
                len(params['action']) < 1):
            raise ValueError("Invalid value for parameter `action` when calling `get_settings_privilege_action_metadata`, length must be greater than or equal to `1`")  # noqa: E501
        if 'action' in params and not re.search('^[a-zA-Z0-9_-]+$', params['action']):  # noqa: E501
            raise ValueError("Invalid value for parameter `action` when calling `get_settings_privilege_action_metadata`, must conform to the pattern `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501
        if ('service' in params and
                len(params['service']) > 255):
            raise ValueError("Invalid value for parameter `service` when calling `get_settings_privilege_action_metadata`, length must be less than or equal to `255`")  # noqa: E501
        if ('service' in params and
                len(params['service']) < 1):
            raise ValueError("Invalid value for parameter `service` when calling `get_settings_privilege_action_metadata`, length must be greater than or equal to `1`")  # noqa: E501
        if 'service' in params and not re.search('^[a-zA-Z0-9_-]+$', params['service']):  # noqa: E501
            raise ValueError("Invalid value for parameter `service` when calling `get_settings_privilege_action_metadata`, must conform to the pattern `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'manual' in params:
            query_params.append(('manual', params['manual']))  # noqa: E501
        if 'service' in params:
            query_params.append(('service', params['service']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/settings/privilege-action/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SettingsPrivilegeActionMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_mpa_requests(self, **kwargs):  # noqa: E501
        """list_mpa_requests  # noqa: E501

        List all my MPA requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mpa_requests(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: Name of privileged action
        :param str created_by: filter by user who created MPA request.
        :param int limit: Return no more than this many results at once (see resume).
        :param str request_for: filter by user MPA request for.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str service: Name of service or component in system that owns the privileged action
        :param str status: status of MPA request
        :param str zone: Specifies which access zone to use.
        :return: MpaRequestsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_mpa_requests_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_mpa_requests_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_mpa_requests_with_http_info(self, **kwargs):  # noqa: E501
        """list_mpa_requests  # noqa: E501

        List all my MPA requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mpa_requests_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: Name of privileged action
        :param str created_by: filter by user who created MPA request.
        :param int limit: Return no more than this many results at once (see resume).
        :param str request_for: filter by user MPA request for.
        :param str resume: Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).
        :param str service: Name of service or component in system that owns the privileged action
        :param str status: status of MPA request
        :param str zone: Specifies which access zone to use.
        :return: MpaRequestsExtended
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action', 'created_by', 'limit', 'request_for', 'resume', 'service', 'status', 'zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_mpa_requests" % key
                )
            params[key] = val
        del params['kwargs']

        if ('action' in params and
                len(params['action']) > 255):
            raise ValueError("Invalid value for parameter `action` when calling `list_mpa_requests`, length must be less than or equal to `255`")  # noqa: E501
        if ('action' in params and
                len(params['action']) < 1):
            raise ValueError("Invalid value for parameter `action` when calling `list_mpa_requests`, length must be greater than or equal to `1`")  # noqa: E501
        if 'action' in params and not re.search('^[a-zA-Z0-9_-]+$', params['action']):  # noqa: E501
            raise ValueError("Invalid value for parameter `action` when calling `list_mpa_requests`, must conform to the pattern `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501
        if 'limit' in params and params['limit'] > 1000:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_mpa_requests`, must be a value less than or equal to `1000`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `list_mpa_requests`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('resume' in params and
                len(params['resume']) > 8192):
            raise ValueError("Invalid value for parameter `resume` when calling `list_mpa_requests`, length must be less than or equal to `8192`")  # noqa: E501
        if ('resume' in params and
                len(params['resume']) < 0):
            raise ValueError("Invalid value for parameter `resume` when calling `list_mpa_requests`, length must be greater than or equal to `0`")  # noqa: E501
        if ('service' in params and
                len(params['service']) > 255):
            raise ValueError("Invalid value for parameter `service` when calling `list_mpa_requests`, length must be less than or equal to `255`")  # noqa: E501
        if ('service' in params and
                len(params['service']) < 1):
            raise ValueError("Invalid value for parameter `service` when calling `list_mpa_requests`, length must be greater than or equal to `1`")  # noqa: E501
        if 'service' in params and not re.search('^[a-zA-Z0-9_-]+$', params['service']):  # noqa: E501
            raise ValueError("Invalid value for parameter `service` when calling `list_mpa_requests`, must conform to the pattern `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501
        if ('zone' in params and
                len(params['zone']) > 255):
            raise ValueError("Invalid value for parameter `zone` when calling `list_mpa_requests`, length must be less than or equal to `255`")  # noqa: E501
        if ('zone' in params and
                len(params['zone']) < 0):
            raise ValueError("Invalid value for parameter `zone` when calling `list_mpa_requests`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'created_by' in params:
            query_params.append(('created_by', params['created_by']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'request_for' in params:
            query_params.append(('request_for', params['request_for']))  # noqa: E501
        if 'resume' in params:
            query_params.append(('resume', params['resume']))  # noqa: E501
        if 'service' in params:
            query_params.append(('service', params['service']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'zone' in params:
            query_params.append(('zone', params['zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/requests', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MpaRequestsExtended',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_mpa_trust_anchors(self, **kwargs):  # noqa: E501
        """list_mpa_trust_anchors  # noqa: E501

        Get trusted root CA for MPA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mpa_trust_anchors(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MpaTrustAnchors
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_mpa_trust_anchors_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_mpa_trust_anchors_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_mpa_trust_anchors_with_http_info(self, **kwargs):  # noqa: E501
        """list_mpa_trust_anchors  # noqa: E501

        Get trusted root CA for MPA  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mpa_trust_anchors_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MpaTrustAnchors
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_mpa_trust_anchors" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/trust-anchors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MpaTrustAnchors',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_mpa_complete_registration(self, mpa_complete_registration, **kwargs):  # noqa: E501
        """update_mpa_complete_registration  # noqa: E501

        Specifies the properties to complete approver registration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_mpa_complete_registration(mpa_complete_registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaCompleteRegistration mpa_complete_registration: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_mpa_complete_registration_with_http_info(mpa_complete_registration, **kwargs)  # noqa: E501
        else:
            (data) = self.update_mpa_complete_registration_with_http_info(mpa_complete_registration, **kwargs)  # noqa: E501
            return data

    def update_mpa_complete_registration_with_http_info(self, mpa_complete_registration, **kwargs):  # noqa: E501
        """update_mpa_complete_registration  # noqa: E501

        Specifies the properties to complete approver registration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_mpa_complete_registration_with_http_info(mpa_complete_registration, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaCompleteRegistration mpa_complete_registration: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpa_complete_registration']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_mpa_complete_registration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpa_complete_registration' is set
        if ('mpa_complete_registration' not in params or
                params['mpa_complete_registration'] is None):
            raise ValueError("Missing the required parameter `mpa_complete_registration` when calling `update_mpa_complete_registration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mpa_complete_registration' in params:
            body_params = params['mpa_complete_registration']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/complete-registration', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_mpa_request(self, mpa_request, mpa_request_id, **kwargs):  # noqa: E501
        """update_mpa_request  # noqa: E501

        Update a existing MPA Request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_mpa_request(mpa_request, mpa_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaRequest mpa_request: (required)
        :param str mpa_request_id: Update a existing MPA Request. (required)
        :param str zone: Specifies which access zone to use.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_mpa_request_with_http_info(mpa_request, mpa_request_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_mpa_request_with_http_info(mpa_request, mpa_request_id, **kwargs)  # noqa: E501
            return data

    def update_mpa_request_with_http_info(self, mpa_request, mpa_request_id, **kwargs):  # noqa: E501
        """update_mpa_request  # noqa: E501

        Update a existing MPA Request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_mpa_request_with_http_info(mpa_request, mpa_request_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaRequest mpa_request: (required)
        :param str mpa_request_id: Update a existing MPA Request. (required)
        :param str zone: Specifies which access zone to use.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpa_request', 'mpa_request_id', 'zone']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_mpa_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpa_request' is set
        if ('mpa_request' not in params or
                params['mpa_request'] is None):
            raise ValueError("Missing the required parameter `mpa_request` when calling `update_mpa_request`")  # noqa: E501
        # verify the required parameter 'mpa_request_id' is set
        if ('mpa_request_id' not in params or
                params['mpa_request_id'] is None):
            raise ValueError("Missing the required parameter `mpa_request_id` when calling `update_mpa_request`")  # noqa: E501

        if ('zone' in params and
                len(params['zone']) > 255):
            raise ValueError("Invalid value for parameter `zone` when calling `update_mpa_request`, length must be less than or equal to `255`")  # noqa: E501
        if ('zone' in params and
                len(params['zone']) < 0):
            raise ValueError("Invalid value for parameter `zone` when calling `update_mpa_request`, length must be greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'mpa_request_id' in params:
            path_params['MpaRequestId'] = params['mpa_request_id']  # noqa: E501

        query_params = []
        if 'zone' in params:
            query_params.append(('zone', params['zone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mpa_request' in params:
            body_params = params['mpa_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/requests/{MpaRequestId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_mpa_signed_approval_by_id(self, mpa_signed_approval_id_params, mpa_signed_approval_id, **kwargs):  # noqa: E501
        """update_mpa_signed_approval_by_id  # noqa: E501

        Upload MPA signed approval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_mpa_signed_approval_by_id(mpa_signed_approval_id_params, mpa_signed_approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaSignedApprovalIdParams mpa_signed_approval_id_params: (required)
        :param str mpa_signed_approval_id: Upload MPA signed approval. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_mpa_signed_approval_by_id_with_http_info(mpa_signed_approval_id_params, mpa_signed_approval_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_mpa_signed_approval_by_id_with_http_info(mpa_signed_approval_id_params, mpa_signed_approval_id, **kwargs)  # noqa: E501
            return data

    def update_mpa_signed_approval_by_id_with_http_info(self, mpa_signed_approval_id_params, mpa_signed_approval_id, **kwargs):  # noqa: E501
        """update_mpa_signed_approval_by_id  # noqa: E501

        Upload MPA signed approval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_mpa_signed_approval_by_id_with_http_info(mpa_signed_approval_id_params, mpa_signed_approval_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MpaSignedApprovalIdParams mpa_signed_approval_id_params: (required)
        :param str mpa_signed_approval_id: Upload MPA signed approval. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mpa_signed_approval_id_params', 'mpa_signed_approval_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_mpa_signed_approval_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mpa_signed_approval_id_params' is set
        if ('mpa_signed_approval_id_params' not in params or
                params['mpa_signed_approval_id_params'] is None):
            raise ValueError("Missing the required parameter `mpa_signed_approval_id_params` when calling `update_mpa_signed_approval_by_id`")  # noqa: E501
        # verify the required parameter 'mpa_signed_approval_id' is set
        if ('mpa_signed_approval_id' not in params or
                params['mpa_signed_approval_id'] is None):
            raise ValueError("Missing the required parameter `mpa_signed_approval_id` when calling `update_mpa_signed_approval_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'mpa_signed_approval_id' in params:
            path_params['MpaSignedApprovalId'] = params['mpa_signed_approval_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'mpa_signed_approval_id_params' in params:
            body_params = params['mpa_signed_approval_id_params']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/signed-approval/{MpaSignedApprovalId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_settings_global(self, settings_global, **kwargs):  # noqa: E501
        """update_settings_global  # noqa: E501

        Input schema for PUT method for /mpa/settings/global.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_settings_global(settings_global, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsGlobalExtendedExtendedExtended settings_global: (required)
        :param bool mpa_enabled: Indicates whether the MPA feature is enabled.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_settings_global_with_http_info(settings_global, **kwargs)  # noqa: E501
        else:
            (data) = self.update_settings_global_with_http_info(settings_global, **kwargs)  # noqa: E501
            return data

    def update_settings_global_with_http_info(self, settings_global, **kwargs):  # noqa: E501
        """update_settings_global  # noqa: E501

        Input schema for PUT method for /mpa/settings/global.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_settings_global_with_http_info(settings_global, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SettingsGlobalExtendedExtendedExtended settings_global: (required)
        :param bool mpa_enabled: Indicates whether the MPA feature is enabled.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['settings_global', 'mpa_enabled']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_settings_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'settings_global' is set
        if ('settings_global' not in params or
                params['settings_global'] is None):
            raise ValueError("Missing the required parameter `settings_global` when calling `update_settings_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mpa_enabled' in params:
            query_params.append(('mpa_enabled', params['mpa_enabled']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'settings_global' in params:
            body_params = params['settings_global']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/platform/23/mpa/settings/global', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
