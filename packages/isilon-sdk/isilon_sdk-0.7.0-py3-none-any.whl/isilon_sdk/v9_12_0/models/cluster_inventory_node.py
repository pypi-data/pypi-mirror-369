# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterInventoryNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bmc': 'ClusterInventoryNodeBmc',
        'drives': 'list[ClusterInventoryNodeDrive]',
        'host_ip_addresses': 'list[str]',
        'lnn': 'int',
        'model': 'str',
        'name': 'str',
        'network_interfaces': 'list[ClusterInventoryNodeNetworkInterface]',
        'os_version': 'str',
        'serial': 'str',
        'status': 'list[str]',
        'timestamp': 'str',
        'uptime': 'str'
    }

    attribute_map = {
        'bmc': 'bmc',
        'drives': 'drives',
        'host_ip_addresses': 'host_ip_addresses',
        'lnn': 'lnn',
        'model': 'model',
        'name': 'name',
        'network_interfaces': 'network_interfaces',
        'os_version': 'os_version',
        'serial': 'serial',
        'status': 'status',
        'timestamp': 'timestamp',
        'uptime': 'uptime'
    }

    def __init__(self, bmc=None, drives=None, host_ip_addresses=None, lnn=None, model=None, name=None, network_interfaces=None, os_version=None, serial=None, status=None, timestamp=None, uptime=None):  # noqa: E501
        """ClusterInventoryNode - a model defined in Swagger"""  # noqa: E501

        self._bmc = None
        self._drives = None
        self._host_ip_addresses = None
        self._lnn = None
        self._model = None
        self._name = None
        self._network_interfaces = None
        self._os_version = None
        self._serial = None
        self._status = None
        self._timestamp = None
        self._uptime = None
        self.discriminator = None

        if bmc is not None:
            self.bmc = bmc
        if drives is not None:
            self.drives = drives
        if host_ip_addresses is not None:
            self.host_ip_addresses = host_ip_addresses
        if lnn is not None:
            self.lnn = lnn
        if model is not None:
            self.model = model
        if name is not None:
            self.name = name
        if network_interfaces is not None:
            self.network_interfaces = network_interfaces
        if os_version is not None:
            self.os_version = os_version
        if serial is not None:
            self.serial = serial
        if status is not None:
            self.status = status
        if timestamp is not None:
            self.timestamp = timestamp
        if uptime is not None:
            self.uptime = uptime

    @property
    def bmc(self):
        """Gets the bmc of this ClusterInventoryNode.  # noqa: E501

        The inventory of the node's BMC.  # noqa: E501

        :return: The bmc of this ClusterInventoryNode.  # noqa: E501
        :rtype: ClusterInventoryNodeBmc
        """
        return self._bmc

    @bmc.setter
    def bmc(self, bmc):
        """Sets the bmc of this ClusterInventoryNode.

        The inventory of the node's BMC.  # noqa: E501

        :param bmc: The bmc of this ClusterInventoryNode.  # noqa: E501
        :type: ClusterInventoryNodeBmc
        """

        self._bmc = bmc

    @property
    def drives(self):
        """Gets the drives of this ClusterInventoryNode.  # noqa: E501

        List of drives on the node  # noqa: E501

        :return: The drives of this ClusterInventoryNode.  # noqa: E501
        :rtype: list[ClusterInventoryNodeDrive]
        """
        return self._drives

    @drives.setter
    def drives(self, drives):
        """Sets the drives of this ClusterInventoryNode.

        List of drives on the node  # noqa: E501

        :param drives: The drives of this ClusterInventoryNode.  # noqa: E501
        :type: list[ClusterInventoryNodeDrive]
        """

        self._drives = drives

    @property
    def host_ip_addresses(self):
        """Gets the host_ip_addresses of this ClusterInventoryNode.  # noqa: E501

        List of host IP addresses assigned to the node.  # noqa: E501

        :return: The host_ip_addresses of this ClusterInventoryNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_ip_addresses

    @host_ip_addresses.setter
    def host_ip_addresses(self, host_ip_addresses):
        """Sets the host_ip_addresses of this ClusterInventoryNode.

        List of host IP addresses assigned to the node.  # noqa: E501

        :param host_ip_addresses: The host_ip_addresses of this ClusterInventoryNode.  # noqa: E501
        :type: list[str]
        """

        self._host_ip_addresses = host_ip_addresses

    @property
    def lnn(self):
        """Gets the lnn of this ClusterInventoryNode.  # noqa: E501

        Logical node number of node  # noqa: E501

        :return: The lnn of this ClusterInventoryNode.  # noqa: E501
        :rtype: int
        """
        return self._lnn

    @lnn.setter
    def lnn(self, lnn):
        """Sets the lnn of this ClusterInventoryNode.

        Logical node number of node  # noqa: E501

        :param lnn: The lnn of this ClusterInventoryNode.  # noqa: E501
        :type: int
        """
        if lnn is not None and lnn > 65535:  # noqa: E501
            raise ValueError("Invalid value for `lnn`, must be a value less than or equal to `65535`")  # noqa: E501
        if lnn is not None and lnn < 1:  # noqa: E501
            raise ValueError("Invalid value for `lnn`, must be a value greater than or equal to `1`")  # noqa: E501

        self._lnn = lnn

    @property
    def model(self):
        """Gets the model of this ClusterInventoryNode.  # noqa: E501

        A string identifying a particular hardware model of the OneFS product.  # noqa: E501

        :return: The model of this ClusterInventoryNode.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ClusterInventoryNode.

        A string identifying a particular hardware model of the OneFS product.  # noqa: E501

        :param model: The model of this ClusterInventoryNode.  # noqa: E501
        :type: str
        """
        if model is not None and len(model) > 255:
            raise ValueError("Invalid value for `model`, length must be less than or equal to `255`")  # noqa: E501
        if model is not None and len(model) < 0:
            raise ValueError("Invalid value for `model`, length must be greater than or equal to `0`")  # noqa: E501

        self._model = model

    @property
    def name(self):
        """Gets the name of this ClusterInventoryNode.  # noqa: E501

        The name of the node.  # noqa: E501

        :return: The name of this ClusterInventoryNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClusterInventoryNode.

        The name of the node.  # noqa: E501

        :param name: The name of this ClusterInventoryNode.  # noqa: E501
        :type: str
        """
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this ClusterInventoryNode.  # noqa: E501

        List of network interfaces on the node  # noqa: E501

        :return: The network_interfaces of this ClusterInventoryNode.  # noqa: E501
        :rtype: list[ClusterInventoryNodeNetworkInterface]
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this ClusterInventoryNode.

        List of network interfaces on the node  # noqa: E501

        :param network_interfaces: The network_interfaces of this ClusterInventoryNode.  # noqa: E501
        :type: list[ClusterInventoryNodeNetworkInterface]
        """

        self._network_interfaces = network_interfaces

    @property
    def os_version(self):
        """Gets the os_version of this ClusterInventoryNode.  # noqa: E501

        OneFS build version running on the node  # noqa: E501

        :return: The os_version of this ClusterInventoryNode.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this ClusterInventoryNode.

        OneFS build version running on the node  # noqa: E501

        :param os_version: The os_version of this ClusterInventoryNode.  # noqa: E501
        :type: str
        """
        if os_version is not None and len(os_version) > 255:
            raise ValueError("Invalid value for `os_version`, length must be less than or equal to `255`")  # noqa: E501
        if os_version is not None and len(os_version) < 0:
            raise ValueError("Invalid value for `os_version`, length must be greater than or equal to `0`")  # noqa: E501

        self._os_version = os_version

    @property
    def serial(self):
        """Gets the serial of this ClusterInventoryNode.  # noqa: E501

        Serial number of this node.  # noqa: E501

        :return: The serial of this ClusterInventoryNode.  # noqa: E501
        :rtype: str
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this ClusterInventoryNode.

        Serial number of this node.  # noqa: E501

        :param serial: The serial of this ClusterInventoryNode.  # noqa: E501
        :type: str
        """
        if serial is not None and len(serial) > 255:
            raise ValueError("Invalid value for `serial`, length must be less than or equal to `255`")  # noqa: E501
        if serial is not None and len(serial) < 0:
            raise ValueError("Invalid value for `serial`, length must be greater than or equal to `0`")  # noqa: E501

        self._serial = serial

    @property
    def status(self):
        """Gets the status of this ClusterInventoryNode.  # noqa: E501

        The health status of the node.  # noqa: E501

        :return: The status of this ClusterInventoryNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterInventoryNode.

        The health status of the node.  # noqa: E501

        :param status: The status of this ClusterInventoryNode.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["OK", "Down", "Attention", "Read-only", "Smartfailed", "Unknown"]  # noqa: E501
        if not set(status).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `status` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(status) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._status = status

    @property
    def timestamp(self):
        """Gets the timestamp of this ClusterInventoryNode.  # noqa: E501

        Timestamp for when the inventory was last updated.  # noqa: E501

        :return: The timestamp of this ClusterInventoryNode.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ClusterInventoryNode.

        Timestamp for when the inventory was last updated.  # noqa: E501

        :param timestamp: The timestamp of this ClusterInventoryNode.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def uptime(self):
        """Gets the uptime of this ClusterInventoryNode.  # noqa: E501

        The time the node has been online.  # noqa: E501

        :return: The uptime of this ClusterInventoryNode.  # noqa: E501
        :rtype: str
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this ClusterInventoryNode.

        The time the node has been online.  # noqa: E501

        :param uptime: The uptime of this ClusterInventoryNode.  # noqa: E501
        :type: str
        """

        self._uptime = uptime

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInventoryNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInventoryNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
