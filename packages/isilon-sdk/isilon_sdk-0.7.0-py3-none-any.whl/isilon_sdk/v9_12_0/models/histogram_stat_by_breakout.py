# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HistogramStatByBreakout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[list[int]]',
        'key': 'str',
        'max': 'int',
        'min': 'int',
        'sum': 'int',
        'sum_overflow': 'int'
    }

    attribute_map = {
        'data': 'data',
        'key': 'key',
        'max': 'max',
        'min': 'min',
        'sum': 'sum',
        'sum_overflow': 'sum_overflow'
    }

    def __init__(self, data=None, key=None, max=None, min=None, sum=None, sum_overflow=None):  # noqa: E501
        """HistogramStatByBreakout - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._key = None
        self._max = None
        self._min = None
        self._sum = None
        self._sum_overflow = None
        self.discriminator = None

        self.data = data
        self.key = key
        if max is not None:
            self.max = max
        if min is not None:
            self.min = min
        if sum is not None:
            self.sum = sum
        if sum_overflow is not None:
            self.sum_overflow = sum_overflow

    @property
    def data(self):
        """Gets the data of this HistogramStatByBreakout.  # noqa: E501

        List of bucket, file count pairs.  # noqa: E501

        :return: The data of this HistogramStatByBreakout.  # noqa: E501
        :rtype: list[list[int]]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HistogramStatByBreakout.

        List of bucket, file count pairs.  # noqa: E501

        :param data: The data of this HistogramStatByBreakout.  # noqa: E501
        :type: list[list[int]]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def key(self):
        """Gets the key of this HistogramStatByBreakout.  # noqa: E501

        Breakout key by which results are filtered.  # noqa: E501

        :return: The key of this HistogramStatByBreakout.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this HistogramStatByBreakout.

        Breakout key by which results are filtered.  # noqa: E501

        :param key: The key of this HistogramStatByBreakout.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def max(self):
        """Gets the max of this HistogramStatByBreakout.  # noqa: E501

        Maximum value.  # noqa: E501

        :return: The max of this HistogramStatByBreakout.  # noqa: E501
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this HistogramStatByBreakout.

        Maximum value.  # noqa: E501

        :param max: The max of this HistogramStatByBreakout.  # noqa: E501
        :type: int
        """
        if max is not None and max > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `max`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if max is not None and max < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `max`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._max = max

    @property
    def min(self):
        """Gets the min of this HistogramStatByBreakout.  # noqa: E501

        Minimum value.  # noqa: E501

        :return: The min of this HistogramStatByBreakout.  # noqa: E501
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this HistogramStatByBreakout.

        Minimum value.  # noqa: E501

        :param min: The min of this HistogramStatByBreakout.  # noqa: E501
        :type: int
        """
        if min is not None and min > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `min`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if min is not None and min < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `min`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._min = min

    @property
    def sum(self):
        """Gets the sum of this HistogramStatByBreakout.  # noqa: E501

        Sum of values.  # noqa: E501

        :return: The sum of this HistogramStatByBreakout.  # noqa: E501
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this HistogramStatByBreakout.

        Sum of values.  # noqa: E501

        :param sum: The sum of this HistogramStatByBreakout.  # noqa: E501
        :type: int
        """
        if sum is not None and sum > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `sum`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if sum is not None and sum < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `sum`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._sum = sum

    @property
    def sum_overflow(self):
        """Gets the sum_overflow of this HistogramStatByBreakout.  # noqa: E501

        Sum overflow of values.  # noqa: E501

        :return: The sum_overflow of this HistogramStatByBreakout.  # noqa: E501
        :rtype: int
        """
        return self._sum_overflow

    @sum_overflow.setter
    def sum_overflow(self, sum_overflow):
        """Sets the sum_overflow of this HistogramStatByBreakout.

        Sum overflow of values.  # noqa: E501

        :param sum_overflow: The sum_overflow of this HistogramStatByBreakout.  # noqa: E501
        :type: int
        """
        if sum_overflow is not None and sum_overflow > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `sum_overflow`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if sum_overflow is not None and sum_overflow < -9223372036854775808:  # noqa: E501
            raise ValueError("Invalid value for `sum_overflow`, must be a value greater than or equal to `-9223372036854775808`")  # noqa: E501

        self._sum_overflow = sum_overflow

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistogramStatByBreakout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistogramStatByBreakout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
