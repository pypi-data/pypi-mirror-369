# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterInventoryNodeNetworkInterfaceSwitchConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'switch_ip_address': 'str',
        'switch_lni': 'str',
        'switch_port': 'list[str]',
        'switch_serial': 'str',
        'timestamp': 'str'
    }

    attribute_map = {
        'switch_ip_address': 'switch_ip_address',
        'switch_lni': 'switch_lni',
        'switch_port': 'switch_port',
        'switch_serial': 'switch_serial',
        'timestamp': 'timestamp'
    }

    def __init__(self, switch_ip_address=None, switch_lni=None, switch_port=None, switch_serial=None, timestamp=None):  # noqa: E501
        """ClusterInventoryNodeNetworkInterfaceSwitchConnection - a model defined in Swagger"""  # noqa: E501

        self._switch_ip_address = None
        self._switch_lni = None
        self._switch_port = None
        self._switch_serial = None
        self._timestamp = None
        self.discriminator = None

        if switch_ip_address is not None:
            self.switch_ip_address = switch_ip_address
        if switch_lni is not None:
            self.switch_lni = switch_lni
        if switch_port is not None:
            self.switch_port = switch_port
        if switch_serial is not None:
            self.switch_serial = switch_serial
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def switch_ip_address(self):
        """Gets the switch_ip_address of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501

        Switch IP Address.  # noqa: E501

        :return: The switch_ip_address of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :rtype: str
        """
        return self._switch_ip_address

    @switch_ip_address.setter
    def switch_ip_address(self, switch_ip_address):
        """Sets the switch_ip_address of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.

        Switch IP Address.  # noqa: E501

        :param switch_ip_address: The switch_ip_address of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :type: str
        """
        if switch_ip_address is not None and len(switch_ip_address) > 255:
            raise ValueError("Invalid value for `switch_ip_address`, length must be less than or equal to `255`")  # noqa: E501
        if switch_ip_address is not None and len(switch_ip_address) < 0:
            raise ValueError("Invalid value for `switch_ip_address`, length must be greater than or equal to `0`")  # noqa: E501

        self._switch_ip_address = switch_ip_address

    @property
    def switch_lni(self):
        """Gets the switch_lni of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501

        Logical network interface connected to the switch.  # noqa: E501

        :return: The switch_lni of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :rtype: str
        """
        return self._switch_lni

    @switch_lni.setter
    def switch_lni(self, switch_lni):
        """Sets the switch_lni of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.

        Logical network interface connected to the switch.  # noqa: E501

        :param switch_lni: The switch_lni of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :type: str
        """
        if switch_lni is not None and len(switch_lni) > 255:
            raise ValueError("Invalid value for `switch_lni`, length must be less than or equal to `255`")  # noqa: E501
        if switch_lni is not None and len(switch_lni) < 0:
            raise ValueError("Invalid value for `switch_lni`, length must be greater than or equal to `0`")  # noqa: E501

        self._switch_lni = switch_lni

    @property
    def switch_port(self):
        """Gets the switch_port of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501

        Switch ports connected to this interface.  # noqa: E501

        :return: The switch_port of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :rtype: list[str]
        """
        return self._switch_port

    @switch_port.setter
    def switch_port(self, switch_port):
        """Sets the switch_port of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.

        Switch ports connected to this interface.  # noqa: E501

        :param switch_port: The switch_port of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :type: list[str]
        """

        self._switch_port = switch_port

    @property
    def switch_serial(self):
        """Gets the switch_serial of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501

        Switch serial number.  # noqa: E501

        :return: The switch_serial of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :rtype: str
        """
        return self._switch_serial

    @switch_serial.setter
    def switch_serial(self, switch_serial):
        """Sets the switch_serial of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.

        Switch serial number.  # noqa: E501

        :param switch_serial: The switch_serial of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :type: str
        """
        if switch_serial is not None and len(switch_serial) > 255:
            raise ValueError("Invalid value for `switch_serial`, length must be less than or equal to `255`")  # noqa: E501
        if switch_serial is not None and len(switch_serial) < 0:
            raise ValueError("Invalid value for `switch_serial`, length must be greater than or equal to `0`")  # noqa: E501

        self._switch_serial = switch_serial

    @property
    def timestamp(self):
        """Gets the timestamp of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501

        Timestamp for when this object was last updated.  # noqa: E501

        :return: The timestamp of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.

        Timestamp for when this object was last updated.  # noqa: E501

        :param timestamp: The timestamp of this ClusterInventoryNodeNetworkInterfaceSwitchConnection.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInventoryNodeNetworkInterfaceSwitchConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInventoryNodeNetworkInterfaceSwitchConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
