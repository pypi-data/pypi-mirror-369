# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_mode': 'SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadataCreationMode',
        'optional_allow_request_for': 'SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadataOptionalAllowRequestFor'
    }

    attribute_map = {
        'creation_mode': 'creation_mode',
        'optional_allow_request_for': 'optional_allow_request_for'
    }

    def __init__(self, creation_mode=None, optional_allow_request_for=None):  # noqa: E501
        """SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata - a model defined in Swagger"""  # noqa: E501

        self._creation_mode = None
        self._optional_allow_request_for = None
        self.discriminator = None

        if creation_mode is not None:
            self.creation_mode = creation_mode
        if optional_allow_request_for is not None:
            self.optional_allow_request_for = optional_allow_request_for

    @property
    def creation_mode(self):
        """Gets the creation_mode of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata.  # noqa: E501

          # noqa: E501

        :return: The creation_mode of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata.  # noqa: E501
        :rtype: SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadataCreationMode
        """
        return self._creation_mode

    @creation_mode.setter
    def creation_mode(self, creation_mode):
        """Sets the creation_mode of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata.

          # noqa: E501

        :param creation_mode: The creation_mode of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata.  # noqa: E501
        :type: SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadataCreationMode
        """

        self._creation_mode = creation_mode

    @property
    def optional_allow_request_for(self):
        """Gets the optional_allow_request_for of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata.  # noqa: E501

          # noqa: E501

        :return: The optional_allow_request_for of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata.  # noqa: E501
        :rtype: SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadataOptionalAllowRequestFor
        """
        return self._optional_allow_request_for

    @optional_allow_request_for.setter
    def optional_allow_request_for(self, optional_allow_request_for):
        """Sets the optional_allow_request_for of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata.

          # noqa: E501

        :param optional_allow_request_for: The optional_allow_request_for of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata.  # noqa: E501
        :type: SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadataOptionalAllowRequestFor
        """

        self._optional_allow_request_for = optional_allow_request_for

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionRequestMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
