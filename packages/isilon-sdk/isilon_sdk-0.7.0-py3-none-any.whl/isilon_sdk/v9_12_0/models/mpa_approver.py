# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MpaApprover(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approver_id': 'str',
        'creation_time': 'int',
        'registration_status': 'str',
        'registration_update_time': 'int'
    }

    attribute_map = {
        'approver_id': 'approver_id',
        'creation_time': 'creation_time',
        'registration_status': 'registration_status',
        'registration_update_time': 'registration_update_time'
    }

    def __init__(self, approver_id=None, creation_time=None, registration_status=None, registration_update_time=None):  # noqa: E501
        """MpaApprover - a model defined in Swagger"""  # noqa: E501

        self._approver_id = None
        self._creation_time = None
        self._registration_status = None
        self._registration_update_time = None
        self.discriminator = None

        if approver_id is not None:
            self.approver_id = approver_id
        if creation_time is not None:
            self.creation_time = creation_time
        if registration_status is not None:
            self.registration_status = registration_status
        if registration_update_time is not None:
            self.registration_update_time = registration_update_time

    @property
    def approver_id(self):
        """Gets the approver_id of this MpaApprover.  # noqa: E501


        :return: The approver_id of this MpaApprover.  # noqa: E501
        :rtype: str
        """
        return self._approver_id

    @approver_id.setter
    def approver_id(self, approver_id):
        """Sets the approver_id of this MpaApprover.


        :param approver_id: The approver_id of this MpaApprover.  # noqa: E501
        :type: str
        """
        if approver_id is not None and len(approver_id) > 255:
            raise ValueError("Invalid value for `approver_id`, length must be less than or equal to `255`")  # noqa: E501
        if approver_id is not None and len(approver_id) < 1:
            raise ValueError("Invalid value for `approver_id`, length must be greater than or equal to `1`")  # noqa: E501
        if approver_id is not None and not re.search('^[^]\"\/\\[\\:;|=,+*?<>$]+', approver_id):  # noqa: E501
            raise ValueError(r"Invalid value for `approver_id`, must be a follow pattern or equal to `/^[^]\"\/\\[\\:;|=,+*?<>$]+/`")  # noqa: E501

        self._approver_id = approver_id

    @property
    def creation_time(self):
        """Gets the creation_time of this MpaApprover.  # noqa: E501

        Unix epoch time format.  # noqa: E501

        :return: The creation_time of this MpaApprover.  # noqa: E501
        :rtype: int
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this MpaApprover.

        Unix epoch time format.  # noqa: E501

        :param creation_time: The creation_time of this MpaApprover.  # noqa: E501
        :type: int
        """
        if creation_time is not None and creation_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `creation_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if creation_time is not None and creation_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `creation_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def registration_status(self):
        """Gets the registration_status of this MpaApprover.  # noqa: E501

        Registration status of a MPA approver.  # noqa: E501

        :return: The registration_status of this MpaApprover.  # noqa: E501
        :rtype: str
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this MpaApprover.

        Registration status of a MPA approver.  # noqa: E501

        :param registration_status: The registration_status of this MpaApprover.  # noqa: E501
        :type: str
        """
        allowed_values = ["Registration_Initiated", "Pending_Approval", "Registered", "Registration_Denied"]  # noqa: E501
        if registration_status not in allowed_values:
            raise ValueError(
                "Invalid value for `registration_status` ({0}), must be one of {1}"  # noqa: E501
                .format(registration_status, allowed_values)
            )

        self._registration_status = registration_status

    @property
    def registration_update_time(self):
        """Gets the registration_update_time of this MpaApprover.  # noqa: E501

        Unix epoch time format.  # noqa: E501

        :return: The registration_update_time of this MpaApprover.  # noqa: E501
        :rtype: int
        """
        return self._registration_update_time

    @registration_update_time.setter
    def registration_update_time(self, registration_update_time):
        """Sets the registration_update_time of this MpaApprover.

        Unix epoch time format.  # noqa: E501

        :param registration_update_time: The registration_update_time of this MpaApprover.  # noqa: E501
        :type: int
        """
        if registration_update_time is not None and registration_update_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `registration_update_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if registration_update_time is not None and registration_update_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `registration_update_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._registration_update_time = registration_update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpaApprover, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpaApprover):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
