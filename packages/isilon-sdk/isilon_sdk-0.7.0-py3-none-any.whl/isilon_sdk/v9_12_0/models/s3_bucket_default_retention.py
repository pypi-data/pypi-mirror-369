# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class S3BucketDefaultRetention(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'days': 'int',
        'mode': 'str',
        'years': 'int'
    }

    attribute_map = {
        'days': 'days',
        'mode': 'mode',
        'years': 'years'
    }

    def __init__(self, days=None, mode=None, years=None):  # noqa: E501
        """S3BucketDefaultRetention - a model defined in Swagger"""  # noqa: E501

        self._days = None
        self._mode = None
        self._years = None
        self.discriminator = None

        if days is not None:
            self.days = days
        if mode is not None:
            self.mode = mode
        if years is not None:
            self.years = years

    @property
    def days(self):
        """Gets the days of this S3BucketDefaultRetention.  # noqa: E501

        Specifies the S3 default retention length in days.  # noqa: E501

        :return: The days of this S3BucketDefaultRetention.  # noqa: E501
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this S3BucketDefaultRetention.

        Specifies the S3 default retention length in days.  # noqa: E501

        :param days: The days of this S3BucketDefaultRetention.  # noqa: E501
        :type: int
        """
        if days is not None and days > 36525:  # noqa: E501
            raise ValueError("Invalid value for `days`, must be a value less than or equal to `36525`")  # noqa: E501
        if days is not None and days < 0:  # noqa: E501
            raise ValueError("Invalid value for `days`, must be a value greater than or equal to `0`")  # noqa: E501

        self._days = days

    @property
    def mode(self):
        """Gets the mode of this S3BucketDefaultRetention.  # noqa: E501

        Specifies the S3 retention mode.  # noqa: E501

        :return: The mode of this S3BucketDefaultRetention.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this S3BucketDefaultRetention.

        Specifies the S3 retention mode.  # noqa: E501

        :param mode: The mode of this S3BucketDefaultRetention.  # noqa: E501
        :type: str
        """
        allowed_values = ["GOVERNANCE", "COMPLIANCE"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def years(self):
        """Gets the years of this S3BucketDefaultRetention.  # noqa: E501

        Specifies the S3 default retention length in years.  # noqa: E501

        :return: The years of this S3BucketDefaultRetention.  # noqa: E501
        :rtype: int
        """
        return self._years

    @years.setter
    def years(self, years):
        """Sets the years of this S3BucketDefaultRetention.

        Specifies the S3 default retention length in years.  # noqa: E501

        :param years: The years of this S3BucketDefaultRetention.  # noqa: E501
        :type: int
        """
        if years is not None and years > 100:  # noqa: E501
            raise ValueError("Invalid value for `years`, must be a value less than or equal to `100`")  # noqa: E501
        if years is not None and years < 0:  # noqa: E501
            raise ValueError("Invalid value for `years`, must be a value greater than or equal to `0`")  # noqa: E501

        self._years = years

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(S3BucketDefaultRetention, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S3BucketDefaultRetention):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
