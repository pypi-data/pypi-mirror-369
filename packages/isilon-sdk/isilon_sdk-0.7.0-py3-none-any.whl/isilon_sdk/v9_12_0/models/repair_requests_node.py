# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RepairRequestsNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_time': 'int',
        'error': 'str',
        'exit_code': 'int',
        'item_id': 'str',
        'node': 'str',
        'output': 'str',
        'queue_time': 'int',
        'repair_id': 'str',
        'result': 'str',
        'start_time': 'int',
        'status': 'str'
    }

    attribute_map = {
        'end_time': 'end_time',
        'error': 'error',
        'exit_code': 'exit_code',
        'item_id': 'item_id',
        'node': 'node',
        'output': 'output',
        'queue_time': 'queue_time',
        'repair_id': 'repair_id',
        'result': 'result',
        'start_time': 'start_time',
        'status': 'status'
    }

    def __init__(self, end_time=None, error=None, exit_code=None, item_id=None, node=None, output=None, queue_time=None, repair_id=None, result=None, start_time=None, status=None):  # noqa: E501
        """RepairRequestsNode - a model defined in Swagger"""  # noqa: E501

        self._end_time = None
        self._error = None
        self._exit_code = None
        self._item_id = None
        self._node = None
        self._output = None
        self._queue_time = None
        self._repair_id = None
        self._result = None
        self._start_time = None
        self._status = None
        self.discriminator = None

        if end_time is not None:
            self.end_time = end_time
        if error is not None:
            self.error = error
        if exit_code is not None:
            self.exit_code = exit_code
        self.item_id = item_id
        if node is not None:
            self.node = node
        if output is not None:
            self.output = output
        self.queue_time = queue_time
        if repair_id is not None:
            self.repair_id = repair_id
        if result is not None:
            self.result = result
        if start_time is not None:
            self.start_time = start_time
        self.status = status

    @property
    def end_time(self):
        """Gets the end_time of this RepairRequestsNode.  # noqa: E501

        The time in seconds since the UNIX epoch at which request was completed.  # noqa: E501

        :return: The end_time of this RepairRequestsNode.  # noqa: E501
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this RepairRequestsNode.

        The time in seconds since the UNIX epoch at which request was completed.  # noqa: E501

        :param end_time: The end_time of this RepairRequestsNode.  # noqa: E501
        :type: int
        """
        if end_time is not None and end_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if end_time is not None and end_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `end_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this RepairRequestsNode.  # noqa: E501

        Error message for a failed repair of a node.  # noqa: E501

        :return: The error of this RepairRequestsNode.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this RepairRequestsNode.

        Error message for a failed repair of a node.  # noqa: E501

        :param error: The error of this RepairRequestsNode.  # noqa: E501
        :type: str
        """
        if error is not None and len(error) > 8192:
            raise ValueError("Invalid value for `error`, length must be less than or equal to `8192`")  # noqa: E501
        if error is not None and len(error) < 0:
            raise ValueError("Invalid value for `error`, length must be greater than or equal to `0`")  # noqa: E501

        self._error = error

    @property
    def exit_code(self):
        """Gets the exit_code of this RepairRequestsNode.  # noqa: E501

        Exit code of a repair.  # noqa: E501

        :return: The exit_code of this RepairRequestsNode.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this RepairRequestsNode.

        Exit code of a repair.  # noqa: E501

        :param exit_code: The exit_code of this RepairRequestsNode.  # noqa: E501
        :type: int
        """
        if exit_code is not None and exit_code > 4294967295:  # noqa: E501
            raise ValueError("Invalid value for `exit_code`, must be a value less than or equal to `4294967295`")  # noqa: E501
        if exit_code is not None and exit_code < -1:  # noqa: E501
            raise ValueError("Invalid value for `exit_code`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._exit_code = exit_code

    @property
    def item_id(self):
        """Gets the item_id of this RepairRequestsNode.  # noqa: E501

        The ID of the healthcheck item.  # noqa: E501

        :return: The item_id of this RepairRequestsNode.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this RepairRequestsNode.

        The ID of the healthcheck item.  # noqa: E501

        :param item_id: The item_id of this RepairRequestsNode.  # noqa: E501
        :type: str
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501
        if item_id is not None and len(item_id) > 255:
            raise ValueError("Invalid value for `item_id`, length must be less than or equal to `255`")  # noqa: E501
        if item_id is not None and len(item_id) < 1:
            raise ValueError("Invalid value for `item_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._item_id = item_id

    @property
    def node(self):
        """Gets the node of this RepairRequestsNode.  # noqa: E501

        The node number.  # noqa: E501

        :return: The node of this RepairRequestsNode.  # noqa: E501
        :rtype: str
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this RepairRequestsNode.

        The node number.  # noqa: E501

        :param node: The node of this RepairRequestsNode.  # noqa: E501
        :type: str
        """
        if node is not None and len(node) > 255:
            raise ValueError("Invalid value for `node`, length must be less than or equal to `255`")  # noqa: E501
        if node is not None and len(node) < 1:
            raise ValueError("Invalid value for `node`, length must be greater than or equal to `1`")  # noqa: E501

        self._node = node

    @property
    def output(self):
        """Gets the output of this RepairRequestsNode.  # noqa: E501

        Output of a repair.  # noqa: E501

        :return: The output of this RepairRequestsNode.  # noqa: E501
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this RepairRequestsNode.

        Output of a repair.  # noqa: E501

        :param output: The output of this RepairRequestsNode.  # noqa: E501
        :type: str
        """
        if output is not None and len(output) > 8192:
            raise ValueError("Invalid value for `output`, length must be less than or equal to `8192`")  # noqa: E501
        if output is not None and len(output) < 1:
            raise ValueError("Invalid value for `output`, length must be greater than or equal to `1`")  # noqa: E501

        self._output = output

    @property
    def queue_time(self):
        """Gets the queue_time of this RepairRequestsNode.  # noqa: E501

        The time in seconds since the UNIX epoch at which request was queued  # noqa: E501

        :return: The queue_time of this RepairRequestsNode.  # noqa: E501
        :rtype: int
        """
        return self._queue_time

    @queue_time.setter
    def queue_time(self, queue_time):
        """Sets the queue_time of this RepairRequestsNode.

        The time in seconds since the UNIX epoch at which request was queued  # noqa: E501

        :param queue_time: The queue_time of this RepairRequestsNode.  # noqa: E501
        :type: int
        """
        if queue_time is None:
            raise ValueError("Invalid value for `queue_time`, must not be `None`")  # noqa: E501
        if queue_time is not None and queue_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `queue_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if queue_time is not None and queue_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `queue_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._queue_time = queue_time

    @property
    def repair_id(self):
        """Gets the repair_id of this RepairRequestsNode.  # noqa: E501

        The ID of the repair request.  # noqa: E501

        :return: The repair_id of this RepairRequestsNode.  # noqa: E501
        :rtype: str
        """
        return self._repair_id

    @repair_id.setter
    def repair_id(self, repair_id):
        """Sets the repair_id of this RepairRequestsNode.

        The ID of the repair request.  # noqa: E501

        :param repair_id: The repair_id of this RepairRequestsNode.  # noqa: E501
        :type: str
        """
        if repair_id is not None and len(repair_id) > 255:
            raise ValueError("Invalid value for `repair_id`, length must be less than or equal to `255`")  # noqa: E501
        if repair_id is not None and len(repair_id) < 1:
            raise ValueError("Invalid value for `repair_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._repair_id = repair_id

    @property
    def result(self):
        """Gets the result of this RepairRequestsNode.  # noqa: E501

        The result of a repair.  # noqa: E501

        :return: The result of this RepairRequestsNode.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this RepairRequestsNode.

        The result of a repair.  # noqa: E501

        :param result: The result of this RepairRequestsNode.  # noqa: E501
        :type: str
        """
        allowed_values = ["pass", "fail", "partial_fail", "skipped", "pending"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def start_time(self):
        """Gets the start_time of this RepairRequestsNode.  # noqa: E501

        The time in seconds since the UNIX epoch at which request was started.  # noqa: E501

        :return: The start_time of this RepairRequestsNode.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RepairRequestsNode.

        The time in seconds since the UNIX epoch at which request was started.  # noqa: E501

        :param start_time: The start_time of this RepairRequestsNode.  # noqa: E501
        :type: int
        """
        if start_time is not None and start_time > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if start_time is not None and start_time < 0:  # noqa: E501
            raise ValueError("Invalid value for `start_time`, must be a value greater than or equal to `0`")  # noqa: E501

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this RepairRequestsNode.  # noqa: E501

        Status of a particular repair.  # noqa: E501

        :return: The status of this RepairRequestsNode.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RepairRequestsNode.

        Status of a particular repair.  # noqa: E501

        :param status: The status of this RepairRequestsNode.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["queued", "running", "complete", "stopped", "ready"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepairRequestsNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepairRequestsNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
