# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'field_name': 'str',
        'max_length': 'int',
        'max_value': 'int',
        'min_length': 'int',
        'min_value': 'int',
        'operator': 'str',
        'valid_values': 'list[str]',
        'value_pattern': 'str',
        'value_type': 'str'
    }

    attribute_map = {
        'display_name': 'display_name',
        'field_name': 'field_name',
        'max_length': 'max_length',
        'max_value': 'max_value',
        'min_length': 'min_length',
        'min_value': 'min_value',
        'operator': 'operator',
        'valid_values': 'valid_values',
        'value_pattern': 'value_pattern',
        'value_type': 'value_type'
    }

    def __init__(self, display_name=None, field_name=None, max_length=None, max_value=None, min_length=None, min_value=None, operator=None, valid_values=None, value_pattern=None, value_type=None):  # noqa: E501
        """SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem - a model defined in Swagger"""  # noqa: E501

        self._display_name = None
        self._field_name = None
        self._max_length = None
        self._max_value = None
        self._min_length = None
        self._min_value = None
        self._operator = None
        self._valid_values = None
        self._value_pattern = None
        self._value_type = None
        self.discriminator = None

        if display_name is not None:
            self.display_name = display_name
        if field_name is not None:
            self.field_name = field_name
        if max_length is not None:
            self.max_length = max_length
        if max_value is not None:
            self.max_value = max_value
        if min_length is not None:
            self.min_length = min_length
        if min_value is not None:
            self.min_value = min_value
        if operator is not None:
            self.operator = operator
        if valid_values is not None:
            self.valid_values = valid_values
        if value_pattern is not None:
            self.value_pattern = value_pattern
        if value_type is not None:
            self.value_type = value_type

    @property
    def display_name(self):
        """Gets the display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param display_name: The display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def field_name(self):
        """Gets the field_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The field_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param field_name: The field_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: str
        """
        if field_name is not None and len(field_name) > 255:
            raise ValueError("Invalid value for `field_name`, length must be less than or equal to `255`")  # noqa: E501
        if field_name is not None and len(field_name) < 1:
            raise ValueError("Invalid value for `field_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._field_name = field_name

    @property
    def max_length(self):
        """Gets the max_length of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The max_length of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param max_length: The max_length of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: int
        """
        if max_length is not None and max_length > 65535:  # noqa: E501
            raise ValueError("Invalid value for `max_length`, must be a value less than or equal to `65535`")  # noqa: E501
        if max_length is not None and max_length < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_length = max_length

    @property
    def max_value(self):
        """Gets the max_value of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The max_value of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param max_value: The max_value of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: int
        """
        if max_value is not None and max_value > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `max_value`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if max_value is not None and max_value < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `max_value`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._max_value = max_value

    @property
    def min_length(self):
        """Gets the min_length of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The min_length of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param min_length: The min_length of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: int
        """
        if min_length is not None and min_length > 65535:  # noqa: E501
            raise ValueError("Invalid value for `min_length`, must be a value less than or equal to `65535`")  # noqa: E501
        if min_length is not None and min_length < 0:  # noqa: E501
            raise ValueError("Invalid value for `min_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._min_length = min_length

    @property
    def min_value(self):
        """Gets the min_value of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The min_value of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param min_value: The min_value of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: int
        """
        if min_value is not None and min_value > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `min_value`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if min_value is not None and min_value < -2147483648:  # noqa: E501
            raise ValueError("Invalid value for `min_value`, must be a value greater than or equal to `-2147483648`")  # noqa: E501

        self._min_value = min_value

    @property
    def operator(self):
        """Gets the operator of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The operator of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param operator: The operator of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: str
        """
        if operator is not None and len(operator) > 255:
            raise ValueError("Invalid value for `operator`, length must be less than or equal to `255`")  # noqa: E501
        if operator is not None and len(operator) < 0:
            raise ValueError("Invalid value for `operator`, length must be greater than or equal to `0`")  # noqa: E501

        self._operator = operator

    @property
    def valid_values(self):
        """Gets the valid_values of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The valid_values of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._valid_values

    @valid_values.setter
    def valid_values(self, valid_values):
        """Sets the valid_values of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param valid_values: The valid_values of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: list[str]
        """

        self._valid_values = valid_values

    @property
    def value_pattern(self):
        """Gets the value_pattern of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The value_pattern of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: str
        """
        return self._value_pattern

    @value_pattern.setter
    def value_pattern(self, value_pattern):
        """Sets the value_pattern of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param value_pattern: The value_pattern of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: str
        """
        if value_pattern is not None and len(value_pattern) > 255:
            raise ValueError("Invalid value for `value_pattern`, length must be less than or equal to `255`")  # noqa: E501
        if value_pattern is not None and len(value_pattern) < 0:
            raise ValueError("Invalid value for `value_pattern`, length must be greater than or equal to `0`")  # noqa: E501

        self._value_pattern = value_pattern

    @property
    def value_type(self):
        """Gets the value_type of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501


        :return: The value_type of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.


        :param value_type: The value_type of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem.  # noqa: E501
        :type: str
        """
        if value_type is not None and len(value_type) > 255:
            raise ValueError("Invalid value for `value_type`, length must be less than or equal to `255`")  # noqa: E501
        if value_type is not None and len(value_type) < 0:
            raise ValueError("Invalid value for `value_type`, length must be greater than or equal to `0`")  # noqa: E501

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionPayloadMetadataItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
