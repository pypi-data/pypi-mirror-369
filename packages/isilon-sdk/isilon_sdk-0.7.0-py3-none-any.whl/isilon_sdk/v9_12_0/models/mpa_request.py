# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MpaRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_payload': 'list[MpaRequestActionPayloadItem]',
        'resource_ids': 'list[str]',
        'status': 'str'
    }

    attribute_map = {
        'action_payload': 'action_payload',
        'resource_ids': 'resource_ids',
        'status': 'status'
    }

    def __init__(self, action_payload=None, resource_ids=None, status=None):  # noqa: E501
        """MpaRequest - a model defined in Swagger"""  # noqa: E501

        self._action_payload = None
        self._resource_ids = None
        self._status = None
        self.discriminator = None

        if action_payload is not None:
            self.action_payload = action_payload
        if resource_ids is not None:
            self.resource_ids = resource_ids
        if status is not None:
            self.status = status

    @property
    def action_payload(self):
        """Gets the action_payload of this MpaRequest.  # noqa: E501

        Update set of key/value pairs for MPA request.  # noqa: E501

        :return: The action_payload of this MpaRequest.  # noqa: E501
        :rtype: list[MpaRequestActionPayloadItem]
        """
        return self._action_payload

    @action_payload.setter
    def action_payload(self, action_payload):
        """Sets the action_payload of this MpaRequest.

        Update set of key/value pairs for MPA request.  # noqa: E501

        :param action_payload: The action_payload of this MpaRequest.  # noqa: E501
        :type: list[MpaRequestActionPayloadItem]
        """

        self._action_payload = action_payload

    @property
    def resource_ids(self):
        """Gets the resource_ids of this MpaRequest.  # noqa: E501

        A list of one or more resource IDs to update for a given request.  The specified requests will overwrite any existing resources in the targeted MPA request.  # noqa: E501

        :return: The resource_ids of this MpaRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this MpaRequest.

        A list of one or more resource IDs to update for a given request.  The specified requests will overwrite any existing resources in the targeted MPA request.  # noqa: E501

        :param resource_ids: The resource_ids of this MpaRequest.  # noqa: E501
        :type: list[str]
        """

        self._resource_ids = resource_ids

    @property
    def status(self):
        """Gets the status of this MpaRequest.  # noqa: E501

        New MPA request status.  # noqa: E501

        :return: The status of this MpaRequest.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MpaRequest.

        New MPA request status.  # noqa: E501

        :param status: The status of this MpaRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpaRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpaRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
