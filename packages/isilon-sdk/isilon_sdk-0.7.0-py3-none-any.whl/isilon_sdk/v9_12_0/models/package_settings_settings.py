# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PackageSettingsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_download': 'bool',
        'download_preference': 'str',
        'download_timeout': 'int',
        'enable_subscription': 'bool'
    }

    attribute_map = {
        'auto_download': 'auto_download',
        'download_preference': 'download_preference',
        'download_timeout': 'download_timeout',
        'enable_subscription': 'enable_subscription'
    }

    def __init__(self, auto_download=None, download_preference=None, download_timeout=None, enable_subscription=None):  # noqa: E501
        """PackageSettingsSettings - a model defined in Swagger"""  # noqa: E501

        self._auto_download = None
        self._download_preference = None
        self._download_timeout = None
        self._enable_subscription = None
        self.discriminator = None

        if auto_download is not None:
            self.auto_download = auto_download
        if download_preference is not None:
            self.download_preference = download_preference
        if download_timeout is not None:
            self.download_timeout = download_timeout
        if enable_subscription is not None:
            self.enable_subscription = enable_subscription

    @property
    def auto_download(self):
        """Gets the auto_download of this PackageSettingsSettings.  # noqa: E501

        Indicates whether the package is auto-downloaded.  # noqa: E501

        :return: The auto_download of this PackageSettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._auto_download

    @auto_download.setter
    def auto_download(self, auto_download):
        """Sets the auto_download of this PackageSettingsSettings.

        Indicates whether the package is auto-downloaded.  # noqa: E501

        :param auto_download: The auto_download of this PackageSettingsSettings.  # noqa: E501
        :type: bool
        """

        self._auto_download = auto_download

    @property
    def download_preference(self):
        """Gets the download_preference of this PackageSettingsSettings.  # noqa: E501

        The preferred package version of auto-download.  # noqa: E501

        :return: The download_preference of this PackageSettingsSettings.  # noqa: E501
        :rtype: str
        """
        return self._download_preference

    @download_preference.setter
    def download_preference(self, download_preference):
        """Sets the download_preference of this PackageSettingsSettings.

        The preferred package version of auto-download.  # noqa: E501

        :param download_preference: The download_preference of this PackageSettingsSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["latest", "current_lts", "latest_lts"]  # noqa: E501
        if download_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `download_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(download_preference, allowed_values)
            )

        self._download_preference = download_preference

    @property
    def download_timeout(self):
        """Gets the download_timeout of this PackageSettingsSettings.  # noqa: E501

        The timeout in minutes to download a package.  # noqa: E501

        :return: The download_timeout of this PackageSettingsSettings.  # noqa: E501
        :rtype: int
        """
        return self._download_timeout

    @download_timeout.setter
    def download_timeout(self, download_timeout):
        """Sets the download_timeout of this PackageSettingsSettings.

        The timeout in minutes to download a package.  # noqa: E501

        :param download_timeout: The download_timeout of this PackageSettingsSettings.  # noqa: E501
        :type: int
        """
        if download_timeout is not None and download_timeout > 1440:  # noqa: E501
            raise ValueError("Invalid value for `download_timeout`, must be a value less than or equal to `1440`")  # noqa: E501
        if download_timeout is not None and download_timeout < 1:  # noqa: E501
            raise ValueError("Invalid value for `download_timeout`, must be a value greater than or equal to `1`")  # noqa: E501

        self._download_timeout = download_timeout

    @property
    def enable_subscription(self):
        """Gets the enable_subscription of this PackageSettingsSettings.  # noqa: E501

        Indicates whether the subscription is enabled.  # noqa: E501

        :return: The enable_subscription of this PackageSettingsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_subscription

    @enable_subscription.setter
    def enable_subscription(self, enable_subscription):
        """Sets the enable_subscription of this PackageSettingsSettings.

        Indicates whether the subscription is enabled.  # noqa: E501

        :param enable_subscription: The enable_subscription of this PackageSettingsSettings.  # noqa: E501
        :type: bool
        """

        self._enable_subscription = enable_subscription

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackageSettingsSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageSettingsSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
