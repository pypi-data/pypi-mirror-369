# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'display_name': 'str',
        'id': 'str',
        'max_resources_count': 'int',
        'number_of_approvals_required': 'int',
        'optional_payload_fields': 'list[str]',
        'required_one_payload_field': 'list[str]',
        'required_payload_fields': 'list[str]',
        'required_resource': 'str'
    }

    attribute_map = {
        'description': 'description',
        'display_name': 'display_name',
        'id': 'id',
        'max_resources_count': 'max_resources_count',
        'number_of_approvals_required': 'number_of_approvals_required',
        'optional_payload_fields': 'optional_payload_fields',
        'required_one_payload_field': 'required_one_payload_field',
        'required_payload_fields': 'required_payload_fields',
        'required_resource': 'required_resource'
    }

    def __init__(self, description=None, display_name=None, id=None, max_resources_count=None, number_of_approvals_required=None, optional_payload_fields=None, required_one_payload_field=None, required_payload_fields=None, required_resource=None):  # noqa: E501
        """SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._display_name = None
        self._id = None
        self._max_resources_count = None
        self._number_of_approvals_required = None
        self._optional_payload_fields = None
        self._required_one_payload_field = None
        self._required_payload_fields = None
        self._required_resource = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if max_resources_count is not None:
            self.max_resources_count = max_resources_count
        if number_of_approvals_required is not None:
            self.number_of_approvals_required = number_of_approvals_required
        if optional_payload_fields is not None:
            self.optional_payload_fields = optional_payload_fields
        if required_one_payload_field is not None:
            self.required_one_payload_field = required_one_payload_field
        if required_payload_fields is not None:
            self.required_payload_fields = required_payload_fields
        if required_resource is not None:
            self.required_resource = required_resource

    @property
    def description(self):
        """Gets the description of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501


        :return: The description of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.


        :param description: The description of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501


        :return: The display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.


        :param display_name: The display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501

        Name of privileged action  # noqa: E501

        :return: The id of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.

        Name of privileged action  # noqa: E501

        :param id: The id of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :type: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501
        if id is not None and not re.search('^[a-zA-Z0-9_-]+$', id):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501

        self._id = id

    @property
    def max_resources_count(self):
        """Gets the max_resources_count of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501


        :return: The max_resources_count of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :rtype: int
        """
        return self._max_resources_count

    @max_resources_count.setter
    def max_resources_count(self, max_resources_count):
        """Sets the max_resources_count of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.


        :param max_resources_count: The max_resources_count of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :type: int
        """
        if max_resources_count is not None and max_resources_count > 65535:  # noqa: E501
            raise ValueError("Invalid value for `max_resources_count`, must be a value less than or equal to `65535`")  # noqa: E501
        if max_resources_count is not None and max_resources_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `max_resources_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._max_resources_count = max_resources_count

    @property
    def number_of_approvals_required(self):
        """Gets the number_of_approvals_required of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501


        :return: The number_of_approvals_required of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :rtype: int
        """
        return self._number_of_approvals_required

    @number_of_approvals_required.setter
    def number_of_approvals_required(self, number_of_approvals_required):
        """Sets the number_of_approvals_required of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.


        :param number_of_approvals_required: The number_of_approvals_required of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :type: int
        """
        if number_of_approvals_required is not None and number_of_approvals_required > 65535:  # noqa: E501
            raise ValueError("Invalid value for `number_of_approvals_required`, must be a value less than or equal to `65535`")  # noqa: E501
        if number_of_approvals_required is not None and number_of_approvals_required < 0:  # noqa: E501
            raise ValueError("Invalid value for `number_of_approvals_required`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number_of_approvals_required = number_of_approvals_required

    @property
    def optional_payload_fields(self):
        """Gets the optional_payload_fields of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501


        :return: The optional_payload_fields of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._optional_payload_fields

    @optional_payload_fields.setter
    def optional_payload_fields(self, optional_payload_fields):
        """Sets the optional_payload_fields of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.


        :param optional_payload_fields: The optional_payload_fields of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._optional_payload_fields = optional_payload_fields

    @property
    def required_one_payload_field(self):
        """Gets the required_one_payload_field of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501


        :return: The required_one_payload_field of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_one_payload_field

    @required_one_payload_field.setter
    def required_one_payload_field(self, required_one_payload_field):
        """Sets the required_one_payload_field of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.


        :param required_one_payload_field: The required_one_payload_field of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._required_one_payload_field = required_one_payload_field

    @property
    def required_payload_fields(self):
        """Gets the required_payload_fields of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501


        :return: The required_payload_fields of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_payload_fields

    @required_payload_fields.setter
    def required_payload_fields(self, required_payload_fields):
        """Sets the required_payload_fields of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.


        :param required_payload_fields: The required_payload_fields of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :type: list[str]
        """

        self._required_payload_fields = required_payload_fields

    @property
    def required_resource(self):
        """Gets the required_resource of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501


        :return: The required_resource of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :rtype: str
        """
        return self._required_resource

    @required_resource.setter
    def required_resource(self, required_resource):
        """Sets the required_resource of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.


        :param required_resource: The required_resource of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata.  # noqa: E501
        :type: str
        """
        if required_resource is not None and len(required_resource) > 255:
            raise ValueError("Invalid value for `required_resource`, length must be less than or equal to `255`")  # noqa: E501

        self._required_resource = required_resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemActionActionMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
