# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MpaRequestCreateParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'action_payload': 'list[MpaRequestActionPayloadItem]',
        'request_for': 'str',
        'resource_ids': 'list[str]',
        'resource_type': 'str',
        'service': 'str'
    }

    attribute_map = {
        'action': 'action',
        'action_payload': 'action_payload',
        'request_for': 'request_for',
        'resource_ids': 'resource_ids',
        'resource_type': 'resource_type',
        'service': 'service'
    }

    def __init__(self, action=None, action_payload=None, request_for=None, resource_ids=None, resource_type=None, service=None):  # noqa: E501
        """MpaRequestCreateParams - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._action_payload = None
        self._request_for = None
        self._resource_ids = None
        self._resource_type = None
        self._service = None
        self.discriminator = None

        self.action = action
        if action_payload is not None:
            self.action_payload = action_payload
        if request_for is not None:
            self.request_for = request_for
        if resource_ids is not None:
            self.resource_ids = resource_ids
        if resource_type is not None:
            self.resource_type = resource_type
        self.service = service

    @property
    def action(self):
        """Gets the action of this MpaRequestCreateParams.  # noqa: E501

        Name of privileged action  # noqa: E501

        :return: The action of this MpaRequestCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this MpaRequestCreateParams.

        Name of privileged action  # noqa: E501

        :param action: The action of this MpaRequestCreateParams.  # noqa: E501
        :type: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        if action is not None and len(action) > 255:
            raise ValueError("Invalid value for `action`, length must be less than or equal to `255`")  # noqa: E501
        if action is not None and len(action) < 1:
            raise ValueError("Invalid value for `action`, length must be greater than or equal to `1`")  # noqa: E501
        if action is not None and not re.search('^[a-zA-Z0-9_-]+$', action):  # noqa: E501
            raise ValueError(r"Invalid value for `action`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501

        self._action = action

    @property
    def action_payload(self):
        """Gets the action_payload of this MpaRequestCreateParams.  # noqa: E501

        set of key/value pairs for privileged action payload  # noqa: E501

        :return: The action_payload of this MpaRequestCreateParams.  # noqa: E501
        :rtype: list[MpaRequestActionPayloadItem]
        """
        return self._action_payload

    @action_payload.setter
    def action_payload(self, action_payload):
        """Sets the action_payload of this MpaRequestCreateParams.

        set of key/value pairs for privileged action payload  # noqa: E501

        :param action_payload: The action_payload of this MpaRequestCreateParams.  # noqa: E501
        :type: list[MpaRequestActionPayloadItem]
        """

        self._action_payload = action_payload

    @property
    def request_for(self):
        """Gets the request_for of this MpaRequestCreateParams.  # noqa: E501


        :return: The request_for of this MpaRequestCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._request_for

    @request_for.setter
    def request_for(self, request_for):
        """Sets the request_for of this MpaRequestCreateParams.


        :param request_for: The request_for of this MpaRequestCreateParams.  # noqa: E501
        :type: str
        """
        if request_for is not None and len(request_for) > 255:
            raise ValueError("Invalid value for `request_for`, length must be less than or equal to `255`")  # noqa: E501
        if request_for is not None and len(request_for) < 1:
            raise ValueError("Invalid value for `request_for`, length must be greater than or equal to `1`")  # noqa: E501
        if request_for is not None and not re.search('^[^]\"\/\\[\\:;|=,+*?<>$]+', request_for):  # noqa: E501
            raise ValueError(r"Invalid value for `request_for`, must be a follow pattern or equal to `/^[^]\"\/\\[\\:;|=,+*?<>$]+/`")  # noqa: E501

        self._request_for = request_for

    @property
    def resource_ids(self):
        """Gets the resource_ids of this MpaRequestCreateParams.  # noqa: E501

        List of resources IDs requested for approval; optional.  # noqa: E501

        :return: The resource_ids of this MpaRequestCreateParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this MpaRequestCreateParams.

        List of resources IDs requested for approval; optional.  # noqa: E501

        :param resource_ids: The resource_ids of this MpaRequestCreateParams.  # noqa: E501
        :type: list[str]
        """

        self._resource_ids = resource_ids

    @property
    def resource_type(self):
        """Gets the resource_type of this MpaRequestCreateParams.  # noqa: E501

        Type of resource requested for approval; optional.  # noqa: E501

        :return: The resource_type of this MpaRequestCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MpaRequestCreateParams.

        Type of resource requested for approval; optional.  # noqa: E501

        :param resource_type: The resource_type of this MpaRequestCreateParams.  # noqa: E501
        :type: str
        """
        if resource_type is not None and len(resource_type) > 255:
            raise ValueError("Invalid value for `resource_type`, length must be less than or equal to `255`")  # noqa: E501
        if resource_type is not None and len(resource_type) < 1:
            raise ValueError("Invalid value for `resource_type`, length must be greater than or equal to `1`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def service(self):
        """Gets the service of this MpaRequestCreateParams.  # noqa: E501

        Name of service or component in system that owns the privileged action  # noqa: E501

        :return: The service of this MpaRequestCreateParams.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this MpaRequestCreateParams.

        Name of service or component in system that owns the privileged action  # noqa: E501

        :param service: The service of this MpaRequestCreateParams.  # noqa: E501
        :type: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501
        if service is not None and len(service) > 255:
            raise ValueError("Invalid value for `service`, length must be less than or equal to `255`")  # noqa: E501
        if service is not None and len(service) < 1:
            raise ValueError("Invalid value for `service`, length must be greater than or equal to `1`")  # noqa: E501
        if service is not None and not re.search('^[a-zA-Z0-9_-]+$', service):  # noqa: E501
            raise ValueError(r"Invalid value for `service`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MpaRequestCreateParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MpaRequestCreateParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
