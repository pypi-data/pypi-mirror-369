# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateMpaInitiateRegistrationItemResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'str',
        'algorithm': 'str',
        'digits': 'int',
        'issuer': 'str',
        'period': 'int',
        'secret': 'str',
        'url': 'str'
    }

    attribute_map = {
        'account': 'account',
        'algorithm': 'algorithm',
        'digits': 'digits',
        'issuer': 'issuer',
        'period': 'period',
        'secret': 'secret',
        'url': 'url'
    }

    def __init__(self, account=None, algorithm=None, digits=None, issuer=None, period=None, secret=None, url=None):  # noqa: E501
        """CreateMpaInitiateRegistrationItemResponse - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._algorithm = None
        self._digits = None
        self._issuer = None
        self._period = None
        self._secret = None
        self._url = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if algorithm is not None:
            self.algorithm = algorithm
        if digits is not None:
            self.digits = digits
        if issuer is not None:
            self.issuer = issuer
        if period is not None:
            self.period = period
        if secret is not None:
            self.secret = secret
        if url is not None:
            self.url = url

    @property
    def account(self):
        """Gets the account of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501

        The account name.  # noqa: E501

        :return: The account of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CreateMpaInitiateRegistrationItemResponse.

        The account name.  # noqa: E501

        :param account: The account of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :type: str
        """
        if account is not None and len(account) > 255:
            raise ValueError("Invalid value for `account`, length must be less than or equal to `255`")  # noqa: E501
        if account is not None and len(account) < 1:
            raise ValueError("Invalid value for `account`, length must be greater than or equal to `1`")  # noqa: E501

        self._account = account

    @property
    def algorithm(self):
        """Gets the algorithm of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501

        Hashing algorithm for TOTP.  # noqa: E501

        :return: The algorithm of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this CreateMpaInitiateRegistrationItemResponse.

        Hashing algorithm for TOTP.  # noqa: E501

        :param algorithm: The algorithm of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHA1", "SHA256"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def digits(self):
        """Gets the digits of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501

        Number of digits in the TOTP code.  # noqa: E501

        :return: The digits of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._digits

    @digits.setter
    def digits(self, digits):
        """Sets the digits of this CreateMpaInitiateRegistrationItemResponse.

        Number of digits in the TOTP code.  # noqa: E501

        :param digits: The digits of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :type: int
        """

        self._digits = digits

    @property
    def issuer(self):
        """Gets the issuer of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501

        Issuing authority for TOTP.  # noqa: E501

        :return: The issuer of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CreateMpaInitiateRegistrationItemResponse.

        Issuing authority for TOTP.  # noqa: E501

        :param issuer: The issuer of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :type: str
        """
        if issuer is not None and len(issuer) > 255:
            raise ValueError("Invalid value for `issuer`, length must be less than or equal to `255`")  # noqa: E501
        if issuer is not None and len(issuer) < 1:
            raise ValueError("Invalid value for `issuer`, length must be greater than or equal to `1`")  # noqa: E501

        self._issuer = issuer

    @property
    def period(self):
        """Gets the period of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501

        Validity period of the TOTP in seconds.  # noqa: E501

        :return: The period of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this CreateMpaInitiateRegistrationItemResponse.

        Validity period of the TOTP in seconds.  # noqa: E501

        :param period: The period of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def secret(self):
        """Gets the secret of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501

        TOTP secret.  # noqa: E501

        :return: The secret of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this CreateMpaInitiateRegistrationItemResponse.

        TOTP secret.  # noqa: E501

        :param secret: The secret of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :type: str
        """
        if secret is not None and len(secret) > 32:
            raise ValueError("Invalid value for `secret`, length must be less than or equal to `32`")  # noqa: E501
        if secret is not None and len(secret) < 1:
            raise ValueError("Invalid value for `secret`, length must be greater than or equal to `1`")  # noqa: E501

        self._secret = secret

    @property
    def url(self):
        """Gets the url of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501

        OTPAUTH URL for generating QR Code.  # noqa: E501

        :return: The url of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateMpaInitiateRegistrationItemResponse.

        OTPAUTH URL for generating QR Code.  # noqa: E501

        :param url: The url of this CreateMpaInitiateRegistrationItemResponse.  # noqa: E501
        :type: str
        """
        if url is not None and len(url) > 2048:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2048`")  # noqa: E501
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateMpaInitiateRegistrationItemResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateMpaInitiateRegistrationItemResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
