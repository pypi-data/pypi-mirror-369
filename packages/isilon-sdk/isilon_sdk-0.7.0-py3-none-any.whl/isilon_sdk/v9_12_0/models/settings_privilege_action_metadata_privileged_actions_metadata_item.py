# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actions': 'list[SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemAction]',
        'description': 'str',
        'display_name': 'str',
        'service': 'str'
    }

    attribute_map = {
        'actions': 'actions',
        'description': 'description',
        'display_name': 'display_name',
        'service': 'service'
    }

    def __init__(self, actions=None, description=None, display_name=None, service=None):  # noqa: E501
        """SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem - a model defined in Swagger"""  # noqa: E501

        self._actions = None
        self._description = None
        self._display_name = None
        self._service = None
        self.discriminator = None

        if actions is not None:
            self.actions = actions
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if service is not None:
            self.service = service

    @property
    def actions(self):
        """Gets the actions of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501


        :return: The actions of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501
        :rtype: list[SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.


        :param actions: The actions of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501
        :type: list[SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItemAction]
        """

        self._actions = actions

    @property
    def description(self):
        """Gets the description of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501


        :return: The description of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.


        :param description: The description of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501


        :return: The display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.


        :param display_name: The display_name of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501
        :type: str
        """
        if display_name is not None and len(display_name) > 255:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `255`")  # noqa: E501
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def service(self):
        """Gets the service of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501

        Name of service or component in system that owns the privileged action  # noqa: E501

        :return: The service of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.

        Name of service or component in system that owns the privileged action  # noqa: E501

        :param service: The service of this SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem.  # noqa: E501
        :type: str
        """
        if service is not None and len(service) > 255:
            raise ValueError("Invalid value for `service`, length must be less than or equal to `255`")  # noqa: E501
        if service is not None and len(service) < 1:
            raise ValueError("Invalid value for `service`, length must be greater than or equal to `1`")  # noqa: E501
        if service is not None and not re.search('^[a-zA-Z0-9_-]+$', service):  # noqa: E501
            raise ValueError(r"Invalid value for `service`, must be a follow pattern or equal to `/^[a-zA-Z0-9_-]+$/`")  # noqa: E501

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsPrivilegeActionMetadataPrivilegedActionsMetadataItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
