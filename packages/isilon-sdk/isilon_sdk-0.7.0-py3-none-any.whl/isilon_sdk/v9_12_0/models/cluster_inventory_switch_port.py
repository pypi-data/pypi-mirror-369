# coding: utf-8

"""
    Isilon SDK

    Isilon SDK - Language bindings for the OneFS API  # noqa: E501

    OpenAPI spec version: 23
    Contact: sdk@isilon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClusterInventorySwitchPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_link_speed': 'int',
        'host_name': 'str',
        'host_port_name': 'str',
        'interface_optic_category': 'str',
        'mtu': 'int',
        'optics_type': 'str',
        'switch_port': 'str',
        'type': 'str'
    }

    attribute_map = {
        'actual_link_speed': 'actual_link_speed',
        'host_name': 'host_name',
        'host_port_name': 'host_port_name',
        'interface_optic_category': 'interface_optic_category',
        'mtu': 'mtu',
        'optics_type': 'optics_type',
        'switch_port': 'switch_port',
        'type': 'type'
    }

    def __init__(self, actual_link_speed=None, host_name=None, host_port_name=None, interface_optic_category=None, mtu=None, optics_type=None, switch_port=None, type=None):  # noqa: E501
        """ClusterInventorySwitchPort - a model defined in Swagger"""  # noqa: E501

        self._actual_link_speed = None
        self._host_name = None
        self._host_port_name = None
        self._interface_optic_category = None
        self._mtu = None
        self._optics_type = None
        self._switch_port = None
        self._type = None
        self.discriminator = None

        if actual_link_speed is not None:
            self.actual_link_speed = actual_link_speed
        if host_name is not None:
            self.host_name = host_name
        if host_port_name is not None:
            self.host_port_name = host_port_name
        if interface_optic_category is not None:
            self.interface_optic_category = interface_optic_category
        if mtu is not None:
            self.mtu = mtu
        if optics_type is not None:
            self.optics_type = optics_type
        if switch_port is not None:
            self.switch_port = switch_port
        if type is not None:
            self.type = type

    @property
    def actual_link_speed(self):
        """Gets the actual_link_speed of this ClusterInventorySwitchPort.  # noqa: E501

        The actual link speed  # noqa: E501

        :return: The actual_link_speed of this ClusterInventorySwitchPort.  # noqa: E501
        :rtype: int
        """
        return self._actual_link_speed

    @actual_link_speed.setter
    def actual_link_speed(self, actual_link_speed):
        """Sets the actual_link_speed of this ClusterInventorySwitchPort.

        The actual link speed  # noqa: E501

        :param actual_link_speed: The actual_link_speed of this ClusterInventorySwitchPort.  # noqa: E501
        :type: int
        """
        if actual_link_speed is not None and actual_link_speed > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `actual_link_speed`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if actual_link_speed is not None and actual_link_speed < -1:  # noqa: E501
            raise ValueError("Invalid value for `actual_link_speed`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._actual_link_speed = actual_link_speed

    @property
    def host_name(self):
        """Gets the host_name of this ClusterInventorySwitchPort.  # noqa: E501

        The name of the host  # noqa: E501

        :return: The host_name of this ClusterInventorySwitchPort.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this ClusterInventorySwitchPort.

        The name of the host  # noqa: E501

        :param host_name: The host_name of this ClusterInventorySwitchPort.  # noqa: E501
        :type: str
        """
        if host_name is not None and len(host_name) > 255:
            raise ValueError("Invalid value for `host_name`, length must be less than or equal to `255`")  # noqa: E501
        if host_name is not None and len(host_name) < 0:
            raise ValueError("Invalid value for `host_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._host_name = host_name

    @property
    def host_port_name(self):
        """Gets the host_port_name of this ClusterInventorySwitchPort.  # noqa: E501

        Name of host interface connected to switch port if any.  # noqa: E501

        :return: The host_port_name of this ClusterInventorySwitchPort.  # noqa: E501
        :rtype: str
        """
        return self._host_port_name

    @host_port_name.setter
    def host_port_name(self, host_port_name):
        """Sets the host_port_name of this ClusterInventorySwitchPort.

        Name of host interface connected to switch port if any.  # noqa: E501

        :param host_port_name: The host_port_name of this ClusterInventorySwitchPort.  # noqa: E501
        :type: str
        """
        if host_port_name is not None and len(host_port_name) > 255:
            raise ValueError("Invalid value for `host_port_name`, length must be less than or equal to `255`")  # noqa: E501
        if host_port_name is not None and len(host_port_name) < 0:
            raise ValueError("Invalid value for `host_port_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._host_port_name = host_port_name

    @property
    def interface_optic_category(self):
        """Gets the interface_optic_category of this ClusterInventorySwitchPort.  # noqa: E501

        Category of optics.  # noqa: E501

        :return: The interface_optic_category of this ClusterInventorySwitchPort.  # noqa: E501
        :rtype: str
        """
        return self._interface_optic_category

    @interface_optic_category.setter
    def interface_optic_category(self, interface_optic_category):
        """Sets the interface_optic_category of this ClusterInventorySwitchPort.

        Category of optics.  # noqa: E501

        :param interface_optic_category: The interface_optic_category of this ClusterInventorySwitchPort.  # noqa: E501
        :type: str
        """
        if interface_optic_category is not None and len(interface_optic_category) > 255:
            raise ValueError("Invalid value for `interface_optic_category`, length must be less than or equal to `255`")  # noqa: E501
        if interface_optic_category is not None and len(interface_optic_category) < 0:
            raise ValueError("Invalid value for `interface_optic_category`, length must be greater than or equal to `0`")  # noqa: E501

        self._interface_optic_category = interface_optic_category

    @property
    def mtu(self):
        """Gets the mtu of this ClusterInventorySwitchPort.  # noqa: E501

        Maximum Transfer Unit (MTU)  # noqa: E501

        :return: The mtu of this ClusterInventorySwitchPort.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this ClusterInventorySwitchPort.

        Maximum Transfer Unit (MTU)  # noqa: E501

        :param mtu: The mtu of this ClusterInventorySwitchPort.  # noqa: E501
        :type: int
        """
        if mtu is not None and mtu > 9223372036854775807:  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value less than or equal to `9223372036854775807`")  # noqa: E501
        if mtu is not None and mtu < -1:  # noqa: E501
            raise ValueError("Invalid value for `mtu`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._mtu = mtu

    @property
    def optics_type(self):
        """Gets the optics_type of this ClusterInventorySwitchPort.  # noqa: E501

        Type of optics.  # noqa: E501

        :return: The optics_type of this ClusterInventorySwitchPort.  # noqa: E501
        :rtype: str
        """
        return self._optics_type

    @optics_type.setter
    def optics_type(self, optics_type):
        """Sets the optics_type of this ClusterInventorySwitchPort.

        Type of optics.  # noqa: E501

        :param optics_type: The optics_type of this ClusterInventorySwitchPort.  # noqa: E501
        :type: str
        """
        if optics_type is not None and len(optics_type) > 255:
            raise ValueError("Invalid value for `optics_type`, length must be less than or equal to `255`")  # noqa: E501
        if optics_type is not None and len(optics_type) < 0:
            raise ValueError("Invalid value for `optics_type`, length must be greater than or equal to `0`")  # noqa: E501

        self._optics_type = optics_type

    @property
    def switch_port(self):
        """Gets the switch_port of this ClusterInventorySwitchPort.  # noqa: E501

        The name/id of the switch port.  # noqa: E501

        :return: The switch_port of this ClusterInventorySwitchPort.  # noqa: E501
        :rtype: str
        """
        return self._switch_port

    @switch_port.setter
    def switch_port(self, switch_port):
        """Sets the switch_port of this ClusterInventorySwitchPort.

        The name/id of the switch port.  # noqa: E501

        :param switch_port: The switch_port of this ClusterInventorySwitchPort.  # noqa: E501
        :type: str
        """
        if switch_port is not None and len(switch_port) > 255:
            raise ValueError("Invalid value for `switch_port`, length must be less than or equal to `255`")  # noqa: E501
        if switch_port is not None and len(switch_port) < 0:
            raise ValueError("Invalid value for `switch_port`, length must be greater than or equal to `0`")  # noqa: E501

        self._switch_port = switch_port

    @property
    def type(self):
        """Gets the type of this ClusterInventorySwitchPort.  # noqa: E501

        Port type.  # noqa: E501

        :return: The type of this ClusterInventorySwitchPort.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClusterInventorySwitchPort.

        Port type.  # noqa: E501

        :param type: The type of this ClusterInventorySwitchPort.  # noqa: E501
        :type: str
        """
        if type is not None and len(type) > 255:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `255`")  # noqa: E501
        if type is not None and len(type) < 0:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `0`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInventorySwitchPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInventorySwitchPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
